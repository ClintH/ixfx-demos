{"version":3,"sources":["../src/dom/Forms.ts"],"sourcesContent":["import { resolveEl } from './Util.js';\n\n/**\n * Adds tab and shift+tab to TEXTAREA\n * @param el\n */\n//eslint-disable-next-line functional/prefer-immutable-types\nexport const textAreaKeyboard = (el: HTMLTextAreaElement) => {\n  el.addEventListener(`keydown`, (event) => {\n    const elementValue = el.value;\n    const start = el.selectionStart;\n    const end = el.selectionEnd;\n\n    if (event.key === `Tab` && event.shiftKey) {\n      if (el.value.substring(start - 2, start) === `  `) {\n        //eslint-disable-next-line functional/immutable-data\n        el.value = elementValue.slice(0, Math.max(0, start - 2)) + elementValue.slice(Math.max(0, end));\n      }\n      //eslint-disable-next-line functional/immutable-data\n      el.selectionStart = el.selectionEnd = start - 2;\n      event.preventDefault();\n      return false;\n    } else if (event.key === `Tab`) {\n      //eslint-disable-next-line functional/immutable-data\n      el.value = elementValue.slice(0, Math.max(0, start)) + `  ` + elementValue.slice(Math.max(0, end));\n      //eslint-disable-next-line functional/immutable-data\n      el.selectionStart = el.selectionEnd = start + 2;\n      event.preventDefault();\n      return false;\n    }\n  });\n};\n\n/**\n * Quick access to <input type=\"checkbox\"> value.\n * Provide a checkbox by string id or object reference. If a callback is\n * supplied, it will be called when the checkbox changes value.\n *\n * ```\n * const opt = checkbox(`#chkMate`);\n * opt.checked; // Gets/sets\n *\n * const opt = checkbox(document.getElementById(`#chkMate`), newVal => {\n *  if (newVal) ...\n * });\n * ```\n * @param {(string | HTMLInputElement)} domIdOrEl\n * @param {(currentVal:boolean) => void} [onChanged]\n * @returns\n */\nexport const checkbox = (\n  //eslint-disable-next-line functional/prefer-immutable-types\n  domIdOrEl: string | HTMLInputElement,\n  onChanged?: (currentValue: boolean) => void\n) => {\n  const el = resolveEl<HTMLInputElement>(domIdOrEl);\n\n  if (onChanged) {\n    el.addEventListener(`change`, () => {\n      onChanged(el.checked);\n    });\n  }\n  return {\n    get checked(): boolean {\n      return el.checked;\n    },\n    set checked(value: boolean) {\n      // eslint-disable-next-line functional/immutable-data\n      el.checked = value;\n    },\n  };\n};\n\n/**\n * Numeric INPUT\n *\n * ```\n * const el = numeric(`#num`, (currentValue) => {\n *  // Called when input changes\n * })\n * ```\n *\n * Get/set value\n * ```\n * el.value = 10;\n * ```\n * @param domIdOrEl\n * @param onChanged\n * @param live If true, event handler fires based on `input` event, rather than `change`\n * @returns\n */\nexport const numeric = (\n  //eslint-disable-next-line functional/prefer-immutable-types\n  domIdOrEl: string | HTMLInputElement,\n  onChanged?: (currentValue: number) => void,\n  live?: boolean\n) => {\n  const el = resolveEl<HTMLInputElement>(domIdOrEl);\n  const eventName = live ? `change` : `input`;\n  if (onChanged) {\n    el.addEventListener(eventName, () => {\n      onChanged(Number.parseInt(el.value));\n    });\n  }\n  return {\n    get value(): number {\n      return Number.parseInt(el.value);\n    },\n    set value(value: number) {\n      // eslint-disable-next-line functional/immutable-data\n      el.value = value.toString();\n    },\n  };\n};\n\n/**\n * SELECT options\n */\nexport type SelectOpts = {\n  /**\n   * Placeholder item\n   */\n  readonly placeholderOpt?: string;\n  /**\n   * If true, a placeholder option 'Choose' is added to the list\n   */\n  readonly shouldAddChoosePlaceholder?: boolean;\n  /**\n   * Item to choose after a selection is made\n   */\n  readonly autoSelectAfterChoice?: number;\n};\n\n/**\n * Button\n *\n * ```\n * const b = button(`#myButton`, () => {\n *  console.log(`Button clicked`);\n * });\n * ```\n *\n * ```\n * b.click(); // Call the click handler\n * b.disabled = true / false;\n * ```\n * @param domQueryOrEl Query string or element instance\n * @param onClick Callback when button is clicked\n * @returns\n */\nexport const button = (\n  //eslint-disable-next-line functional/prefer-immutable-types\n  domQueryOrEl: string | HTMLButtonElement,\n  onClick?: () => void\n) => {\n  const el = resolveEl(domQueryOrEl);\n\n  if (onClick) {\n    el.addEventListener(`click`, (_event) => {\n      onClick();\n    });\n  }\n  return {\n    click() {\n      if (onClick) onClick();\n    },\n    set disabled(value: boolean) {\n      // eslint-disable-next-line functional/immutable-data\n      el.disabled = value;\n    },\n  };\n};\n\n/**\n * SELECT handler\n */\nexport type SelectHandler = {\n  /**\n   * Gets/Sets disabled\n   */\n  set disabled(value: boolean);\n\n  get disabled(): boolean;\n  /**\n   * Gets value\n   */\n  get value(): string;\n  /**\n   * Sets selected index\n   */\n  get index(): number;\n  /**\n   * _True_ if currently selected item is the placeholder\n   */\n  get isSelectedPlaceholder(): boolean;\n  /**\n   * Set options\n   * @param opts Options\n   * @param preSelect Item to preselect\n   */\n  setOpts(opts: ReadonlyArray<string>, preSelect?: string): void;\n  /**\n   * Select item by index\n   * @param index Index\n   * @param trigger If true, triggers change event\n   */\n  select(index?: number, trigger?: boolean): void;\n}\n\n/**\n * SELECT element.\n *\n * Handle changes in value:\n * ```\n * const mySelect = select(`#mySelect`, (newValue) => {\n *  console.log(`Value is now ${newValue}`);\n * });\n * ```\n *\n * Enable/disable:\n * ```\n * mySelect.disabled = true / false;\n * ```\n *\n * Get currently selected index or value:\n * ```\n * mySelect.value / mySelect.index\n * ```\n *\n * Is the currently selected value a placeholder?\n * ```\n * mySelect.isSelectedPlaceholder\n * ```\n *\n * Set list of options\n * ```\n * // Adds options, preselecting `opt2`.\n * mySelect.setOpts([`opt1`, `opt2 ...], `opt2`);\n * ```\n *\n * Select an element\n * ```\n * mySelect.select(1); // Select second item\n * mySelect.select(1, true); // If true is added, change handler fires as well\n * ```\n * @param domQueryOrEl Query (eg `#id`) or element\n * @param onChanged Callback when a selection is made\n * @param opts Options\n * @return\n */\nexport const select = (\n  //eslint-disable-next-line functional/prefer-immutable-types\n  domQueryOrEl: string | HTMLSelectElement,\n  onChanged?: (currentValue: string) => void,\n  opts: SelectOpts = {}\n): SelectHandler => {\n  const el = resolveEl(domQueryOrEl);\n  const {\n    placeholderOpt,\n    shouldAddChoosePlaceholder = false,\n    autoSelectAfterChoice = -1,\n  } = opts;\n\n  const change = () => {\n    if (onChanged !== undefined) onChanged(el.value);\n    // eslint-disable-next-line functional/immutable-data\n    if (autoSelectAfterChoice >= 0) el.selectedIndex = autoSelectAfterChoice;\n  };\n\n  if (onChanged) {\n    el.addEventListener(`change`, (_event) => {\n      change();\n    });\n  }\n  return {\n    set disabled(value: boolean) {\n      // eslint-disable-next-line functional/immutable-data\n      el.disabled = value;\n    },\n    get value(): string {\n      return el.value;\n    },\n    get index(): number {\n      return el.selectedIndex;\n    },\n    get isSelectedPlaceholder(): boolean {\n      return (\n        (shouldAddChoosePlaceholder || opts.placeholderOpt !== undefined) &&\n        el.selectedIndex === 0\n      );\n    },\n    //eslint-disable-next-line functional/prefer-immutable-types\n    setOpts(opts: Array<string>, preSelect?: string): void {\n      // eslint-disable-next-line functional/immutable-data\n      el.options.length = 0;\n\n      if (shouldAddChoosePlaceholder) opts = [ `-- Choose --`, ...opts ];\n      else if (placeholderOpt !== undefined) opts = [ placeholderOpt, ...opts ];\n      // eslint-disable-next-line functional/no-let\n      let toSelect = 0;\n\n      for (const [ index, o ] of opts.entries()) {\n        const optEl = document.createElement(`option`);\n        // eslint-disable-next-line functional/immutable-data\n        optEl.value = o;\n        // eslint-disable-next-line functional/immutable-data\n        optEl.innerHTML = o;\n        if (preSelect !== undefined && o === preSelect) toSelect = index;\n        el.options.add(optEl);\n      }\n      // eslint-disable-next-line functional/immutable-data\n      el.selectedIndex = toSelect;\n    },\n    select(index = 0, trigger = false): void {\n      // eslint-disable-next-line functional/immutable-data\n      el.selectedIndex = index;\n      if (trigger && onChanged) {\n        change();\n      }\n    },\n  };\n};\n"],"mappings":"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","names":["opts"]}