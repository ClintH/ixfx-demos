{"version":3,"sources":["../src/Events.ts","../src/Text.ts","../src/random/Types.ts","../src/random/String.ts","../src/generators/index.ts","../src/modulation/PingPong.ts","../src/generators/IterableAsync.ts","../src/flow/IntervalType.ts","../src/flow/Sleep.ts","../src/generators/IterableSync.ts","../src/Util.ts","../src/iterable/SliceSync.ts","../src/generators/chain/index.ts","../src/flow/index.ts","../src/flow/Elapsed.ts","../src/numbers/Round.ts","../src/flow/Timer.ts","../src/data/Clamp.ts","../src/flow/DispatchList.ts","../src/flow/StateMachine.ts","../src/collections/arrays/index.ts","../src/collections/Map/MapFns.ts","../src/random/WeightedIndex.ts","../src/collections/GuardArray.ts","../src/collections/GuardIndex.ts","../src/collections/arrays/ValuesEqual.ts","../src/collections/FilterBetween.ts","../src/collections/MinMaxAvg.ts","../src/collections/arrays/NumericArrays.ts","../src/collections/ArrayCycle.ts","../src/collections/arrays/Zip.ts","../src/collections/arrays/AverageWeighted.ts","../src/collections/arrays/SortByNumericProperty.ts","../src/collections/Iterables.ts","../src/flow/StateMachineWithEvents.ts","../src/flow/Execute.ts","../src/flow/StateMachineDriver.ts","../src/flow/Interval.ts","../src/flow/Timeout.ts","../src/flow/UpdateOutdated.ts","../src/flow/Continuously.ts","../src/flow/Debounce.ts","../src/flow/Throttle.ts","../src/flow/WaitFor.ts","../src/flow/Delay.ts","../src/flow/Every.ts","../src/flow/RunOnce.ts","../src/flow/Retry.ts","../src/collections/queue/QueueFns.ts","../src/collections/queue/QueueMutable.ts","../src/flow/TaskQueue.ts","../src/collections/index.ts","../src/collections/CircularArray.ts","../src/collections/tree/index.ts","../src/collections/tree/TraverseObject.ts","../src/collections/tree/TreeMutable.ts","../src/collections/stack/StackFns.ts","../src/collections/stack/StackMutable.ts","../src/collections/tree/Compare.ts","../src/KeyValue.ts","../src/collections/tree/Pathed.ts","../src/collections/tree/TraversableTree.ts","../src/collections/stack/index.ts","../src/collections/stack/StackImmutable.ts","../src/collections/set/index.ts","../src/collections/set/SetMutable.ts","../src/collections/set/SetImmutable.ts","../src/collections/queue/index.ts","../src/collections/queue/QueueImmutable.ts","../src/collections/queue/PriorityMutable.ts","../src/collections/Map/index.ts","../src/collections/Map/ExpiringMap.ts","../src/collections/Map/MapImmutableFns.ts","../src/collections/Map/Map.ts","../src/collections/Map/MapMutable.ts","../src/collections/Map/MapOfMultiImpl.ts","../src/collections/Map/MapOfSetMutable.ts","../src/collections/Map/MapOfCircularMutable.ts","../src/collections/Map/NumberMap.ts","../src/collections/Map/MapOfArrayMutable.ts","../src/generators/Iterable.ts","../src/generators/chain/Util.ts","../src/generators/chain/Links.ts","../src/generators/chain/Dom.ts","../src/random/index.ts","../src/random/FloatSource.ts","../src/visual/Colour.ts","../node_modules/d3-color/src/define.js","../node_modules/d3-color/src/color.js","../node_modules/d3-color/src/math.js","../node_modules/d3-color/src/lab.js","../node_modules/d3-color/src/cubehelix.js","../node_modules/d3-interpolate/src/basis.js","../node_modules/d3-interpolate/src/basisClosed.js","../node_modules/d3-interpolate/src/constant.js","../node_modules/d3-interpolate/src/color.js","../node_modules/d3-interpolate/src/rgb.js","../node_modules/d3-interpolate/src/numberArray.js","../node_modules/d3-interpolate/src/array.js","../node_modules/d3-interpolate/src/date.js","../node_modules/d3-interpolate/src/number.js","../node_modules/d3-interpolate/src/object.js","../node_modules/d3-interpolate/src/string.js","../node_modules/d3-interpolate/src/value.js","../node_modules/d3-interpolate/src/hsl.js","../node_modules/d3-interpolate/src/lab.js","../node_modules/d3-interpolate/src/hcl.js","../node_modules/d3-interpolate/src/cubehelix.js","../node_modules/d3-interpolate/src/piecewise.js","../src/modulation/Easing.ts","../src/data/Wrap.ts","../src/data/Interpolate.ts","../src/random/Weighted.ts","../src/random/WeightedInteger.ts","../src/IsEqual.ts","../src/collections/map/MapMultiFns.ts","../src/collections/map/MapOfSimpleBase.ts","../src/collections/map/MapOfSimpleMutable.ts"],"sourcesContent":["\nimport type { ISimpleEventEmitter, Listener } from './ISimpleEventEmitter.js';\nimport { ofSimpleMutable } from './collections/map/MapOfSimpleMutable.js';\n\nexport class SimpleEventEmitter<Events> implements ISimpleEventEmitter<Events> {\n  readonly #listeners = ofSimpleMutable<Listener<Events>>();\n\n  /**\n   * Fire event\n   * @private\n   * @param type Type of event\n   * @param args Arguments for event\n   * @returns\n   */\n  protected fireEvent<K extends keyof Events>(type: K, args: Events[ K ]) {\n    const listeners = this.#listeners.get(type as string);\n    //console.log(`Firing ${type as string}`);\n    for (const l of listeners) {\n      l(args, this);\n    }\n  }\n\n  /**\n   * Adds event listener\n   *\n   * @template K\n   * @param {K} type\n   * @param {Listener<Events>} listener\n   * @memberof SimpleEventEmitter\n   */\n  addEventListener<K extends keyof Events>(\n    type: K,\n    listener: (event: Events[ K ], sender: SimpleEventEmitter<Events>) => void\n  ): void {\n    // (this: any, ev: Events[K]) => any): void {\n    this.#listeners.addKeyedValues(\n      type as string,\n      listener as Listener<Events>\n    );\n  }\n\n  /**\n   * Remove event listener\n   *\n   * @param {Listener<Events>} listener\n   * @memberof SimpleEventEmitter\n   */\n  removeEventListener<K extends keyof Events>(\n    type: K,\n    listener: (event: Events[ K ], sender: SimpleEventEmitter<Events>) => void\n  ) {\n    // listener: Listener<Events>): void {\n    this.#listeners.deleteKeyValue(\n      type as string,\n      listener as Listener<Events>\n    );\n  }\n\n  /**\n   * Clear all event listeners\n   * @private\n   * @memberof SimpleEventEmitter\n   */\n  clearEventListeners() {\n    this.#listeners.clear();\n  }\n}\n\n// type TestEventMap = {\n//   readonly change: TestEvent\n//   readonly other: TestEvent2;\n// }\n\n// interface TestEvent2 {\n//   readonly something: string;\n// }\n// interface TestEvent {\n//   readonly blah: boolean;\n// }\n\n// class TestEmitter extends SimpleEventEmitter<TestEventMap> {\n//   constructor() {\n//     super();\n//     this.addEventListener(`change`, (e) => {\n//       e.blah;\n//     });\n//   }\n// }\n\n/*\nexport class Event {\n  public target: any;\n  public type: string;\n  constructor(type: string, target: any) {\n    this.target = target;\n    this.type = type;\n  }\n}\n\nexport class ErrorEvent extends Event {\n  public message: string;\n  public error: Error;\n  constructor(error: Error, target: any) {\n    super('error', target);\n    this.message = error.message;\n    this.error = error;\n  }\n}\n\nexport class CloseEvent extends Event {\n  public code: number;\n  public reason: string;\n  public wasClean = true;\n  constructor(code = 1000, reason = '', target: any) {\n    super('close', target);\n    this.code = code;\n    this.reason = reason;\n  }\n}\nexport interface WebSocketEventMap {\n  close: CloseEvent;\n  error: ErrorEvent;\n  message: MessageEvent;\n  open: Event;\n}\n\nexport interface WebSocketEventListenerMap {\n  close: (event: CloseEvent) => void | {handleEvent: (event: CloseEvent) => void};\n  error: (event: ErrorEvent) => void | {handleEvent: (event: ErrorEvent) => void};\n  message: (event: MessageEvent) => void | {handleEvent: (event: MessageEvent) => void};\n  open: (event: Event) => void | {handleEvent: (event: Event) => void};\n}\n*/\n\nexport { type ISimpleEventEmitter, type Listener } from './ISimpleEventEmitter.js';","import { integerTest, throwFromResult } from './Guards.js';\nexport { string as random } from './random/String.js';\nexport { stringSegmentsFromEnd as segmentsFromEnd } from './generators/index.js'\n\n/**\n * Given a long string, abbreviates it with ...\n * ```js\n * abbreviate(`This is something`, 7); // `This is...`\n * ```\n * \n * If `source` is under `maxLength` the original is returned.\n * @param source \n * @param maxLength Maximum length. Defaults to 20\n * @returns \n */\nexport const abbreviate = (source: string, maxLength = 15) => {\n  // ✔️ Unit tested\n  throwFromResult(integerTest(maxLength, `aboveZero`, `maxLength`));\n  if (typeof source !== `string`) throw new Error(`Parameter 'source' is not a string`);\n\n  if (source.length > maxLength && source.length > 3) {\n    if (maxLength > 15) {\n      const chunk = Math.round((maxLength - 2) / 2);\n      return source.slice(0, chunk) + `...` + source.slice(-chunk);\n    }\n    return source.slice(0, maxLength) + `...`;\n  }\n  return source;\n}\n\n/**\n * Uses JSON.toString() on `source`, but abbreviates result.\n * @param source Object to stringify\n * @param maxLength Default 20\n * @returns \n */\nexport const toStringAbbreviate = (source: any, maxLength = 20) => {\n  if (source === undefined) return `(undefined)`;\n  if (source === null) return `(null)`;\n  return abbreviate(JSON.stringify(source), maxLength);\n}\n\n/**\n * Returns source text that is between `start` and `end` match strings. Returns _undefined_ if start/end is not found.\n *\n * ```js\n * // Yields ` orange `;\n * between(`apple orange melon`, `apple`, `melon`);\n * ```\n * @param source Source text\n * @param start Start match\n * @param end If undefined, the `start` string will be looked for\n * @param lastEndMatch If true, looks for the last match of `end` (default). If false, looks for the first match.\n * @returns\n */\nexport const between = (\n  source: string,\n  start: string,\n  end?: string,\n  lastEndMatch = true\n): string | undefined => {\n  // ✔ Unit tested\n\n  const startPos = source.indexOf(start);\n  if (startPos < 0) return;\n\n  if (end === undefined) end = start;\n\n  const endPos = lastEndMatch\n    ? source.lastIndexOf(end)\n    : source.indexOf(end, startPos + 1);\n  if (endPos < 0) return;\n\n  return source.slice(startPos + 1, endPos);\n};\n\n/**\n * Like {@link between}, but also returns the source string without the start/end match and what's between.\n * ```js\n * const [src,between] = betweenChomp('hello [there] friend', '[', ']');\n * // src: 'hello  friend'\n * // between: 'there'\n * ```\n * @param source\n * @param start\n * @param end\n * @param lastEndMatch\n * @returns\n */\nexport const betweenChomp = (\n  source: string,\n  start: string,\n  end?: string,\n  lastEndMatch = true\n): [ source: string, between: string | undefined ] => {\n  // ✔ Unit tested\n  if (typeof source !== `string`) throw new Error(`Parameter 'source' is not a string`);\n  if (typeof start !== `string`) throw new Error(`Parameter 'start' is not a string`);\n  if (end !== undefined && typeof end !== `string`) throw new Error(`Parameter 'end' is not a string`);\n  const startPos = source.indexOf(start);\n  if (startPos < 0) return [ source, undefined ];\n\n  if (end === undefined) end = start;\n\n  const endPos = lastEndMatch\n    ? source.lastIndexOf(end)\n    : source.indexOf(end, startPos + 1);\n  if (endPos < 0) return [ source, undefined ];\n\n  const between = source.slice(startPos + 1, endPos);\n  const sourceResult = source.slice(0, startPos) + source.slice(endPos + 1);\n  return [ sourceResult, between ];\n};\n/**\n * Returns first position of the given character code, or -1 if not found.\n * @param source Source string\n * @param code Code to seek\n * @param start Start index, 0 by default\n * @param end End index (inclusive), source.length-1 by default\n * @returns Found position, or -1 if not found\n */\nexport const indexOfCharCode = (\n  source: string,\n  code: number,\n  start = 0,\n  end = source.length - 1\n): number => {\n  //eslint-disable-next-line functional/no-let\n  for (let index = start; index <= end; index++) {\n    if (source.codePointAt(index) === code) return index;\n  }\n  return -1;\n};\n\n/**\n * Returns `source` with a given number of characters removed from start position.\n *\n * ```js\n * // Remove three characters starting at position 1\n * omitChars(`hello there`, 1, 3); // ie. removes 'ell'\n * // Yields: `ho there`\n * ```\n * @param source\n * @param removeStart Start point to remove\n * @param removeLength Number of characters to remove\n * @returns\n */\nexport const omitChars = (\n  source: string,\n  removeStart: number,\n  removeLength: number\n) =>\n  source.slice(0, removeStart) +\n  source.slice(removeStart + removeLength);\n\n/**\n * Splits a string into `length`-size chunks.\n *\n * If `length` is greater than the length of `source`, a single element array is returned with source.\n * The final array element may be smaller if we ran out of characters.\n *\n * ```js\n * splitByLength(`hello there`, 2);\n * // Yields:\n * // [`he`, `ll`, `o `, `th`, `er`, `e`]\n * ```\n * @param source Source string\n * @param length Length of each chunk\n * @returns\n */\nexport const splitByLength = (\n  source: string | null,\n  length: number\n): ReadonlyArray<string> => {\n  throwFromResult(integerTest(length, `aboveZero`, `length`));\n  if (source === null) throw new Error(`source parameter null`);\n  if (typeof source !== `string`) {\n    throw new TypeError(`source parameter not a string`);\n  }\n\n  // ✔ Unit tested\n  const chunks = Math.ceil(source.length / length);\n  const returnValue: Array<string> = [];\n  //eslint-disable-next-line functional/no-let\n  let start = 0;\n\n  //eslint-disable-next-line functional/no-let\n  for (let c = 0; c < chunks; c++) {\n    //eslint-disable-next-line functional/immutable-data\n    returnValue.push(source.slice(start, start + length));\n    start += length;\n  }\n  return returnValue;\n};\n\nexport type UntilMatchOptions = MatchOptions & {\n  ifNoMatch: `throw` | `original` | `fallback`,\n  fallback?: string\n}\n\n/**\n * Returns the `source` string up until (and excluding) `match`. \n * \n * By default, if match is not found, all of `source` is returned.\n *\n * ```js\n * // Yields `apple `\n * untilMarch(`apple orange melon`, `orange`);\n * ```\n * \n * If match is not found, fallback can be returned instead:\n * ```js\n * // Yields 'lemon'\n * untilMatch(`apple orange mellon`, `kiwi`, { fallback: `lemon` });\n * ```\n * \n * Or an exception thrown\n * ```js\n * // Throws\n * untilMatch(`apple orange mellon`, `kiwi`, { ifNoMatch: `throw` });\n * ```\n * @param source\n * @param match\n * @param startPos If provided, gives the starting offset. Default 0\n */\nexport const untilMatch = (\n  source: string,\n  match: string,\n  options: Partial<UntilMatchOptions> = {}\n): string => {\n  //  ✔️ Unit tested\n  let fallback = options.fallback;\n  const ifNoMatch = options.ifNoMatch ?? (fallback ? `fallback` : `original`);\n  if (ifNoMatch === `original`) fallback = source;\n  if (ifNoMatch === `fallback` && fallback === undefined) throw new Error(`Fallback must be provided`);\n  const startPos = options.startPos ?? undefined;\n  const fromEnd = options.fromEnd ?? false;\n  const m = fromEnd\n    ? source.lastIndexOf(match, startPos)\n    : source.indexOf(match, startPos);\n\n  if (m < 0) {\n    if (ifNoMatch === `throw`) throw new Error(`Match string not found in source`);\n    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n    return fallback!;\n  }\n  return source.slice(startPos ?? 0, m);\n};\n\n\n\nexport type MatchOptions = {\n  readonly startPos?: number;\n  readonly fromEnd?: boolean;\n}\n/**\n * Returns all the text in `source` that follows `match`. If not found, `source` is returned.\n * ```js\n * afterMatch(`Hello. There`, `.`); // ' There'\n * afterMatch(`Hello, there', `,`); // 'Hello, there'\n * ```\n * \n * If `source` is _undefined_, an error is thrown.\n * @param source\n * @param match\n * @param startPos\n * @returns\n */\nexport const afterMatch = (\n  source: string,\n  match: string,\n  options: MatchOptions = {}\n): string => {\n  if (source === undefined) throw new Error(`source is undefined`);\n\n  //  ✔️ Unit tested\n  const startPos = options.startPos ?? undefined;\n  const fromEnd = options.fromEnd ?? false;\n\n  const m = fromEnd\n    ? source.lastIndexOf(match, startPos)\n    : source.indexOf(match, startPos);\n\n  if (m < 0) return source;\n  return source.slice(Math.max(0, m + match.length));\n};\n\n/**\n * 'Unwraps' a string, removing one or more 'wrapper' strings that it starts and ends with.\n * Only removes when a matching end is found.\n * ```js\n * unwrap(\"'hello'\", \"'\");        // hello\n * // No mataching end 'a', so nothing happens\n * unwrap(\"apple\", \"a\");          // apple\n * unwrap(\"wow\", \"w\");            // o\n * unwrap(`\"'blah'\"`, '\"', \"'\");  // blah\n * ```\n * @param source\n * @param wrappers\n * @returns\n */\nexport const unwrap = (\n  source: string,\n  ...wrappers: ReadonlyArray<string>\n): string => {\n  //eslint-disable-next-line functional/no-let\n  let matched = false;\n  do {\n    matched = false;\n    for (const w of wrappers) {\n      if (source.startsWith(w) && source.endsWith(w)) {\n        source = source.slice(w.length, source.length - w.length * 2 + 1);\n        matched = true;\n      }\n    }\n  } while (matched);\n\n  return source;\n};\n\n/**\n * A range\n */\nexport type Range = {\n  /**\n   * Text of range\n   */\n  readonly text: string;\n  /**\n   * Start position, with respect to source text\n   */\n  readonly start: number;\n  /**\n   * End position, with respect to source text\n   */\n  readonly end: number;\n  /**\n   * Index of range. First range is 0\n   */\n  readonly index: number;\n}\n\nexport type LineSpan = {\n  readonly start: number;\n  readonly end: number;\n  readonly length: number;\n}\n\n/**\n * Calculates the span, defined in {@link Range} indexes, that includes `start` through to `end` character positions.\n *\n * After using {@link splitRanges} to split text, `lineSpan` is used to associate some text coordinates with ranges.\n *\n * @param ranges Ranges\n * @param start Start character position, in source text reference\n * @param end End character position, in source text reference\n * @returns Span\n */\nexport const lineSpan = (\n  ranges: ReadonlyArray<Range>,\n  start: number,\n  end: number\n): LineSpan => {\n  //eslint-disable-next-line functional/no-let\n  let s = -1;\n  //eslint-disable-next-line functional/no-let\n  let endPos = -1;\n  //eslint-disable-next-line functional/no-let\n  for (const [ index, r ] of ranges.entries()) {\n    s = index;\n    if (r.text.length === 0) continue;\n    if (start < r.end) {\n      break;\n    }\n  }\n\n  //eslint-disable-next-line functional/no-let\n  for (let index = s; index < ranges.length; index++) {\n    const r = ranges[ index ];\n    endPos = index;\n    if (end === r.end) {\n      endPos = index + 1;\n      break;\n    }\n    if (end < r.end) {\n      break;\n    }\n  }\n  return { length: endPos - s, start: s, end: endPos };\n};\n\n/**\n * Splits a source string into ranges:\n * ```js\n * const ranges = splitRanges(\"hello;there;fella\", \";\");\n * ```\n *\n * Each range consists of:\n * ```js\n * {\n *  text: string  - the text of range\n *  start: number - start pos of range, wrt to source\n *  end: number   - end pos of range, wrt to source\n *  index: number - index of range (starting at 0)\n * }\n * ```\n * @param source\n * @param split\n * @returns\n */\nexport const splitRanges = (\n  source: string,\n  split: string\n): ReadonlyArray<Range> => {\n  //eslint-disable-next-line functional/no-let\n  let start = 0;\n  //eslint-disable-next-line functional/no-let\n  let text = ``;\n  const ranges: Array<Range> = [];\n  //eslint-disable-next-line functional/no-let\n  let index = 0;\n  //eslint-disable-next-line functional/no-let,unicorn/prevent-abbreviations\n  for (let i = 0; i < source.length; i++) {\n    if (source.indexOf(split, i) === i) {\n      //eslint-disable-next-line functional/no-let\n      const end = i;\n      //eslint-disable-next-line functional/immutable-data\n      ranges.push({\n        text,\n        start,\n        end,\n        index,\n      });\n      start = end + 1;\n      text = ``;\n      index++;\n    } else {\n      text += source.charAt(i);\n    }\n  }\n  if (start < source.length) {\n    //eslint-disable-next-line functional/immutable-data\n    ranges.push({ text, start, index, end: source.length });\n  }\n  return ranges;\n};\n\n/**\n * Counts the number of times one of `chars` appears at the front of\n * a string, contiguously.\n *\n * ```js\n * countCharsFromStart(`  hi`, ` `); // 2\n * countCharsFromStart(`hi  `, ` `); // 0\n * countCharsFromStart(`  hi  `, ` `); // 2\n * ```\n * @param source\n * @param chars\n * @returns\n */\nexport const countCharsFromStart = (\n  source: string,\n  ...chars: ReadonlyArray<string>\n): number => {\n  //eslint-disable-next-line functional/no-let\n  let counted = 0;\n  //eslint-disable-next-line functional/no-let\n  for (let index = 0; index < source.length; index++) {\n    if (chars.includes(source.charAt(index))) {\n      counted++;\n    } else {\n      break;\n    }\n  }\n  return counted;\n};\n\n/**\n * Returns _true_ if `source` starts and ends with `start` and `end`. Case-sensitive.\n * If _end_ is omitted, the the `start` value will be used.\n *\n * ```js\n * startsEnds(`This is a string`, `This`, `string`); // True\n * startsEnds(`This is a string`, `is`, `a`); // False\n * starsEnds(`test`, `t`); // True, starts and ends with 't'\n * ```\n * @param source String to search within\n * @param start Start\n * @param end End (if omitted, start will be looked for at end as well)\n * @returns True if source starts and ends with provided values.\n */\nexport const startsEnds = (\n  source: string,\n  start: string,\n  end: string = start\n): boolean => source.startsWith(start) && source.endsWith(end);\n\n//eslint-disable-next-line no-useless-escape\nexport const htmlEntities = (source: string): string =>\n  source.replaceAll(/[&<>\\u00A0-\\u9999]/g, (index) => `&#${ index.codePointAt(0) };`);\n","/**\n * A random source.\n *\n * Predefined sources: {@link defaultRandom}, {@link gaussianSource}, {@link weightedSource}\n */\nexport type RandomSource = () => number;\n\n\nexport type StringOptions = Readonly<{\n  length: number;\n  source?: RandomSource;\n}>\n\n/**\n * Default random number generator: `Math.random`.\n */\nexport const defaultRandom = Math.random;\n\nexport type RandomOptions = Readonly<{\n  max: number;\n  min?: number;\n  source?: RandomSource;\n}>","import { defaultRandom, type StringOptions } from \"./Types.js\";\n\n/**\n * Returns a string of random letters and numbers of a given `length`.\n *\n * ```js\n * string();  // Random string of length 5\n * string(4); // eg. `4afd`\n * ```\n * @param length Length of random string\n * @returns Random string\n */\nexport const string = (lengthOrOptions: number | StringOptions = 5) => {\n  const options =\n    typeof lengthOrOptions === `number` ? { length: lengthOrOptions } : lengthOrOptions;\n  const calculate = options.source ?? defaultRandom;\n  return calculate()\n    .toString(36)\n    .slice(2, length + 2);\n};","import { afterMatch } from '../Text.js';\nimport { throwIntegerTest, throwNumberTest } from '../Guards.js';\nexport { pingPong, pingPongPercent } from '../modulation/PingPong.js';\nexport * as Async from './IterableAsync.js';\nexport * as Sync from './IterableSync.js';\nexport * as Chain from './chain/index.js';\n\nexport { interval } from '../flow/Interval.js';\nexport { delayLoop, type DelayOpts } from '../flow/Delay.js';\n\n/**\n * Generates a range of numbers, starting from `start` and counting by `interval`.\n * If `end` is provided, generator stops when reached.\n *\n * Unlike {@link numericRange}, numbers might contain rounding errors\n *\n * ```js\n * for (const c of numericRangeRaw(10, 100)) {\n *  // 100, 110, 120 ...\n * }\n * ```\n * @param interval Interval between numbers\n * @param start Start\n * @param end End (if undefined, range never ends)\n */\nexport const numericRangeRaw = function* (\n  interval: number,\n  start = 0,\n  end?: number,\n  repeating = false\n) {\n  if (interval <= 0) throw new Error(`Interval is expected to be above zero`);\n  if (end === undefined) end = Number.MAX_SAFE_INTEGER;\n  let v = start;\n  do {\n    while (v < end) {\n      yield v;\n      v += interval;\n    }\n  } while (repeating);\n};\n\n/**\n * Returns chunks of `source`, broken up by `delimiter` (default '.').\n * \n * If `delimiter` is not found, no results are yielded.\n * \n * ````js\n * stringSegmentsFromEnd(`a.b.c.d`);\n * // Yields:\n * // `a.b.c.d`\n * // `b.c.d`\n * // `c.d`\n * // `d`\n * ```\n * @param source \n * @param delimiter \n */\nexport function* stringSegmentsFromEnd(source: string, delimiter = `.`) {\n  while (source.length > 0) {\n    yield source;\n    const trimmed = afterMatch(source, delimiter);\n    if (trimmed === source) {\n      // Delimiter not found\n      break;\n    }\n    source = trimmed;\n  }\n}\n\n/**\n * Generates a range of numbers, with a given interval.\n *\n * @example For-loop\n * ```\n * let loopForever = numericRange(0.1); // By default starts at 0 and counts upwards forever\n * for (v of loopForever) {\n *  console.log(v);\n * }\n * ```\n *\n * @example If you want more control over when/where incrementing happens...\n * ```js\n * let percent = numericRange(0.1, 0, 1);\n *\n * let percentResult = percent.next().value;\n * ```\n *\n * Note that computations are internally rounded to avoid floating point math issues. So if the `interval` is very small (eg thousandths), specify a higher rounding\n * number.\n *\n * @param interval Interval between numbers\n * @param start Start. Defaults to 0\n * @param end End (if undefined, range never ends)\n * @param repeating Range loops from start indefinately. Default _false_\n * @param rounding A rounding that matches the interval avoids floating-point math hikinks. Eg if the interval is 0.1, use a rounding of 10\n */\nexport const numericRange = function* (\n  interval: number,\n  start = 0,\n  end?: number,\n  repeating = false,\n  rounding?: number\n) {\n  throwNumberTest(interval, `nonZero`);\n\n  const negativeInterval = interval < 0;\n  if (end === undefined) {\n    /* no op */\n  } else {\n    if (negativeInterval && start < end) {\n      throw new Error(\n        `Interval of ${ interval } will never go from ${ start } to ${ end }`\n      );\n    }\n    if (!negativeInterval && start > end) {\n      throw new Error(\n        `Interval of ${ interval } will never go from ${ start } to ${ end }`\n      );\n    }\n  }\n\n  rounding = rounding ?? 1000;\n  if (end === undefined) end = Number.MAX_SAFE_INTEGER;\n  else end *= rounding;\n  interval = interval * rounding;\n\n  do {\n    let v = start * rounding;\n    while ((!negativeInterval && v <= end) || (negativeInterval && v >= end)) {\n      yield v / rounding;\n      v += interval;\n    }\n  } while (repeating);\n};\n\n/**\n * Yields `amount` integers, counting by one from zero. If a negative amount is used,\n * count decreases. If `offset` is provided, this is added to the return result.\n * @example\n * ```js\n * const a = [...count(5)]; // Yields five numbers: [0,1,2,3,4]\n * const b = [...count(-5)]; // Yields five numbers: [0,-1,-2,-3,-4]\n * for (const v of count(5, 5)) {\n *  // Yields: 5, 6, 7, 8, 9\n * }\n * const c = [...count(5,1)]; // Yields [1,2,3,4,5]\n * ```\n *\n * @example Used with forEach\n * ```js\n * // Prints `Hi` 5x\n * forEach(count(5), () => // do something);\n * ```\n *\n * If you want to accumulate return values, consider using\n * {@link Flow.repeat}.\n *\n * @example Run some code every 100ms, 10 times:\n * ```js\n * import { interval } from 'https://unpkg.com/ixfx/dist/flow.js'\n * import { count } from 'https://unpkg.com/ixfx/dist/generators.js'\n * const counter = count(10);\n * for await (const v of interval(counter, { fixedIntervalMs: 100 })) {\n *  // Do something\n * }\n * ```\n * @param amount Number of integers to yield\n * @param offset Added to result\n */\nexport const count = function* (amount: number, offset = 0) {\n  // Unit tested.\n  throwIntegerTest(amount, ``, `amount`);\n  throwIntegerTest(offset, ``, `offset`);\n\n  if (amount === 0) return;\n\n  let index = 0;\n  do {\n    yield (amount < 0 ? -index + offset : index + offset);\n  } while (index++ < Math.abs(amount) - 1);\n};\n\n/**\n * Returns a number range between 0.0-1.0.\n *\n * ```\n * // Yields: [0, 0.2, 0.4, 0.6, 0.8, 1]\n * const a = [...numericPercent(0.2)];\n *\n * // Repeating flag set to true:\n * for (const v of numericPercent(0.2, true)) {\n *  // Infinite loop. V loops back to 0 after hitting 1\n * }\n * ```\n *\n * If `repeating` is true, it loops back to 0 after reaching 1\n * @param interval Interval (default: 0.01, ie. 1%)\n * @param repeating Whether generator should loop (default: false)\n * @param start Start (default: 0)\n * @param end End (default: 1)\n * @returns\n */\nexport const numericPercent = function (\n  interval = 0.01,\n  repeating = false,\n  start = 0,\n  end = 1\n) {\n  throwNumberTest(interval, `percentage`, `interval`);\n  throwNumberTest(start, `percentage`, `start`);\n  throwNumberTest(end, `percentage`, `end`);\n  return numericRange(interval, start, end, repeating);\n};\n\nexport { integerUniqueGen as randomUniqueInteger } from '../random/index.js';","import { throwNumberTest } from '../Guards.js';\n\n/**\n * Continually loops up and down between 0 and 1 by a specified interval.\n * Looping returns start value, and is inclusive of 0 and 1.\n *\n * @example Usage\n * ```js\n * import {percentPingPong} from 'https://unpkg.com/ixfx/dist/modulation.js';\n * for (const v of percentPingPong(0.1)) {\n *  // v will go up and down. Make sure you have a break somewhere because it is infinite\n * }\n * ```\n *\n * @example Alternative:\n * ```js\n * const pp = pingPongPercent(0.1, 0.5); // Setup generator one time\n * const v = pp.next().value; // Call .next().value whenever a new value is needed\n * ```\n *\n * Because limits are capped to -1 to 1, using large intervals can produce uneven distribution. Eg an interval of 0.8 yields 0, 0.8, 1\n *\n * `upper` and `lower` define the percentage range. Eg to ping pong between 40-60%:\n * ```\n * const pp = pingPongPercent(0.1, 0.4, 0.6);\n * ```\n * @param interval Amount to increment by. Defaults to 10%\n * @param start Starting point within range. Defaults to 0 using a positive interval or 1 for negative intervals\n * @param rounding Rounding to apply. This avoids floating-point rounding errors.\n */\nexport const pingPongPercent = function (\n  interval: number = 0.1,\n  lower?: number,\n  upper?: number,\n  start?: number,\n  rounding?: number\n) {\n  if (lower === undefined) lower = 0;\n  if (upper === undefined) upper = 1;\n  if (start === undefined) start = lower;\n\n  throwNumberTest(interval, `bipolar`, `interval`);\n  throwNumberTest(upper, `bipolar`, `end`);\n  throwNumberTest(start, `bipolar`, `offset`);\n  throwNumberTest(lower, `bipolar`, `start`);\n  return pingPong(interval, lower, upper, start, rounding);\n};\n\n/**\n * Ping-pongs continually back and forth `start` and `end` with a given `interval`. Use `pingPongPercent` for 0-1 ping-ponging\n *\n * In a loop:\n * ```\n * for (const c of pingPong(10, 0, 100)) {\n *  // 0, 10, 20 .. 100, 90, 80, 70 ...\n * }\n * ```\n *\n * Manual:\n * ```\n * const pp = pingPong(10, 0, 100);\n * let v = pp.next().value; // Call .next().value whenever a new value is needed\n * ```\n * @param interval Amount to increment by. Use negative numbers to start counting down\n * @param lower Lower bound (inclusive)\n * @param upper Upper bound (inclusive, must be greater than start)\n * @param start Starting point within bounds (defaults to `lower`)\n * @param rounding Rounding is off by default. Use say 1000 if interval is a fractional amount to avoid rounding errors.\n */\nexport const pingPong = function* (\n  interval: number,\n  lower: number,\n  upper: number,\n  start?: number,\n  rounding?: number\n) {\n  if (lower === undefined) throw new Error(`Parameter 'lower' is undefined`);\n  if (interval === undefined) {\n    throw new Error(`Parameter 'interval' is undefined`);\n  }\n  if (upper === undefined) throw new Error(`Parameter 'upper' is undefined`);\n\n  if (rounding === undefined && interval <= 1 && interval >= 0) {\n    rounding = 10 / interval;\n  } else if (rounding === undefined) rounding = 1234;\n\n  if (Number.isNaN(interval)) throw new Error(`interval parameter is NaN`);\n  if (Number.isNaN(lower)) throw new Error(`lower parameter is NaN`);\n  if (Number.isNaN(upper)) throw new Error(`upper parameter is NaN`);\n  if (Number.isNaN(start)) throw new Error(`upper parameter is NaN`);\n\n  if (lower >= upper) throw new Error(`lower must be less than upper`);\n  if (interval === 0) throw new Error(`Interval cannot be zero`);\n  const distance = upper - lower;\n  if (Math.abs(interval) >= distance) {\n    throw new Error(`Interval should be between -${ distance } and ${ distance }`);\n  }\n\n  //eslint-disable-next-line functional/no-let\n  let incrementing = interval > 0;\n\n  // Scale up values by rounding factor\n  upper = Math.floor(upper * rounding);\n  lower = Math.floor(lower * rounding);\n  interval = Math.floor(Math.abs(interval * rounding));\n\n  if (interval === 0) {\n    throw new Error(`Interval is zero (rounding: ${ rounding })`);\n  }\n  if (start === undefined) start = lower;\n  else start = Math.floor(start * rounding);\n  if (start > upper || start < lower) {\n    throw new Error(\n      `Start (${ start / rounding }) must be within lower (${ lower / rounding\n      }) and upper (${ upper / rounding })`\n    );\n  }\n\n  //eslint-disable-next-line functional/no-let\n  let v = start;\n  yield v / rounding;\n  //eslint-disable-next-line functional/no-let\n  let firstLoop = true;\n  while (true) {\n    v = v + (incrementing ? interval : -interval);\n    if (incrementing && v >= upper) {\n      incrementing = false;\n      v = upper;\n      if (v === upper && firstLoop) {\n        // Edge case where we start at upper bound and increment\n        v = lower;\n        incrementing = true;\n      }\n    } else if (!incrementing && v <= lower) {\n      incrementing = true;\n      v = lower;\n      if (v === lower && firstLoop) {\n        // Edge case where we start at lower bound and decrement\n        v = upper;\n        incrementing = false;\n      }\n    }\n    yield v / rounding;\n    firstLoop = false;\n  }\n};\n","import { type IsEqual } from '../IsEqual.js';\nimport { sleep } from '../flow/Sleep.js';\n\nexport async function* fromArray<V>(array: Array<V>): AsyncGenerator<V> {\n  for (const v of array) {\n    yield v;\n    await sleep(1);\n  }\n}\n\nexport async function* fromIterable<V>(iterable: Iterable<V>): AsyncGenerator<V> {\n  for (const v of iterable) {\n    yield v;\n    await sleep(1);\n  }\n}\n\n/**\n * Breaks an iterable into array chunks\n * ```js\n * chunks([1,2,3,4,5,6,7,8,9,10], 3);\n * // Yields [[1, 2, 3], [4, 5, 6], [7, 8, 9], [10]]\n * ```\n * @param it\n * @param size\n */\n//eslint-disable-next-line func-style\nexport async function* chunks<V>(it: Iterable<V>, size: number) {\n  // Source: https://surma.github.io/underdash/\n  //eslint-disable-next-line functional/no-let\n  let buffer = [];\n  for await (const v of it) {\n    //eslint-disable-next-line functional/immutable-data\n    buffer.push(v);\n    if (buffer.length === size) {\n      yield buffer;\n      buffer = [];\n    }\n  }\n  if (buffer.length > 0) yield buffer;\n}\n\n/**\n * Return concatenation of iterators\n * @param its\n */\n//eslint-disable-next-line func-style\nexport async function* concat<V>(...its: ReadonlyArray<Iterable<V>>) {\n  // Source: https://surma.github.io/underdash/\n  for await (const it of its) yield* it;\n}\n\n/**\n * Drops elements that do not meet the predicate `f`.\n * ```js\n * dropWhile([1, 2, 3, 4], e => e < 3);\n * returns [3, 4]\n * ```\n * @param it\n * @param f\n */\n//eslint-disable-next-line func-style\nexport async function* dropWhile<V>(\n  it: AsyncIterable<V>,\n  f: (v: V) => boolean\n) {\n  // https://surma.github.io/underdash/\n  //const iit = it[Symbol.asyncIterator]();\n  for await (const v of it) {\n    if (!f(v)) {\n      yield v;\n      break;\n    }\n  }\n  yield* it;\n}\n\n/**\n * Returns true if items in two iterables are equal, as\n * determined by the `equality` function.\n * @param it1\n * @param it2\n * @param equality\n * @returns\n */\n//eslint-disable-next-line func-style\nexport async function equals<V>(\n  it1: AsyncIterable<V>,\n  it2: AsyncIterable<V>,\n  equality?: IsEqual<V>\n) {\n  // https://surma.github.io/underdash/\n  const iit1 = it1[ Symbol.asyncIterator ]();// it1[ Symbol.iterator ]();\n  const iit2 = it2[ Symbol.asyncIterator ]();\n  //eslint-disable-next-line no-constant-condition\n  while (true) {\n    const index1 = await iit1.next();\n    const index2 = await iit2.next();\n    if (equality !== undefined) {\n      if (!equality(index1.value, index2.value)) return false;\n    } else if (index1.value !== index2.value) return false;\n    if (index1.done ?? index2.done) return index1.done && index2.done;\n  }\n}\n\n/**\n * Returns _true_ if `f` returns _true_ for\n * every item in iterable\n * @param it\n * @param f\n * @returns\n */\n//eslint-disable-next-line func-style\nexport async function every<V>(it: Iterable<V>, f: (v: V) => boolean) {\n  // https://surma.github.io/underdash/\n  //eslint-disable-next-line functional/no-let\n  let ok = true;\n  for await (const v of it) ok = ok && f(v);\n  return ok;\n}\n\n/**\n * Yields `v` for each item within `it`.\n *\n * ```js\n * fill([1, 2, 3], 0);\n * // Yields: [0, 0, 0]\n * ```\n * @param it\n * @param v\n */\n//eslint-disable-next-line func-style\nexport async function* fill<V>(it: AsyncIterable<V>, v: V) {\n  // https://surma.github.io/underdash/\n\n  //eslint-disable-next-line @typescript-eslint/no-unused-vars\n  for await (const _ of it) yield v;\n}\n\n/**\n * Filters an iterable, returning items which match `f`.\n *\n * ```js\n * filter([1, 2, 3, 4], e => e % 2 == 0);\n * returns [2, 4]\n * ```\n * @param it\n * @param f\n */\n//eslint-disable-next-line func-style\nexport async function* filter<V>(it: AsyncIterable<V>, f: (v: V) => boolean) {\n  // https://surma.github.io/underdash/\n  for await (const v of it) {\n    if (!f(v)) continue;\n    yield v;\n  }\n}\n\n/**\n * Returns first item from iterable `it` that matches predicate `f`\n * ```js\n * find([1, 2, 3, 4], e => e > 2);\n * // Yields: 3\n * ```\n * @param it\n * @param f\n * @returns\n */\n//eslint-disable-next-line func-style\nexport async function find<V>(it: AsyncIterable<V>, f: (v: V) => boolean) {\n  // https://surma.github.io/underdash/\n  for await (const v of it) {\n    if (f(v)) return v;\n  }\n}\n\n/**\n * Returns a 'flattened' copy of array, un-nesting arrays one level\n * ```js\n * flatten([1, [2, 3], [[4]]]);\n * // Yields: [1, 2, 3, [4]];\n * ```\n * @param it\n */\n//eslint-disable-next-line func-style\nexport async function* flatten<V>(it: AsyncIterable<V>) {\n  // https://surma.github.io/underdash/\n  for await (const v of it) {\n    //eslint-disable-next-line @typescript-eslint/no-explicit-any\n    if (Symbol.asyncIterator in (v as any)) {\n      // @ts-expect-error\n      yield* v;\n    } else {\n      yield v;\n    }\n  }\n}\n\n/**\n * Execute function `f` for each item in iterable\n * @param it\n * @param f\n */\n//eslint-disable-next-line func-style\nexport async function forEach<V>(it: AsyncIterable<V>, f: (v: V) => boolean) {\n  // https://surma.github.io/underdash/\n  for await (const v of it) f(v);\n}\n\n/**\n * Maps an iterable of type `V` to type `X`.\n * ```js\n * map([1, 2, 3], e => e*e)\n * returns [1, 4, 9]\n * ```\n * @param it\n * @param f\n */\n//eslint-disable-next-line func-style\nexport async function* map<V, X>(it: AsyncIterable<V>, f: (v: V) => X) {\n  // https://surma.github.io/underdash/\n\n  for await (const v of it) {\n    yield f(v);\n  }\n}\n\n/**\n * Returns the maximum seen of an iterable\n * ```js\n * min([\n *  {i:0,v:1},\n *  {i:1,v:9},\n *  {i:2,v:-2}\n * ], (a, b) => a.v > b.v);\n * // Yields: {i:1, v:-9}\n * ```\n * @param it Iterable\n * @param gt Should return _true_ if `a` is greater than `b`.\n * @returns\n */\n//eslint-disable-next-line func-style\nexport async function max<V>(it: AsyncIterable<V>, gt = (a: V, b: V) => a > b) {\n  // https://surma.github.io/underdash/\n\n  //eslint-disable-next-line functional/no-let\n  let max;\n\n  for await (const v of it) {\n    if (!max) {\n      max = v;\n      continue;\n    }\n    max = gt(max, v) ? max : v;\n  }\n  return max;\n}\n\n/**\n * Returns the minimum seen of an iterable\n * ```js\n * min([\n *  {i:0,v:1},\n *  {i:1,v:9},\n *  {i:2,v:-2}\n * ], (a, b) => a.v > b.v);\n * // Yields: {i:2, v:-2}\n * ```\n * @param it Iterable\n * @param gt Should return _true_ if `a` is greater than `b`.\n * @returns\n */\n//eslint-disable-next-line func-style\nexport async function min<V>(it: AsyncIterable<V>, gt = (a: V, b: V) => a > b) {\n  // https://surma.github.io/underdash/\n  //eslint-disable-next-line functional/no-let\n  let min;\n\n  for await (const v of it) {\n    if (!min) {\n      min = v;\n      continue;\n    }\n    min = gt(min, v) ? v : min;\n  }\n  return min;\n}\n\n/**\n * Returns count from `start` for a given length\n * ```js\n * range(-5, 10);\n * // Yields: [-5, -4, -3, -2, -1, 0, 1, 2, 3, 4]\n * ```\n * @param start Start number\n * @param length Length\n */\n//eslint-disable-next-line func-style,@typescript-eslint/require-await\nexport async function* range(start: number, length: number) {\n  // https://surma.github.io/underdash/\n  //eslint-disable-next-line functional/no-let\n  for (let index = 0; index < length; index++) {\n    yield start++;\n  }\n  //for (let i=len;len > 0; len--) yield start++;\n}\n\n/**\n * Reduce for iterables\n * ```js\n * reduce([1, 2, 3], (acc, cur) => acc + cur, 0);\n * // Yields: 6\n * ```\n * @param it Iterable\n * @param f Function\n * @param start Start value\n * @returns\n */\n//eslint-disable-next-line func-style\nexport async function reduce<V>(\n  it: AsyncIterable<V>,\n  f: (accumulator: V, current: V) => V,\n  start: V\n) {\n  // https://surma.github.io/underdash/\n\n  for await (const v of it) start = f(start, v);\n  return start;\n}\n\n/**\n * Returns a section from an iterable\n * @param it Iterable\n * @param start Start index\n * @param end End index (or until completion)\n */\n//eslint-disable-next-line func-style\nexport async function* slice<V>(\n  it: AsyncIterable<V>,\n  start = 0,\n  end = Number.POSITIVE_INFINITY\n) {\n  // https://surma.github.io/underdash/\n  const iit = it[ Symbol.asyncIterator ]();\n\n  for (; start > 0; start--, end--) await iit.next();\n\n  for await (const v of it) {\n    if (end-- > 0) {\n      yield v;\n    } else {\n      break;\n    }\n  }\n}\n\n/**\n * Returns true the first time `f` returns true. Useful for spotting any occurrence of\n * data, and exiting quickly\n * ```js\n * some([1, 2, 3, 4], e => e % 3 === 0);\n * // Yields: true\n * ```\n * @param it Iterable\n * @param f Filter function\n * @returns\n */\n//eslint-disable-next-line func-style\nexport async function some<V>(it: AsyncIterable<V>, f: (v: V) => boolean) {\n  // https://surma.github.io/underdash/\n\n  for await (const v of it) {\n    if (f(v)) return true;\n  }\n  return false;\n}\n\n/**\n * Returns items for which the filter function returns _true_\n * ```js\n * takeWhile([ 1, 2, 3, 4 ], e => e < 3);\n * // Yields: [ 1, 2 ]\n * ```\n * @param it Iterable\n * @param f Filter function\n * @returns\n */\n//eslint-disable-next-line func-style\nexport async function* takeWhile<V>(\n  it: AsyncIterable<V>,\n  f: (v: V) => boolean\n) {\n  // https://surma.github.io/underdash/\n\n  for await (const v of it) {\n    if (!f(v)) return;\n    yield v;\n  }\n}\n\n/**\n * Returns an array of values from an iterator.\n *\n * ```js\n * const data = await toArray(adsrIterable(opts, 10));\n * ```\n *\n * Note: If the iterator is infinite, be sure to provide a `count` or the function\n * will never return.\n *\n * @param it Asynchronous iterable\n * @param count Number of items to return, by default all.\n * @returns\n */\n//eslint-disable-next-line func-style\nexport async function toArray<V>(\n  it: AsyncIterable<V>,\n  count = Number.POSITIVE_INFINITY\n): Promise<Array<V>> {\n  // https://2ality.com/2016/10/asynchronous-iteration.html\n  const result = [];\n  const iterator = it[ Symbol.asyncIterator ]();\n\n  while (result.length < count) {\n    const r = await iterator.next();\n    if (r.done) break;\n    //eslint-disable-next-line functional/immutable-data\n    result.push(r.value);\n  }\n  return result;\n}\n\n/**\n * Returns unique items from iterables, given a particular key function\n * ```js\n * unique([{i:0,v:2},{i:1,v:3},{i:2,v:2}], e => e.v);\n * Yields:  [{i:0,v:2},{i:1,v:3}]\n * @param it\n * @param f\n */\n//eslint-disable-next-line func-style\nexport async function* unique<V>(\n  it: AsyncIterable<V>,\n  f: (id: V) => V = (id) => id\n) {\n  // https://surma.github.io/underdash/\n  const buffer: Array<V> = [];\n\n  for await (const v of it) {\n    const fv = f(v);\n    if (buffer.includes(fv)) continue;\n    //eslint-disable-next-line functional/immutable-data\n    buffer.push(fv);\n    yield v;\n  }\n}\n\n/**\n * Combine same-positioned items from several iterables\n * ```js\n * zip( [1, 2, 3], [4, 5, 6], [7, 8, 9] );\n * Yields: [ [1, 4, 7], [2, 5, 8], [3, 6, 9] ]\n * ```\n * @param its\n * @returns\n */\n//eslint-disable-next-line func-style\nexport async function* zip<V>(...its: ReadonlyArray<AsyncIterable<V>>) {\n  // https://surma.github.io/underdash/\n  const iits = its.map((it) => it[ Symbol.asyncIterator ]());\n\n  while (true) {\n    const vs = await Promise.all(iits.map((it) => it.next()));\n    if (vs.some((v) => v.done)) return;\n    yield vs.map((v) => v.value as V);\n  }\n}\n","import { numberTest } from '../Guards.js';\n\n/**\n * Interval types allows for more expressive coding, rather than embedding millisecond values.\n *\n * eg: { mins: 5} rather than 5*60*1000 or worse, 300000\n *\n * Fields are cumulative. { secs: 2, millis: 1 } will equal 2001 milliseconds.\n *\n * Use {@link intervalToMs} to resolve an {@link Interval} to milliseconds. Use {@link Elapsed.toString} to get a human-readable version.\n */\nexport type Interval =\n  | number\n  | {\n    readonly millis?: number;\n    readonly secs?: number;\n    readonly hours?: number;\n    readonly mins?: number;\n  };\n\nexport function intervalToMs(interval: Interval | undefined): number | undefined;\nexport function intervalToMs(\n  interval: Interval | undefined,\n  defaultNumber: number\n): number;\n\n\n/**\n * Return the millisecond value of an Interval.\n * ```js\n * intervalToMs(100); // 100\n * intervalToMs({ millis: 100 }); // 100\n * ```\n *\n * Use `defaultNumber` to return a default in the case of\n * undefined or invalid input.\n *\n * ```js\n * intervalToMs(undefined); // undefined\n * intervalToMs(undefined, 100); // 100\n * ```\n *\n * If no default is provided, an exception is thrown.\n * @param interval Interval\n * @param defaultNumber Default value if `i` is undefined\n * @returns Milliseconds, or undefined\n */\nexport function intervalToMs(\n  interval: Interval | undefined,\n  defaultNumber?: number\n): number | undefined {\n  if (isInterval(interval)) {\n    // Number given, must be millis?\n    if (typeof interval === `number`) return interval;\n\n    //eslint-disable-next-line functional/no-let\n    let ms = interval.millis ?? 0;\n    ms += (interval.hours ?? 0) * 60 * 60 * 1000;\n    ms += (interval.mins ?? 0) * 60 * 1000;\n    ms += (interval.secs ?? 0) * 1000;\n    return ms;\n  } else {\n    if (typeof defaultNumber !== `undefined`) return defaultNumber;\n    throw new Error(`Not a valid interval: ${ interval }`);\n  }\n}\n\nexport function isInterval(interval: number | Interval | undefined): interval is Interval {\n  if (interval === undefined) return false;\n  if (interval === null) return false;\n  if (typeof interval === `number`) {\n    if (Number.isNaN(interval)) return false;\n    if (!Number.isFinite(interval)) return false;\n    return true;\n  } else if (typeof interval !== `object`) return false;\n\n  const hasMillis = `millis` in interval;\n  const hasSecs = `secs` in interval;\n  const hasMins = `mins` in interval;\n  const hasHours = `hours` in interval;\n  if (hasMillis && !numberTest(interval.millis)[ 0 ]) return false;\n  if (hasSecs && !numberTest(interval.secs)[ 0 ]) return false;\n  if (hasMins && !numberTest(interval.mins)[ 0 ]) return false;\n  if (hasHours && !numberTest(interval.hours)[ 0 ]) return false;\n  if (hasMillis || hasSecs || hasHours || hasMins) return true;\n  return false;\n}\n","import { throwNumberTest } from '../Guards.js';\nimport { type Interval, intervalToMs } from './IntervalType.js';\n\nexport type SleepOpts<V> = Interval & Partial<{\n  readonly signal: AbortSignal;\n  readonly value: V;\n}>;\n\nif (typeof window === `undefined` || !(`requestAnimationFrame` in window)) {\n  // eslint-disable-next-line unicorn/no-lonely-if\n  if (typeof window === `undefined`) {\n    // @ts-expect-error\n    globalThis.requestAnimationFrame = setImmediate;\n  }\n  //window.requestAnimationFrame = window.setImmediate;\n}\n\n/**\n * Returns after timeout period.\n *\n * @example In an async function\n * ```js\n * console.log(`Hello`);\n * await sleep(1000);\n * console.log(`There`); // Prints one second after\n * ```\n *\n * @example As a promise\n * ```js\n * console.log(`Hello`);\n * sleep({ millis: 1000 })\n *  .then(() => console.log(`There`)); // Prints one second after\n * ```\n *\n * If a timeout of 0 is given, `requestAnimationFrame` is used instead of `setTimeout`.\n *\n * {@link delay} and {@link sleep} are similar. `delay()` takes a parameter of what code to execute after the timeout, while `sleep()` just resolves after the timeout.\n *\n * A value can be provided, which is returned on awaking:\n * ```js\n * const v = await sleep({ seconds: 1, value: `hello`);\n * // v = `hello`\n * ```\n *\n * Provide an AbortSignal to cancel the sleep and throwing an exception\n * so code after the sleep doesn't happen.\n *\n * ```js\n * const ac = new AbortController();\n * setTimeout(() => { ac.abort(); }, 1000); // Abort after 1s\n *\n * // Sleep for 1min\n * await sleep({ minutes: 1, signal: ac.signal });\n * console.log(`Awake`); // This line doesn't get called because an exception is thrown when aborting\n * ```\n * @param optsOrMillis Milliseconds to sleep, or options\n * @param signal\n * @return\n */\nexport const sleep = <V>(\n  optsOrMillis: SleepOpts<V>\n): Promise<V | undefined> => {\n  const timeoutMs = intervalToMs(optsOrMillis, 1);\n  const signal = optsOrMillis.signal;\n  const value = optsOrMillis.value;\n  throwNumberTest(timeoutMs, `positive`, `timeoutMs`);\n\n  if (timeoutMs === 0) {\n    return new Promise<V | undefined>((resolve) =>\n      requestAnimationFrame((_) => {\n        resolve(value);\n      })\n    );\n  } else {\n    return new Promise<V | undefined>((resolve, reject) => {\n      const onAbortSignal = () => {\n        signal?.removeEventListener(`abort`, onAbortSignal);\n        reject(new Error(signal!.reason));\n      }\n\n      if (signal) {\n        //console.log(`Flow.sleep added to abort signal`);\n        signal.addEventListener(`abort`, onAbortSignal);\n      }\n      setTimeout(() => {\n        if (signal?.aborted) {\n          reject(signal.reason);\n          return;\n        }\n        signal?.removeEventListener(`abort`, onAbortSignal);\n\n        resolve(value);\n      }, timeoutMs);\n    });\n  }\n};\n","import { type ToString, toStringDefault } from '../Util.js';\nimport { type IsEqual } from '../IsEqual.js';\n\nexport { slice } from '../iterable/SliceSync.js';\n\n/**\n * Filters the `input` iterable, only yielding unique values. Use {@link unique} to compare\n * by object reference instead.\n * \n * ```js\n * const d = ['a', 'b', 'c', 'b', 'd' ];\n * for (const v of uniqueByValue(d)) {\n *  // Yields: 'a', 'b', 'c', 'd'\n * // (extra 'b' is skipped)\n * }\n * ```\n * \n * By default, JSON.stringify is used to create a string representing value. These are added\n * to a Set of strings, which is how we keep track of uniqueness. If the value is already a string it is used as-is.\n * \n * This allows you to have custom logic for what determines uniqueness. Eg, using a single field\n * of an object as an identifier:\n * \n * ```js\n * const people = [\n *  { name: `Mary`, size: 20 }, { name: `Abdul`, size: 19 }, { name: `Mary`, size: 5 }\n * ]\n * for (const v of uniqueByValue(d, v=>v.name)) {\n *  // Yields: { name: `Mary`, size: 20 }, { name: `Abdul`, size: 19 }\n *  // Second 'Mary' is skipped because name is the same, even though size field is different.\n * }\n * ```\n * \n * If you want to keep track of the set of keys, or prime it with some existing data, provide a Set instance:\n * ```js\n * const unique = new Set();\n * unique.add(`b`);\n * const d = [`a`, `b`, `c`];\n * for (const v of uniqueByValue(d, toStringDefault, unique)) {\n *  // Yields: `a`, `c`\n *  // `b` is skipped because it was already in set\n * }\n * // After completion, `unique` contains `a`, `b` and `c`.\n * ```\n * \n * Creating your own Set is useful for tracking unique values across several calls to `uniqueByValue`.\n * @param input \n * @param seen \n * @param toString \n */\nexport function* uniqueByValue<T>(input: Iterable<T>, toString: ToString<T> = toStringDefault, seen: Set<string> = new Set<string>()): Generator<T> {\n  for (const v of input) {\n    const key = toString(v);\n    if (seen.has(key)) continue;\n    seen.add(key);\n    yield v;\n  }\n}\n\n/**\n * Returns a function that yields a value from a generator.\n * ```js\n * const spring = yieldNumber(Oscillators.spring());\n *\n * spring(); // latest value\n * ```\n *\n * Instead of:\n * ```js\n * const spring = Oscillators.spring();\n *\n * spring.next().value\n * ```\n *\n * A `defaultValue` can be provided if the source generator returns undefined:\n * ```js\n * const spring = yieldNumber(Oscillators.spring(), 0);\n * spring(); // Returns 0 if the generator returns undefined\n * ```\n * @param generator\n * @param defaultValue\n * @returns\n */\nexport function yieldNumber(\n  generator: Generator<number>,\n  defaultValue?: number\n) {\n\n  return (): number | undefined => {\n    const v: number | undefined = generator.next().value as number | undefined;\n    if (v === undefined) return defaultValue;\n    return v;\n  };\n}\n\n/**\n * Return first value from an iterable, or _undefined_ if\n * no values are generated\n * @param it\n * @returns\n */\nexport function first<V>(it: Iterable<V>): V | undefined {\n  for (const value of it) {\n    return value;\n  }\n}\n\n/**\n * Returns last value from an iterable, or _undefined_\n * if no values are generated\n * @param it\n */\nexport function last<V>(it: Iterable<V>): V | undefined {\n  //eslint-disable-next-line functional/no-let\n  let returnValue: V | undefined;\n  for (const value of it) {\n    returnValue = value;\n  }\n  return returnValue;\n}\n\n/**\n * Yields chunks of the iterable `it` such that the end of a chunk is the\n * start of the next chunk.\n *\n * Eg, with the input [1,2,3,4,5] and a size of 2, we would get back\n * [1,2], [2,3], [3,4], [4,5].\n *\n *\n * @param it\n * @param size\n * @returns\n */\nexport function* chunksOverlapping<V>(it: Iterable<V>, size: number) {\n  if (size <= 1) throw new Error(`Size should be at least 2`);\n\n  //eslint-disable-next-line functional/no-let\n  let buffer: Array<V> = [];\n\n  for (const v of it) {\n    //eslint-disable-next-line functional/immutable-data\n    buffer.push(v);\n    if (buffer.length === size) {\n      yield buffer;\n      //eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n      buffer = [ buffer.at(-1)! ];\n    }\n  }\n  if (buffer.length <= 1) return;\n\n  if (buffer.length > 0) yield buffer;\n}\n\n/**\n * Breaks an iterable into array chunks\n * ```js\n * chunks([1,2,3,4,5,6,7,8,9,10], 3);\n * // Yields [[1, 2, 3], [4, 5, 6], [7, 8, 9], [10]]\n * ```\n * @param it\n * @param size\n */\n//eslint-disable-next-line func-style\nexport function* chunks<V>(it: Iterable<V>, size: number) {\n  //eslint-disable-next-line functional/no-let\n  let buffer = [];\n\n  for (const v of it) {\n    //eslint-disable-next-line functional/immutable-data\n    buffer.push(v);\n    if (buffer.length === size) {\n      yield buffer;\n      buffer = [];\n    }\n  }\n  if (buffer.length > 0) yield buffer;\n}\n\n/**\n * Return concatenation of iterators\n * @param its\n */\n//eslint-disable-next-line func-style\nexport function* concat<V>(...its: ReadonlyArray<Iterable<V>>) {\n  for (const it of its) yield* it;\n}\n\n/**\n * Drops elements that do not meet the predicate `f`.\n * ```js\n * dropWhile([1, 2, 3, 4], e => e < 3);\n * returns [3, 4]\n * ```\n * @param it\n * @param f\n */\n//eslint-disable-next-line func-style\nexport function* dropWhile<V>(it: Iterable<V>, f: (v: V) => boolean) {\n  for (const v of it) {\n    if (!f(v)) {\n      yield v;\n      break;\n    }\n  }\n  yield* it;\n}\n\n/**\n * Returns true if items in two iterables are equal, as\n * determined by the `equality` function.\n * @param it1\n * @param it2\n * @param equality\n * @returns\n */\n//eslint-disable-next-line func-style\nexport function equals<V>(\n  it1: IterableIterator<V>,\n  it2: IterableIterator<V>,\n  equality?: IsEqual<V>\n) {\n  //it1 = it1[Symbol.iterator]();\n  //it2 = it2[Symbol.iterator]();\n  // eslint-disable-next-line no-constant-condition\n  while (true) {\n    const index1 = it1.next(),\n      index2 = it2.next();\n    if (equality !== undefined) {\n      if (!equality(index1.value, index2.value)) return false;\n    } else if (index1.value !== index2.value) return false;\n    if (index1.done ?? index2.done) return index1.done && index2.done;\n  }\n}\n\n/**\n * Returns true if `f` returns true for\n * every item in iterable\n * @param it\n * @param f\n * @returns\n */\n//eslint-disable-next-line func-style\nexport function every<V>(it: Iterable<V>, f: (v: V) => boolean) {\n  // https://surma.github.io/underdash/\n  //eslint-disable-next-line functional/no-let\n  let ok = true;\n\n  for (const v of it) ok = ok && f(v);\n  return ok;\n}\n\n/**\n * Yields `v` for each item within `it`.\n *\n * ```js\n * fill([1, 2, 3], 0);\n * // Yields: [0, 0, 0]\n * ```\n * @param it\n * @param v\n */\n//eslint-disable-next-line func-style\nexport function* fill<V>(it: Iterable<V>, v: V) {\n  // https://surma.github.io/underdash/\n\n  //eslint-disable-next-line @typescript-eslint/no-unused-vars\n  for (const _ of it) yield v;\n}\n\n/**\n * Execute function `f` for each item in iterable\n * @param it\n * @param f\n */\n//eslint-disable-next-line func-style\nexport function forEach<V>(it: Iterable<V>, f: (v: V) => boolean) {\n  // https://surma.github.io/underdash/\n\n  for (const v of it) f(v);\n}\n\n/**\n * ```js\n * filter([1, 2, 3, 4], e => e % 2 == 0);\n * returns [2, 4]\n * ```\n * @param it\n * @param f\n */\n//eslint-disable-next-line func-style\nexport function* filter<V>(it: Iterable<V>, f: (v: V) => boolean) {\n  // https://surma.github.io/underdash/\n\n  for (const v of it) {\n    if (!f(v)) continue;\n    yield v;\n  }\n}\n\n/**\n * Returns first item from iterable `it` that matches predicate `f`\n * ```js\n * find([1, 2, 3, 4], e => e > 2);\n * // Yields: 3\n * ```\n * @param it\n * @param f\n * @returns\n */\n//eslint-disable-next-line func-style\nexport function find<V>(it: Iterable<V>, f: (v: V) => boolean) {\n  // https://surma.github.io/underdash/\n\n  for (const v of it) {\n    if (f(v)) return v;\n  }\n}\n\n/**\n * Returns a 'flattened' copy of array, un-nesting arrays one level\n * ```js\n * flatten([1, [2, 3], [[4]]]);\n * // Yields: [1, 2, 3, [4]];\n * ```\n * @param it\n */\n//eslint-disable-next-line func-style\nexport function* flatten<V>(it: Iterable<V>) {\n  // https://surma.github.io/underdash/\n\n  for (const v of it) {\n    //eslint-disable-next-line @typescript-eslint/no-explicit-any\n    if (Symbol.iterator in (v as any)) {\n      // @ts-expect-error\n      yield* v;\n    } else {\n      yield v;\n    }\n  }\n}\n\n/**\n * Maps an iterable of type `V` to type `X`.\n * ```js\n * map([1, 2, 3], e => e*e)\n * returns [1, 4, 9]\n * ```\n * @param it\n * @param f\n */\n//eslint-disable-next-line func-style\nexport function* map<V, X>(it: Iterable<V>, f: (v: V) => X) {\n  // https://surma.github.io/underdash/\n\n  for (const v of it) {\n    yield f(v);\n  }\n}\n\n/**\n * Returns the maximum seen of an iterable\n * ```js\n * min([\n *  {i:0,v:1},\n *  {i:1,v:9},\n *  {i:2,v:-2}\n * ], (a, b) => a.v > b.v);\n * // Yields: {i:1, v:-9}\n * ```\n * @param it Iterable\n * @param gt Should return _true_ if `a` is greater than `b`.\n * @returns\n */\n//eslint-disable-next-line func-style\nexport function max<V>(it: Iterable<V>, gt = (a: V, b: V) => a > b) {\n  // https://surma.github.io/underdash/\n  //eslint-disable-next-line functional/no-let\n  let max;\n\n  for (const v of it) {\n    if (!max) {\n      max = v;\n      continue;\n    }\n    max = gt(max, v) ? max : v;\n  }\n  return max;\n}\n\n/**\n * Returns the minimum seen of an iterable\n * ```js\n * min([\n *  {i:0,v:1},\n *  {i:1,v:9},\n *  {i:2,v:-2}\n * ], (a, b) => a.v > b.v);\n * // Yields: {i:2, v:-2}\n * ```\n * @param it Iterable\n * @param gt Should return _true_ if `a` is greater than `b`.\n * @returns\n */\n//eslint-disable-next-line func-style\nexport function min<V>(it: Iterable<V>, gt = (a: V, b: V) => a > b) {\n  // https://surma.github.io/underdash/\n  //eslint-disable-next-line functional/no-let\n  let min;\n\n  for (const v of it) {\n    if (!min) {\n      min = v;\n      continue;\n    }\n    min = gt(min, v) ? v : min;\n  }\n  return min;\n}\n\n/**\n * Returns count from `start` for a given length\n * ```js\n * range(-5, 10);\n * // Yields: [-5, -4, -3, -2, -1, 0, 1, 2, 3, 4]\n * ```\n * @param start Start\n * @param length Length\n */\n//eslint-disable-next-line func-style\nexport function* range(start: number, length: number) {\n  // https://surma.github.io/underdash/\n  //eslint-disable-next-line functional/no-let\n  for (let index = 0; index < length; index++) {\n    yield start++;\n  }\n  //for (let i=len;len > 0; len--) yield start++;\n}\n\n/**\n * Reduce for iterables\n * ```js\n * reduce([1, 2, 3], (acc, cur) => acc + cur, 0);\n * // Yields: 6\n * ```\n * @param it Iterable\n * @param f Function\n * @param start Start value\n * @returns\n */\n//eslint-disable-next-line func-style\nexport function reduce<V>(\n  it: Iterable<V>,\n  f: (accumulator: V, current: V) => V,\n  start: V\n) {\n  // https://surma.github.io/underdash/\n\n  for (const v of it) start = f(start, v);\n  return start;\n}\n\n\n/**\n * Returns true the first time `f` returns true. Useful for spotting any occurrence of\n * data, and exiting quickly\n * ```js\n * some([1, 2, 3, 4], e => e % 3 === 0);\n * // Yields: true\n * ```\n * @param it Iterable\n * @param f Filter function\n * @returns\n */\n//eslint-disable-next-line func-style\nexport function some<V>(it: Iterable<V>, f: (v: V) => boolean) {\n  // https://surma.github.io/underdash/\n\n  for (const v of it) {\n    if (f(v)) return true;\n  }\n  return false;\n}\n\n/**\n * Returns items for which the filter function returns _true_\n * ```js\n * takeWhile([ 1, 2, 3, 4 ], e => e < 3);\n * // Yields: [ 1, 2 ]\n * ```\n * @param it Iterable\n * @param f Filter function\n * @returns\n */\n//eslint-disable-next-line func-style\nexport function* takeWhile<V>(it: Iterable<V>, f: (v: V) => boolean) {\n  // https://surma.github.io/underdash/\n\n  for (const v of it) {\n    if (!f(v)) return;\n    yield v;\n  }\n}\n\n/**\n * Returns unique items from an iterable or\n * array of iterables.\n *\n * ```js\n * const data = [ 'apples', 'oranges' ]\n * const data2 = [ 'oranges', 'pears' ]\n * const unique = [...unique([data,data2]];\n * // Yields: [ 'apples', 'oranges', 'pears' ]\n * ```\n *\n * Uses object reference to compare values.\n * Use {@link uniqueByValue} if this doesn't suffice.\n * @param iterable Iterable, or array of iterables\n */\nexport function* unique<V>(\n  iterable: Iterable<V> | Array<Iterable<V>>\n) {\n  // Adapted from https://surma.github.io/underdash/\n  const buffer: Array<any> = [];\n  let itera: Array<Iterable<V>> = [];\n  itera = Array.isArray(iterable) ? iterable : [ iterable ];\n  for (const it of itera) {\n    for (const v of it) {\n      if (buffer.includes(v)) continue;\n      buffer.push(v);\n      yield v;\n    }\n  }\n}\n\n/**\n * Combine same-positioned items from several iterables\n * ```js\n * zip( [1, 2, 3], [4, 5, 6], [7, 8, 9] );\n * Yields: [ [1, 4, 7], [2, 5, 8], [3, 6, 9] ]\n * ```\n * @param its\n * @returns\n */\n//eslint-disable-next-line func-style\nexport function* zip<V>(...its: ReadonlyArray<Iterable<V>>) {\n  // https://surma.github.io/underdash/\n  const iits = its.map((it) => it[ Symbol.iterator ]());\n\n  while (true) {\n    const vs = iits.map((it) => it.next());\n    if (vs.some((v) => v.done)) return;\n    yield vs.map((v) => v.value as V);\n  }\n}\n","import { numberTest, throwFromResult } from './Guards.js';\nexport * as IterableAsync from './generators/IterableAsync.js';\n\n\nexport type ArrayLengthMutationKeys = `splice` | `push` | `pop` | `shift` | `unshift` | number\nexport type ArrayItems<T extends Array<any>> = T extends Array<infer TItems> ? TItems : never\nexport type FixedLengthArray<T extends Array<any>> =\n  Pick<T, Exclude<keyof T, ArrayLengthMutationKeys>>\n  & { [ Symbol.iterator ]: () => IterableIterator<ArrayItems<T>> }\n\nexport const isFunction = (object: unknown): object is (...args: Array<any>) => any => object instanceof Function;\n\n/**\n * Returns _true_ if `value` is a plain object\n * \n * ```js\n * isPlainObject(`text`); // false\n * isPlainObject(document); // false\n * isPlainObject({ hello: `there` }); // true\n * ```\n * @param value \n * @returns \n */\nexport const isPlainObject = (value: unknown) => {\n  if (typeof value !== `object` || value === null) return false;\n  const prototype = Object.getPrototypeOf(value);\n  return (prototype === null || prototype === Object.prototype || Object.getPrototypeOf(prototype) === null) && !(Symbol.toStringTag in value) && !(Symbol.iterator in value);\n}\n\n/**\n * Returns _true_ if `value` is an integer. Parses string input, but\n * all other data types return _false_.\n * \n * ```js\n * isInteger(1);      // true\n * isInteger(1.1);    // false\n * isInteger(`1`);    // true\n * isInteger(`1.1`);  // false\n * isInteger(true);   // false\n * isInteger(false);  // false\n * ```\n * \n * Returns _false_ for _undefined_, NaN, booleans and infinite numbers.\n * @param value \n * @returns \n */\nexport const isInteger = (value: string | number) => {\n  if (value === undefined) return false;\n  if (typeof value === `string`) {\n    const v = Number.parseInt(value);\n    if (Number.isNaN(v)) return false;\n    if (v.toString() === value.toString()) return true;\n    return false;\n  }\n  if (typeof value === `number`) {\n    if (Number.isNaN(value)) return false;\n    if (!Number.isFinite(value)) return false;\n    if (Math.round(value) === value) return true;\n    return false;\n  }\n  return false;\n}\n\n/**\n * Returns _true_ if `value` is primitive value or plain object\n * @param value \n * @returns \n */\nexport const isPlainObjectOrPrimitive = (value: unknown) => {\n  const t = typeof value;\n  if (t === `symbol`) return false;\n  if (t === `function`) return false;\n  if (t === `bigint`) return true;\n  if (t === `number`) return true;\n  if (t === `string`) return true;\n  if (t === `boolean`) return true;\n  return isPlainObject(value);\n}\n/**\n * Returns `fallback` if `v` is NaN, otherwise returns `v`.\n *\n * Throws if `v` is not a number type.\n * @param v\n * @param fallback\n * @returns\n */\nexport const ifNaN = (v: number, fallback: number): number => {\n  // ✔️ Unit tested\n\n  if (Number.isNaN(v)) return fallback;\n  if (typeof v !== `number`) {\n    throw new TypeError(`v is not a number. Got: ${ typeof v }`);\n  }\n  return v;\n};\n\n\n/**\n * Returns true if `x` is a power of two\n * @param x\n * @returns True if `x` is a power of two\n */\nexport const isPowerOfTwo = (x: number) => Math.log2(x) % 1 === 0;\n\n/**\n * Returns the relative difference from the `initial` value\n * ```js\n * const rel = relativeDifference(100);\n * rel(100); // 1\n * rel(150); // 1.5\n * rel(50);  // 0.5\n * ```\n *\n * The code for this is simple:\n * ```js\n * const relativeDifference = (initial) => (v) => v/initial\n * ```\n * @param {number} initial\n * @returns\n */\nexport const relativeDifference = (initial: number) => (v: number) =>\n  v / initial;\n\n/**\n * Rounds `v` up to the nearest multiple of `multiple`\n * ```\n * roundMultiple(19, 20); // 20\n * roundMultiple(21, 20); // 40\n * ```\n * @param v\n * @param multiple\n * @returns\n */\nexport const roundUpToMultiple = (v: number, multiple: number): number => {\n  throwFromResult(numberTest(v, `nonZero`, `v`));\n  throwFromResult(numberTest(multiple, `nonZero`, `multiple`));\n  return Math.ceil(v / multiple) * multiple;\n};\n\nexport type ToString<V> = (itemToMakeStringFor: V) => string;\n\n// Via Vuejs\n// eslint-disable-next-line @typescript-eslint/unbound-method\nconst objectToString = Object.prototype.toString\nconst toTypeString = (value: unknown): string =>\n  objectToString.call(value)\nexport const isMap = (value: unknown): value is Map<any, any> =>\n  toTypeString(value) === `[object Map]`\nexport const isSet = (value: unknown): value is Set<any> =>\n  toTypeString(value) === `[object Set]`\n\n/**\n * A default converter to string that uses JSON.stringify if its an object, or the thing itself if it's a string\n */\nexport const toStringDefault = <V>(itemToMakeStringFor: V): string =>\n  typeof itemToMakeStringFor === `string`\n    ? itemToMakeStringFor\n    : JSON.stringify(itemToMakeStringFor);\n\n//eslint-disable-next-line functional/functional-parameters\nexport const runningiOS = () =>\n  [\n    `iPad Simulator`,\n    `iPhone Simulator`,\n    `iPod Simulator`,\n    `iPad`,\n    `iPhone`,\n    `iPod`,\n  ].includes(navigator.platform) ||\n  // iPad on iOS 13 detection\n  (navigator.userAgent.includes(`Mac`) && `ontouchend` in document);\n\nexport type CompareResult = number; // 0 | 1 | -1;\nexport type Comparer<V> = (a: V, b: V) => CompareResult;\n\n/**\n * Sort numbers in ascending order.\n *\n * ```js\n * [10, 4, 5, 0].sort(numericComparer);\n * // Yields: [0, 4, 5, 10]\n * [10, 4, 5, 0].sort(comparerInverse(numericComparer));\n * // Yields: [ 10, 5, 4, 0]\n * ```\n * @param x\n * @param y\n * @returns\n */\nexport const numericComparer = (x: number, y: number): CompareResult => {\n  // ✔️ Unit tested\n  if (x === y) return 0;\n  if (x > y) return 1;\n  return -1;\n};\n\n// /**\n//  * Sorts numbers in descending order\n//  * @param x\n//  * @param y\n//  * @returns\n//  */\n// export const numericComparerInverse = (x: number, y: number): CompareResult => {\n//   // ✔️ Unit tested\n//   if (x === y) return 0;\n//   if (x > y) return -1;\n//   return 1;\n// };\n\n/**\n * Default sort comparer, following same sematics as Array.sort.\n * Consider using {@link defaultComparer} to get more logical sorting of numbers.\n *\n * Note: numbers are sorted in alphabetical order, eg:\n * ```js\n * [ 10, 20, 5, 100 ].sort(jsComparer); // same as .sort()\n * // Yields: [10, 100, 20, 5]\n * ```\n * @param x\n * @param y\n * @returns\n */\n//eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport const jsComparer = (x: any, y: any): CompareResult => {\n  // ✔️ Unit tested\n\n  // Via https://stackoverflow.com/questions/47334234/how-to-implement-array-prototype-sort-default-compare-function\n  if (x === undefined && y === undefined) return 0;\n  if (x === undefined) return 1;\n  if (y === undefined) return -1;\n\n  const xString = defaultToString(x);\n  const yString = defaultToString(y);\n\n  if (xString < yString) return -1;\n  if (xString > yString) return 1;\n  return 0;\n};\n\n// export const jsComparerInverse = (x: any, y: any): CompareResult =>\n//   jsComparer(x, y) * -1;\n\n/**\n * Compares numbers by numeric value, otherwise uses the default\n * logic of string comparison.\n *\n * Is an ascending sort:\n *  b, a, c -> a, b, c\n *  10, 5, 100 -> 5, 10, 100\n * @param x\n * @param y\n * @see {@link comparerInverse} Inverted order\n * @returns\n */\n//eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport const defaultComparer = (x: any, y: any): CompareResult => {\n  if (typeof x === `number` && typeof y === `number`) {\n    return numericComparer(x, y);\n  }\n  return jsComparer(x, y);\n};\n\n// /**\n//  * Compares numbers by numeric value, otherwise uses the default\n//  * logic of string comparison.\n//  *\n//  * Is an descending sort:\n//  *  b, a, c -> c, a, b\n//  *  10, 5, 100 -> 100, 10, 5\n//  * @param x\n//  * @param y\n//  * @returns\n//  * @see {@link defaultComparer} Asending\n//  */\n// export const defaultComparerInverse = (x: any, y: any): CompareResult => {\n//   if (typeof x === `number` && typeof y === `number`) {\n//     return numericComparerInverse(x, y);\n//   }\n//   return jsComparerInverse(x, y);\n// };\n\n/**\n * Inverts the source comparer.\n * @param fn\n * @returns\n */\nexport const comparerInverse = <V>(comparer: Comparer<V>): Comparer<V> => {\n  return (x: V, y: V) => {\n    const v = comparer(x, y);\n    return v * -1;\n  };\n};\n\n/**\n * If values are strings, uses that as the key.\n * Otherwise uses `JSON.stringify`.\n * @param a\n * @returns\n */\nexport const defaultKeyer = <V>(a: V) => {\n  return typeof a === `string` ? a : JSON.stringify(a);\n};\n\n//eslint-disable-next-line @typescript-eslint/no-explicit-any\nconst defaultToString = (object: any): string => {\n  //ECMA specification: http://www.ecma-international.org/ecma-262/6.0/#sec-tostring\n  if (object === null) return `null`;\n  if (typeof object === `boolean` || typeof object === `number`) {\n    return object.toString();\n  }\n\n  if (typeof object === `string`) return object;\n  if (typeof object === `symbol`) throw new TypeError(`Symbol cannot be converted to string`);\n  return JSON.stringify(object);\n};\n\n// try {\n//   if (typeof window !== `undefined`) {\n//     //eslint-disable-next-line functional/immutable-data,@typescript-eslint/no-explicit-any\n//     (window as any).ixfx = {\n//       //eslint-disable-next-line @typescript-eslint/no-explicit-any\n//       ...(window as any).ixfx,\n//       getFieldByPath,\n//       getFieldPaths,\n//     };\n//   }\n// } catch {\n//   /* no-op */\n// }\n\n","/**\n * Returns a section from an iterable\n * @param it Iterable\n * @param start Start index\n * @param end End index (or until completion)\n */\n//eslint-disable-next-line func-style\nexport function* slice<V>(\n  it: Iterable<V>,\n  start = 0,\n  end = Number.POSITIVE_INFINITY\n) {\n  // https://surma.github.io/underdash/\n  const iit = it[ Symbol.iterator ]();\n\n  for (; start > 0; start--, end--) iit.next();\n\n  for (const v of it) {\n    if (end-- > 0) {\n      yield v;\n    } else {\n      break;\n    }\n  }\n}\n","/* eslint-disable @typescript-eslint/require-await */\n/* eslint-disable unicorn/prefer-ternary */\nimport { Async } from \"../index.js\";\nimport { Elapsed } from \"../../flow/index.js\";\nimport { intervalToMs, type Interval } from \"../../flow/IntervalType.js\";\nimport { sleep } from \"../../flow/Sleep.js\";\nimport { Queues } from \"../../collections/index.js\";\nimport { resolveToAsyncGen, resolveToGen } from \"./Util.js\";\nimport type { Link, GenFactoryNoInput, LazyChain, GenOrData, LinksWithSource, Gen, TickOptions, DelayOptions, RankArrayOptions, RankFunction, RankOptions } from \"./Types.js\";\nimport * as L from './Links.js';\nexport * as Dom from './Dom.js';\nexport * as Links from './Links.js';\n\nfunction isNoInput<Out>(c: Link<any, any>): c is GenFactoryNoInput<Out> {\n  if (`_allowNoInput` in c) return true;\n  return false;\n}\n\nexport function lazy<In, Out>(): LazyChain<In, Out> {\n  const chained: Array<Link<any, any>> = [];\n  let dataToUse: GenOrData<In> | undefined;\n\n  const asGenerator = <V>(data?: GenOrData<In>) => {\n    if (data === undefined) data = dataToUse;\n    let d = resolveToAsyncGen(data);\n    for (const c of chained) {\n      if (d === undefined) {\n        if (isNoInput<In>(c)) {\n          d = c();\n        } else {\n          throw new Error(`Function '${ getLinkName(c) }' requires input. Provide it to the function, or call 'input' earlier.`)\n        }\n      } else {\n        d = c(d);\n      }\n    }\n    return d as AsyncGenerator<V>\n  }\n\n  const w: LazyChain<In, Out> = {\n    rankArray: (r: RankFunction<In>, options: Partial<RankArrayOptions>): LazyChain<In, Out> => {\n      chained.push(L.rankArray(r, options));\n      return w;\n    },\n    rank: (r: RankFunction<In>, options: Partial<RankOptions>): LazyChain<In, Out> => {\n      chained.push(L.rank(r, options));\n      return w;\n    },\n    transform: (transformer: (v: any) => any) => {\n      chained.push(L.transform(transformer));\n      return w;\n    },\n    flatten: (flattener: (values: Array<any>) => any) => {\n      chained.push(L.flatten(flattener));\n      return w;\n    },\n    drop: (predicate: (v: In) => boolean) => {\n      chained.push(L.drop(predicate));\n      return w;\n    },\n    delay: (options: DelayOptions) => {\n      chained.push(L.delay(options));\n      return w;\n    },\n    duration: (elapsed: Interval) => {\n      chained.push(L.duration(elapsed));\n      return w;\n    },\n    debounce: (rate: Interval) => {\n      chained.push(L.debounce(rate));\n      return w;\n    },\n    fromFunction: (callback: () => any) => {\n      chained.push(fromFunction(callback));\n      return w;\n    },\n    take: (limit: number) => {\n      chained.push(L.take(limit));\n      return w;\n    },\n    chunk: (size: number, returnRemainders = true) => {\n      chained.push(L.chunk(size, returnRemainders))\n      return w;\n    },\n    filter: (predicate: (input: any) => boolean) => {\n      chained.push(L.filter(v => predicate(v)));\n      return w;\n    },\n    min: (): LazyChain<any, number> => {\n      chained.push(L.min());\n      return w as unknown as LazyChain<any, number>;\n    },\n    max: (): LazyChain<any, number> => {\n      chained.push(L.max());\n      return w as unknown as LazyChain<any, number>;\n    },\n    average: (): LazyChain<any, number> => {\n      chained.push(L.average());\n      return w as unknown as LazyChain<any, number>;\n    },\n    total: (): LazyChain<any, number> => {\n      chained.push(L.total());\n      return w as unknown as LazyChain<any, number>;\n    },\n    tally: (): LazyChain<any, number> => {\n      chained.push(L.tally());\n      return w as unknown as LazyChain<any, number>;\n    },\n    input(data: GenOrData<In>) {\n      dataToUse = data;\n      return w\n    },\n    asGenerator,\n    asAsync(data?: GenOrData<In>) {\n      let d = data ?? dataToUse;\n      for (const c of chained) {\n        if (d === undefined && isNoInput<In>(c)) {\n          d = c();\n        } else if (d === undefined) {\n          throw new Error(`Function '${ getLinkName(c) }' needs input. Pass in data calling 'asAsync', or call 'input' earlier`);\n        } else {\n          d = c(d);\n        }\n      }\n      return w;\n    },\n    asArray: async (data?: GenOrData<In>): Promise<Array<Out>> => {\n      const g = asGenerator<Out>(data);\n      return await Async.toArray<Out>(g);\n    },\n    firstOutput: async (data?: GenOrData<In>): Promise<Out | undefined> => {\n      const g = asGenerator<Out>(data);\n      const v = await g.next();\n      return v.value as Out;\n    },\n    lastOutput: async (data?: GenOrData<In>): Promise<Out | undefined> => {\n      const g = asGenerator<Out>(data);\n      let lastValue: Out | undefined;\n      for await (const v of g) {\n        lastValue = v as Out;\n      }\n      return lastValue;\n    },\n  }\n  return w as unknown as LazyChain<In, Out>;\n}\n\n/**\n * Generate timestamp values at `interval` rate. By default it runs forever. \n * Use `loops` or `elapsed` to set upper limit on how long it should run.\n * \n * Options:\n * - `asClockTime`: If _true_, yielded value will be clock time rather than elapsed milliseconds\n * @param options \n * @returns \n */\nexport function tick(options: TickOptions): GenFactoryNoInput<number> {\n  const intervalMs = intervalToMs(options.interval, 0);\n  const asClockTime = options.asClockTime ?? false;\n  const loops = options.loops ?? Number.MAX_SAFE_INTEGER;\n  let looped = 0;\n  const durationTime = intervalToMs(options.elapsed, Number.MAX_SAFE_INTEGER);\n\n  async function* ts(): AsyncGenerator<number> {\n    const elapsed = Elapsed.since();\n    while (looped < loops && elapsed() < durationTime) {\n      yield asClockTime ? Date.now() : elapsed();\n\n      // Adjust sleep period so timing errors don't accumulate\n      const expectedTimeDiff = (looped * intervalMs) - elapsed();\n      await sleep(Math.max(0, intervalMs + expectedTimeDiff));\n      looped++;\n    }\n  }\n  ts._name = `timestamp`;\n  return ts;\n}\n\n/**\n * Produce a value from a callback. When\n * the callback returns _undefined_ it is considered done.\n * \n * ```js\n * const callback = () => Math.random();\n * \n * const f = Chains.fromFunction(callback);\n * f(); // New random number\n * ```\n * \n * In the context of a chain:\n * ```js\n * let produced = 0;\n * const chain = Chains.chain<number, string>(\n *  // Produce incrementing numbers\n *  Chains.fromFunction(() => produced++),\n *  // Convert to `x:0`, `x:1` ...\n *  Chains.transform(v => `x:${ v }`),\n *  // Take first 5 results\n *  Chains.cap(5)\n * );\n * const data = await Chains.asArray(chain);\n * ```\n * @param callback \n * @returns \n */\nexport function fromFunction<Out>(callback: () => Promise<Out> | Out): GenFactoryNoInput<Out> {\n  async function* fromFunction(): AsyncGenerator<Out> {\n    while (true) {\n      const v = await callback();\n      if (v === undefined) break;\n      yield v;\n    }\n  }\n  fromFunction._name = `fromFunction`;\n  return fromFunction;\n}\n\nconst oncePromise = (target: EventTarget, name: string): Promise<any> => {\n  return new Promise(resolve => {\n    const handler = (...args: Array<any>) => {\n      target.removeEventListener(name, handler);\n      resolve(args);\n    };\n    target.addEventListener(name, handler);\n  });\n};\n\nexport function fromEvent<Out>(target: EventTarget, name: string) {\n  async function* fromEvent(): AsyncGenerator<Out> {\n    while (true) {\n      yield await oncePromise(target, name) as Out;\n    }\n  }\n  fromEvent._name = `fromEvent`;\n  return fromEvent;\n}\n\n/**\n * Treats the chain/generator as a promise\n * \n * ```js\n * const ticker = asPromise(tick({ interval: 1000 }));\n * const x = await ticker(); //  Waits for 1000ms before giving a value\n * ```\n * \n * This will only ever return one value. To return multiple values, it's necessary\n * to call `asPromise` and `await` the result in a loop.\n * @param valueToWrap \n * @returns \n */\nexport function asPromise<V>(valueToWrap: AsyncGenerator<V> | GenFactoryNoInput<V>) {\n  let lastValue: V | undefined;\n\n  const outputType = (typeof valueToWrap === `function`) ? valueToWrap() : valueToWrap;\n\n  async function asPromise(): Promise<V | undefined> {\n    const v = await outputType.next();\n    if (v.done) return;\n    lastValue = v.value;\n    return lastValue;\n  }\n  return asPromise;\n}\n\n/**\n * Returns the most recent value from the chain/generator, or\n * `initialValue` (defaulting to _undefined_) if no value\n * has been emitted yet.\n * \n * ```js\n * const ticker = asValue(tick({ interval: 1000 }));\n * x = ticker(); // Get the most recent value\n * ```\n * \n * Every time it's called, it fetches a new value from the generator, assuming\n * it isn't already awaiting a result.\n * \n * In the meantime, the last value (or `initialValue`) is returned.\n * @param valueToWrap Value to wrap\n * @param initialValue Initial value\n * @returns \n */\nexport function asValue<V>(valueToWrap: AsyncGenerator<V> | GenFactoryNoInput<V>, initialValue?: V) {\n  let lastValue: V | undefined = initialValue;\n  let awaiting = false;\n  const outputType = (typeof valueToWrap === `function`) ? valueToWrap() : valueToWrap;\n\n  function asValue(): V | undefined {\n    if (!awaiting) {\n      awaiting = true;\n      outputType.next().then(v => {\n        lastValue = v.value;\n        awaiting = false;\n      }).catch(error => {\n        awaiting = false;\n        throw error;\n      });\n    }\n    return lastValue;\n  }\n  return asValue;\n}\n\n/**\n * Calls `callback` whenever the chain/generator produces a value.\n * \n * When using `asCallback`, call it with `await` to let generator run its course before continuing:\n * ```js\n * await asCallback(tick({ interval:1000, loops:5 }), x => {\n *  // Gets called 5 times, with 1000ms interval\n * });\n * console.log(`Hi`); // Prints after 5 seconds\n * ```\n * \n * Or if you skip the `await`, code continues and callback will still run:\n * ```js\n * asCallback(tick({ interval: 1000, loops: 5}), x => {\n *  // Gets called 5 times, with 1000ms interval\n * });\n * console.log(`Hi`); // Prints immediately\n * ```\n * @param valueToWrap \n * @param callback \n */\nexport async function asCallback<V>(valueToWrap: GenOrData<V> | GenFactoryNoInput<V>, callback: (v: V) => unknown, onDone?: () => void) {\n  const outputType = (typeof valueToWrap === `function`) ? valueToWrap() : valueToWrap;\n  for await (const value of outputType) {\n    callback(value);\n  }\n  if (onDone) onDone();\n}\n\n\n/**\n * Async function that returns the chain as an array of values\n * ```js\n * const values = await asArray(tick( { interval: 1000, loops: 5 }));\n * // After 5 seconds, values will be a set of timestamps.\n * ```\n * @param valueToWrap \n * @returns \n */\nexport async function asArray<Out>(valueToWrap: AsyncGenerator<Out> | GenFactoryNoInput<Out>): Promise<Array<Out>> {\n  const outputType = (typeof valueToWrap === `function`) ? valueToWrap() : valueToWrap;\n  return Async.toArray(outputType);\n}\n\n/**\n * Adds values to the provided array as they are produced,\n * mutating array.\n * \n * ```js\n * const data = [];\n * addToArray(data, tick({ interval: 1000, loops: 5 }));\n * // Execution continues immediately, with `data` mutated over time\n * ```\n * @param valueToWrap \n * @param array \n */\nexport async function addToArray<Out>(array: Array<Out>, valueToWrap: AsyncGenerator<Out> | GenFactoryNoInput<Out>) {\n  const outputType = (typeof valueToWrap === `function`) ? valueToWrap() : valueToWrap;\n  for await (const value of outputType) {\n    array.push(value);\n  }\n}\n\n/**\n * Input a single value to the chain, return a single result\n * @param f \n * @param input \n * @returns \n */\nexport async function single<In, Out>(f: Link<In, Out>, input: In): Promise<Out | undefined> {\n  const iterator = await f([ input ]).next();\n  return iterator.value as Out | undefined;\n}\n\n/**\n * Merge values from several sources into one stream, interleaving values.\n * When all streams are complete it finishes.\n * \n * Alternatively:\n * - {@link mergeAsArray} emits snapshots of all the generators, as quickly as the fastest one\n * - {@link synchronise} which releases a set of results when all inputs have emitted a value\n * @param sources \n */\nexport async function* mergeFlat<Out>(...sources: Array<GenOrData<any> | GenFactoryNoInput<any>>): AsyncGenerator<Out> {\n  const sourcesInput = sources.map(source => resolveToAsyncGen(source));\n  const buffer = Queues.mutable<Out>();\n  let completed = 0;\n\n  const schedule = async (source: AsyncGenerator<any> | undefined) => {\n    if (source === undefined) {\n      completed++;\n      return;\n    }\n\n    const x = await source.next();\n    if (x.done) {\n      completed++;\n    } else {\n      buffer.enqueue(x.value as Out);\n      // eslint-disable-next-line @typescript-eslint/no-misused-promises\n      setTimeout(() => schedule(source), 1);\n    }\n  }\n\n  for (const source of sourcesInput) {\n    // eslint-disable-next-line @typescript-eslint/no-misused-promises\n    setTimeout(() => schedule(source), 1);\n  }\n\n  const loopSpeed = 10;\n  let loopFactor = 1;\n  while (completed < sourcesInput.length) {\n    const d = buffer.dequeue();\n    if (d === undefined) {\n      // Grow loop factor up to 10\n      loopFactor = Math.min(loopFactor + 1, 10);\n    } else {\n      yield d;\n      // Reset loop factor\n      loopFactor = 1;\n    }\n    await sleep(loopSpeed * loopFactor);\n  }\n}\n\n/**\n * Generate values for each source, returning results as an array.  \n * If a source finishes before another, null will be used at its position in the results.\n * Use {@link synchronise} instead to only release results when all sources have yielded a value.\n * \n * Finishes when all generators finish.\n * \n * Alternatively:\n * - {@link mergeFlat} interleaves streams as single values\n * - {@link synchronise} only return results when all sourcse have yielded a value\n * @param sources \n */\nexport async function* mergeAsArray(...sources: Array<GenOrData<any> | GenFactoryNoInput<any>>): AsyncGenerator<Array<any>> {\n  const sourcesInput = sources.map(source => resolveToGen(source));\n  let somethingProduced = true;\n  while (somethingProduced) {\n    let data = [];\n    for (let index = 0; index < sourcesInput.length; index++) {\n      // eslint-disable-next-line unicorn/no-null\n      data[ index ] = null;\n    }\n\n    somethingProduced = false;\n    // Request the next value from each source\n    for (const [ index, source ] of sourcesInput.entries()) {\n      const v = await source.next();\n      if (!v.done) {\n        data[ index ] = v.value;\n        somethingProduced = true;\n      }\n    }\n    if (somethingProduced) {\n      // Send data\n      yield data;\n      data = [];\n    }\n  }\n}\n\n/**\n * Synchronise several sources, releasing a set of results when every\n * source has produced something. Finishes as soon as _any_ source finishes.\n * \n * ie. the rate of emitting data is determined by the slowest source.\n * \n * Alternatively:\n * - {@link mergeFlat} interleaves streams as single values\n * - {@link mergeAsArray} emits snapshots of all the generators, as quickly as the fastest one\n * @param sources \n */\nexport async function* synchronise(...sources: Array<GenOrData<any> | GenFactoryNoInput<any>>): AsyncGenerator<Array<any>> {\n  const sourcesInput = sources.map(source => resolveToGen(source));\n  let somethingStopped = false;\n  while (!somethingStopped) {\n    let data = [];\n    for (let index = 0; index < sourcesInput.length; index++) {\n      // eslint-disable-next-line unicorn/no-null\n      data[ index ] = null;\n    }\n\n    somethingStopped = false;\n    // Request the next value from each source\n    for (const [ index, source ] of sourcesInput.entries()) {\n      const v = await source.next();\n      if (v.done) {\n        somethingStopped = true;\n        break;\n      } else {\n        data[ index ] = v.value;\n      }\n    }\n\n    if (somethingStopped) break;\n    yield data;\n    data = [];\n  }\n}\n\nconst getLinkName = (c: Link<any, any>): string => {\n  if (`_name` in c) {\n    return c._name as string;\n  } else {\n    return c.name;\n  }\n}\n\n/**\n * Chain functions together. First argument is the source.\n * `runN` takes any number of chain functions. Use {@link run} if\n * possible, because it has improved type hinting.\n * \n * @example Process an array of strings. Transforming into\n * integers, and then filtering only even numbers.\n * ```js\n * const ch = Chains.runN(\n *  [ `1`, `2`, `3`, `4`, `5`, `6`, `7`, `8`, `9`, `10` ],\n *  Chains.transform<string, number>(v => Number.parseInt(v)),\n *  Chains.filter(v => v % 2 === 0)\n *);\n * const output = await Async.toArray(ch2);\n * // [ 2, 4, 6, 8, 10 ]\n * ```\n * @param functions \n * @returns \n */\nexport async function* runN<In, Out>(...functions: LinksWithSource<In, Out>): AsyncGenerator<Out> {\n  let input: Gen<In> | undefined;\n  for (const fnOrData of functions) {\n    if (typeof fnOrData === `function`) {\n      input = fnOrData(input ?? []);\n    } else {\n      input = resolveToGen(fnOrData);\n    }\n  }\n  if (input === undefined) return;\n  for await (const v of input) {\n    yield v as Out;\n  }\n}\n\nexport function run<T1>(gen: GenOrData<T1> | GenFactoryNoInput<T1>): AsyncGenerator<T1>;\nexport function run<T1, T2>(gen: GenOrData<T1> | GenFactoryNoInput<T1>, l0: Link<T1, T2>): AsyncGenerator<T2>;\nexport function run<T1, T2, T3>(gen: GenOrData<T1> | GenFactoryNoInput<T1>, l0: Link<T1, T2>, l1: Link<T2, T3>): AsyncGenerator<T3>;\nexport function run<T1, T2, T3, T4>(gen: GenOrData<T1> | GenFactoryNoInput<T1>, l0: Link<T1, T2>, l1: Link<T2, T3>, l2: Link<T3, T4>): AsyncGenerator<T4>;\nexport function run<T1, T2, T3, T4, T5>(gen: GenOrData<T1> | GenFactoryNoInput<T1>, l0: Link<T1, T2>, l1: Link<T2, T3>, l2: Link<T3, T4>, l3: Link<T4, T5>): AsyncGenerator<T5>;\nexport function run<T1, T2, T3, T4, T5, T6>(gen: GenOrData<T1> | GenFactoryNoInput<T1>, l0: Link<T1, T2>, l1: Link<T2, T3>, l2: Link<T3, T4>, l3: Link<T4, T5>, l4: Link<T5, T6>): AsyncGenerator<T6>;\nexport function run<T1, T2, T3, T4, T5, T6, T7>(gen: GenOrData<T1> | GenFactoryNoInput<T1>, l0: Link<T1, T2>, l1: Link<T2, T3>, l2: Link<T3, T4>, l3: Link<T4, T5>, l4: Link<T5, T6>, l5: Link<T6, T7>): AsyncGenerator<T7>;\n\n/**\n * Chain functions together. First argument is the source.\n * Use {@link runN} if you want to chain more links than is possible here,\n * at the cost of poorer type hinting.\n * \n * @example Process an array of strings. Transforming into\n * integers, and then filtering only even numbers.\n * ```js\n * const ch = Chains.run(\n *  [ `1`, `2`, `3`, `4`, `5`, `6`, `7`, `8`, `9`, `10` ],\n *  Chains.transform(v => Number.parseInt(v)),\n *  Chains.filter(v => v % 2 === 0)\n *);\n * const output = await Async.toArray(ch2);\n * // [ 2, 4, 6, 8, 10 ]\n * ```\n * @param gen \n * @param l0 \n * @param l1 \n * @param l2 \n * @param l3 \n * @returns \n */\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nexport async function* run<T1, T2, T3, T4, T5, T6, T7>(gen: GenOrData<T1> | GenFactoryNoInput<T1>, l0?: Link<T1, T2>, l1?: Link<T2, T3>, l2?: Link<T3, T4>, l3?: Link<T4, T5>, l4?: Link<T5, T6>, l5?: Link<T6, T7>): AsyncGenerator<T1> {\n  let input: Gen<any> | undefined;\n  // eslint-disable-next-line prefer-rest-params\n  const functions = arguments;\n  for (const fnOrData of functions) {\n    if (typeof fnOrData === `function`) {\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-call\n      input = fnOrData(input ?? []);\n    } else {\n      input = resolveToGen(fnOrData);\n    }\n  }\n  if (input === undefined) return;\n  for await (const v of input) {\n    yield v;\n  }\n}\n\n\n/**\n * Prepare a chain, allowing you to provide a source at execution time.\n * ```js\n * const chain = Chains.prepare(\n *  Chains.transform<string,number>( v => number.parseInt(v) ),\n *  Chains.filter<number>(v => v % 2 === 0)\n * );\n *\n * // Run it with provided source\n * for await (const v of chain([`1`, `2`, `3`])) {\n *\n * }\n * ```\n * @param functions\n * @returns\n */\n// export function prepare<In, Out>(...functions: Links<In, Out>) {\n//   const r = (source: GenOrData<In> | GenFactoryNoInput<Out>) => {\n//     return run(source);\n//   }\n//   return r;\n// }\n","\nexport * as Elapsed from './Elapsed.js';\nexport * from './DispatchList.js';\n\nimport { throwNumberTest } from '../Guards.js';\nimport { sleep } from './Sleep.js';\n\nimport * as StateMachine from './StateMachine.js';\nimport * as Timer from './Timer.js';\nexport * from './Types.js';\n/**\n * State Machine\n * See [here for usage](../classes/Flow.StateMachine.StateMachine.html).\n *\n * * {@link StateMachine.driver}: Drive a state machine\n * * {@link StateMachine.init}: Create a state machine from initial state and machine description\n * * {@link fromList}: Create a state machine from a simple list of states\n */\nexport * as StateMachine from './StateMachine.js';\n\nexport * from './Timer.js';\n\nexport * from './Interval.js';\nexport * from './IntervalType.js';\nexport * from './Timeout.js';\nexport * from './UpdateOutdated.js';\nexport * from './Continuously.js';\nexport * from './Debounce.js';\nexport * from './Throttle.js';\nexport * from './Sleep.js';\nexport * from './WaitFor.js';\nexport * from './Delay.js';\nexport * from './Every.js';\nexport * from './RunOnce.js';\nexport * from './Retry.js';\nexport * from './Types.js';\n\nexport { TaskQueue } from './TaskQueue.js';\n\n\n\n/**\n * Iterates over `iterator` (iterable/array), calling `fn` for each value.\n * If `fn` returns _false_, iterator cancels.\n *\n * Over the default JS `forEach` function, this one allows you to exit the\n * iteration early.\n *\n * @example\n * ```js\n * forEach(count(5), () => console.log(`Hi`));  // Prints `Hi` 5x\n * forEach(count(5), i => console.log(i));      // Prints 0 1 2 3 4\n * forEach([0,1,2,3,4], i => console.log(i));   // Prints 0 1 2 3 4\n * ```\n *\n * Use {@link forEachAsync} if you want to use an async `iterator` and async `fn`.\n * @param iterator Iterable or array\n * @typeParam V Type of iterable\n * @param fn Function to call for each item. If function returns _false_, iteration cancels\n */\nexport const forEach = <V>(\n  iterator: IterableIterator<V> | ReadonlyArray<V>,\n  fn: (v?: V) => boolean\n) => {\n  for (const x of iterator) {\n    const r = fn(x);\n    if (typeof r === `boolean` && !r) break;\n  }\n};\n\n/**\n * Iterates over an async iterable or array, calling `fn` for each value, with optional\n * interval between each loop. If the async `fn` returns _false_, iterator cancels.\n *\n * Use {@link forEach} for a synchronous version.\n *\n * ```\n * // Prints items from array every second\n * await forEachAsync([0,1,2,3], i => console.log(i), 1000);\n * ```\n *\n * ```\n * // Retry up to five times, with 5 seconds between each attempt\n * await forEachAsync(count(5), i=> {\n *  try {\n *    await doSomething();\n *    return false; // Succeeded, exit early\n *  } catch (ex) {\n *    console.log(ex);\n *    return true; // Keep trying\n *  }\n * }, 5000);\n * ```\n * @param iterator Iterable thing to loop over\n * @param fn Function to invoke on each item. If it returns _false_ loop ends.\n * @typeParam V Type of iterable\n */\nexport const forEachAsync = async function <V>(\n  iterator: AsyncIterableIterator<V> | ReadonlyArray<V>,\n  fn: (v?: V) => Promise<boolean> | Promise<void>,\n  intervalMs?: number\n) {\n  if (Array.isArray(iterator)) {\n    // Handle array\n    for (const x of iterator) {\n      const r = await fn(x);\n      if (intervalMs) await sleep(intervalMs);\n      if (typeof r === `boolean` && !r) break;\n    }\n  } else {\n    // Handle an async iterator\n    for await (const x of iterator) {\n      const r = await fn(x);\n      if (intervalMs) await sleep(intervalMs);\n      if (typeof r === `boolean` && !r) break;\n    }\n  }\n};\n\nexport type RepeatPredicate = (\n  repeats: number,\n  valuesProduced: number\n) => boolean;\n/**\n * Runs `fn` a certain number of times, yielding results.\n * If `fn` returns undefined, the result is ignored, but loop continues.\n *\n * ```js\n * // Results will be an array with five random numbers\n * const results = [...repeat(5, () => Math.random())];\n *\n * // Or as an generator (note also the simpler expression form)\n * for (const result of repeat(5, Math.random)) {\n * }\n * ```\n *\n * Repeats can be specified as an integer (eg. 5 for five repeats), or a function\n * that gives _false_ when repeating should stop.\n *\n * ```js\n * // Keep running `fn` until we've accumulated 10 values\n * // Useful if `fn` sometimes returns _undefined_\n * const results = repeat((repeats, valuesProduced) => valuesProduced < 10, fn);\n * ```\n *\n * If you don't need to accumulate return values, consider {@link Generators.count | Generators.count} with {@link Flow.forEach | Flow.forEach}.\n * If you want to have a waiting period between each repetition, consider {@link Flow.interval}.\n * @param countOrPredicate Number of repeats or function returning false when to stop\n * @param fn Function to run, must return a value to accumulate into array or _undefined_\n * @returns Yields results, one at a time\n */\nexport function* repeat<V>(\n  countOrPredicate: number | RepeatPredicate,\n  fn: (repeats: number, valuesProduced: number) => V | undefined\n) {\n  // Unit tested: expected return array length\n  //eslint-disable-next-line functional/no-let\n  let repeats, valuesProduced;\n  repeats = valuesProduced = 0;\n\n  if (typeof countOrPredicate === `number`) {\n    throwNumberTest(countOrPredicate, `positive`, `countOrPredicate`);\n    while (countOrPredicate-- > 0) {\n      repeats++;\n      const v = fn(repeats, valuesProduced);\n      if (v === undefined) continue;\n      yield v;\n      valuesProduced++;\n    }\n  } else if (typeof countOrPredicate === `function`) {\n    while (countOrPredicate(repeats, valuesProduced)) {\n      repeats++;\n      const v = fn(repeats, valuesProduced);\n      if (v === undefined) continue;\n      yield v;\n      valuesProduced++;\n    }\n  } else {\n    throw new TypeError(\n      `countOrPredicate should be a number or function. Got: ${ typeof countOrPredicate }`\n    );\n  }\n}\n\n/**\n * Repeatedly calls `fn`, reducing via `reduce`.\n *\n * ```js\n * repeatReduce(10, () => 1, (acc, v) => acc + v);\n * // Yields: 10\n *\n * // Multiplies random values against each other 10 times\n * repeatReduce(10, Math.random, (acc, v) => acc * v);\n * // Yields a single number\n * ```\n * @param countOrPredicate\n * @param fn\n * @param initial\n * @param reduce\n * @returns\n */\nexport const repeatReduce = <V>(\n  countOrPredicate: number | RepeatPredicate,\n  fn: () => V | undefined,\n  initial: V,\n  reduce: (accumulator: V, value: V) => V\n): V => {\n  if (typeof countOrPredicate === `number`) {\n    throwNumberTest(countOrPredicate, `positive`, `countOrPredicate`);\n    while (countOrPredicate-- > 0) {\n      const v = fn();\n      if (v === undefined) continue;\n      initial = reduce(initial, v);\n    }\n  } else {\n    //eslint-disable-next-line functional/no-let\n    let repeats, valuesProduced;\n    repeats = valuesProduced = 0;\n    while (countOrPredicate(repeats, valuesProduced)) {\n      repeats++;\n      const v = fn();\n      if (v === undefined) continue;\n      initial = reduce(initial, v);\n      valuesProduced++;\n    }\n  }\n  return initial;\n};\n\ntry {\n  if (typeof window !== `undefined`) {\n    //eslint-disable-next-line functional/immutable-data,@typescript-eslint/no-explicit-any\n    (window as any).ixfx = {\n      ...(window as any).ixfx,\n      Flow: { StateMachine, Timer, forEach, forEachAsync, repeat },\n    };\n  }\n} catch {\n  /* no-op */\n}\n\n","import { round } from '../numbers/Round.js';\nimport { intervalToMs, type Interval } from './IntervalType.js';\nimport { msElapsedTimer, relativeTimer } from './Timer.js';\n\nexport type Since = () => number;\n\n/**\n * Returns elapsed time since initial call.\n * ```js\n * // Record start\n * const elapsed = Elapsed.since();\n *\n * // Get elapsed time in millis\n * elapsed(); // Yields number\n * ```\n *\n * If you want to initialise a elapsed timer, but not yet start it, consider:\n * ```js\n * // Init\n * let state = {\n *  clicked: Elapsed.infinity()\n * };\n *\n * state.click(); // Returns a giant value\n *\n * // Later, when click happens:\n * state = { click: Elapsed.since() }\n * ```\n *\n * Use {@link once} if you want to measure a single period, and stop it.\n * @returns\n */\nexport const since = (): Since => {\n  const start = performance.now();\n  return (): number => {\n    return performance.now() - start;\n  };\n};\n\n/**\n * Returns elapsed time since initial call, however\n * timer stops when first invoked.\n *\n * ```js\n * const elapsed = Elapsed.once();\n * // ...do stuff\n * elapsed(); // Yields time since Elapsed.once() was called\n * // ...do more stuff\n * elapsed(); // Is still the same number as above\n * ```\n *\n * Use {@link since} to not have this stopping behaviour.\n * @returns\n */\nexport const once = (): Since => {\n  const start = Date.now();\n  //eslint-disable-next-line functional/no-let\n  let stoppedAt = 0;\n  return (): number => {\n    if (stoppedAt === 0) {\n      stoppedAt = Date.now() - start;\n    }\n    return stoppedAt;\n  };\n};\n/**\n * Returns a function that reports an 'infinite' elapsed time.\n * this can be useful as an initialiser for `elapsedSince`.\n *\n * ```js\n * // Init clicked to be an infinite time\n * let clicked = Elapsed.infinity();\n *\n * document.addEventListener('click', () => {\n *  // Now that click has happened, we can assign it properly\n *  clicked = Elapsed.since();\n * });\n * ```\n * @returns\n */\nexport const infinity = (): Since => {\n  return (): number => {\n    return Number.POSITIVE_INFINITY;\n  };\n};\n\n/**\n * Returns a function that returns the percentage of timer completion.\n * Starts timing immediately.\n *\n * ```js\n * const timer = Elapsed.progress(1000);\n * timer(); // Returns 0..1\n * ```\n *\n * Note that timer can exceed 1 (100%). To cap it:\n * ```js\n * Elapsed.progress(1000, { clampValue: true });\n * ```\n *\n * Takes an {@link Interval} for more expressive time:\n * ```js\n * const timer = Elapsed.progress({ mins: 4 });\n * ```\n * See also {@link hasElapsed}.\n * @param duration\n * @returns\n */\nexport function progress(\n  duration: Interval,\n  opts: { readonly clampValue?: boolean, readonly wrapValue?: boolean } = {}\n): () => number {\n  const totalMs = intervalToMs(duration);\n  if (!totalMs) throw new Error(`duration invalid`);\n  const timerOpts = {\n    ...opts,\n    timer: msElapsedTimer(),\n  };\n  const t = relativeTimer(totalMs, timerOpts);\n  return () => t.elapsed;\n}\n\nexport const toString = (millisOrFunction: number | Since | Interval, rounding = 2): string => {\n  //eslint-disable-next-line functional/no-let\n  let interval: number | undefined = {} = 0;\n  if (typeof millisOrFunction === `function`) {\n    const intervalResult = millisOrFunction();\n    return toString(intervalResult);\n  } else if (typeof millisOrFunction === `number`) {\n    interval = millisOrFunction;\n  } else if (typeof millisOrFunction === `object`) {\n    interval = intervalToMs(interval);\n  }\n\n  //eslint-disable-next-line functional/no-let\n  let ms = intervalToMs(interval);\n  if (typeof ms === `undefined`) return `(undefined)`;\n  if (ms < 1000) return `${ round(rounding, ms) }ms`;\n  ms /= 1000;\n  if (ms < 120) return `${ ms.toFixed(1) }secs`;\n  ms /= 60;\n  if (ms < 60) return `${ ms.toFixed(2) }mins`;\n  ms /= 60;\n  return `${ ms.toFixed(2) }hrs`;\n};\n","import { throwFromResult, integerTest } from \"../Guards.js\";\n\nexport function round(decimalPlaces: number, v: number): number;\nexport function round(decimalPlaces: number): (v: number) => number;\n\n/**\n * Rounds a number.\n *\n * If one parameter is given, it's the decimal places,\n * and a rounding function is returned:\n * ```js\n * const r = round(2);\n * r(10.12355); // 10.12\n * ```\n *\n * If two parameters are given, the first is decimal places,\n * the second the value to round.\n * ```js\n * round(2, 10.12355); // 10.12\n * ```\n * @param decimalPlaces\n * @returns\n */\nexport function round(a: number, b?: number) {\n  throwFromResult(integerTest(a, `positive`, `decimalPlaces`));\n\n  //eslint-disable-next-line functional/no-let\n  let rounder;\n  if (a === 0) rounder = Math.round;\n  else {\n    const p = Math.pow(10, a);\n    rounder = (v: number) => Math.floor(v * p) / p;\n  }\n\n  return b === undefined ? rounder : rounder(b);\n}","import { clamp } from '../data/Clamp.js';\nimport { intervalToMs, type Interval } from './index.js';\n\n/**\n * Creates a timer\n */\nexport type TimerSource = () => Timer;\n\n/**\n * A timer instance.\n * See {@link msElapsedTimer}, {@link ticksElapsedTimer}, {@link frequencyTimer}\n */\nexport type Timer = {\n  reset(): void\n  get elapsed(): number\n  get isDone(): boolean\n};\n\nexport type ModulationTimer = Timer & {\n  mod(amt: number): void;\n};\n\nexport type TimerOpts = {\n  /**\n   * Timer to use. By default {@link msElapsedTimer}.\n   */\n  readonly timer: Timer;\n};\n\n/**\n * Options for relative timer\n */\nexport type RelativeTimerOpts = TimerOpts & {\n  /**\n   * If true, returned value will be clamped to 0..1. False by default\n   */\n  readonly clampValue: boolean\n  readonly wrapValue: boolean\n};\n\n/**\n * A function that returns _true_ when an interval has elapsed\n *\n * ```js\n * const oneSecond = hasElapsed(1000);\n * oneSecond(); // Returns _true_ when timer is done\n * ```\n *\n * See also {@link Elapsed.progress}.\n * @param elapsed\n * @returns\n */\nexport function hasElapsed(elapsed: Interval): () => boolean {\n  const t = relativeTimer(intervalToMs(elapsed, 0), { timer: msElapsedTimer() });\n  return () => t.isDone;\n}\n\nexport const frequencyTimerSource =\n  (frequency: number): TimerSource =>\n    () =>\n      frequencyTimer(frequency, { timer: msElapsedTimer() });\n\n/**\n * Wraps a timer, returning a relative elapsed value based on\n * a given total. ie. percentage complete toward a total duration.\n * This is useful because other parts of code don't need to know\n * about the absolute time values, you get a nice relative completion number.\n *\n * If no timer is specified, milliseconds-based timer is used.\n *\n * ```js\n * const t = relativeTimer(1000);\n * t.elapsed;   // returns % completion (0...1)\n * ```\n * \n * Additional fields/methods on the timer:\n * ```js\n * t.isDone;  // _true_ if .elapsed has reached 1\n * t.reset(); // start from zero again\n * ```\n *\n * With options\n * ```js\n * // Total duration of 1000 ticks\n * const t = relativeTimer(1000, { timer: ticksElapsedTimer(); clampValue:true });\n * ```\n *\n * @private\n * @param total Total\n * @param opts Options\n * @returns Timer\n */\nexport const relativeTimer = (\n  total: number,\n  opts: Partial<RelativeTimerOpts> = {}\n): ModulationTimer => {\n\n  const clampValue = opts.clampValue ?? false;\n  const wrapValue = opts.wrapValue ?? false;\n  if (clampValue && wrapValue) throw new Error(`clampValue and wrapValue cannot both be enabled`);\n\n  let modulationAmount = 1;\n\n  // Create and starts timer\n  const timer = opts.timer ?? msElapsedTimer();\n\n  const computeElapsed = () => {\n    let v = timer.elapsed / (total * modulationAmount);\n    if (clampValue) v = clamp(v);\n    else if (wrapValue && v >= 1) v = v % 1;\n    return v;\n  }\n\n  return {\n    mod(amt: number) {\n      modulationAmount = amt;\n    },\n    get isDone() {\n      return computeElapsed() >= 1;\n    },\n    get elapsed() {\n      return computeElapsed();\n    },\n    reset: () => {\n      timer.reset();\n    }\n  };\n};\n\n/**\n * A timer based on frequency: cycles per unit of time. These timers return a number from\n * 0..1 indicating position with a cycle.\n *\n * In practice, timers are used to 'drive' something like an Oscillator.\n *\n * @example Init a spring oscillator, with a half a cycle per second\n * ```js\n * import { Oscillators } from \"https://unpkg.com/ixfx/dist/modulation.js\"\n * import { frequencyTimer } from \"https://unpkg.com/ixfx/dist/flow.js\"\n * Oscillators.spring({}, frequencyTimer(0.5));\n * ```\n *\n * By default it uses elapsed clock time as a basis for frequency. ie., cycles per second.\n *\n * It returns a `ModulationTimer`, which allows for a modulation amount to be continually applied\n * to the calculation of the 'position' within a cycle.\n *\n * @example Prints around 0/0.5 each second, as timer is half a cycle per second\n * ```js\n * import { frequencyTimer } from \"https://unpkg.com/ixfx/dist/flow.js\"\n * const t = frequencyTimer(0.5);\n * setInterval(() => {\n *  console.log(t.elapsed);\n * }, 1000);\n * ```\n * @param frequency\n * @param timer\n * @returns\n */\nexport const frequencyTimer = (\n  frequency: number,\n  opts: Partial<TimerOpts> = {}\n): ModulationTimer => {\n  const timer = opts.timer ?? msElapsedTimer();\n  const cyclesPerSecond = frequency / 1000;\n  let modulationAmount = 1;\n\n  const computeElapsed = () => {\n    // Get position in a cycle\n    const v = timer.elapsed * (cyclesPerSecond * modulationAmount);\n\n    // Get fractional part\n    const f = v - Math.floor(v);\n    if (f < 0) {\n      throw new Error(\n        `Unexpected cycle fraction less than 0. Elapsed: ${ v } f: ${ f }`\n      );\n    }\n    if (f > 1) {\n      throw new Error(\n        `Unexpected cycle fraction more than 1. Elapsed: ${ v } f: ${ f }`\n      );\n    }\n    return f;\n  }\n  return {\n    mod: (amt: number) => {\n      modulationAmount = amt;\n    },\n    reset: () => {\n      timer.reset();\n    },\n    get isDone() {\n      return computeElapsed() >= 1;\n    },\n    get elapsed() {\n      return computeElapsed();\n    },\n  };\n};\n\n/**\n * A timer that uses clock time. Start time is from the point of invocation.\n *\n * ```js\n * const t = msElapsedTimer();\n * t.reset(); // reset start\n * t.elapsed; // ms since start\n * ```\n * \n * Like other {@link Timer} functions, it returns a `isDone` property,\n * but this will always return _true_.\n * @returns {Timer}\n * @see {ticksElapsedTimer}\n */\nexport const msElapsedTimer = (): Timer => {\n  let start = performance.now();\n  return {\n    /**\n     * Reset timer\n     */\n    reset: () => {\n      start = performance.now();\n    },\n    /**\n     * Returns elapsed time since start\n     */\n    get elapsed() {\n      return performance.now() - start;\n    },\n    /**\n     * Always returns _true_\n     */\n    get isDone() {\n      return false;\n    }\n  };\n};\n\n/**\n * A timer that progresses with each call to `elapsed`.\n *\n * The first call to elapsed will return 1.\n *\n * ```js\n * const timer = ticksElapsedTimer();\n * timer.reset(); // Reset to 0\n * timer.elapsed; // Number of ticks (and also increment ticks)\n * ```\n * \n * Like other {@link Timer} functions, returns with a `isDone` field,\n * but this will always return _true_.\n * @returns {Timer}\n * @see {msElapsedTimer}\n */\nexport const ticksElapsedTimer = (): Timer => {\n  // eslint-disable-next-line functional/no-let\n  let start = 0;\n  return {\n    /**\n     * Reset ticks to 0. The next call to `elapsed` will return 1.\n     */\n    reset: () => {\n      start = 0;\n    },\n    /**\n     * Returns the number of elapsed ticks as well as\n     * incrementing the tick count. \n     * \n     * Minimum is 1\n     */\n    get elapsed() {\n      return ++start;\n    },\n    /**\n     * Always returns _true_\n     */\n    get isDone() {\n      return true;\n    }\n  };\n};\n","/**\n * Clamps a value between min and max (both inclusive)\n * Defaults to a 0-1 range, useful for percentages.\n *\n * @example Usage\n * ```js\n * // 0.5 - just fine, within default of 0 to 1\n * clamp(0.5);\n * // 1 - above default max of 1\n * clamp(1.5);\n * // 0 - below range\n * clamp(-50, 0, 100);\n * // 50 - within range\n * clamp(50, 0, 50);\n * ```\n *\n * For clamping integer ranges, consider {@link clampIndex }\n * For clamping `{ x, y }` points, consider {@link Geometry.Points.clamp | Geometry.Points.clamp}.\n * For clamping bipolar values: {@link Bipolar.clamp}\n * @param value Value to clamp\n * @param Minimum value (inclusive)\n * @param Maximum value (inclusive)\n * @returns Clamped value\n */\nexport const clamp = (value: number, min = 0, max = 1) => {\n  // ✔ UNIT TESTED\n  if (Number.isNaN(value)) throw new Error(`'value' parameter is NaN`);\n  if (Number.isNaN(min)) throw new Error(`'min' parameter is NaN`);\n  if (Number.isNaN(max)) throw new Error(`'max' parameter is NaN`);\n\n  if (value < min) return min;\n  if (value > max) return max;\n  return value;\n};\n\n/**\n * Clamps integer `v` between 0 (inclusive) and array length or length (exclusive).\n * Returns value then will always be at least zero, and a valid array index.\n *\n * @example Usage\n * ```js\n * // Array of length 4\n * const myArray = [`a`, `b`, `c`, `d`];\n * clampIndex(0, myArray);    // 0\n * clampIndex(4, myArray);    // 3\n * clampIndex(-1, myArray);   // 0\n *\n * clampIndex(5, 3); // 2\n * ```\n *\n * Throws an error if `v` is not an integer.\n *\n * For some data it makes sense that data might 'wrap around' if it exceeds the\n * range. For example rotation angle. Consider using {@link wrap} for this.\n *\n * @param v Value to clamp (must be an interger)\n * @param arrayOrLength Array, or length of bounds (must be an integer)\n * @returns Clamped value, minimum will be 0, maximum will be one less than `length`.\n */\n//eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport const clampIndex = (\n  v: number,\n  arrayOrLength: number | ReadonlyArray<any>\n): number => {\n  // ✔ UNIT TESTED\n  if (!Number.isInteger(v)) {\n    throw new TypeError(`v parameter must be an integer (${ v })`);\n  }\n  const length = Array.isArray(arrayOrLength)\n    ? arrayOrLength.length\n    : (arrayOrLength as number);\n\n  if (!Number.isInteger(length)) {\n    throw new TypeError(\n      `length parameter must be an integer (${ length }, ${ typeof length })`\n    );\n  }\n  v = Math.round(v);\n  if (v < 0) return 0;\n  if (v >= length) return length - 1;\n  return v;\n};\n","export type Dispatch<V> = (value: V) => void;\n\ntype Wrap<V> = {\n  readonly handler: Dispatch<V>\n  readonly id: string\n  readonly once: boolean\n}\n\nexport class DispatchList<V> {\n  #handlers: Array<Wrap<V>>\n  #counter = 0;\n  readonly #id = Math.floor(Math.random() * 100);\n  constructor() {\n\n    this.#handlers = [];\n  }\n\n  /**\n   * Returns _true_ if list is empty\n   * @returns \n   */\n  isEmpty() {\n    return this.#handlers.length === 0;\n  }\n\n  /**\n   * Adds a handler\n   * @param handler \n   * @param options \n   * @returns \n   */\n  add(handler: Dispatch<V>, options: { once?: boolean } = {}): string {\n    this.#counter++;\n    const once = options.once ?? false;\n    const wrap: Wrap<V> = {\n      id: this.#id + `-` + this.#counter,\n      handler,\n      once\n    }\n    this.#handlers.push(wrap);\n    return wrap.id;\n  }\n\n  remove(id: string): boolean {\n    const length = this.#handlers.length;\n    this.#handlers = this.#handlers.filter(handler => handler.id !== id);\n    return this.#handlers.length !== length;\n  }\n\n  notify(value: V) {\n    for (const handler of this.#handlers) {\n      handler.handler(value);\n      if (handler.once) {\n        this.remove(handler.id);\n      }\n    }\n  }\n\n  clear() {\n    this.#handlers = [];\n  }\n}","import { unique } from '../collections/arrays/index.js';\nimport {\n  StateMachineWithEvents,\n  type Opts,\n  type StateMachineEventMap,\n  type StopEvent,\n} from './StateMachineWithEvents.js';\nexport {\n  StateMachineWithEvents as WithEvents,\n  type Opts as StateMachineWithEventsOpts,\n  type StateMachineEventMap,\n  type StopEvent,\n};\n\n/**\n * State machine driver\n */\nexport { init as driver } from './StateMachineDriver.js';\nexport type {\n  DriverOpts,\n  StatesHandler as DriverHandler,\n  Runner,\n  ExpressionOrResult as DriverExpression,\n  Result as DriverResult,\n} from './StateMachineDriver.js';\n\n/**\n * Transition result\n * * 'Ok': transition valid\n * * 'FromNotFound': the from state is missing from machine definition\n * * 'ToNotFound': the 'to' state is missing from machine definition\n * * 'Invalid': not allowed to transition to target state from the current state\n * * 'Terminal':  not allowed to transition because from state is the final state\n */\nexport type TransitionResult =\n  | 'Ok'\n  | 'FromNotFound'\n  | 'ToNotFound'\n  | 'Invalid'\n  | 'Terminal';\n\nexport type TransitionCondition<V extends Transitions> = {\n  readonly hasPriorState: readonly StateNames<V>[];\n  readonly isInState: StateNames<V>;\n};\n\nexport type StateTargetStrict<V extends Transitions> = {\n  readonly state: StateNames<V> | null;\n  readonly preconditions?: readonly TransitionCondition<V>[];\n};\n\n/**\n * Possible state transitions, or _null_ if final state.\n */\n//export type StateTarget<V extends Transitions> = StateTargetExt<V> | null;\n\nexport type StateTarget<V extends Transitions> =\n  | string\n  //eslint-disable-next-line functional/prefer-readonly-type\n  | string[]\n  | readonly string[]\n  | null\n  | StateTargetStrict<V>;\n//eslint-disable-next-line functional/prefer-readonly-type\n// | StateTargetStrict<V>[]\n// | readonly StateTargetStrict<V>[];\n\n/**\n * Maps state to allowable next states\n */\nexport type Transitions = {\n  readonly [ key: string ]: StateTarget<Transitions>;\n};\n\nexport type TransitionsStrict = {\n  readonly [ key: string ]: readonly StateTargetStrict<Transitions>[];\n};\n/**\n * List of possible states\n */\nexport type StateNames<V extends Transitions> = keyof V & string;\n\nexport type Machine<V extends Transitions> = {\n  /**\n   * Allowable state transitions\n   */\n  readonly states: V;\n};\n\n/**\n * Encapsulation of a 'running' machine description and state.\n *\n * See:\n * - {@link cloneState}\n */\nexport type MachineState<V extends Transitions> = {\n  /**\n   * Current state\n   */\n  readonly value: StateNames<V>;\n  /**\n   * List of unique states visited. Won't contain the current\n   * state unless it has already been visited.\n   */\n  readonly visited: readonly StateNames<V>[];\n\n  //readonly machine: Machine<V>;\n  readonly machine: {\n    readonly [ key in StateNames<V> ]: readonly StateTargetStrict<V>[];\n  };\n};\n\n/**\n * Clones machine state\n * @param toClone\n * @returns Cloned of `toClone`\n */\nexport const cloneState = <V extends Transitions>(\n  toClone: MachineState<V>\n): MachineState<V> => {\n  return Object.freeze({\n    value: toClone.value,\n    visited: [ ...toClone.visited ],\n    machine: toClone.machine,\n  });\n};\n/**\n * Initialises a state machine\n * ```js\n * const desc = {\n *  pants: ['shoes','socks'],\n *  socks: ['shoes', 'pants'],\n *  shoes: 'shirt',\n *  shirt: null\n * }\n * // Defaults to first key, 'pants'\n * let sm = StateMachine.init(descr);\n * // Move to 'shoes' state\n * sm = StateMachine.to(sm, 'shoes');\n * sm.state; // 'shoes'\n * sm.visited; // [ 'pants' ]\n * StateMachineLight.done(sm); // false\n * StateMachineLight.possible(sm); // [ 'shirt' ]\n * ```\n * @param sm\n * @param initialState\n * @returns\n */\nexport const init = <V extends Transitions>(\n  stateMachine: Machine<V> | Transitions | TransitionsStrict,\n  initialState?: StateNames<V>\n): MachineState<V> => {\n  const [ machine, machineValidationError ] = validateMachine(stateMachine);\n  if (!machine) throw new Error(machineValidationError);\n\n  const state: StateNames<V> =\n    (initialState as StateNames<V>) ?? Object.keys(machine.states)[ 0 ];\n  if (typeof machine.states[ state ] === 'undefined') {\n    throw new Error(`Initial state not found`);\n  }\n\n  // Normalise states\n  const transitions = validateAndNormaliseTransitions(machine.states);\n  if (transitions === undefined) {\n    throw new Error(`Could not normalise transitions`);\n  }\n  // @ts-ignore\n  return Object.freeze({\n    value: state,\n    visited: [],\n    machine: Object.fromEntries(transitions),\n  });\n};\n\nexport const reset = <V extends Transitions>(\n  sm: MachineState<V>\n): MachineState<V> => {\n  // @ts-ignore\n  return init<V>(sm.machine);\n};\n\nexport const validateMachine = <V extends Transitions>(\n  smOrTransitions: Machine<V> | Transitions | TransitionsStrict\n): [ machine: Machine<V> | undefined, msg: string ] => {\n  if (typeof smOrTransitions === 'undefined') {\n    return [ undefined, 'Parameter undefined' ];\n  }\n  if (smOrTransitions === null) {\n    return [ undefined, 'Parameter null' ];\n  }\n  if (`states` in smOrTransitions) {\n    // Assume Machine type\n    return [ smOrTransitions as Machine<V>, '' ];\n  }\n  if (typeof smOrTransitions === `object`) {\n    return [\n      {\n        // @ts-ignore\n        states: smOrTransitions,\n      },\n      '',\n    ];\n  }\n  return [\n    undefined,\n    `Unexpected type: ${ typeof smOrTransitions }. Expected object`,\n  ];\n};\n\n// export const validateMachine = <V extends Transitions>(\n//   sm: Machine<V>\n// ): [machine: Machine<V> | undefined, msg: string] => {\n//   if (typeof sm === 'undefined') {\n//     return [undefined, `Parameter 'sm' is undefined`];\n//   }\n//   if (sm === null) return [undefined, `Parameter 'sm' is null`];\n//   if (`states` in sm) {\n//     const [transitions, validationError] = validateAndNormaliseTransitions(\n//       sm.states\n//     );\n//     if (transitions) {\n//       const machine: Machine<V> = {\n//         // @ts-ignore\n//         states: Object.fromEntries(transitions),\n//       };\n//       return [machine, ''];\n//     } else {\n//       return [undefined, validationError];\n//     }\n//   } else {\n//     return [undefined, `Parameter 'sm.states' is undefined`];\n//   }\n// };\n\n/**\n * Returns _true_ if `sm` is in its final state.\n * @param sm\n * @returns\n */\nexport const done = <V extends Transitions>(sm: MachineState<V>): boolean => {\n  return possible(sm).length === 0;\n};\n\n/**\n * Returns a list of possible state targets for `sm`, or\n * an empty list if no transitions are possible.\n * @param sm\n * @returns\n */\nexport const possibleTargets = <V extends Transitions>(\n  sm: MachineState<V>\n): readonly StateTargetStrict<V>[] => {\n  // Validate current state\n  validateMachineState(sm);\n  // get list of possible targets\n  const fromS = sm.machine[ sm.value ];\n\n  if (fromS.length === 1 && fromS[ 0 ].state === null) return [];\n  return fromS;\n};\n\n/**\n * Returns a list of possible state names for `sm`, or\n * an empty list if no transitions are possible.\n *\n * @param sm\n * @returns\n */\nexport const possible = <V extends Transitions>(\n  sm: MachineState<V>\n): (StateNames<V> | null)[] => {\n  const targets = possibleTargets(sm);\n  return targets.map((v) => v.state);\n};\n\nexport const normaliseTargets = <V extends Transitions>(\n  targets:\n    | StateTarget<V>\n    | readonly StateTargetStrict<V>[]\n    //eslint-disable-next-line functional/prefer-readonly-type\n    | StateTargetStrict<V>\n): StateTargetStrict<V>[] | null | undefined => {\n  const normaliseSingleTarget = (\n    target: string | undefined | null | object\n  ): StateTargetStrict<V> | undefined => {\n    // Terminal target\n    if (target === null) return { state: null };\n    // String is the target state\n    if (typeof target === 'string') {\n      return {\n        state: target,\n      };\n    } else if (typeof target === 'object' && 'state' in target) {\n      const targetState = target.state;\n      if (typeof targetState !== 'string') {\n        throw new Error(\n          `Target 'state' field is not a string. Got: ${ typeof targetState }`\n        );\n      }\n      if (`preconditions` in target) {\n        return {\n          state: targetState,\n          preconditions: target.preconditions as TransitionCondition<V>[],\n        };\n      }\n      return { state: targetState };\n    } else {\n      throw new Error(\n        `Unexpected type: ${ typeof target }. Expected string or object with 'state' field.`\n      );\n    }\n  };\n\n  // Array of targets (either strings or objects)\n  if (Array.isArray(targets)) {\n    //eslint-disable-next-line functional/no-let\n    let containsNull = false;\n    const mapResults = targets.map((t) => {\n      const r = normaliseSingleTarget(t);\n      if (!r) throw new Error(`Invalid target`);\n      containsNull = containsNull || r.state === null;\n      return r;\n    });\n    if (containsNull && mapResults.length > 1) {\n      throw new Error(`Cannot have null as an possible state`);\n    }\n    return mapResults;\n  } else {\n    const target = normaliseSingleTarget(targets);\n    if (!target) return;\n    return [ target ];\n  }\n};\n\nconst validateAndNormaliseTransitions = (\n  d: Transitions\n): Map<string, StateTargetStrict<typeof d>[]> | undefined => {\n  const returnMap = new Map<string, StateTargetStrict<typeof d>[]>();\n\n  // 1. Index top-level states\n  for (const [ topLevelState, topLevelTargets ] of Object.entries(d)) {\n    if (typeof topLevelState === `undefined`) {\n      throw new Error(`Top-level undefined state`);\n    }\n    if (typeof topLevelTargets === `undefined`) {\n      throw new Error(`Undefined target state for ${ topLevelState }`);\n    }\n    if (returnMap.has(topLevelState)) {\n      throw new Error(`State defined twice: ${ topLevelState }`);\n    }\n    if (topLevelState.includes(' ')) {\n      throw new Error('State names cannot contain spaces');\n    }\n    returnMap.set(topLevelState, []);\n  }\n\n  // 2. Normalise target\n  for (const [ topLevelState, topLevelTargets ] of Object.entries(d)) {\n    const targets = normaliseTargets(topLevelTargets);\n    if (targets === undefined) throw new Error(`Could not normalise target`);\n    if (targets !== null) {\n      // Check that they all exist as top-level states\n      const seenStates = new Set();\n      for (const target of targets) {\n        if (seenStates.has(target.state)) {\n          throw new Error(\n            `Target state '${ target.state }' already exists for '${ topLevelState }'`\n          );\n        }\n        seenStates.add(target.state);\n        if (target.state === null) continue;\n        if (!returnMap.has(target.state as string)) {\n          throw new Error(\n            `Target state '${ target.state }' is not defined as a top-level state. Defined under: '${ topLevelState }'`\n          );\n        }\n      }\n      returnMap.set(topLevelState, targets);\n    }\n  }\n  return returnMap;\n};\n\n/**\n * Validates machine state, throwing an exception if not valid\n * and returning `StateTargetStrict`\n * @param state\n * @returns\n */\nconst validateMachineState = <V extends Transitions>(\n  state: MachineState<V>\n): void => {\n  if (typeof state === 'undefined') {\n    throw new Error(`Parameter 'state' is undefined`);\n  }\n  if (typeof state.value !== 'string') {\n    throw new Error('Existing state is not a string');\n  }\n};\n\n/**\n * Attempts to transition to a new state. Either a new\n * `MachineState` is returned reflecting the change, or\n * an exception is thrown.\n * @param sm\n * @param toState\n * @returns\n */\nexport const to = <V extends Transitions>(\n  sm: MachineState<V>,\n  toState: StateNames<V>\n): MachineState<V> => {\n  validateMachineState(sm); // throws if not OK\n  validateTransition(sm, toState); // throws if not OK\n  return Object.freeze({\n    value: toState,\n    machine: sm.machine,\n    visited: unique<string>([ sm.visited as string[], [ sm.value ] as string[] ]),\n  });\n};\n\nexport const next = <V extends Transitions>(\n  sm: MachineState<V>\n): MachineState<V> => {\n  //validateMachineState(sm);\n  const first = possibleTargets(sm).at(0);\n  if (!first || first.state === null) {\n    throw new Error(\n      `Not possible to move to a next state from '${ sm.value as string }`\n    );\n  }\n  return to(sm, first.state);\n};\n\n/**\n * Returns _true_ if `toState` is a valid transition from current state of `sm`\n * @param sm\n * @param toState\n * @returns\n */\nexport const isValidTransition = <V extends Transitions>(\n  sm: MachineState<V>,\n  toState: StateNames<V>\n): boolean => {\n  try {\n    validateTransition(sm, toState);\n    return true;\n  } catch (ex) {\n    return false;\n  }\n};\n\nexport const validateTransition = <V extends Transitions>(\n  sm: MachineState<V>,\n  toState: StateNames<V>\n): void => {\n  if (toState === null) throw new Error(`Cannot transition to null state`);\n  if (toState === undefined) {\n    throw new Error(`Cannot transition to undefined state`);\n  }\n  if (typeof toState !== 'string') {\n    throw new Error(\n      `Parameter 'toState' should be a string. Got: ${ typeof toState }`\n    );\n  }\n\n  //const toS = sm.machine[toState];\n  //if (typeof toS === 'undefined') throw new Error(`Target state '${toState}' not defined`);\n\n  const p = possible(sm);\n  if (p.length === 0) throw new Error('Machine is in terminal state');\n  if (!p.includes(toState)) {\n    throw new Error(\n      `Target state '${ toState }' not available at current state '${ sm.value\n      }'. Possible states: ${ p.join(', ') }`\n    );\n  }\n};\n\n/**\n * Returns state transitions based on a list of strings.\n * The last string is the terminal state.\n *  A -> B -> C -> D\n *\n * ```js\n * const transitions = [`a`, `b`, `c`, `d`];\n * // Object state machine with events\n * const sm = new StateMachine.WithEvents(transitions);\n * // OR, immutable state machine\n * const sm = StateMachine.init(transitions);\n * ```\n * @param states List of states\n * @return MachineDescription\n */\nexport const fromList = (...states: readonly string[]): Transitions => {\n  const t = {};\n  if (!Array.isArray(states)) throw new Error(`Expected array of strings`);\n  if (states.length <= 2) throw new Error(`Expects at least two states`);\n  for (let i = 0; i < states.length; i++) {\n    const s = states[ i ];\n    if (typeof s !== `string`) {\n      throw new Error(\n        `Expected array of strings. Got type '${ typeof s }' at index ${ i }`\n      );\n    }\n    if (i === states.length - 1) {\n      /** @ts-ignore */\n      //eslint-disable-next-line functional/immutable-data\n      t[ s ] = null;\n    } else {\n      /** @ts-ignore */\n      //eslint-disable-next-line functional/immutable-data\n      t[ s ] = states[ i + 1 ];\n    }\n  }\n  return t;\n};\n\n/**\n * Returns a machine description based on a list of strings. Machine\n * can go back and forth between states:\n *  A <-> B <-> C <-> D\n * ```js\n * const transitions = [`a`, `b`, `c`, `d`];\n * // Object state machine with events\n * const sm = new StateMachine.WithEvents(transitions);\n * // OR, immutable state machine\n * const sm = StateMachine.init(transitions);\n * ```\n * @param states\n * @returns\n */\nexport const bidirectionalFromList = (\n  ...states: readonly string[]\n): Transitions => {\n  const t = {};\n  if (!Array.isArray(states)) throw new Error(`Expected array of strings`);\n  if (states.length < 2) throw new Error(`Expects at least two states`);\n\n  for (let i = 0; i < states.length; i++) {\n    const s = states[ i ];\n    if (typeof s !== `string`) {\n      throw new Error(\n        `Expected array of strings. Got type '${ typeof s }' at index ${ i }`\n      );\n    }\n\n    /** @ts-ignore */\n    //eslint-disable-next-line functional/immutable-data\n    t[ s ] = [];\n  }\n\n  for (let i = 0; i < states.length; i++) {\n    /** @ts-ignore */\n    const v = t[ states[ i ] ] as string[];\n    if (i === states.length - 1) {\n      if (states.length > 1) {\n        //eslint-disable-next-line functional/immutable-data\n        v.push(states[ i - 1 ]);\n      } else {\n        /** @ts-ignore */\n        //eslint-disable-next-line functional/immutable-data\n        t[ states[ i ] ] = null;\n      }\n    } else {\n      //eslint-disable-next-line functional/immutable-data\n      v.push(states[ i + 1 ]);\n      //eslint-disable-next-line functional/immutable-data\n      if (i > 0) v.push(states[ i - 1 ]);\n    }\n  }\n  return t;\n};\n","/* eslint-disable indent */\n/**\n * Functions for working with primitive arrays, regardless of type\n * See Also: NumericArrays.ts\n */\n\nimport { throwIntegerTest } from '../../Guards.js';\nimport {\n  type ToString,\n  toStringDefault,\n} from '../../Util.js';\nimport {\n  type IsEqual,\n  isEqualDefault\n} from '../../IsEqual.js'\nimport { fromIterable as mapFromIterable } from '../map/MapFns.js';\nimport { type RandomSource, defaultRandom } from '../../random/Types.js';\nimport { weightedIndex } from '../../random/WeightedIndex.js';\nimport { guardArray } from '../GuardArray.js';\nimport { guardIndex } from '../GuardIndex.js';\nimport { valuesEqual } from './ValuesEqual.js';\nexport * from './NumericArrays.js';\nexport * from '../ArrayCycle.js';\nexport * from '../FilterBetween.js';\nexport * from '../GuardArray.js';\nexport * from '../GuardIndex.js';\nexport * from './AverageWeighted.js';\nexport * from './NumericArrays.js';\nexport * from './Zip.js';\nexport * from './ValuesEqual.js';\nexport * from './SortByNumericProperty.js';\nexport { compareValues, compareValuesEqual } from '../Iterables.js';\n\n\n/**\n * Returns the _intersection_ of two arrays: the elements that are in common.\n * \n * ```js\n * intersection([1, 2, 3], [2, 4, 6]);\n// returns [2]\n * ```\n * See also: \n * * {@link unique}: Unique set of items amongst one or more arrays\n * @param arrayA \n * @param arrayB \n * @param equality \n * @returns \n */\nexport const intersection = <V>(\n  arrayA: ReadonlyArray<V> | Array<V>,\n  arrayB: ReadonlyArray<V> | Array<V>,\n  equality: IsEqual<V> = isEqualDefault\n) => arrayA.filter((valueFromA) => arrayB.some((valueFromB) => equality(valueFromA, valueFromB)));\n\n/**\n * Returns a 'flattened' copy of array, un-nesting arrays one level\n * ```js\n * flatten([1, [2, 3], [[4]] ]);\n * // Yields: [ 1, 2, 3, [4]];\n * ```\n * @param array\n * @returns\n */\nexport const flatten = (array: ReadonlyArray<any> | Array<any>): Array<any> =>\n  [ ...array ].flat();\n\n\n\n/**\n * Returns an interleaving of two or more arrays. All arrays must be the same length.\n *\n * ```js\n * import { interleave } from 'https://unpkg.com/ixfx/dist/arrays.js';\n *\n * const a = [`a`, `b`, `c`];\n * const b = [`1`, `2`, `3`];\n * const c = interleave(a, b);\n * // Yields:\n * // [`a`, `1`, `b`, `2`, `c`, `3`]\n * ```\n * @param arrays\n * @returns\n */\nexport const interleave = <V>(\n  ...arrays: ReadonlyArray<ReadonlyArray<V>> | Array<Array<V>>\n): Array<V> => {\n  if (arrays.some((a) => !Array.isArray(a))) {\n    throw new Error(`All parameters must be an array`);\n  }\n  const lengths = arrays.map((a) => a.length);\n  if (!valuesEqual(lengths)) {\n    throw new Error(`Arrays must be of same length`);\n  }\n\n  const returnValue = [];\n  const length = lengths[ 0 ];\n  //eslint-disable-next-line functional/no-let\n  for (let index = 0; index < length; index++) {\n    //eslint-disable-next-line functional/no-let\n    for (const array of arrays) {\n      //eslint-disable-next-line functional/immutable-data\n      returnValue.push(array[ index ]);\n    }\n  }\n  return returnValue;\n};\n\n/**\n * Returns a copy of `data` with specified length.\n * If the input array is too long, it is truncated.\n *\n * If the input array is too short, it will be expanded based on the `expand` strategy:\n *  - 'undefined': fill with `undefined`\n *  - 'repeat': repeat array elements, starting from position 0\n *  - 'first': repeat with first element from `data`\n *  - 'last': repeat with last element from `data`\n *\n * ```js\n * import { ensureLength } from 'https://unpkg.com/ixfx/dist/arrays.js';\n *\n * ensureLength([1,2,3], 2); // [1,2]\n * ensureLength([1,2,3], 5, `undefined`); // [1,2,3,undefined,undefined]\n * ensureLength([1,2,3], 5, `repeat`);    // [1,2,3,1,2]\n * ensureLength([1,2,3], 5, `first`);     // [1,2,3,1,1]\n * ensureLength([1,2,3], 5, `last`);      // [1,2,3,3,3]\n * ```\n * @param data Input array to expand\n * @param length Desired length\n * @param expand Expand strategy\n * @typeParam V Type of array\n */\nexport const ensureLength = <V>(\n  data: ReadonlyArray<V> | Array<V>,\n  length: number,\n  expand: `undefined` | `repeat` | `first` | `last` = `undefined`\n): Array<V> => {\n  // Unit tested\n  if (data === undefined) throw new Error(`Data undefined`);\n  if (!Array.isArray(data)) throw new Error(`data is not an array`);\n  if (data.length === length) return [ ...data ];\n  if (data.length > length) {\n    return data.slice(0, length);\n  }\n  const d = [ ...data ];\n  const add = length - d.length;\n\n  //eslint-disable-next-line functional/no-let\n  for (let index = 0; index < add; index++) {\n    //eslint-disable-next-line functional/immutable-data\n    switch (expand) {\n      case `undefined`: {\n        // @ts-expect-error\n        d.push(undefined);\n        break;\n      }\n      case `repeat`: {\n        d.push(data[ index % data.length ]);\n        break;\n      }\n      case `first`: {\n        d.push(data[ 0 ]);\n        break;\n      }\n      case `last`: {\n        // @ts-expect-error\n        d.push(data.at(-1));\n        break;\n      }\n      // No default\n    }\n  }\n  return d;\n};\n\n\n\n/**\n * Returns a random array index.\n *\n * ```js\n * import { randomIndex } from 'https://unpkg.com/ixfx/dist/arrays.js';\n *\n * const v = [`blue`, `red`, `orange`];\n * randomIndex(v); // Yields 0, 1 or 2\n * ```\n *\n * Use {@link randomElement} if you want a value from `array`, not index.\n *\n * @param array Array\n * @param rand Random generator. `Math.random` by default.\n * @returns\n */\nexport const randomIndex = <V>(\n  array: ArrayLike<V>,\n  rand: RandomSource = defaultRandom\n): number => Math.floor(rand() * array.length);\n\n/**\n * Selects a random array index, biased by the provided `weightings`.\n * \n * In the below example, `a` will be picked 20% of the time, `b` 50% and so on.\n * ```js\n * const data =    [  `a`,  `b`,  `c`,  `d` ]\n * const weights = [ 0.2,  0.5,  0.1,  0.2 ] \n * ```\n * @param array \n * @param weightings \n * @param randomSource \n */\nexport const randomElementWeightedSource = <V>(array: ArrayLike<V>, weightings: Array<number>, randomSource: RandomSource = defaultRandom) => {\n  if (array.length !== weightings.length) throw new Error(`Lengths of 'array' and 'weightings' should be the same.`);\n  const r = weightedIndex(weightings, randomSource);\n  return (): V => {\n    const index = r();\n    return array[ index ];\n  }\n}\n\n\n\n\n/**\n * Returns random element.\n *\n * ```js\n * import { randomElement } from 'https://unpkg.com/ixfx/dist/arrays.js';\n *\n * const v = [`blue`, `red`, `orange`];\n * randomElement(v); // Yields `blue`, `red` or `orange`\n * ```\n *\n * Use {@link randomIndex} if you want a random index within `array`.\n *\n * @param array\n * @params rand Random generator. `Math.random` by default.\n * @returns\n */\nexport const randomElement = <V>(\n  array: ArrayLike<V>,\n  rand: RandomSource = defaultRandom\n): V => {\n  guardArray(array, `array`);\n  return array[ Math.floor(rand() * array.length) ];\n};\n\n/**\n * Removes a random item from an array, returning both the item and the new array as a result.\n * Does not modify the original array unless `mutate` parameter is true.\n *\n * @example Without changing source\n * ```js\n * import { randomPluck } from 'https://unpkg.com/ixfx/dist/arrays.js';\n *\n * const data = [100, 20, 40];\n * const {value, array} = randomPluck(data);\n * // value: 20, array: [100, 40], data: [100, 20, 40];\n * ```\n *\n * @example Mutating source\n * ```js\n * import { randomPluck } from 'https://unpkg.com/ixfx/dist/arrays.js';\n *\n * const data = [100, 20, 40];\n * const {value} = randomPluck(data, true);\n * // value: 20, data: [100, 40];\n * ```\n *\n * @template V Type of array\n * @param array Array to pluck item from\n * @param mutate If _true_, changes input array. _False_ by default.\n * @param random Random generatr. `Math.random` by default.\n * @return Returns an object `{value:V|undefined, array:V[]}`\n *\n */\nexport const randomPluck = <V>(\n  array: ReadonlyArray<V> | Array<V>,\n  mutate = false,\n  rand: RandomSource = defaultRandom\n): { readonly value: V | undefined; readonly array: Array<V> } => {\n  if (array === undefined) throw new Error(`array is undefined`);\n  if (!Array.isArray(array)) throw new Error(`'array' param is not an array`);\n  if (array.length === 0) return { value: undefined, array: [] };\n  const index = randomIndex(array, rand);\n  if (mutate) {\n    return {\n      value: array[ index ],\n      //eslint-disable-next-line functional/immutable-data\n      array: array.splice(index, 1),\n    };\n  } else {\n    // Copy array, remove item from that\n    const t = [ ...array ];\n    //eslint-disable-next-line functional/immutable-data\n    t.splice(index, 1);\n    return {\n      value: array[ index ],\n      array: t,\n    };\n  }\n};\n\n/**\n * Returns a shuffled copy of the input array.\n * @example\n * ```js\n * import { shuffle } from 'https://unpkg.com/ixfx/dist/arrays.js';\n *\n * const d = [1, 2, 3, 4];\n * const s = shuffle(d);\n * // d: [1, 2, 3, 4], s: [3, 1, 2, 4]\n * ```\n * @param dataToShuffle\n * @param rand Random generator. `Math.random` by default.\n * @returns Copy with items moved around randomly\n * @template V Type of array items\n */\nexport const shuffle = <V>(\n  dataToShuffle: ReadonlyArray<V>,\n  rand: RandomSource = defaultRandom\n): Array<V> => {\n  const array = [ ...dataToShuffle ];\n  // eslint-disable-next-line  functional/no-let\n  for (let index = array.length - 1; index > 0; index--) {\n    const index_ = Math.floor(rand() * (index + 1));\n    [ array[ index ], array[ index_ ] ] = [ array[ index_ ], array[ index ] ];\n  }\n  return array;\n};\n\n\n\n/**\n * Returns an array with value(s) omitted. If value is not found, result will be a copy of input.\n * Value checking is completed via the provided `comparer` function.\n * By default checking whether `a === b`. To compare based on value, use the `isEqualValueDefault` comparer.\n *\n * @example\n * ```js\n * import { without } from 'https://unpkg.com/ixfx/dist/arrays.js';\n *\n * const data = [100, 20, 40];\n * const filtered = without(data, 20); // [100, 40]\n * ```\n *\n * @example Using value-based comparison\n * ```js\n * import { without } from 'https://unpkg.com/ixfx/dist/arrays.js';\n *\n * const data = [{name: `Alice`}, {name:`Sam`}];\n *\n * // This wouldn't work as expected, because the default comparer uses instance,\n * // not value:\n * without(data, {name: `Alice`});\n *\n * // So instead we can use a value comparer:\n * without(data, {name:`Alice`}, isEqualValueDefault);\n * ```\n *\n * @example Use a function\n * ```js\n * import { without } from 'https://unpkg.com/ixfx/dist/arrays.js';\n *\n * const data = [{name: `Alice`}, {name:`Sam`}];\n * without(data, {name:`ALICE`}, (a, b) => {\n *  return (a.name.toLowerCase() === b.name.toLowerCase());\n * });\n * ```\n *\n * Consider {@link remove} to remove an item by index.\n *\n * @template V Type of array items\n * @param sourceArray Source array\n * @param toRemove Value(s) to remove\n * @param comparer Comparison function. If not provided `Util.isEqualDefault` is used, which compares using `===`\n * @return Copy of array without value.\n */\nexport const without = <V>(\n  //eslint-disable-next-line functional/prefer-readonly-type\n  sourceArray: ReadonlyArray<V> | Array<V>,\n  toRemove: V | Array<V>,\n  comparer: IsEqual<V> = isEqualDefault\n): Array<V> => {\n  if (Array.isArray(toRemove)) {\n    const returnArray = []\n    for (const source of sourceArray) {\n      if (!toRemove.some(v => comparer(source, v))) {\n        returnArray.push(source);\n      }\n    }\n    return returnArray;\n  } else {\n    return sourceArray.filter((v) => !comparer(v, toRemove));\n  }\n}\n\nexport const withoutUndefined = <V>(data: ReadonlyArray<V> | Array<V>): Array<V> => {\n  return data.filter(v => v !== undefined);\n}\n/**\n * Returns all items in `data` for as long as `predicate` returns true.\n *\n * `predicate` returns an array of `[stop:boolean, acc:A]`. The first value\n * is _true_ when the iteration should stop, and the `acc` is the accumulated value.\n * This allows `until` to be used to carry over some state from item to item.\n *\n * @example Stop when we hit an item with value of 3\n * ```js\n * const v = Arrays.until([1,2,3,4,5], v => [v === 3, 0]);\n * // [ 1, 2 ]\n * ```\n *\n * @example Stop when we reach a total\n * ```js\n * // Stop when accumulated value reaches 6\n * const v = Arrays.until[1,2,3,4,5], (v, acc) => [acc >= 7, v+acc], 0);\n * // [1, 2, 3]\n * ```\n * @param data\n * @param predicate\n * @returns\n */\nexport const until = <V, A>(\n  //eslint-disable-next-line functional/prefer-readonly-type\n  data: ReadonlyArray<V> | Array<V>,\n  predicate: (v: V, accumulator: A) => readonly [ stop: boolean, acc: A ],\n  initial: A\n): Array<V> => {\n  const returnValue = [];\n  //eslint-disable-next-line functional/no-let\n  let total = initial;\n  //eslint-disable-next-line functional/no-let\n  for (const datum of data) {\n    const [ stop, accumulator ] = predicate(datum, total);\n    if (stop) break;\n\n    total = accumulator;\n\n    //eslint-disable-next-line functional/immutable-data\n    returnValue.push(datum);\n  }\n  return returnValue;\n};\n\n/**\n * Removes an element at `index` index from `data`, returning the resulting array without modifying the original.\n *\n * ```js\n * import { remove } from 'https://unpkg.com/ixfx/dist/arrays.js';\n *\n * const v = [ 100, 20, 50 ];\n * const vv = remove(2);\n *\n * Yields:\n *  v: [ 100, 20, 50 ]\n * vv: [ 100, 20 ]\n * ```\n *\n * Consider {@link without} if you want to remove an item by value.\n *\n * Throws an exception if `index` is outside the range of `data` array.\n * @param data Input array\n * @param index Index to remove\n * @typeParam V Type of array\n * @returns\n */\nexport const remove = <V>(\n  //eslint-disable-next-line functional/prefer-readonly-type\n  data: ReadonlyArray<V> | Array<V>,\n  index: number\n): Array<V> => {\n  // ✔️ Unit tested\n  if (!Array.isArray(data)) {\n    throw new TypeError(`'data' parameter should be an array`);\n  }\n  guardIndex(data, index, `index`);\n  return [ ...data.slice(0, index), ...data.slice(index + 1) ];\n};\n\n/**\n * Groups data by a function `grouper`, returning data as a map with string\n * keys and array values. Multiple values can be assigned to the same group.\n *\n * `grouper` must yield a string designated group for a given item.\n *\n * @example\n * ```js\n * import { groupBy } from 'https://unpkg.com/ixfx/dist/arrays.js';\n *\n * const data = [\n *  { age: 39, city: `London` }\n *  { age: 14, city: `Copenhagen` }\n *  { age: 23, city: `Stockholm` }\n *  { age: 56, city: `London` }\n * ];\n *\n * // Whatever the function returns will be the designated group\n * // for an item\n * const map = groupBy(data, item => data.city);\n * ```\n *\n * This yields a Map with keys London, Stockholm and Copenhagen, and the corresponding values.\n *\n * ```\n * London: [{ age: 39, city: `London` }, { age: 56, city: `London` }]\n * Stockhom: [{ age: 23, city: `Stockholm` }]\n * Copenhagen: [{ age: 14, city: `Copenhagen` }]\n * ```\n * @param array Array to group\n * @param grouper Function that returns a key for a given item\n * @typeParam K Type of key to group by. Typically string.\n * @typeParam V Type of values\n * @returns Map\n */\nexport const groupBy = <K, V>(\n  //eslint-disable-next-line functional/prefer-readonly-type\n  array: Iterable<V>,\n  grouper: (item: V) => K\n) => {\n  const map = new Map<K, Array<V>>();\n\n  for (const a of array) {\n    const key = grouper(a);\n    //eslint-disable-next-line functional/no-let\n    let existing = map.get(key);\n    if (!existing) {\n      existing = [];\n      map.set(key, existing);\n    }\n    //eslint-disable-next-line functional/immutable-data\n    existing.push(a);\n  }\n  return map;\n};\n\n/**\n * Samples array\n *\n * @example By percentage - get half of the items\n * ```\n * import { sample } from 'https://unpkg.com/ixfx/dist/arrays.js';\n *\n * const list = [1,2,3,4,5,6,7,8,9,10];\n * const sub = sample(list, 0.5);\n * // Yields: [2, 4, 6, 8, 10]\n * ```\n *\n * @example By steps - every third\n * ```\n * import { sample } from 'https://unpkg.com/ixfx/dist/arrays.js';\n *\n * const list = [1,2,3,4,5,6,7,8,9,10];\n * const sub = sample(list, 3);\n * // Yields:\n * // [3, 6, 9]\n * ```\n * @param array Array to sample\n * @param amount Amount, given as a percentage (0..1) or the number of interval (ie 3 for every third item)\n * @returns\n */\nexport const sample = <V>(array: ArrayLike<V>, amount: number): Array<V> => {\n  //eslint-disable-next-line functional/no-let\n  let subsampleSteps = 1;\n  if (amount <= 1) {\n    // Subsample based on a percentage\n    const numberOfItems = array.length * amount;\n    subsampleSteps = Math.round(array.length / numberOfItems);\n  } else {\n    subsampleSteps = amount;\n  }\n\n  throwIntegerTest(subsampleSteps, `positive`, `amount`);\n  if (subsampleSteps > array.length - 1) {\n    throw new Error(`Subsample steps exceeds array length`);\n  }\n  const r: Array<V> = [];\n\n  //eslint-disable-next-line functional/no-let\n  for (let index = subsampleSteps - 1; index < array.length; index += subsampleSteps) {\n    //eslint-disable-next-line functional/immutable-data\n    r.push(array[ index ]);\n  }\n  return r;\n};\n\n/**\n * Return `arr` broken up into chunks of `size`\n *\n * ```js\n * chunks([1,2,3,4,5,6,7,8,9,10], 3);\n * // Yields: [[1, 2, 3], [4, 5, 6], [7, 8, 9], [10]]\n * ```\n * @param array\n * @param size\n * @returns\n */\n//eslint-disable-next-line func-style\nexport function chunks<V>(\n  array: ReadonlyArray<V>,\n  size: number\n) {\n  // https://surma.github.io/underdash/\n  const output = [];\n  //eslint-disable-next-line  functional/no-let\n  for (let index = 0; index < array.length; index += size) {\n    //eslint-disable-next-line functional/immutable-data\n    output.push(array.slice(index, index + size));\n  }\n  return output;\n}\n\n/**\n * Returns a result of a merged into b.\n * B is always the 'newer' data that takes\n * precedence.\n */\nexport type MergeReconcile<V> = (a: V, b: V) => V;\n\n/**\n * Merges arrays left to right, using the provided\n * `reconcile` function to choose a winner when keys overlap.\n *\n * There's also [Maps.mergeByKey](functions/Collections.Maps.mergeByKey.html) if the input data is in Map form.\n *\n * For example, if we have the array A:\n * [`A-1`, `A-2`, `A-3`]\n *\n * And array B:\n * [`B-1`, `B-2`, `B-4`]\n *\n * And with the key function:\n * ```js\n * // Make a key for value based on last char\n * const keyFn = (v) => v.substr(-1, 1);\n * ```\n *\n * If they are merged with the reconile function:\n * ```js\n * const reconcile = (a, b) => b.replace(`-`, `!`);\n * const output = mergeByKey(keyFn, reconcile, arrayA, arrayB);\n * ```\n *\n * The final result will be:\n *\n * [`B!1`, `B!2`, `A-3`, `B-4`]\n *\n * In this toy example, it's obvious how the reconciler transforms\n * data where the keys overlap. For the keys that do not overlap -\n * 3 and 4 in this example - they are copied unaltered.\n *\n * A practical use for `mergeByKey` has been in smoothing keypoints\n * from a TensorFlow pose. In this case, we want to smooth new keypoints\n * with older keypoints. But if a keypoint is not present, for it to be\n * passed through.\n *\n * @param keyFn Function to generate a unique key for data\n * @param reconcile Returns value to decide 'winner' when keys conflict.\n * @param arrays Arrays of data to merge\n */\nexport const mergeByKey = <V>(\n  keyFunction: ToString<V>,\n  reconcile: MergeReconcile<V>,\n  ...arrays: ReadonlyArray<ReadonlyArray<V>>\n): Array<V> => {\n  const result = new Map<string, V>();\n  for (const m of arrays) {\n    for (const mv of m) {\n      if (mv === undefined) continue;\n      const mk = keyFunction(mv);\n      //eslint-disable-next-line functional/no-let\n      let v = result.get(mk);\n      v = v ? reconcile(v, mv) : mv;\n      result.set(mk, v);\n    }\n  }\n  return [ ...result.values() ];\n};\n\n/**\n * Reduces in a pairwise fashion.\n *\n * Eg, if we have input array of [1, 2, 3, 4, 5], the\n * `reducer` fn will run with 1,2 as parameters, then 2,3, then 3,4 etc.\n * ```js\n * const values = [1, 2, 3, 4, 5]\n * reducePairwise(values, (acc, a, b) => {\n *  return acc + (b - a);\n * }, 0);\n * ```\n *\n * If input array has less than two elements, the initial value is returned.\n *\n * ```js\n * const reducer = (acc:string, a:string, b:string) => acc + `[${a}-${b}]`;\n * const result = reducePairwise(`a b c d e f g`.split(` `), reducer, `!`);\n * Yields: `![a-b][b-c][c-d][d-e][e-f][f-g]`\n * ```\n * @param array\n * @param reducer\n * @param initial\n * @returns\n */\nexport const reducePairwise = <V, X>(\n  array: ReadonlyArray<V>,\n  reducer: (accumulator: X, a: V, b: V) => X,\n  initial: X\n) => {\n  guardArray(array, `arr`);\n  if (array.length < 2) return initial;\n  //eslint-disable-next-line functional/no-let\n  for (let index = 0; index < array.length - 1; index++) {\n    initial = reducer(initial, array[ index ], array[ index + 1 ]);\n  }\n  return initial;\n};\n\n\n/**\n * Returns two separate arrays of everything that `filter` returns _true_,\n * and everything it returns _false_ on. The in-built Array.filter() in\n * constrast only returns things that `filter` returns _true_ for.\n *\n * ```js\n * const [ matching, nonMatching ] = filterAB(data, v => v.enabled);\n * // `matching` is a list of items from `data` where .enabled is true\n * // `nonMatching` is a list of items from `data` where .enabled is false\n * ```\n * @param data Array of data to filter\n * @param filter Function which returns _true_ to add items to the A list, or _false_ for items to add to the B list\n * @returns Array of two elements. The first is items that match `filter`, the second is items that do not.\n */\nexport const filterAB = <V>(\n  data: ReadonlyArray<V>,\n  filter: (a: V) => boolean\n): [ a: Array<V>, b: Array<V> ] => {\n  const a: Array<V> = [];\n  const b: Array<V> = [];\n  for (const datum of data) {\n    //eslint-disable-next-line functional/immutable-data\n    if (filter(datum)) a.push(datum);\n    //eslint-disable-next-line functional/immutable-data\n    else b.push(datum);\n  }\n  return [ a, b ];\n};\n\n/**\n * Combines the values of one or more arrays, removing duplicates\n * ```js\n * const v = Arrays.unique([ [1, 2, 3, 4], [ 3, 4, 5, 6] ]);\n * // [ 1, 2, 3, 4, 5, 6]\n * ```\n *\n * A single array can be provided as well:\n * ```js\n * const v = Arrays.unique([ 1, 2, 3, 1, 2, 3 ]);\n * // [ 1, 2, 3 ]\n * ```\n * \n * By default uses JSON.toString() to compare values.\n * \n * See also:\n * * {@link intersection}: Overlap between two arrays\n * * {@link additionalValues}: Yield values from an iterable not present in the other\n * * {@link containsDuplicateValues}: Returns true if array contains duplicates\n * @param arrays\n * @param comparer\n * @returns\n */\nexport const unique = <V>(\n  arrays:\n    | Array<Array<V>>\n    | Array<V>\n    | ReadonlyArray<V>\n    | ReadonlyArray<ReadonlyArray<V>>,\n  comparer = isEqualDefault<V>\n): ReadonlyArray<V> => {\n  const t: Array<V> = [];\n  for (const a of arrays) {\n    if (Array.isArray(a)) {\n      for (const v of additionalValues<V>(t, a, comparer)) {\n        t.push(v);\n      }\n    } else {\n      return [ ...additionalValues<V>([], arrays as Array<V>, comparer) ];\n    }\n  }\n  return t;\n};\n\n/**\n * Returns _true_ if array contains duplicate values.\n *\n * ```js\n * containsDuplicateValues(['a','b','a']); // True\n * containsDuplicateValues([\n *  { name: 'Apple' },\n *  { name: 'Apple' }\n * ]); // True\n * ```\n * \n * Uses JSON.toString() by default to compare values.\n * \n * See also:\n * * {@link containsDuplicateInstances}: Compare based on reference, rather than value\n * * {@link unique} Get unique set of values in an array\n * @param array Array to examine\n * @param comparer Comparer, uses JSON.toString by default\n * @returns\n */\nexport const containsDuplicateValues = <V>(\n  array: Array<V> | ReadonlyArray<V>,\n  keyFunction = toStringDefault<V>\n): boolean => {\n  if (!Array.isArray(array)) throw new Error(`Parameter needs to be an array`);\n  try {\n    const _ = mapFromIterable(array, keyFunction);\n  } catch {\n    return true;\n  }\n  return false;\n};\n\n/**\n * Returns _true_ if array contains duplicate instances.\n * Use {@link containsDuplicateValues} if you'd rather compare by value.\n * @param array \n * @returns \n */\nexport const containsDuplicateInstances = <V>(array: Array<V> | ReadonlyArray<V>): boolean => {\n  if (!Array.isArray(array)) throw new Error(`Parameter needs to be an array`);\n  for (let index = 0; index < array.length; index++) {\n    for (let x = 0; x < array.length; x++) {\n      if (index === x) continue;\n      if (array[ index ] === array[ x ]) return true;\n    }\n  }\n  return false;\n}\n\n/**\n * Returns _true_ if the two arrays have the same items at same indexes.\n * Returns _false_ if arrays are of different length.\n * By default uses === semantics for equality checking.\n * \n * ```js\n * isEqual([ 1, 2, 3], [ 1, 2, 3 ]); // true\n * isEqual([ 1, 2, 3], [ 3, 2, 1 ]); // false\n * ```\n * \n * Compare by value\n * ```js\n * isEqual(a, b, isEqualValueDefault);\n * ```\n * \n * Custom compare, eg based on `name` field:\n * ```js\n * isEqual(a, b, (compareA, compareB) => compareA.name === compareB.name);\n * ```\n * @param arrayA \n * @param arrayB \n * @param isEqual \n */\nexport const isEqual = <V>(arrayA: Array<V>, arrayB: Array<V>, isEqual = isEqualDefault<V>): boolean => {\n  if (!Array.isArray(arrayA)) throw new Error(`Parameter 'arrayA' is not actually an array`);\n  if (!Array.isArray(arrayB)) throw new Error(`Parameter 'arrayB' is not actually an array`);\n\n  if (arrayA.length !== arrayB.length) return false;\n  // eslint-disable-next-line unicorn/no-for-loop\n  for (let indexA = 0; indexA < arrayA.length; indexA++) {\n    if (!(isEqual(arrayA[ indexA ], arrayB[ indexA ]))) return false;\n  }\n  return true;\n}\n/**\n * Returns _true_ if contents of `needles` is contained by `haystack`.\n * ```js\n * const a = ['apples','oranges','pears','mandarins'];\n * const b = ['pears', 'apples'];\n * contains(a, b); // True\n *\n * const c = ['pears', 'bananas'];\n * contains(a, b); // False ('bananas' does not exist in a)\n * ```\n * @param haystack\n * @param needles\n * @param eq\n */\nexport const contains = <V>(\n  haystack: ArrayLike<V>,\n  needles: ArrayLike<V>,\n  eq = isEqualDefault<V>\n) => {\n  if (!Array.isArray(haystack)) {\n    throw new TypeError(`Expects haystack parameter to be an array`);\n  }\n  if (!Array.isArray(needles)) {\n    throw new TypeError(`Expects needles parameter to be an array`);\n  }\n\n  for (const needle of needles) {\n    //eslint-disable-next-line functional/no-let\n    let found = false;\n    for (const element of haystack) {\n      if (eq(needle, element)) {\n        found = true;\n        break;\n      }\n    }\n    if (!found) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/**\n * Yield values from an iterable not present in the other.\n *\n * Assuming that `input` array is unique values, this function\n * yields items from `values` which are not present in `input`.\n *\n * Duplicate items in `values` are ignored - only the first is yielded.\n *\n * If `eq` function is not provided, values are compared using the\n * default === semantics (via {@link isEqualDefault})\n *\n * ```js\n * const existing = [ 1, 2, 3 ];\n * const newValues = [ 3, 4, 5];\n * const v = [...additionalValues(existing, newValues)];\n * // [ 1, 2, 3, 4, 5]\n * ```\n *\n * ```js\n * const existing = [ 1, 2, 3 ];\n * const newValues = [ 3, 4, 5 ];\n * for (const v of additionalValues(existing, newValues)) {\n *  // 4, 5\n * }\n * To combine one or more iterables, keeping only unique items, use {@link unique}\n * @param input\n * @param values\n */\nexport function* additionalValues<V>(\n  //eslint-disable-next-line functional/prefer-readonly-type\n  input: Array<V>,\n  //eslint-disable-next-line functional/prefer-readonly-type\n  values: Iterable<V>,\n  eq: IsEqual<V> = isEqualDefault\n): Iterable<V> {\n  // Keep track of values already yielded\n  const yielded: Array<V> = [];\n  for (const v of values) {\n    const found = input.find((index) => eq(index, v));\n    if (!found) {\n      const alreadyYielded = yielded.find((ii) => eq(ii, v));\n      if (!alreadyYielded) {\n        //eslint-disable-next-line functional/immutable-data\n        yielded.push(v);\n        yield v;\n      }\n    }\n  }\n}\n","import { isEqualDefault, type IsEqual } from '../../IsEqual.js';\nimport {\n  toStringDefault,\n  defaultComparer,\n  type ToString,\n} from '../../Util.js';\nimport type { IWithEntries } from './IMappish.js';\n\n// ✔ UNIT TESTED!\n/**\n * Gets the closest integer key to `target` in `data`.\n * * Requires map to have numbers as keys, not strings\n * * Math.round is used for rounding `target`.\n *\n * Examples:\n * ```js\n * // Assuming numeric keys 1, 2, 3, 4 exist:\n * getClosestIntegerKey(map, 3);    // 3\n * getClosestIntegerKey(map, 3.1);  // 3\n * getClosestIntegerKey(map, 3.5);  // 4\n * getClosestIntegerKey(map, 3.6);  // 4\n * getClosestIntegerKey(map, 100);  // 4\n * getClosestIntegerKey(map, -100); // 1\n * ```\n * @param data Map\n * @param target Target value\n * @returns\n */\nexport const getClosestIntegerKey = (\n  data: ReadonlyMap<number, any>,\n  target: number\n): number => {\n  target = Math.round(target);\n  if (data.has(target)) {\n    return target;\n  } else {\n    //eslint-disable-next-line functional/no-let\n    let offset = 1;\n    while (offset < 1000) {\n      if (data.has(target - offset)) return target - offset;\n      else if (data.has(target + offset)) return target + offset;\n      offset++;\n    }\n    throw new Error(`Could not find target ${ target }`);\n  }\n};\n\n/**\n * Returns the first value in `data` that matches a key from `keys`.\n * ```js\n * // Iterate, yielding: `a.b.c.d`, `b.c.d`, `c.d`, `d`\n * const keys = Text.segmentsFromEnd(`a.b.c.d`);\n * // Gets first value that matches a key (starting from most precise)\n * const value = getFromKeys(data, keys);\n * ```\n * @param data \n * @param keys \n * @returns \n */\nexport const getFromKeys = <T>(data: ReadonlyMap<string, T>, keys: Iterable<string>): T | undefined => {\n  for (const key of keys) {\n    if (data.has(key)) return data.get(key);\n  }\n}\n\n/**\n * Returns true if map contains `value` under `key`, using `comparer` function. Use {@link hasAnyValue} if you don't care\n * what key value might be under.\n *\n * Having a comparer function is useful to check by value rather than object reference.\n *\n * @example Find key value based on string equality\n * ```js\n * hasKeyValue(map,`hello`, `samantha`, (a, b) => a === b);\n * ```\n * @param map Map to search\n * @param key Key to search\n * @param value Value to search\n * @param comparer Function to determine match\n * @returns True if key is found\n */\nexport const hasKeyValue = <K, V>(\n  map: ReadonlyMap<K, V>,\n  key: K,\n  value: V,\n  comparer: IsEqual<V>\n): boolean => {\n  if (!map.has(key)) return false;\n  const values = [ ...map.values() ];\n  return values.some((v) => comparer(v, value));\n};\n\n/**\n * Deletes all key/values from map where value matches `value`,\n * with optional comparer. Mutates map.\n *\n * ```js\n * import { Maps } from \"https://unpkg.com/ixfx/dist/collections.js\"\n *\n * // Compare fruits based on their colour property\n * const colourComparer = (a, b) => a.colour === b.colour;\n *\n * // Deletes all values where .colour = `red`\n * Maps.deleteByValue(map, { colour: `red` }, colourComparer);\n * ```\n * @param map\n * @param value\n * @param comparer\n */\nexport const deleteByValue = <K, V>(\n  map: ReadonlyMap<K, V>,\n  value: V,\n  comparer: IsEqual<V> = isEqualDefault\n) => {\n  for (const entry of Object.entries(map)) {\n    if (comparer(entry[ 1 ], value)) {\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-call\n      (map as any).delete(entry[ 0 ]);\n    }\n  }\n};\n\n\n\n/**\n * Finds first entry by iterable value. Expects a map with an iterable as values.\n *\n * ```js\n * const map = new Map();\n * map.set('hello', 'a');\n * map.set('there', 'b');\n *\n * const entry = firstEntryByIterablePredicate(map, (value, key) => {\n *  return (value === 'b');\n * });\n * // Entry is: ['there', 'b']\n * ```\n *\n * An alternative is {@link firstEntryByIterableValue} to search by value.\n * @param map Map to search\n * @param predicate Filter function returns true when there is a match of value\n * @returns Entry, or _undefined_ if `filter` function never returns _true_\n */\nexport const firstEntryByIterablePredicate = <K, V>(\n  map: IWithEntries<K, V>,\n  predicate: (value: V, key: K) => boolean\n): readonly [ key: K, value: V ] | undefined => {\n  for (const entry of map.entries()) {\n    if (predicate(entry[ 1 ], entry[ 0 ])) return entry;\n  }\n};\n\n/**\n * Finds first entry by iterable value.\n *\n * ```js\n * const map = new Map();\n * map.set('hello', 'a');\n * map.set('there', 'b');\n *\n * const entry = firstEntryByIterableValue(map, 'b');\n * // Entry is: ['there', 'b']\n * ```\n *\n * An alternative is {@link firstEntryByIterablePredicate} to search by predicate function.\n * @param map Map to search\n * @param value Value to seek\n * @param isEqual Filter function which checks equality. Uses JS comparer by default.\n * @returns Entry, or _undefined_ if `value` not found.\n */\nexport const firstEntryByIterableValue = <K, V>(\n  map: IWithEntries<K, V>,\n  value: V,\n  isEqual: IsEqual<V> = isEqualDefault\n): readonly [ key: K, value: V ] | undefined => {\n  for (const entry of map.entries()) {\n    if (isEqual(entry[ 1 ], value)) return entry;\n  }\n};\n\n\n\n/**\n * Adds items to a map only if their key doesn't already exist\n *\n * Uses provided {@link Util.ToString} function to create keys for items. Item is only added if it doesn't already exist.\n * Thus the older item wins out, versus normal `Map.set` where the newest wins.\n *\n *\n * @example\n * ```js\n * import { Maps } from \"https://unpkg.com/ixfx/dist/collections.js\";\n * const map = new Map();\n * const peopleArray = [ _some people objects..._];\n * Maps.addKeepingExisting(map, p => p.name, ...peopleArray);\n * ```\n * @param set\n * @param hasher\n * @param values\n * @returns\n */\nexport const addKeepingExisting = <V>(\n  set: ReadonlyMap<string, V> | undefined,\n  hasher: ToString<V>,\n  ...values: ReadonlyArray<V>\n) => {\n  const s = set === undefined ? new Map() : new Map(set);\n  for (const v of values) {\n    const hashResult = hasher(v);\n    if (s.has(hashResult)) continue;\n    s.set(hashResult, v);\n  }\n  return s;\n};\n\n/**\n * Returns a array of entries from a map, sorted by value.\n *\n * ```js\n * const m = new Map();\n * m.set(`4491`, { name: `Bob` });\n * m.set(`2319`, { name: `Alice` });\n *\n * // Compare by name\n * const comparer = (a, b) => defaultComparer(a.name, b.name);\n *\n * // Get sorted values\n * const sorted = Maps.sortByValue(m, comparer);\n * ```\n *\n * `sortByValue` takes a comparison function that should return -1, 0 or 1 to indicate order of `a` to `b`. If not provided, {@link Util.defaultComparer} is used.\n * @param map\n * @param comparer\n * @returns\n */\nexport const sortByValue = <K, V>(\n  map: ReadonlyMap<K, V>,\n  comparer?: (a: V, b: V) => number\n) => {\n  const f = comparer ?? defaultComparer;\n  [ ...map.entries() ].sort((a, b) => f(a[ 1 ], b[ 1 ]));\n};\n\n/**\n * Returns an array of entries from a map, sorted by a property of the value\n *\n * ```js\n * cosnt m = new Map();\n * m.set(`4491`, { name: `Bob` });\n * m.set(`2319`, { name: `Alice` });\n * const sorted = Maps.sortByValue(m, `name`);\n * ```\n * @param map Map to sort\n * @param prop Property of value\n * @param compareFn Comparer. If unspecified, uses a default.\n */\nexport const sortByValueProperty = <K, V, Z>(\n  map: ReadonlyMap<K, V>,\n  property: string,\n  compareFunction?: (a: Z, b: Z) => number\n) => {\n  const cfn = typeof compareFunction === `undefined` ? defaultComparer : compareFunction;\n  return [ ...map.entries() ].sort((aE, bE) => {\n    const a = aE[ 1 ];\n    const b = bE[ 1 ];\n    // @ts-expect-error\n    return cfn(a[ property ], b[ property ]);\n  });\n};\n/**\n * Returns _true_ if any key contains `value`, based on the provided `comparer` function. Use {@link hasKeyValue}\n * if you only want to find a value under a certain key.\n *\n * Having a comparer function is useful to check by value rather than object reference.\n * @example Finds value where name is 'samantha', regardless of other properties\n * ```js\n * hasAnyValue(map, {name:`samantha`}, (a, b) => a.name === b.name);\n * ```\n *\n * Works by comparing `value` against all values contained in `map` for equality using the provided `comparer`.\n *\n * @param map Map to search\n * @param value Value to find\n * @param comparer Function that determines matching. Should return true if `a` and `b` are considered equal.\n * @returns True if value is found\n */\nexport const hasAnyValue = <K, V>(\n  map: ReadonlyMap<K, V>,\n  value: V,\n  comparer: IsEqual<V>\n): boolean => {\n  const entries = [ ...map.entries() ];\n  return entries.some((kv) => comparer(kv[ 1 ], value));\n};\n\n/**\n * Returns values where `predicate` returns true.\n *\n * If you just want the first match, use `find`\n *\n * @example All people over thirty\n * ```js\n * // for-of loop\n * for (const v of filter(people, person => person.age > 30)) {\n *\n * }\n * // If you want an array\n * const overThirty = Array.from(filter(people, person => person.age > 30));\n * ```\n * @param map Map\n * @param predicate Filtering predicate\n * @returns Values that match predicate\n */\n//eslint-disable-next-line func-style\nexport function* filter<V>(\n  map: ReadonlyMap<string, V>,\n  predicate: (v: V) => boolean\n) {\n  for (const v of map.values()) {\n    if (predicate(v)) yield v;\n  }\n}\n\n//export const filter = <V>(map:ReadonlyMap<string, V>, predicate:(v:V) => boolean):ReadonlyArray<V> => Array.from(map.values()).filter(predicate);\n\n/**\n * Copies data to an array\n * @param map\n * @returns\n */\nexport const toArray = <V>(map: ReadonlyMap<string, V>): ReadonlyArray<V> =>\n  [ ...map.values() ];\n\n\n/**\n * Returns a Map from an iterable. By default throws an exception\n * if iterable contains duplicate values.\n *\n * ```js\n * const data = [\n *  { fruit: `granny-smith`, family: `apple`, colour: `green` }\n *  { fruit: `mango`, family: `stone-fruit`, colour: `orange` }\n * ];\n * const map = Maps.fromIterable(data, v => v.fruit);\n * ```\n * @param data Input data\n * @param keyFn Function which returns a string id. By default uses the JSON value of the object.\n * @param allowOverwrites When set to _true_, items with same id will silently overwrite each other, with last write wins. _false_ by default.\n * @returns\n */\nexport const fromIterable = <V>(\n  data: Iterable<V>,\n  keyFunction = toStringDefault<V>,\n  allowOverwrites = false\n): ReadonlyMap<string, V> => {\n  const m = new Map<string, V>();\n  for (const d of data) {\n    const id = keyFunction(d);\n    if (m.has(id) && !allowOverwrites) {\n      throw new Error(\n        `id ${ id } is already used and new data will overwrite it. `\n      );\n    }\n    m.set(id, d);\n  }\n  return m;\n};\n\n/**\n * Returns a Map from an object, or array of objects.\n * Assumes the top-level properties of the object is the key.\n *\n * ```js\n * const data = {\n *  Sally: { name: `Sally`, colour: `red` },\n *  Bob: { name: `Bob`, colour: `pink` }\n * };\n * const map = Maps.fromObject(data);\n * map.get(`Sally`); // { name: `Sally`, colour: `red` }\n * ```\n *\n * To add an object to an existing map, use {@link addObject}.\n * @param data\n * @returns\n */\n//eslint-disable-next-line @typescript-eslint/no-explicit-any,functional/prefer-readonly-type\nexport const fromObject = <V>(data: any): ReadonlyMap<string, V> => {\n  //eslint-disable-next-line @typescript-eslint/no-explicit-any,functional/prefer-readonly-type\n  const map = new Map<string, V>();\n  if (Array.isArray(data)) {\n    for (const d of data) addObject<V>(map, d);\n  } else {\n    addObject<V>(map, data);\n  }\n  return map;\n};\n\n/**\n * Adds an object to an existing map. It assumes a structure where\n * each top-level property is a key:\n *\n * ```js\n * const data = {\n *  Sally: { name: `Sally`, colour: `red` },\n *  Bob: { name: `Bob`, colour: `pink` }\n * };\n * const map = new Map();\n * Maps.addObject(map, data);\n *\n * map.get(`Sally`); // { name: `Sally`, colour: `red` }\n * ```\n *\n * To create a new map from an object, use {@link fromObject} instead.\n * @param map\n * @param data\n */\n//eslint-disable-next-line @typescript-eslint/no-explicit-any,functional/prefer-readonly-type\nexport const addObject = <V>(map: Map<string, V>, data: any) => {\n  const entries = Object.entries(data);\n  for (const [ key, value ] of entries) {\n    map.set(key, value as V);\n  }\n};\n/**\n * Returns the first found value that matches `predicate` or _undefined_.\n *\n * If you want all matches, use {@link filter}.\n *\n * @example First person over thirty\n * ```js\n * const overThirty = find(people, person => person.age > 30);\n * ```\n * @param map Map to search\n * @param predicate Function that returns true for a matching value\n * @returns Found value or _undefined_\n */\nexport const find = <V>(\n  map: ReadonlyMap<string, V>,\n  predicate: (v: V) => boolean\n): V | undefined => [ ...map.values() ].find(v => predicate(v));\n\n/**\n * Converts a map to a simple object, transforming from type `T` to `K` as it does so. If no transforms are needed, use {@link toObject}.\n *\n * ```js\n * const map = new Map();\n * map.set(`name`, `Alice`);\n * map.set(`pet`, `dog`);\n *\n * const o = mapToObjectTransform(map, v => {\n *  ...v,\n *  registered: true\n * });\n *\n * // Yields: { name: `Alice`, pet: `dog`, registered: true }\n * ```\n *\n * If the goal is to create a new map with transformed values, use {@link transformMap}.\n * @param m\n * @param valueTransform\n * @typeParam T Value type of input map\n * @typeParam K Value type of destination map\n * @returns\n */\n//eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport const mapToObjectTransform = <T, K>(\n  m: ReadonlyMap<string, T>,\n  valueTransform: (value: T) => K\n): Readonly<Record<string, K>> =>\n  // eslint-disable-next-line @typescript-eslint/no-unsafe-return, unicorn/no-array-reduce\n  [ ...m ].reduce((object: any, [ key, value ]) => {\n    const t = valueTransform(value);\n    /* eslint-disable-next-line functional/immutable-data */\n    object[ key ] = t;\n    return object;\n  }, {});\n\n/**\n * Zips together an array of keys and values into an object. Requires that\n * `keys` and `values` are the same length.\n *\n * @example\n * ```js\n * const o = zipKeyValue([`a`, `b`, `c`], [0, 1, 2])\n * Yields: { a: 0, b: 1, c: 2}\n *```\n * @param keys String keys\n * @param values Values\n * @typeParam V Type of values\n * @return Object with keys and values\n */\nexport const zipKeyValue = <V>(\n  keys: ReadonlyArray<string>,\n  values: ArrayLike<V | undefined>\n) => {\n  if (keys.length !== values.length) {\n    throw new Error(`Keys and values arrays should be same length`);\n  }\n  return Object.fromEntries(keys.map((k, index) => [ k, values[ index ] ]));\n};\n\n//#region Functions by Kees C. Bakker\n// Functions by Kees C. Bakker\n// https://keestalkstech.com/2021/10/having-fun-grouping-arrays-into-maps-with-typescript/\n\n/**\n * Like `Array.map`, but for a Map. Transforms from Map<K,V> to Map<K,R>, returning as a new Map.\n *\n * @example\n * ```js\n * const mapOfStrings = new Map();\n * mapOfStrings.set(`a`, `10`);\n * mapOfStrings.get(`a`); // Yields `10` (a string)\n *\n * // Convert a map of string->string to string->number\n * const mapOfInts = transformMap(mapOfStrings, (value, key) => parseInt(value));\n *\n * mapOfInts.get(`a`); // Yields 10 (a proper number)\n * ```\n *\n * If you want to combine values into a single object, consider instead  {@link mapToObjectTransform}.\n * @param source\n * @param transformer\n * @typeParam K Type of keys (generally a string)\n * @typeParam V Type of input map values\n * @typeParam R Type of output map values\n * @returns\n */\nexport const transformMap = <K, V, R>(\n  source: ReadonlyMap<K, V>,\n  transformer: (value: V, key: K) => R\n) => new Map(Array.from(source, (v) => [ v[ 0 ], transformer(v[ 1 ], v[ 0 ]) ]));\n\n/**\n * Converts a `Map` to a plain object, useful for serializing to JSON.\n * To convert back to a map use {@link fromObject}.\n *\n * @example\n * ```js\n * const map = new Map();\n * map.set(`Sally`, { name: `Sally`, colour: `red` });\n * map.set(`Bob`, { name: `Bob`, colour: `pink });\n *\n * const objects = Maps.toObject(map);\n * // Yields: {\n * //  Sally: { name: `Sally`, colour: `red` },\n * //  Bob: { name: `Bob`, colour: `pink` }\n * // }\n * ```\n * @param m\n * @returns\n */\n/* eslint-disable-next-line @typescript-eslint/no-explicit-any */\nexport const toObject = <T>(\n  m: ReadonlyMap<string, T>\n): Readonly<Record<string, T>> =>\n  // eslint-disable-next-line @typescript-eslint/no-unsafe-return\n  [ ...m ].reduce((object: any, [ key, value ]) => {\n    /* eslint-disable-next-line functional/immutable-data */\n    object[ key ] = value;\n    return object;\n  }, {});\n\n/**\n * Converts Map to Array with a provided `transformer` function. Useful for plucking out certain properties\n * from contained values and for creating a new map based on transformed values from an input map.\n *\n * @example Get an array of ages from a map of Person objects\n * ```js\n * let person = { age: 29, name: `John`};\n * map.add(person.name, person);\n *\n * const ages = mapToArray(map, (key, person) => person.age);\n * // [29, ...]\n * ```\n *\n * In the above example, the `transformer` function returns a number, but it could\n * just as well return a transformed version of the input:\n *\n * ```js\n * // Return with random heights and uppercased name\n * mapToArray(map, (key, person) => ({\n *  ...person,\n *  height: Math.random(),\n *  name: person.name.toUpperCase();\n * }))\n * // Yields:\n * // [{height: 0.12, age: 29, name: \"JOHN\"}, ...]\n * ```\n * @param m\n * @param transformer A function that takes a key and item, returning a new item.\n * @returns\n */\nexport const mapToArray = <K, V, R>(\n  m: ReadonlyMap<K, V>,\n  transformer: (key: K, item: V) => R\n): ReadonlyArray<R> => [ ...m.entries() ].map((x) => transformer(x[ 0 ], x[ 1 ]));\n// End Functions by Kees C. Bakker\n//#endregion\n\n/**\n * Returns a result of a merged into b.\n * B is always the 'newer' data that takes\n * precedence.\n */\nexport type MergeReconcile<V> = (a: V, b: V) => V;\n\n/**\n * Merges maps left to right, using the provided\n * `reconcile` function to choose a winner when keys overlap.\n *\n * There's also [Arrays.mergeByKey](functions/Collections.Arrays.mergeByKey.html) if you don't already have a map.\n *\n * For example, if we have the map A:\n * 1 => `A-1`, 2 => `A-2`, 3 => `A-3`\n *\n * And map B:\n * 2 => `B-1`, 2 => `B-2`, 4 => `B-4`\n *\n * If they are merged with the reconile function:\n * ```js\n * const reconcile = (a, b) => b.replace(`-`, `!`);\n * const output = mergeByKey(reconcile, mapA, mapB);\n * ```\n *\n * The final result will be:\n *\n * 1 => `B!1`, 2 => `B!2`, 3 => `A-3`, 4 => `B-4`\n *\n * In this toy example, it's obvious how the reconciler transforms\n * data where the keys overlap. For the keys that do not overlap -\n * 3 and 4 in this example - they are copied unaltered.\n *\n * A practical use for `mergeByKey` has been in smoothing keypoints\n * from a TensorFlow pose. In this case, we want to smooth new keypoints\n * with older keypoints. But if a keypoint is not present, for it to be\n * passed through.\n *\n * @param reconcile\n * @param maps\n */\nexport const mergeByKey = <K, V>(\n  reconcile: MergeReconcile<V>,\n  ...maps: ReadonlyArray<ReadonlyMap<K, V>>\n): ReadonlyMap<K, V> => {\n  const result = new Map<K, V>();\n  for (const m of maps) {\n    for (const [ mk, mv ] of m) {\n      //eslint-disable-next-line functional/no-let\n      let v = result.get(mk);\n      v = v ? reconcile(v, mv) : mv;\n      result.set(mk, v);\n    }\n  }\n  return result;\n};\n","import { type RandomSource, defaultRandom } from \"./Types.js\";\n\n/**\n* Returns a random number from 0..weightings.length, distributed by the weighting values.\n* \n* eg: produces 0 20% of the time, 1 50% of the time, 2 30% of the time\n* ```js\n* weightedIndex([0.2, 0.5, 0.3]);\n* ```\n* @param weightings \n* @param rand \n* @returns \n*/\nexport const weightedIndex = (weightings: Array<number>, rand: RandomSource = defaultRandom): () => number => {\n  const precompute: Array<number> = [];\n  let total = 0;\n  // eslint-disable-next-line unicorn/no-for-loop\n  for (let index = 0; index < weightings.length; index++) {\n    total += weightings[ index ];\n    precompute[ index ] = total;\n  }\n  if (total !== 1) throw new Error(`Weightings should add up to 1. Got: ${ total }`);\n\n  return (): number => {\n    const v = rand();\n    // eslint-disable-next-line unicorn/no-for-loop\n    for (let index = 0; index < precompute.length; index++) {\n      if (v <= precompute[ index ]) return index;\n    }\n    throw new Error(`Bug: weightedIndex could not select index`);\n  }\n}","/**\n * Throws an error if `array` parameter is not a valid array\n *\n * ```js\n * import { guardArray } from 'https://unpkg.com/ixfx/dist/arrays.js';\n * guardArray(someVariable);\n * ```\n * @private\n * @param array\n * @param name\n */\nexport const guardArray = <V>(array: ArrayLike<V>, name = `?`) => {\n  if (array === undefined) {\n    throw new TypeError(`Param '${ name }' is undefined. Expected array.`);\n  }\n  if (array === null) {\n    throw new TypeError(`Param '${ name }' is null. Expected array.`);\n  }\n  if (!Array.isArray(array)) {\n    throw new TypeError(`Param '${ name }' not an array as expected`);\n  }\n};\n","import { guardArray } from \"./GuardArray.js\";\nimport { throwIntegerTest } from '../Guards.js';\n/**\n * Throws if `index` is an invalid array index for `array`, and if\n * `array` itself is not a valid array.\n * @param array\n * @param index\n */\nexport const guardIndex = <V>(\n  array: ArrayLike<V>,\n  index: number,\n  name = `index`\n) => {\n  guardArray(array);\n  throwIntegerTest(index, `positive`, name);\n  if (index > array.length - 1) {\n    throw new Error(\n      `'${ name }' ${ index } beyond array max of ${ array.length - 1 }`\n    );\n  }\n};","import { type IsEqual, isEqualValueDefault } from \"../../IsEqual.js\";\n\n/**\n * Returns _true_ if the contents of the array are all the same.\n * Uses value-based equality checking by default.\n * \n * @example Uses default equality function:\n * ```js\n * import { valuesEqual } from 'https://unpkg.com/ixfx/dist/arrays.js';\n *\n * const a1 = [ 10, 10, 10 ];\n * valuesEqual(a1); // True\n *\n * const a2 = [ { name:`Jane` }, { name:`John` } ];\n * valuesEqual(a2); // True, even though object references are different\n * ```\n *\n * If we want to compare by value for objects that aren't readily\n * converted to JSON, you need to provide a function:\n *\n * ```js\n * valuesEqual(someArray, (a, b) => {\n *  return (a.eventType === b.eventType);\n * });\n * ```\n *\n * Returns _true_ if `array` is empty.\n * @param array Array\n * @param equality Equality checker. Uses string-conversion checking by default\n * @returns\n */\nexport const valuesEqual = <V>(\n  //eslint-disable-next-line functional/prefer-readonly-type\n  array: ReadonlyArray<V> | Array<V>,\n  equality?: IsEqual<V>\n): boolean => {\n  // Unit tested\n\n  if (!Array.isArray(array)) throw new Error(`Param 'array' is not an array.`);\n  if (array.length === 0) return true;\n  const eq = equality ?? isEqualValueDefault;\n  const a = array[ 0 ];\n  const r = array.some((v) => !eq(a, v));\n  if (r) return false;\n  return true;\n};","import { guardArray } from \"./GuardArray.js\";\nimport { guardIndex } from \"./GuardIndex.js\";\n\n/**\n * Return elements from `array` that match a given `predicate`, and moreover are between\n * the given `startIndex` (inclusive) and `endIndex` (exclusive).\n *\n * While this can be done with in the in-built `array.filter` function, it will\n * needlessly iterate through the whole array. It also avoids another alternative\n * of slicing the array before using `filter`.\n *\n * ```js\n * import { filterBetween } from 'https://unpkg.com/ixfx/dist/arrays.js';\n *\n * // Return 'registered' people between and including array indexes 5-10\n * const filtered = filterBetween(people, person => person.registered, 5, 10);\n * ```\n * @param array Array to filter\n * @param predicate Filter function\n * @param startIndex Start index (defaults to 0)\n * @param endIndex End index (by default runs until end)\n */\nexport const filterBetween = <V>(\n  array: ReadonlyArray<V> | Array<V>,\n  predicate: (\n    value: V,\n    index: number,\n    array: ReadonlyArray<V> | Array<V>\n  ) => boolean,\n  startIndex?: number,\n  endIndex?: number\n): Array<V> => {\n  guardArray(array);\n  if (typeof startIndex === `undefined`) startIndex = 0;\n  if (typeof endIndex === `undefined`) endIndex = array.length; //- 1;\n  guardIndex(array, startIndex, `startIndex`);\n  guardIndex(array, endIndex - 1, `endIndex`);\n\n  const t: Array<V> = [];\n\n  //eslint-disable-next-line functional/no-let\n  for (let index = startIndex; index < endIndex; index++) {\n    //eslint-disable-next-line functional/immutable-data\n    if (predicate(array[ index ], index, array)) t.push(array[ index ]);\n  }\n  return t;\n};","import { slice } from '../iterable/SliceSync.js';\nimport { filterBetween } from './FilterBetween.js';\n\nexport type MinMaxAvgTotal = {\n  /**\n   * Smallest value in array\n   */\n  readonly min: number;\n  /**\n   * Total of all items\n   */\n  readonly total: number;\n  /**\n   * Largest value in array\n   */\n  readonly max: number;\n  /**\n   * Average value in array\n   */\n  readonly avg: number;\n};\n\nexport type MinMaxAvgOpts = {\n  /**\n   * Start index, inclusive\n   */\n  readonly startIndex?: number;\n  /**\n   * End index, exclusive\n   */\n  readonly endIndex?: number;\n};\n/**\n * Returns the min, max, avg and total of the array or iterable.\n * Any values that are invalid are silently skipped over.\n *\n * ```js\n * import { Arrays } from 'https://unpkg.com/ixfx/dist/collections.js';\n *\n * const v = [10, 2, 4.2, 99];\n * const mma = Arrays.minMaxAvg(v);\n * Yields: { min: 2, max: 99, total: 115.2, avg: 28.8 }\n * ```\n *\n * Use {@link average}, {@link max}, {@link min} or {@link total} if you only need one of these.\n *\n * A start and end range can be provided if the calculation should be restricted to a part\n * of the input array. By default the whole array is used.\n *\n * It's also possible to use an iterable as input.\n * ```js\n * Arrays.minMaxAvg(count(5,1)); // Averages 1,2,3,4,5\n * ```\n * @param data\n * @param opts Allows restriction of range that is examined\n * @returns `{min, max, avg, total}`\n */\nexport const minMaxAvg = (\n  //eslint-disable-next-line functional/prefer-readonly-type\n  data: ReadonlyArray<number> | Array<number> | Iterable<number>,\n  opts: MinMaxAvgOpts = {}\n): MinMaxAvgTotal => {\n  if (data === undefined) throw new Error(`'data' is undefined`);\n  if (!Array.isArray(data)) {\n    if (`next` in data) {\n      // eslint-disable-next-line @typescript-eslint/prefer-nullish-coalescing\n      if (opts.startIndex || opts.endIndex) {\n        data = slice(data, opts.startIndex, opts.endIndex);\n      }\n      //eslint-disable-next-line functional/no-let\n      let total = 0;\n      //eslint-disable-next-line functional/no-let\n      let min = Number.MAX_SAFE_INTEGER;\n      //eslint-disable-next-line functional/no-let\n      let max = Number.MIN_SAFE_INTEGER;\n      //eslint-disable-next-line functional/no-let\n      let samples = 0;\n      for (const v of data) {\n        if (typeof v !== `number`) {\n          throw new TypeError(`Generator should yield numbers. Got: ${ typeof v }`);\n        }\n        total += v;\n        samples++;\n        min = Math.min(min, v);\n        max = Math.max(max, v);\n      }\n      return {\n        avg: total / samples,\n        total,\n        max,\n        min,\n      };\n    } else {\n      throw new Error(`'data' parameter is neither array or iterable`);\n    }\n  }\n\n  if (data.length === 0) {\n    return {\n      total: 0,\n      min: 0,\n      max: 0,\n      avg: 0,\n    };\n  }\n  const startIndex = opts.startIndex ?? 0;\n  const endIndex = opts.endIndex ?? data.length;\n\n  const validNumbers = filterBetween<number>(\n    data,\n    (d) => typeof d === `number` && !Number.isNaN(d),\n    startIndex,\n    endIndex\n  );\n  const total = validNumbers.reduce((accumulator, v) => accumulator + v, 0);\n  return {\n    total: total,\n    max: Math.max(...validNumbers),\n    min: Math.min(...validNumbers),\n    avg: total / validNumbers.length,\n  };\n};\n","export {\n  minMaxAvg,\n  type MinMaxAvgOpts,\n  type MinMaxAvgTotal,\n} from '../MinMaxAvg.js';\n\n\n/**\n * Applies a function `fn` to the elements of an array, weighting them based on their relative position.\n *\n * ```js\n * import { Arrays } from 'https://unpkg.com/ixfx/dist/collections.js';\n *\n * // Six items\n * Arrays.weight([1,1,1,1,1,1], Easings.gaussian());\n *\n * // Yields:\n * // [0.02, 0.244, 0.85, 0.85, 0.244, 0.02]\n * ```\n *\n * `fn` is expected to map (0..1) => (0..1), such as an {@link Modulation.Easings.EasingFn}. The input to the\n * `fn` is the relative position of an element. Thus the first element will be 0, the middle 0.5 and so on.\n * The output of `fn` is then multiplied by the original value.\n *\n * In the below example (which is also the default if `fn` is not specified), the relative position is\n * how values are weighted:\n *\n * ```js\n * Arrays.weight([1,1,1,1,1,1], (relativePos) => relativePos);\n * // Yields:\n * // [0, 0.2, 0.4, 0.6, 0.8, 1]\n * ```\n *\n * Non-numbers in `data` will be silently ignored (this filtering happens first, so relative index values are sane still).\n *\n * @param data Array of numbers\n * @param fn Returns a weighting based on the given relative position. If unspecified, `(x) => x` is used.\n */\nexport const weight = (\n  data: Array<number> | ReadonlyArray<number>,\n  fn?: (relativePos: number) => number\n): Array<number> => {\n  const f = fn ?? ((x: number) => x);\n  return validNumbers(data).map(\n    (v: number, index: number) => v * f(index / (validNumbers.length - 1))\n  );\n};\n\n/**\n * Returns an array of all valid numbers from `data`\n *\n * @param data\n * @returns\n */\nexport const validNumbers = (data: ReadonlyArray<number>) =>\n  data.filter((d) => typeof d === `number` && !Number.isNaN(d));\n\n/**\n * Returns the dot product of two arbitrary-sized arrays. Assumed they are of the same length.\n * @param a\n * @param b\n * @returns\n */\nexport const dotProduct = (\n  values: ReadonlyArray<ReadonlyArray<number>>\n): number => {\n  //eslint-disable-next-line functional/no-let\n  let r = 0;\n  const length = values[ 0 ].length;\n\n  //eslint-disable-next-line functional/no-let\n  for (let index = 0; index < length; index++) {\n    //eslint-disable-next-line functional/no-let\n    let t = 0;\n    //eslint-disable-next-line functional/no-let\n    for (const [ p, value ] of values.entries()) {\n      if (p === 0) t = value[ index ];\n      else {\n        t *= value[ index ];\n      }\n    }\n    r += t;\n  }\n  return r;\n};\n\n/**\n * Calculates the average of all numbers in an array.\n * Array items which aren't a valid number are ignored and do not factor into averaging.\n *\n * Use {@link minMaxAvg} if you want min, max and total as well.\n *\n * @example\n * ```\n * import { Arrays } from 'https://unpkg.com/ixfx/dist/collections.js';\n *\n * // Average of a list\n * const avg = Arrays.average([1, 1.4, 0.9, 0.1]);\n *\n * // Average of a variable\n * let data = [100,200];\n * Arrays.average(data);\n * ```\n *\n * See also: [Numbers.average](Numbers.average.html) which takes a list of parameters\n * @param data Data to average.\n * @returns Average of array\n */\nexport const average = (data: ReadonlyArray<number>): number => {\n  // ✔ UNIT TESTED\n  if (data === undefined) throw new Error(`data parameter is undefined`);\n  const valid = validNumbers(data);\n  const total = valid.reduce((accumulator, v) => accumulator + v, 0);\n  return total / valid.length;\n};\n\n/**\n * Returns the minimum number out of `data`.\n * Undefined and non-numbers are silently ignored.\n *\n * ```js\n * import { Arrays } from 'https://unpkg.com/ixfx/dist/collections.js';\n * Arrays.min([10, 20, 0]); // Yields 0\n * ```\n * @param data\n * @returns Minimum number\n */\nexport const min = (data: ReadonlyArray<number>): number =>\n  Math.min(...validNumbers(data));\n\n/**\n * Returns the index of the largest value.\n * ```js\n * import { Arrays } from 'https://unpkg.com/ixfx/dist/collections.js';\n * const v = [ 10, 40, 5 ];\n * Arrays.maxIndex(v); // Yields 1\n * ```\n * @param data Array of numbers\n * @returns Index of largest value\n */\nexport const maxIndex = (data: ReadonlyArray<number>): number =>\n  // eslint-disable-next-line unicorn/no-array-reduce\n  data.reduce(\n    (bestIndex, value, index, array) =>\n      value > array[ bestIndex ] ? index : bestIndex,\n    0\n  );\n\n/**\n * Returns the index of the smallest value.\n *\n * ```js\n * import { Arrays } from 'https://unpkg.com/ixfx/dist/collections.js';\n * const v = [ 10, 40, 5 ];\n * Arrays.minIndex(v); // Yields 2\n * ```\n * @param data Array of numbers\n * @returns Index of smallest value\n */\nexport const minIndex = (...data: ReadonlyArray<number>): number =>\n  // eslint-disable-next-line unicorn/no-array-reduce\n  data.reduce(\n    (bestIndex, value, index, array) =>\n      value < array[ bestIndex ] ? index : bestIndex,\n    0\n  );\n\n/**\n * Returns the maximum number out of `data`.\n * Undefined and non-numbers are silently ignored.\n *\n * ```js\n * import { Arrays } from 'https://unpkg.com/ixfx/dist/collections.js';\n * Arrays.max(100, 200, 50); // 200\n * ```\n * @param data List of numbers\n * @returns Maximum number\n */\nexport const max = (data: ReadonlyArray<number>): number =>\n  Math.max(...validNumbers(data));\n\n/**\n * Returns the total of `data`.\n * Undefined and non-numbers are silently ignored.\n *\n * ```js\n * import { Arrays } from 'https://unpkg.com/ixfx/dist/collections.js';\n * Arrays.total([1, 2, 3]); // 6\n * ```\n * @param data Array of numbers\n * @returns Total\n */\nexport const total = (data: ReadonlyArray<number>): number =>\n  // eslint-disable-next-line unicorn/no-array-reduce\n  data.reduce((previous, current) => {\n    if (typeof current !== `number`) return previous;\n    if (Number.isNaN(current)) return previous;\n    if (Number.isFinite(current)) return previous;\n    return previous + current;\n  }, 0);\n\n/**\n * Returns the maximum out of `data` without pre-filtering for speed.\n *\n * For most uses, {@link max} should suffice.\n *\n * ```js\n * import { Arrays } from 'https://unpkg.com/ixfx/dist/collections.js';\n * Arrays.maxFast([ 10, 0, 4 ]); // 10\n * ```\n * @param data\n * @returns Maximum\n */\n//eslint-disable-next-line functional/prefer-immutable-types\nexport const maxFast = (data: ReadonlyArray<number> | Float32Array): number => {\n  //eslint-disable-next-line functional/no-let\n  let m = Number.MIN_SAFE_INTEGER;\n  //eslint-disable-next-line functional/no-let\n  for (const datum of data) {\n    m = Math.max(m, datum);\n  }\n  return m;\n};\n\n/**\n * Returns the total of `data` without pre-filtering for speed.\n *\n * For most uses, {@link total} should suffice.\n *\n * ```js\n * import { Arrays } from 'https://unpkg.com/ixfx/dist/collections.js';\n * Arrays.totalFast([ 10, 0, 4 ]); // 14\n * ```\n * @param data\n * @returns Maximum\n */\n//eslint-disable-next-line functional/prefer-immutable-types\nexport const totalFast = (data: ReadonlyArray<number> | Float32Array): number => {\n  //eslint-disable-next-line functional/no-let\n  let m = 0;\n  //eslint-disable-next-line functional/no-let\n  for (const datum of data) {\n    m += datum;\n  }\n  return m;\n};\n\n/**\n * Returns the maximum out of `data` without pre-filtering for speed.\n *\n * For most uses, {@link max} should suffice.\n *\n * ```js\n * import { Arrays } from 'https://unpkg.com/ixfx/dist/collections.js';\n * Arrays.minFast([ 10, 0, 100 ]); // 0\n * ```\n * @param data\n * @returns Maximum\n */\n//eslint-disable-next-line functional/prefer-immutable-types\nexport const minFast = (data: ReadonlyArray<number> | Float32Array): number => {\n  //eslint-disable-next-line functional/no-let\n  let m = Number.MIN_SAFE_INTEGER;\n  //eslint-disable-next-line functional/no-let\n  for (const datum of data) {\n    m = Math.min(m, datum);\n  }\n  return m;\n};\n","\n/**\n * Cycle through the contents of an array. By default starts at index 0.\n * ```js\n * const c = arrayCycle([`apples`, `oranges`, `pears`]);\n * c.current; // `apples`\n * c.next();  // `oranges`\n * c.next();  // `pears`\n * c.next();  // `apples`\n * c.prev();  // `pears`\n * ```\n * \n * You can select an item by index or value:\n * ```\n * c.select(1); // `oranges`\n * c.select(`pears`); // `pears`\n * ```\n * \n * Other features:\n * ```js\n * c.current;   // Current value\n * c.toArray(); // Copy of array being cycled over\n * ```\n * \n * Additional info:\n * * Selecting by value uses === semantics.\n * * Works with a copy of input array\n * @param options Array to cycle over \n * @returns \n */\nexport const cycle = <T>(options: ReadonlyArray<T> | Array<T>) => {\n  const opts = [ ...options ];\n  let index = 0;\n  const next = () => {\n    index++;\n    if (index === opts.length) index = 0;\n    return value();\n  }\n\n  // eslint-disable-next-line unicorn/prevent-abbreviations\n  const prev = () => {\n    index--;\n    if (index === -1) index = opts.length - 1;\n    return value();\n  }\n\n  const value = (): typeof opts[ number ] => {\n    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n    return opts.at(index)!;\n  }\n\n  const select = (indexOrValue: number | typeof opts[ number ]) => {\n    if (typeof indexOrValue === `number`) {\n      index = indexOrValue;\n    } else {\n      const found = opts.indexOf(indexOrValue);\n      if (found === -1) throw new Error(`Could not find value`);\n      index = found;\n    }\n  }\n\n  const toArray = () => [ ...opts ];\n  return { toArray, next, prev, get current() { return value() }, select }\n}","import { valuesEqual } from \"./ValuesEqual.js\";\n/**\n * Zip combines the elements of two or more arrays based on their index.\n *\n * ```js\n * import { zip } from 'https://unpkg.com/ixfx/dist/arrays.js';\n *\n * const a = [1,2,3];\n * const b = [`red`, `blue`, `green`];\n *\n * const c = zip(a, b);\n * // Yields:\n * // [\n * //   [1, `red`],\n * //   [2, `blue`],\n * //   [3, `green`]\n * // ]\n * ```\n *\n * Typically the arrays you zip together are all about the same logical item. Eg, in the above example\n * perhaps `a` is size and `b` is colour. So thing #1 (at array index 0) is a red thing of size 1. Before\n * zipping we'd access it by `a[0]` and `b[0]`. After zipping, we'd have c[0], which is array of [1, `red`].\n * @param arrays\n * @returns Zipped together array\n */\n\n\n\n//eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport const zip = (\n  ...arrays: Array<Array<any>> | ReadonlyArray<Array<any>> | ReadonlyArray<ReadonlyArray<any>>\n): Array<any> => {\n  // Unit tested\n  if (arrays.some((a) => !Array.isArray(a))) {\n    throw new Error(`All parameters must be an array`);\n  }\n  const lengths = arrays.map((a) => a.length);\n  if (!valuesEqual(lengths)) {\n    throw new Error(`Arrays must be of same length`);\n  }\n\n  const returnValue = [];\n  const length = lengths[ 0 ];\n\n  for (let index = 0; index < length; index++) {\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-return\n    returnValue.push(arrays.map((a) => a[ index ]));\n  }\n  return returnValue;\n};","import { zip } from './Zip.js';\nimport { weight } from './NumericArrays.js';\n/**\n * Computes an average of an array with a set of weights applied.\n *\n * Weights can be provided as an array, expected to be on 0..1 scale, with indexes\n * matched up to input data. Ie. data at index 2 will be weighed by index 2 in the weightings array.\n *\n * ```js\n * import { Arrays } from 'https://unpkg.com/ixfx/dist/collections.js';\n * // All items weighted evenly\n * Arrays.averageWeighted([1,2,3], [1,1,1]); // 2\n *\n * // First item has full weight, second half, third quarter\n * Arrays.averageWeighted([1,2,3], [1, 0.5, 0.25]); // 1.57\n *\n * // With reversed weighting of [0.25,0.5,1] value is 2.42\n * ```\n *\n * A function can alternatively be provided to compute the weighting based on array index, via {@link weight}.\n *\n * ```js\n * Arrays.averageWeighted[1,2,3], Easings.gaussian()); // 2.0\n * ```\n *\n * This is the same as:\n *\n * ```js\n * import { Arrays } from 'https://unpkg.com/ixfx/dist/collections.js';\n * import { Easings } from 'https://unpkg.com/ixfx/dist/modulation.js';\n *\n * const data = [1,2,3];\n * const w = Arrays.weight(data, Easings.gaussian());\n * const avg = Arrays.averageWeighted(data, w); // 2.0\n * ```\n * @param data Data to average\n * @param weightings Array of weightings that match up to data array, or an easing function\n */\nexport const averageWeighted = (\n  data: Array<number> | ReadonlyArray<number>,\n  weightings: Array<number> | ReadonlyArray<number> | ((value: number) => number)\n): number => {\n  if (typeof weightings === `function`) weightings = weight(data, weightings);\n\n  const ww = zip(data, weightings);\n  // eslint-disable-next-line unicorn/no-array-reduce\n  const [ totalV, totalW ] = ww.reduce(\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-return\n    (accumulator, v: Array<number>) => [ accumulator[ 0 ] + v[ 0 ] * v[ 1 ], accumulator[ 1 ] + v[ 1 ] ],\n    [ 0, 0 ]\n  );\n  return totalV / totalW;\n};","import { guardArray } from '../GuardArray.js';\n/**\n * Sorts an array of objects in ascending order\n * by the given property name, assuming it is a number.\n *\n * ```js\n * const data = [\n *  { size: 10, colour: `red` },\n *  { size: 20, colour: `blue` },\n *  { size: 5, colour: `pink` }\n * ];\n * const sorted = Arrays.sortByNumericProperty(data, `size`);\n *\n * Yields items ascending order:\n * [ { size: 5, colour: `pink` }, { size: 10, colour: `red` }, { size: 20, colour: `blue` } ]\n * ```\n * @param data\n * @param propertyName\n */\nexport const sortByNumericProperty = <V, K extends keyof V>(\n  data: ReadonlyArray<V> | Array<V>,\n  propertyName: K\n) => [ ...data ].sort((a, b) => {\n  guardArray(data, `data`);\n  const av = a[ propertyName ];\n  const bv = b[ propertyName ];\n  if (av < bv) return -1;\n  if (av > bv) return 1;\n  return 0;\n});","import { isEqualDefault } from '../IsEqual.js'\n\nexport const max = <V>(iterable: Iterable<V>, scorer: (v: V) => number): V | undefined => {\n  let highestValue: V | undefined;\n  let highestScore = Number.MIN_SAFE_INTEGER;\n  for (const value of iterable) {\n    const score = scorer(value);\n    if (score >= highestScore) {\n      highestScore = score;\n      highestValue = value;\n    }\n  }\n  return highestValue;\n}\n\nexport const min = <V>(iterable: Iterable<V>, scorer: (v: V) => number): V | undefined => {\n  let lowestValue: V | undefined;\n  let lowestScore\n    = Number.MAX_SAFE_INTEGER;\n  for (const value of iterable) {\n    const score = scorer(value);\n    if (score <= lowestScore) {\n      lowestScore = score;\n      lowestValue = value;\n    }\n  }\n  return lowestValue;\n}\n\n/**\n * Returns _true_ if all values in iterables are equal, regardless\n * of their position. Uses === equality semantics by default.\n * \n * @example Default equality checking\n * ```js\n * const a = ['apples','oranges','pears'];\n * const b = ['pears','oranges','apples'];\n * compareValuesEqual(a, b); // True\n * ```\n *\n * @example Custom equality checking\n * ```js\n * const a = [ { name: 'John' }];\n * const b = [ { name: 'John' }];\n * // False, since object identies are different\n * compareValuesEqual(a, b); \n * // True, since now we're comparing by value\n * compareValuesEqual(a, b, (aa,bb) => aa.name === bb.name);\n * ```\n * @param arrays\n * @param eq\n */\nexport const compareValuesEqual = <V>(\n  //eslint-disable-next-line functional/prefer-readonly-type\n  iterableA: Iterable<V>,\n  iterableB: Iterable<V>,\n  eq = isEqualDefault<V>\n): boolean => {\n  const returnValue = compareValues(iterableA, iterableB, eq);\n  return returnValue.a.length === 0 && returnValue.b.length === 0;\n};\n\n\n/**\n * Compares the values of two iterables, returning a list\n * of items they have in common, and those unique in `a` or `b`.\n * Ignores ordering of values.\n *\n * ```js\n * const a = ['apples', 'oranges', 'pears' ]\n * const b = ['pears', 'kiwis', 'bananas' ];\n *\n * const r = compareValues(a, b);\n * r.shared;  // [ 'pears' ]\n * r.a;       // [ 'apples', 'oranges' ]\n * r.b;       // [ 'kiwis', 'bananas' ]\n * ```\n * @param a\n * @param b\n * @param eq\n * @returns\n */\nexport const compareValues = <V>(\n  a: Iterable<V>,\n  b: Iterable<V>,\n  eq = isEqualDefault<V>\n) => {\n  const shared = [];\n  const aUnique = [];\n  const bUnique = [];\n\n  for (const element of a) {\n    //eslint-disable-next-line functional/no-let\n    let seenInB = false;\n    for (const element_ of b) {\n      if (eq(element, element_)) {\n        seenInB = true;\n        break;\n      }\n    }\n    if (seenInB) {\n      //eslint-disable-next-line functional/immutable-data\n      shared.push(element);\n    } else {\n      //eslint-disable-next-line functional/immutable-data\n      aUnique.push(element);\n    }\n  }\n\n  for (const element of b) {\n    //eslint-disable-next-line functional/no-let\n    let seenInA = false;\n    for (const element_ of a) {\n      if (eq(element, element_)) {\n        seenInA = true;\n      }\n    }\n    if (!seenInA) {\n      //eslint-disable-next-line functional/immutable-data\n      bUnique.push(element);\n    }\n  }\n\n  return {\n    shared,\n    a: aUnique,\n    b: bUnique,\n  };\n};\n","import { SimpleEventEmitter } from '../Events.js';\nimport * as StateMachine from './StateMachine.js';\n\nimport type { StateNames, Transitions, MachineState } from './StateMachine.js';\nimport { Elapsed } from './index.js';\n\nexport type StateChangeEvent<V extends Transitions> = {\n  readonly newState: StateNames<V>;\n  readonly priorState: StateNames<V>;\n};\n\nexport type StopEvent<V extends Transitions> = {\n  readonly state: StateNames<V>;\n};\n\nexport type StateMachineEventMap<V extends Transitions> = {\n  readonly change: StateChangeEvent<V>;\n  readonly stop: StopEvent<V>;\n};\n\nexport type Opts<V extends Transitions> = {\n  readonly debug?: boolean;\n  readonly initial?: StateNames<V>;\n};\n\nexport class StateMachineWithEvents<\n  V extends Transitions,\n> extends SimpleEventEmitter<StateMachineEventMap<V>> {\n  #sm: MachineState<V>;\n  #smInitial: MachineState<V>;\n\n  #debug: boolean;\n  #isDoneNeedsFiring = false;\n  #isDone = false;\n  #changedAt = Elapsed.infinity();\n\n  /**\n   * Create a state machine with initial state, description and options\n   * @param m Machine description\n   * @param opts Options for machine (defaults to `{debug:false}`)\n   * @memberof StateMachine\n   */\n  constructor(m: V, opts: Opts<V> = {}) {\n    super();\n\n    this.#debug = opts.debug ?? false;\n    this.#sm = StateMachine.init(m, opts.initial);\n    this.#smInitial = StateMachine.cloneState(this.#sm);\n  }\n\n  #setIsDone(v: boolean) {\n    if (this.#isDone === v) return;\n    this.#isDone = v;\n    if (v) {\n      this.#isDoneNeedsFiring = true;\n      setTimeout(() => {\n        if (!this.#isDoneNeedsFiring) return;\n        this.#isDoneNeedsFiring = false;\n        //console.log(`StateMachine isDone (${this.#state}), firing stop.`);\n        this.fireEvent(`stop`, { state: this.#sm.value as string });\n      }, 2);\n    } else {\n      this.#isDoneNeedsFiring = false;\n    }\n  }\n\n  /**\n   * Return a list of possible states from current state.\n   *\n   * If list is empty, no states are possible. Otherwise lists\n   * possible states, including 'null' for terminal\n   */\n  get statesPossible(): readonly (StateNames<V> | null)[] {\n    return StateMachine.possible(this.#sm);\n  }\n\n  /**\n   * Return a list of all defined states\n   */\n  get statesDefined(): readonly StateNames<V>[] {\n    return Object.keys(this.#sm.machine);\n  }\n\n  /**\n   * Moves to the next state if possible. If multiple states are possible, it will use the first.\n   * If machine is finalised, no error is thrown and null is returned.\n   *\n   * @returns {(string|null)} Returns new state, or null if machine is finalised\n   * @memberof StateMachine\n   */\n  next(): string | null {\n    const p = StateMachine.possible(this.#sm);\n    if (p.length === 0) return null;\n    this.state = p[ 0 ] as string;\n    return p[ 0 ] as string;\n  }\n\n  /**\n   * Returns true if state machine is in its final state\n   *\n   * @returns\n   * @memberof StateMachine\n   */\n  get isDone(): boolean {\n    return StateMachine.done(this.#sm);\n  }\n\n  /**\n   * Resets machine to initial state\n   *\n   * @memberof StateMachine\n   */\n  reset() {\n    this.#setIsDone(false);\n    this.#sm = StateMachine.cloneState(this.#smInitial);\n\n    //eslint-disable-next-line functional/immutable-data\n    this.#changedAt = Elapsed.since();\n  }\n\n  /**\n   * Throws if it's not valid to transition to `newState`\n   * @param newState\n   * @returns\n   */\n  validateTransition(newState: StateNames<V>): void {\n    StateMachine.validateTransition(this.#sm, newState);\n  }\n\n  /**\n   * Returns _true_ if `newState` is valid transition from current state.\n   * Use {@link validateTransition} if you want an explanation for the _false_ results.\n   * @param newState\n   * @returns\n   */\n  isValid(newState: StateNames<V>): boolean {\n    return StateMachine.isValidTransition(this.#sm, newState);\n  }\n\n  /**\n   * Gets or sets state. Throws an error if an invalid transition is attempted.\n   * Use `StateMachine.isValid` to check validity without changing.\n   *\n   * If `newState` is the same as current state, the request is ignored silently.\n   *\n   * @memberof StateMachine\n   */\n  set state(newState: StateNames<V>) {\n    const priorState = this.#sm.value as string;\n    if (newState === this.#sm.value) return;\n\n    // Try to change state\n    this.#sm = StateMachine.to(this.#sm, newState);\n    if (this.#debug) {\n      console.log(`StateMachine: ${ priorState } -> ${ newState as string }`);\n    }\n    this.#changedAt = Elapsed.since();\n    setTimeout(() => {\n      this.fireEvent(`change`, { newState: newState, priorState: priorState });\n    }, 1);\n\n    if (StateMachine.done(this.#sm)) this.#setIsDone(true);\n  }\n\n  get state(): string {\n    return this.#sm.value as string;\n  }\n\n  /**\n   * Returns timestamp when state was last changed.\n   * See also `elapsed`\n   */\n  //eslint-disable-next-line functional/prefer-tacit\n  get changedAt(): number {\n    return this.#changedAt();\n  }\n\n  /**\n   * Returns milliseconds elapsed since last state change.\n   * See also `changedAt`\n   */\n  //eslint-disable-next-line functional/prefer-tacit\n  get elapsed(): number {\n    return this.#changedAt();\n  }\n}\n","import { defaultComparer, type Comparer } from '../Util.js';\nimport { shuffle } from '../collections/arrays/index.js';\n\nexport type ExpressionOrResult<ArgsType, ResultType> =\n  | ResultType\n  | ((\n    args: ArgsType | undefined\n  ) => Promise<ResultType | undefined> | ResultType | undefined | void);\n\n//eslint-disable-next-line functional/no-mixed-types\nexport type RunOpts<ResultType> = {\n  /**\n   * If provided, filters the set of results prior to returning.\n   * @param result\n   * @returns\n   */\n  readonly filter?: (result: ResultType) => boolean;\n  /**\n   * If true, execution order is shuffled each time\n   */\n  readonly shuffle?: boolean;\n  /**\n   * Function to rank results. By default uses {@link defaultComparer} which orders\n   * by numeric value or alphabetical.\n   */\n  readonly rank?: Comparer<ResultType>;\n  /**\n   * If provided, stops execution if _true_ is returned.\n   * Result(s) include most recent execution.\n   * @param latest Latest result\n   * @param sorted Sorted list of current results, not including latest\n   * @returns\n   */\n  readonly stop?: (\n    latest: ResultType | undefined,\n    sorted: readonly ResultType[]\n  ) => boolean;\n};\n\nexport type RunSingleOpts<V> = RunOpts<V> & {\n  readonly at?: number;\n};\n/**\n * Runs a series of async expressions, returning the results.\n * Use {@link runSingle} if it's only a single result you care about.\n *\n * @example Run three functions, returning the highest-ranked result.\n * ```js\n * const result = run([\n *  () => 10,\n *  () => 2,\n *  () => 3\n * ]);\n * // Yields: 10\n * ```\n *\n * Options can be passed for evaluation:\n * ```js\n * const result = run([\n *  (args) => {\n *    if (args === 'apple') return 100;\n *  },\n *  () => {\n *    return 10;\n *  }\n * ])\n * ```\n *\n * ```js\n * const expr = [\n *  (opts) => 10,\n *  (opts) => 2,\n *  (opts) => 3\n * ];\n * const opts = {\n *  rank: (a, b) => {\n *    if (a < b) return -1;\n *    if (a > b) return 1;\n *    return 0;\n *  }\n * }\n * const result = await run(expr, opts);\n * // Returns: 2\n * ```\n *\n * In terms of typing, it takes an generic arguments `ArgsType` and `ResultType`:\n * - `ArgsType`: type of expression arguments. This might be `void` if no arguments are used.\n * - `ResultType`:  return type of expression functions\n *\n * Thus the `expressions` parameter is an array of functions:\n * ```js\n * (args:ArgsType|undefined) => ResultType|undefined\n * // or\n * (args:ArgsType|undefined) => Promise<ResultType|undefined>\n * ```\n *\n * Example:\n * ```js\n * const expressions = [\n *  // Function takes a string arg\n *  (args:string) => return true; // boolean is the necessary return type\n * ];\n * const run<string,boolean>(expressions, opts, 'hello');\n * ```\n * @param expressions\n * @param opts\n * @param args\n * @returns\n */\nexport const run = async <ArgsType, ResultType>(\n  expressions: //eslint-disable-next-line functional/prefer-readonly-type\n    | ExpressionOrResult<ArgsType, ResultType>[]\n    | ExpressionOrResult<ArgsType, ResultType>\n    | readonly ExpressionOrResult<ArgsType, ResultType>[],\n  opts: RunOpts<ResultType> = {},\n  args?: ArgsType\n): Promise<ResultType[]> => {\n  const results: ResultType[] = [];\n  const compareFn = opts.rank ?? defaultComparer;\n  //eslint-disable-next-line functional/no-let\n  let expressionsArray = Array.isArray(expressions)\n    ? (expressions as ExpressionOrResult<ArgsType, ResultType>[])\n    : [ expressions as ExpressionOrResult<ArgsType, ResultType> ];\n  if (opts.shuffle) expressionsArray = shuffle(expressionsArray);\n\n  for (let i = 0; i < expressionsArray.length; i++) {\n    const exp = expressionsArray[ i ];\n    //eslint-disable-next-line functional/no-let\n    let r: ResultType;\n    if (typeof exp === 'function') {\n      // @ts-ignore\n      r = await exp(args);\n    } else {\n      r = exp;\n    }\n    if (r !== undefined) {\n      //eslint-disable-next-line functional/immutable-data\n      results.push(r);\n      //eslint-disable-next-line functional/immutable-data\n      results.sort(compareFn);\n    }\n\n    if (typeof opts.stop !== 'undefined') {\n      if (opts.stop(r, results)) {\n        break;\n      }\n    }\n  }\n\n  if (opts.filter) {\n    return results.filter(opts.filter);\n  }\n  return results;\n};\n\n/**\n * Like {@link run}, but it returns a single result or _undefined_.\n * Use the `at` option to specify which index of results to use.\n * By default it's -1, which is the presumably the highest-ranked result.\n *\n * @param expressions\n * @param opts\n * @param args\n * @returns\n */\nexport const runSingle = async <ArgsType, ResultType>(\n  expressions: readonly ExpressionOrResult<ArgsType, ResultType>[],\n  opts: RunSingleOpts<ResultType> = {},\n  args?: ArgsType\n): Promise<ResultType | undefined> => {\n  const results = await run(expressions, opts, args);\n  if (!results) return;\n  if (results.length === 0) return;\n  const at = opts.at ?? -1;\n  return results.at(at);\n};\n","import * as StateMachine from './StateMachine.js';\nimport * as Execute from './Execute.js';\nimport { type MachineState } from './StateMachine.js';\nimport { defaultComparer } from '../Util.js';\nimport { randomElement } from '../collections/arrays/index.js';\nimport * as Logger from '../debug/Logger.js';\n\nexport type Result<V extends StateMachine.Transitions> = {\n  /**\n   * Score of this result. This is used when a state\n   * has multiple handlers returning results separately.\n   * If not defined, 0 is used.\n   */\n  readonly score?: number;\n\n  //readonly state?: StateMachine.StateNames<V>;\n  /**\n   * If specified,the state to transition to. Use\n   * _true_ to attempt to automatically advance machine.\n   * This field is 2nd priority.\n   */\n  readonly next?: StateMachine.StateNames<V> | boolean;\n  /**\n   * If true, resets the machine.\n   * This flag is 1st priority, taking precedence over the `next` field.\n   */\n  readonly reset?: boolean;\n};\n\n//eslint-disable-next-line functional/no-mixed-types\nexport type Runner<V extends StateMachine.Transitions> = {\n  readonly run: () => Promise<StateMachine.MachineState<V> | undefined>;\n  readonly getValue: () => StateMachine.StateNames<V>;\n  readonly reset: () => void;\n  readonly to: (\n    state: StateMachine.StateNames<V>\n  ) => StateMachine.MachineState<V>;\n};\n\nexport type StatesHandler<V extends StateMachine.Transitions> = {\n  readonly if:\n  | ReadonlyArray<StateMachine.StateNames<V>>\n  //eslint-disable-next-line functional/prefer-readonly-type\n  | Array<StateMachine.StateNames<V>>\n  | StateMachine.StateNames<V>;\n  readonly then: ReadonlyArray<ExpressionOrResult<V>> | ExpressionOrResult<V>;\n  /**\n   * Logic for choosing which result, if there are multiple expressions.\n   * By default 'highest' (for highest ranked result)\n   */\n  readonly resultChoice?: `first` | `highest` | `lowest` | `random`;\n};\n\n// export type Prerequisite<V extends StateMachine.Transitions> =\n//   | readonly StateMachine.StateNames<V>[]\n//   | ((\n//       potentialState: StateMachine.StateNames<V>,\n//       state: StateMachine.MachineState<V>\n//     ) => boolean);\n\n// export type StatePrerequisites<V extends StateMachine.Transitions> = {\n//   readonly states:\n//     | readonly StateMachine.StateNames<V>[]\n//     | StateMachine.StateNames<V>;\n//   readonly condition?: Prerequisite<V>;\n// };\n\nexport type DriverOpts<V extends StateMachine.Transitions> = {\n  readonly handlers: ReadonlyArray<StatesHandler<V>>;\n  //readonly prereqs?: StatePrerequisites<V>;\n  readonly debug?: Logger.LogOption;\n  /**\n   * If _true_ execution of handlers is shuffled each time\n   */\n  readonly shuffleHandlers?: boolean;\n};\n\n// async function run<V extends StateMachine.Transitions>(\n//   machine: StateMachine.Machine<V>,\n//   handlers: readonly StatesHandler<V>[]\n// );\n\nexport type ExpressionOrResult<Transitions extends StateMachine.Transitions> =\n  | Result<Transitions>\n  | ((\n    machine?: MachineState<Transitions>\n  ) => Result<Transitions> | undefined);\n\n/**\n * Drives a state machine.\n *\n * Defaults to selecting the highest-ranked result to determine\n * what to do next.\n * @param machine\n * @param handlersOrOpts\n * @returns\n */\n// eslint-disable-next-line @typescript-eslint/require-await\nexport async function init<V extends StateMachine.Transitions>(\n  machine: StateMachine.Machine<V> | StateMachine.Transitions,\n  handlersOrOpts: ReadonlyArray<StatesHandler<V>> | DriverOpts<V>\n): Promise<Runner<V>> {\n  const opts: DriverOpts<V> = Array.isArray(handlersOrOpts)\n    ? {\n      handlers: handlersOrOpts as ReadonlyArray<StatesHandler<V>>,\n    }\n    : (handlersOrOpts as DriverOpts<V>);\n\n  const debug = Logger.resolveLogOption(opts.debug, {\n    category: `StateMachineDriver`,\n  });\n\n  // Index handlers by state, making sure there are not multiple\n  // handlers for a given state.\n  const byState = new Map<string, StatesHandler<V>>();\n  for (const h of opts.handlers) {\n    const ifBlock = Array.isArray(h.if) ? h.if : [ h.if ];\n    for (const state of ifBlock) {\n      if (typeof state !== `string`) {\n        throw new TypeError(\n          `Expected single or array of strings for the 'if' field. Got: '${ typeof state }'.`\n        );\n      }\n\n      if (byState.has(state)) {\n        throw new Error(\n          `Multiple handlers defined for state '${ state\n          }'. There should be at most one.`\n        );\n      }\n      byState.set(state, h);\n    }\n  }\n\n  // const expressions: Expression<V>[] = [\n  //   (_machine) => {\n  //     const r: Result<V> = {\n  //       next: 'hello',\n  //     };\n  //     return r;\n  //   },\n  // ];\n\n  const runOpts: Execute.RunOpts<Result<V>> = {\n    // Rank results by score\n    rank: (a, b) => {\n      return defaultComparer(a.score ?? 0, b.score ?? 0);\n    },\n    shuffle: opts.shuffleHandlers ?? false,\n  };\n\n  //eslint-disable-next-line functional/no-let\n  let sm = StateMachine.init(machine);\n\n  // Check that all 'if' states are actually defined on machine\n  for (const [ ifState ] of byState) {\n    // Check if state is defined\n    if (\n      typeof sm.machine[ ifState ] === `undefined` &&\n      ifState !== `__fallback`\n    ) {\n      throw new Error(\n        `StateMachineDriver handler references a state ('${ ifState }') which is not defined on the machine. Therefore this handler will never run.'`\n      );\n    }\n  }\n\n  const run = async (): Promise<StateMachine.MachineState<V> | undefined> => {\n    debug(`Run. State: ${ sm.value }`);\n    const state = sm.value;\n    //eslint-disable-next-line functional/no-let\n    let handler = byState.get(state);\n    if (handler === undefined) {\n      debug(`  No handler for state '${ state }', trying __fallback`);\n\n      // Is there a fallback?\n      handler = byState.get(`__fallback`);\n    }\n    if (handler === undefined) {\n      debug(`  No __fallback handler`);\n      return;\n    }\n\n    // If the `first` option is given, stop executing fns as soon as we get\n    // a valid result.\n    const runOptionsForHandler =\n      handler.resultChoice === `first`\n        ? {\n          ...runOpts,\n          stop: (latest: Result<V> | undefined) => {\n            if (!latest) return false;\n            if (`reset` in latest) return true;\n            if (`next` in latest && latest.next !== undefined) return true;\n            return false;\n          },\n        }\n        : runOpts;\n\n    const results = await Execute.run<MachineState<V>, Result<V>>(\n      handler.then,\n      runOptionsForHandler,\n      sm\n    );\n    debug(\n      `  In state '${ sm.value }' results: ${ results.length }. Choice: ${ handler.resultChoice\n      }`\n    );\n\n    // Apply selection logic\n    //eslint-disable-next-line functional/no-let\n    let r: Result<V> | undefined;\n    switch (handler.resultChoice ?? `highest`) {\n      case `highest`: {\n        r = results.at(-1);\n        break;\n      }\n      case `first`: {\n        r = results[ 0 ]; // Since we break on the first result\n        break;\n      }\n      case `lowest`: {\n        r = results.at(0);\n        break;\n      }\n      case `random`: {\n        r = randomElement(results);\n        break;\n      }\n      default: {\n        throw new Error(\n          `Unknown 'resultChoice' option: ${ handler.resultChoice }. Expected highest, first, lowest or random`\n        );\n      }\n    }\n\n    debug(`  Chosen result: ${ JSON.stringify(r) }`);\n    // Apply result\n    if (r && r.reset) {\n      sm = StateMachine.reset(sm);\n    } else if (r && r.next) {\n      if (typeof r.next === `boolean`) {\n        sm = StateMachine.next(sm);\n      } else {\n        debug(JSON.stringify(results));\n        sm = StateMachine.to(sm, r.next);\n      }\n    }\n    return sm;\n  };\n\n  return {\n    reset: () => {\n      sm = StateMachine.reset(sm);\n    },\n    getValue: () => sm.value,\n    run,\n    to: (state: StateMachine.StateNames<V>) => {\n      sm = StateMachine.to(sm, state);\n      return sm;\n    },\n  };\n}\n","import { intervalToMs, type Interval } from './IntervalType.js';\nimport { sleep } from './Sleep.js';\n\nimport { type AsyncPromiseOrGenerator } from './Types.js';\n\nexport type IntervalOpts = {\n  /**\n   * Sleep a fixed period of time regardless of how long each invocation of 'produce' takes\n   */\n  readonly fixed?: Interval;\n  /**\n   * Minimum interval. That is, only sleep if there is time left over after 'produce'\n   * is invoked.\n   */\n  readonly minimum?: Interval;\n  /**\n   * Optional signal to abort\n   */\n  readonly signal?: AbortSignal;\n  /**\n   * When to perform delay. Default is before 'produce' is invoked.\n   */\n  readonly delay?: `before` | `after`;\n};\n/**\n * Generates values from `produce` with a time delay.\n * `produce` can be a simple function that returns a value, an async function, or a generator.\n * If `produce` returns _undefined_, generator exits.\n * \n * @example Produce a random number every 500ms:\n * ```\n * const randomGenerator = interval(() => Math.random(), 500);\n * for await (const r of randomGenerator) {\n *  // Random value every 1 second\n *  // Warning: does not end by itself, a `break` statement is needed\n * }\n * ```\n *\n * @example Return values from a generator every 500ms:\n * ```js\n * import { interval } from 'https://unpkg.com/ixfx/dist/flow.js'\n * import { count } from 'https://unpkg.com/ixfx/dist/generators.js'\n * for await (const v of interval(count(10), { fixed: 1000 })) {\n *  // Do something with `v`\n * }\n * ```\n *\n * Options allow either fixed interval (wait this long between iterations), or a minimum interval (wait at least this long).\n * The latter is useful if `produce` takes some time - it will only wait the remaining time or not at all.\n *\n * If you just want to loop at a certain speed, consider using {@link continuously} instead.\n *\n * If the AbortSignal is triggered, an exception will be thrown, stopping iteration.\n * @template V Returns value of `produce` function\n * @param produce Function, generator to use\n * @param opts Options\n * @template V Data type\n * @returns\n */\nexport const interval = async function* <V>(\n  produce: AsyncPromiseOrGenerator<V> | ArrayLike<V>,\n  optsOrFixedMs: IntervalOpts | number = {}\n): AsyncGenerator<V> {\n  //eslint-disable-next-line functional/no-let\n  let cancelled = false;\n  const opts =\n    typeof optsOrFixedMs === `number`\n      ? { fixed: optsOrFixedMs }\n      : optsOrFixedMs;\n\n  const signal = opts.signal;\n  const when = opts.delay ?? `before`;\n  //eslint-disable-next-line functional/no-let\n  let sleepMs = intervalToMs(opts.fixed) ?? intervalToMs(opts.minimum, 0);\n  //eslint-disable-next-line functional/no-let\n  let started = performance.now();\n\n  const minIntervalMs = opts.minimum ? intervalToMs(opts.minimum) : undefined;\n  const doDelay = async () => {\n    const elapsed = performance.now() - started;\n    if (typeof minIntervalMs !== `undefined`) {\n      sleepMs = Math.max(0, minIntervalMs - elapsed);\n    }\n    if (sleepMs) {\n      await sleep({ millis: sleepMs, signal });\n    }\n    started = performance.now();\n    if (signal?.aborted) throw new Error(`Signal aborted ${ signal.reason }`);\n  };\n\n  // Get an iterator over array\n  if (Array.isArray(produce)) produce = produce.values();\n\n  const isGenerator =\n    typeof produce === `object` &&\n    `next` in produce &&\n    typeof produce.next === `function`;\n\n  try {\n    while (!cancelled) {\n      if (when === `before`) await doDelay();\n      //if (cancelled) return;\n      if (typeof produce === `function`) {\n        // Returns V or Promise<V>\n        const result = await produce();\n        if (typeof result === `undefined`) return; // Done\n        yield result;\n      } else if (isGenerator) {\n        // Generator\n        const result = await (produce as AsyncGenerator<V>).next();\n        if (result.done) return;\n        yield result.value;\n      } else {\n        throw new Error(\n          `produce param does not seem to return a value/Promise and is not a generator?`\n        );\n      }\n\n      if (when === `after`) await doDelay();\n    }\n  } finally {\n    cancelled = true;\n  }\n};\n","\nimport { throwIntegerTest, integerTest } from '../Guards.js';\nimport { type HasCompletion, type HasCompletionRunStates } from './index.js';\n\nimport { intervalToMs, type Interval } from './IntervalType.js';\n\nexport type TimeoutSyncCallback = (\n  elapsedMs?: number,\n  ...args: ReadonlyArray<unknown>\n) => void;\nexport type TimeoutAsyncCallback = (\n  elapsedMs?: number,\n  ...args: ReadonlyArray<unknown>\n) => Promise<void>;\n\n/**\n * A resettable timeout, returned by {@link timeout}\n */\nexport type Timeout = HasCompletion & {\n  /**\n   * Starts the timer.\n   * If the timer has already been started and has a scheduled execution, this is cancelled \n   * and re-scheduled.\n   * @param altTimeoutMs Optional override for the interval. Use _undefined_ to use the original interval\n   * @param args \n   */\n  start(altTimeoutMs?: number, args?: ReadonlyArray<unknown>): void;\n  /**\n   * Cancels the timer, aborting any scheduled execution.\n   */\n  cancel(): void;\n};\n\n/**\n * Returns a {@link Timeout} that can be triggered, cancelled and reset. Use {@link continuously} for interval-\n * based loops.\n *\n * Once `start()` is called, `callback` will be scheduled to execute after `timeoutMs`.\n * If `start()` is called again, the waiting period will be reset to `timeoutMs`.\n *\n * @example Essential functionality\n * ```js\n * const fn = () => {\n *  console.log(`Executed`);\n * };\n * const t = timeout(fn, 60*1000);\n * t.start();   // After 1 minute `fn` will run, printing to the console\n * ```\n *\n * @example Control execution functionality\n * ```\n * t.cancel();  // Cancel it from running\n * t.start();   // Schedule again after 1 minute\n * t.start(30*1000); // Cancel that, and now scheduled after 30s\n * t.isDone;    // True if a scheduled event is pending\n * ```\n *\n * Callback function receives any additional parameters passed in from start.\n * This can be useful for passing through event data:\n *\n * @example\n * ```js\n * const t = timeout( (elapsedMs, ...args) => {\n *  // args contains event data\n * }, 1000);\n * el.addEventListener(`click`, t.start);\n * ```\n *\n * Asynchronous callbacks can be used as well:\n * ```js\n * timeout(async () => {...}, 100);\n * ```\n *\n * If you don't expect to need to control the timeout, consider using {@link delay},\n * which can run a given function after a specified delay.\n * @param callback\n * @param timeoutMs\n * @returns {@link Timeout}\n */\nexport const timeout = (\n  callback: TimeoutSyncCallback | TimeoutAsyncCallback,\n  interval: Interval\n): Timeout => {\n  if (callback === undefined) {\n    throw new Error(`callback parameter is undefined`);\n  }\n  const intervalMs = intervalToMs(interval);\n  throwIntegerTest(intervalMs, `aboveZero`, `interval`);\n\n  let timer: ReturnType<typeof setTimeout>;\n  let startedAt = 0;\n  let startCount = 0;\n  let state: HasCompletionRunStates = `idle`;\n\n  const clear = () => {\n    startedAt = 0;\n    globalThis.clearTimeout(timer);\n    state = `idle`;\n  }\n\n  const start = async (\n    altInterval: Interval = interval,\n    args: Array<unknown>\n  ): Promise<void> => {\n    const p = new Promise<void>((resolve, reject) => {\n      startedAt = performance.now();\n      const altTimeoutMs = intervalToMs(altInterval);\n      const it = integerTest(altTimeoutMs, `aboveZero`, `altTimeoutMs`);\n      if (!it[ 0 ]) {\n        reject(new Error(it[ 1 ]));\n        return;\n      }\n\n      switch (state) {\n        case `scheduled`: {\n          // Cancel other scheduled execution\n          cancel();\n          break;\n        }\n        case `running`: {\n          //console.warn(`Timeout being rescheduled while task is already running`);\n          break;\n        }\n      }\n      state = `scheduled`;\n\n      // eslint-disable-next-line @typescript-eslint/no-misused-promises\n      timer = globalThis.setTimeout(async () => {\n        if (state !== `scheduled`) {\n          console.warn(`Timeout skipping execution since state is not 'scheduled'`);\n          clear();\n          return;\n        }\n        const args_ = args ?? [];\n        startCount++;\n        state = `running`;\n        await callback(performance.now() - startedAt, ...args_);\n        state = `idle`\n        clear();\n        resolve();\n      }, altTimeoutMs);\n    });\n    return p;\n  };\n\n  const cancel = () => {\n    if (state === `idle`) return;\n    clear();\n  };\n\n  return {\n    // eslint-disable-next-line @typescript-eslint/no-misused-promises\n    start,\n    cancel,\n    get runState() {\n      return state;\n    },\n    get startCount() {\n      return startCount;\n    }\n  };\n};\n","export type UpdateFailPolicy = `fast` | `slow` | `backoff`;\n/**\n * Calls the async `fn` to generate a value if there is no prior value or\n * `intervalMs` has elapsed since value was last generated.\n * @example\n * ```js\n * const f = updateOutdated(async () => {\n *  const r = await fetch(`blah`);\n *  return await r.json();\n * }, 60*1000);\n *\n * // Result will be JSON from fetch. If fetch happened already in the\n * // last 60s, return cached result. Otherwise it will fetch data\n * const result = await f();\n * ```\n *\n * Callback `fn` is passed how many milliseconds have elapsed since last update. It's\n * minimum value will be `intervalMs`.\n *\n * ```js\n * const f = updateOutdated(async elapsedMs => {\n *  // Do something with elapsedMs?\n * }, 60*1000;\n * ```\n *\n * There are different policies for what to happen if `fn` fails. `slow` is the default.\n * * `fast`: Invocation will happen immediately on next attempt\n * * `slow`: Next invocation will wait `intervalMs` as if it was successful\n * * `backoff`: Attempts will get slower and slower until next success. Interval is multipled by 1.2 each time.\n *\n * @param fn Async function to call. Must return a value.\n * @param intervalMs Maximum age of cached result\n * @param updateFail `slow` by default\n * @returns Value\n */\nexport const updateOutdated = <V>(\n  fn: (elapsedMs?: number) => Promise<V>,\n  intervalMs: number,\n  updateFail: UpdateFailPolicy = `slow`\n): (() => Promise<V>) => {\n  //eslint-disable-next-line functional/no-let\n  let lastRun = 0;\n  //eslint-disable-next-line functional/no-let\n  let lastValue: V | undefined;\n  //eslint-disable-next-line functional/no-let\n  let intervalMsCurrent = intervalMs;\n\n  //eslint-disable-next-line no-async-promise-executor\n  return () =>\n    new Promise(async (resolve, reject) => {\n      const elapsed = performance.now() - lastRun;\n      if (lastValue === undefined || elapsed > intervalMsCurrent) {\n        try {\n          lastRun = performance.now();\n          lastValue = await fn(elapsed);\n          intervalMsCurrent = intervalMs;\n        } catch (ex) {\n          if (updateFail === `fast`) {\n            lastValue = undefined;\n            lastRun = 0;\n          } else if (updateFail === `backoff`) {\n            intervalMsCurrent = Math.floor(intervalMsCurrent * 1.2);\n          }\n          reject(ex);\n          return;\n        }\n      }\n      resolve(lastValue);\n    });\n};\n","import { throwIntegerTest } from '../Guards.js';\nimport { intervalToMs, type Interval } from './IntervalType.js';\nimport type { HasCompletion, HasCompletionRunStates } from './Types.js';\n/**\n * Runs a function continuously, returned by {@link Continuously}\n */\nexport type Continuously = HasCompletion & {\n  /**\n   * Starts loop. If already running, does nothing\n   */\n  start(): void;\n\n  /**\n   * (Re-)starts the loop. If an existing iteration has been\n   * scheduled, this is cancelled and started again.\n   *\n   * This can be useful when adjusting the interval\n   */\n  reset(): void;\n  /**\n   * How many milliseconds since start() was last called\n   */\n  get elapsedMs(): number;\n  /**\n   * How many iterations of the loop since start() was last called\n   */\n  //get ticks(): number;\n  /**\n   * Returns _true_ if the loop is not running. This could be because\n   * it was never started, or it started and was exited.\n   */\n  //get isDone(): boolean;\n  /**\n   * Returns _true_ if the loop is currently running.\n   */\n  //get isRunning(): boolean;\n  /**\n   * If disposed, the continuously instance won't be re-startable\n   */\n  get isDisposed(): boolean;\n  /**\n   * Stops loop. It can be restarted using .start()\n   */\n  cancel(): void;\n  /**\n   * Set interval. Change will take effect on next loop. For it to kick\n   * in earlier, call .reset() after changing the value.\n   */\n  set interval(interval: Interval);\n  get interval(): Interval;\n};\n\nexport type ContinuouslySyncCallback = (\n  ticks?: number,\n  elapsedMs?: number\n  // eslint-disable-next-line @typescript-eslint/no-invalid-void-type\n) => boolean | void;\nexport type ContinuouslyAsyncCallback = (\n  ticks?: number,\n  elapsedMs?: number\n  // eslint-disable-next-line @typescript-eslint/no-invalid-void-type\n) => Promise<boolean | void>;\n\n// const raf =\n//   typeof window === `undefined`\n//     ? (callback: () => void) => window.setTimeout(callback, 1)\n//     : (callback: () => void) => window.requestAnimationFrame(callback);\n\nexport type OnStartCalled = `continue` | `cancel` | `reset` | `dispose`;\n\n//eslint-disable-next-line functional/no-mixed-types\nexport type ContinuouslyOpts = {\n  readonly fireBeforeWait: boolean;\n  /**\n   * Called whenever .start() is invoked.\n   * If this function returns:\n   *  - `continue`: the loop starts if it hasn't started yet, or continues if already started\n   *  - `cancel`: loop stops, but can be re-started if .start() is called again\n   *  - `dispose`: loop stops and will throw an error if .start() is attempted to be called\n   *  - `reset`: loop resets (ie. existing scheduled task is cancelled)\n   *\n   */\n  readonly onStartCalled: (\n    ticks?: number,\n    elapsedMs?: number\n  ) => OnStartCalled;\n};\n\n/**\n * Returns a {@link Continuously} that continuously at `intervalMs`, executing `callback`.\n * By default, first the sleep period happens and then the callback happens.\n * Use {@link Timeout} for a single event.\n *\n * If callback returns _false_, loop exits.\n *\n * Call `start` to begin/reset loop. `cancel` stops loop.\n *\n * @example Animation loop\n * ```js\n * const draw = () => {\n *  // Draw on canvas\n * }\n *\n * // Run draw() synchronised with monitor refresh rate via `window.requestAnimationFrame`\n * continuously(draw).start();\n * ```\n *\n * @example With delay\n * ```js\n * const fn = () => {\n *  console.log(`1 minute`);\n * }\n * const c = continuously(fn, 60*1000);\n * c.start(); // Runs `fn` every minute\n * ```\n *\n * @example Control a 'continuously'\n * ```js\n * c.cancel();   // Stop the loop, cancelling any up-coming calls to `fn`\n * c.elapsedMs;  // How many milliseconds have elapsed since start\n * c.ticks;      // How many iterations of loop since start\n * c.intervalMs; // Get/set speed of loop. Change kicks-in at next loop.\n *               // Use .start() to reset to new interval immediately\n * ```\n *\n * Asynchronous callback functions are supported too:\n * ```js\n * continuously(async () => { ..});\n * ```\n *\n * The `callback` function can receive a few arguments:\n * ```js\n * continuously( (ticks, elapsedMs) => {\n *  // ticks: how many times loop has run\n *  // elapsedMs:  how long since last loop\n * }).start();\n * ```\n *\n * If the callback explicitly returns _false_, the loop will be cancelled\n * ```js\n * continuously(ticks => {\n *  // Stop after 100 iterations\n *  if (ticks > 100) return false;\n * }).start();\n * ```\n *\n * You can intercept the logic for calls to `start()` with `onStartCalled`. It can determine\n * whether the `start()` proceeds, if the loop is cancelled, or the whole thing disposed,\n * so it can't run any longer.\n * ```js\n * continuously(callback, intervalMs, {\n *  onStartCalled:(ticks, elapsedMs) => {\n *    if (elapsedMs > 1000) return `cancel`;\n *  }\n * }).start();\n * ```\n *\n * To run `callback` *before* the sleep happens, set `fireBeforeWait`:\n * ```js\n * continuously(callback, intervalMs, { fireBeforeWait: true });\n * ```\n * @param callback Function to run. If it returns false, loop exits.\n * @param opts Additional options\n * @param intervalMs\n * @returns\n */\nexport const continuously = (\n  callback: ContinuouslyAsyncCallback | ContinuouslySyncCallback,\n  interval?: Interval,\n  opts: Partial<ContinuouslyOpts> = {}\n): Continuously => {\n  let intervalMs = intervalToMs(interval, 0);\n  throwIntegerTest(intervalMs, `positive`, `interval`);\n\n  const fireBeforeWait = opts.fireBeforeWait ?? false;\n  const onStartCalled = opts.onStartCalled;\n\n  let disposed = false;\n  //let running = false;\n  let runState: HasCompletionRunStates = `idle`;\n  let startCount = 0;\n  let ticks = 0;\n  let startedAt = performance.now();\n  let intervalUsed = interval ?? 0;\n  let cancelled = false;\n  let currentTimer: ReturnType<typeof globalThis.setTimeout> | undefined;\n\n  const deschedule = () => {\n    if (currentTimer === undefined) return;\n    //console.log(`continuously.deschedule`);\n    globalThis.clearTimeout(currentTimer);\n    currentTimer = undefined;\n  }\n\n  const schedule = (scheduledCallback: () => void) => {\n    if (intervalMs === 0) {\n      if (typeof requestAnimationFrame === `undefined`) {\n        currentTimer = globalThis.setTimeout(scheduledCallback, 0);\n      } else {\n        currentTimer = undefined;\n        requestAnimationFrame(scheduledCallback);\n      }\n    } else {\n      currentTimer = globalThis.setTimeout(scheduledCallback, intervalMs);\n    }\n  }\n  // const schedule =\n  //   intervalMs === 0\n  //     ? raf\n  //     : (callback_: () => void) => globalThis.setTimeout(callback_, intervalMs);\n  // const deschedule =\n  //   intervalMs === 0\n  //     ? (_: number) => {\n  //       /** no-op */\n  //     }\n  //     // eslint-disable-next-line @typescript-eslint/no-confusing-void-expression\n  //     : (timer: number) => globalThis.clearTimeout(timer);\n\n  const cancel = () => {\n    //console.log(`continuously.cancel state: ${ runState }. cancelled: ${ cancelled }`);\n    if (cancelled) return;\n    cancelled = true;\n\n    if (runState === `idle`) return; // No need to cancel\n    runState = `idle`;\n    ticks = 0;\n    deschedule();\n  };\n\n  const loop = async () => {\n    //console.log(`continuously loop state: ${ runState } timer: ${ currentTimer }`);\n    if (runState === `idle`) return;\n    runState = `running`\n    startCount++;\n    const valueOrPromise = callback(ticks++, performance.now() - startedAt);\n    const value = typeof valueOrPromise === `object` ? (await valueOrPromise) : valueOrPromise;\n    if (cancelled) {\n      //console.log(`continiously cancelled!`);\n      return;\n    }\n    runState = `scheduled`;\n\n    // Didn't get a value, exit out\n    if (value !== undefined && !value) {\n      cancel();\n      return;\n    }\n    if (cancelled) return; // has been cancelled\n    //console.log(`continuously.loop rescheduling`);\n    // eslint-disable-next-line @typescript-eslint/no-misused-promises\n    schedule(loop);\n  };\n\n  const start = () => {\n    if (disposed) throw new Error(`Disposed`);\n    cancelled = false;\n    if (onStartCalled !== undefined) {\n      // A function governs whether to allow .start() to go ahead\n      const doWhat = onStartCalled(ticks, performance.now() - startedAt);\n      switch (doWhat) {\n        case `cancel`: {\n          cancel();\n          return;\n        }\n        case `reset`: {\n          reset();\n          return;\n        }\n        case `dispose`: {\n          disposed = true;\n          cancel();\n          return;\n        }\n        // No default\n      }\n    }\n\n    //console.log(`continuously start runState: ${ runState }`);\n    if (runState === `idle`) {\n      // Start running\n      startedAt = performance.now();\n      runState = `scheduled`;\n      if (fireBeforeWait) {\n        void loop(); // Exec first, then wait\n      } else {\n        // eslint-disable-next-line @typescript-eslint/no-misused-promises\n        schedule(loop); // Wait first, then exec\n      }\n    }\n  };\n\n  const reset = () => {\n    if (disposed) throw new Error(`Disposed`);\n    cancelled = false;\n\n    // Cancel scheduled iteration\n    if (runState !== `idle`) {\n      cancel();\n    }\n    start();\n  };\n\n  return {\n    start,\n    reset,\n    cancel,\n    get interval() {\n      return intervalUsed;\n    },\n    get runState() {\n      return runState;\n    },\n    get startCount() {\n      return startCount;\n    },\n    set interval(interval: Interval) {\n      const ms = intervalToMs(interval, 0);\n      throwIntegerTest(ms, `positive`, `interval`);\n      intervalMs = ms;\n      intervalUsed = interval;\n    },\n    get isDisposed() {\n      return disposed;\n    },\n    get elapsedMs() {\n      return performance.now() - startedAt;\n    },\n  };\n};\n","import {\n  timeout,\n  type TimeoutSyncCallback,\n  type TimeoutAsyncCallback,\n} from './Timeout.js';\n\n/**\n * Returns a debounce function which acts to filter calls to a given function `fn`.\n *\n * Eg, Let's create a debounced wrapped for a function:\n * ```js\n * const fn = () => console.log('Hello');\n * const debouncedFn = debounce(fn, 1000);\n * ```\n *\n * Now we can call `debouncedFn()` as often as we like, but it will only execute\n * `fn()` after 1 second has elapsed since the last invocation. It essentially filters\n * many calls to fewer calls. Each time `debounceFn()` is called, the timeout is\n * reset, so potentially `fn` could never be called if the rate of `debounceFn` being called\n * is faster than the provided timeout.\n *\n * Remember that to benefit from `debounce`, you must call the debounced wrapper, not the original function.\n *\n * ```js\n * // Create\n * const d = debounce(fn, 1000);\n *\n * // Don't do this if we want to benefit from the debounce\n * fn();\n *\n * // Use the debounced wrapper\n * d(); // Only calls fn after 1000s\n * ```\n *\n * A practical use for this is handling high-frequency streams of data, where we don't really\n * care about processing every event, only last event after a period. Debouncing is commonly\n * used on microcontrollers to prevent button presses being counted twice.\n *\n * @example Handle most recent pointermove event after 1000ms\n * ```js\n * // Set up debounced handler\n * const moveDebounced = debounce((elapsedMs, evt) => {\n *    // Handle event\n * }, 500);\n *\n * // Wire up event\n * el.addEventListener(`pointermove`, moveDebounced);\n * ```\n *\n * Arguments can be passed to the debounced function:\n *\n * ```js\n * const fn = (x) => console.log(x);\n * const d = debounce(fn, 1000);\n * d(10);\n * ```\n *\n * If the provided function is asynchronous, it's possible to await the debounced\n * version as well. If the invocation was filtered, it returns instantly.\n *\n * ```js\n * const d = debounce(fn, 1000);\n * await d();\n * ```\n * @param callback Function to filter access to\n * @param timeoutMs Minimum time between invocations\n * @returns Debounce function\n */\nexport const debounce = (\n  callback: TimeoutSyncCallback | TimeoutAsyncCallback,\n  timeoutMs: number\n): DebouncedFunction => {\n  const t = timeout(callback, timeoutMs);\n  //eslint-disable-next-line functional/prefer-immutable-types\n  return (...args: unknown[]) => t.start(undefined, args);\n};\n\n/**\n * Debounced function\n */\nexport type DebouncedFunction = (...args: readonly unknown[]) => void;\n","/***\n * Throttles a function. Callback only allowed to run after minimum of `intervalMinMs`.\n *\n * @example Only handle move event every 500ms\n * ```js\n * const moveThrottled = throttle( (elapsedMs, args) => {\n *  // Handle ar\n * }, 500);\n * el.addEventListener(`pointermove`, moveThrottled)\n * ```\n *\n * Note that `throttle` does not schedule invocations, but rather acts as a filter that\n * sometimes allows follow-through to `callback`, sometimes not. There is an expectation then\n * that the return function from `throttle` is repeatedly called, such as the case for handling\n * a stream of data/events.\n *\n * @example Manual trigger\n * ```js\n * // Set up once\n * const t = throttle( (elapsedMs, args) => { ... }, 5000);\n *\n * // Later, trigger throttle. Sometimes the callback will run,\n * // with data passed in to args[0]\n * t(data);\n * ```\n */\nexport const throttle = (\n  callback: (\n    elapsedMs: number,\n    ...args: readonly unknown[]\n  ) => void | Promise<unknown>,\n  intervalMinMs: number\n) => {\n  //eslint-disable-next-line functional/no-let\n  let trigger = 0;\n  //eslint-disable-next-line functional/prefer-immutable-types\n  return async (...args: unknown[]) => {\n    const elapsed = performance.now() - trigger;\n    if (elapsed >= intervalMinMs) {\n      const r = callback(elapsed, ...args);\n      if (typeof r === `object`) await r;\n      trigger = performance.now();\n    }\n  };\n};\n","/**\n * Helper function for calling code that should fail after a timeout.\n * In short, it allows you to signal when the function succeeded, to cancel it, or\n * to be notified if it was canceled or completes.\n *\n * @example Verbose example\n * ```js\n * // This function is called by `waitFor` if it was cancelled\n * const onAborted = (reason:string) => {\n *  // 'reason' is a string describing why it has aborted.\n *  // ie: due to timeout or because done() was called with an error\n * };\n *\n * // This function is called by `waitFor` if it completed\n * const onComplete = (success:boolean) => {\n *  // Called if we were aborted or finished succesfully.\n *  // onComplete will be called after onAborted, if it was an error case\n * }\n *\n * // If done() is not called after 1000, onAborted will be called\n * // if done() is called or there was a timeout, onComplete is called\n * const done = waitFor(1000, onAborted, onComplete);\n *\n * // Signal completed successfully (thus calling onComplete(true))\n * done();\n *\n * // Signal there was an error (thus calling onAborted and onComplete(false))\n * done(`Some error`);\n * ```\n *\n * The completion handler is useful for removing event handlers.\n *\n * @example Compact example\n * ```js\n * const done = waitFor(1000,\n *  (reason) => {\n *    console.log(`Aborted: ${reason}`);\n *  },\n *  (success) => {\n *    console.log(`Completed. Success: ${success ?? `Yes!` : `No`}`)\n *  });\n *\n * try {\n *  runSomethingThatMightScrewUp();\n *  done(); // Signal it succeeded\n * } catch (e) {\n *  done(e); // Signal there was an error\n * }\n * ```\n * @param timeoutMs\n * @param onAborted\n * @param onComplete\n * @returns\n */\nexport const waitFor = (\n  timeoutMs: number,\n  onAborted: (reason: string) => void,\n  onComplete?: (success: boolean) => void\n) => {\n  //eslint-disable-next-line functional/no-let\n  let success = false;\n  const done = (error?: string) => {\n    if (t !== 0) {\n      window.clearTimeout(t);\n      t = 0;\n    }\n    if (error) {\n      onAborted(error);\n    } else {\n      success = true;\n    }\n    if (onComplete !== undefined) onComplete(success);\n  };\n\n  //eslint-disable-next-line functional/no-let\n  let t = window.setTimeout(() => {\n    t = 0;\n    try {\n      onAborted(`Timeout after ${timeoutMs}ms`);\n    } finally {\n      if (onComplete !== undefined) onComplete(success);\n    }\n  }, timeoutMs);\n\n  return done;\n};\n","import { intervalToMs, type Interval } from './IntervalType.js';\nimport { sleep } from './Sleep.js';\n\n/**\n * Delay options\n */\nexport type DelayOpts = Interval & {\n  /**\n   * Signal for cancelling delay\n   */\n  readonly signal?: AbortSignal;\n  /**\n   * When delay is applied. \"before\" is default.\n   */\n  readonly delay?: `before` | `after` | `both`;\n};\n\n/**\n * Pauses execution for interval after which the asynchronous `callback` is executed and awaited.\n * Must be called with `await` if you want the pause effect.\n *\n * @example Pause and wait for function\n * ```js\n * const result = await delay(async () => Math.random(), 1000);\n * console.log(result); // Prints out result after one second\n * ```\n *\n * If the `interval` option is a number its treated as milliseconds. {@link Interval} can also be used:\n * ```js\n * const result = await delay(async () => Math.random(), { mins: 1 });\n * ```\n *\n * If `await` is omitted, the function will run after the provided timeout, and code will continue to run.\n *\n * @example Schedule a function without waiting\n * ```js\n * await delay(async () => {\n *  console.log(Math.random())\n * }, 1000);\n * // Prints out a random number after 1 second.\n * ```\n *\n * {@link delay} and {@link sleep} are similar. `delay()` takes a parameter of what code to execute after the timeout, while `sleep()` just resolves after the timeout.\n *\n * Optionally takes an AbortSignal to cancel delay.\n * ```js\n * const ac = new AbortController();\n * // Super long wait\n * await delay(someFn, { signal: ac.signal, hours: 1 }}\n * ...\n * ac.abort(); // Cancels long delay\n * ```\n *\n * It also allows choice of when delay should happen.\n * If you want to be able to cancel or re-run a delayed function, consider using\n * {@link timeout} instead.\n *\n * @template V\n * @param callback What to run after interval\n * @param opts Options for delay. By default delay is before `callback` is executed.\n * @return Returns result of `callback`.\n */\nexport const delay = async <V>(\n  callback: () => Promise<V>,\n  //eslint-disable-next-line functional/prefer-immutable-types\n  optsOrMillis: DelayOpts | number\n): Promise<V> => {\n  const opts =\n    typeof optsOrMillis === `number` ? { millis: optsOrMillis } : optsOrMillis;\n  const delayWhen = opts.delay ?? `before`;\n  if (delayWhen === `before` || delayWhen === `both`) {\n    await sleep(opts);\n  }\n  const r = Promise.resolve(await callback());\n  if (delayWhen === `after` || delayWhen === `both`) {\n    await sleep(opts);\n  }\n  return r;\n};\n\n/**\n * Iterate over a source iterable with some delay between results.\n * Delay can be before, after or both before and after each result from the\n * source iterable.\n *\n * Since it's an async iterable, `for await ... of` is needed.\n *\n * ```js\n * const opts = { intervalMs: 1000, delay: 'before' };\n * const iterable = count(10);\n * for await (const i of delayIterable(iterable, opts)) {\n *  // Prints 0..9 with one second between\n * }\n * ```\n *\n * Use {@link delay} to return a result after some delay\n *\n * @param iter\n * @param opts\n */\n// export async function* delayIterable<V>(\n//   iter: AsyncIterable<V> | Iterable<V>,\n//   //eslint-disable-next-line functional/prefer-immutable-types\n//   opts: DelayOpts\n// ) {\n//   const intervalMs = intervalToMs(opts);\n//   const delayWhen = opts.delay;\n//   const signal = opts.signal;\n\n//   for await (const v of iter) {\n//     // Pre-delay\n//     if (delayWhen === 'before' || delayWhen === 'both') {\n//       await sleep({ millis: intervalMs, signal });\n//       if (signal?.aborted) break;\n//     }\n\n//     // Yield value\n//     yield v;\n\n//     // Post-delay\n//     if (delayWhen === 'after' || delayWhen === 'both') {\n//       await sleep({ millis: intervalMs, signal });\n//       if (signal?.aborted) break;\n//     }\n//   }\n// }\n\n/**\n * Async generator that loops via `requestAnimationFrame`.\n *\n * ```\n * // Loop forever\n * (async () => {\n *  const loop = delayAnimationLoop();\n *  while (true) {\n *    await loop.next();\n *\n *    // Do something...\n *    // Warning: loops forever\n *  }\n * })();\n * ```\n *\n * ```\n * const loop = delayAnimationLoop();\n * for await (const o of loop) {\n *  // Do something...\n *  // Warning: loops forever\n * }\n * ```\n */\n//eslint-disable-next-line func-style\nasync function* delayAnimationLoop() {\n  //eslint-disable-next-line functional/no-let,@typescript-eslint/no-explicit-any\n  let resolve: any;\n  //eslint-disable-next-line functional/no-let\n  let p = new Promise<undefined>((r) => (resolve = r));\n  //eslint-disable-next-line functional/no-let\n  let timer = 0;\n  const callback = () => {\n    resolve();\n    p = new Promise<undefined>((r) => (resolve = r));\n  };\n\n  try {\n    while (true) {\n      timer = window.requestAnimationFrame(callback);\n      yield await p;\n    }\n  } finally {\n    resolve();\n    window.cancelAnimationFrame(timer);\n  }\n}\n\n/**\n * Async generator that loops at a given interval.\n * Alternatives:\n * * {@link delay} to run a single function after a delay\n * * {@link sleep} pause execution\n * * {@link interval} iterate over an iterable with a given delay\n * * {@link continuously} to start/stop/adjust a constantly running loop\n *\n * @example Loop runs every second\n * ```\n * // Loop forever\n * (async () => {\n *  const loop = delayLoop(1000);\n *  // or: loop = delayLoop({ secs: 1 });\n *  while (true) {\n *    await loop.next();\n *\n *    // Do something...\n *    // Warning: loops forever\n *  }\n * })();\n * ```\n *\n * @example For Await loop every second\n * ```\n * const loop = delayLoop(1000);\n * // Or: const loop = delayLoop({ secs: 1 });\n * for await (const o of loop) {\n *  // Do something...\n *  // Warning: loops forever\n * }\n * ```\n * @param timeout Delay. If 0 is given, `requestAnimationFrame` is used over `setTimeout`.\n */\n//eslint-disable-next-line func-style\nexport async function* delayLoop(timeout: Interval) {\n  const timeoutMs = intervalToMs(timeout);\n  if (typeof timeoutMs === `undefined`) throw new Error(`timeout is undefined`);\n  if (timeoutMs < 0) throw new Error(`Timeout is less than zero`);\n  if (timeoutMs === 0) return yield* delayAnimationLoop();\n\n  //eslint-disable-next-line functional/no-let,@typescript-eslint/no-explicit-any\n  let resolve: any;\n  //eslint-disable-next-line functional/no-let\n  let p = new Promise<undefined>((r) => (resolve = r));\n  //eslint-disable-next-line functional/no-let\n  let timer = 0;\n  const callback = () => {\n    resolve();\n    p = new Promise<undefined>((r) => (resolve = r));\n  };\n\n  try {\n    while (true) {\n      timer = window.setTimeout(callback, timeoutMs);\n      yield await p;\n    }\n  } finally {\n    resolve();\n    window.clearTimeout(timer);\n  }\n}\n","import { throwIntegerTest } from '../Guards.js';\n\n/**\n * Returns true for every _n_th call, eg 2 for every second call.\n *\n * If `nth` is 1, returns true for everything. 0 will be false for everything.\n *\n * Usage:\n * ```js\n * const tenth = everyNth(10);\n * window.addEventListener(`pointermove`, evt => {\n *  if (!tenth(evt)) return; // Filter out\n *  // Continue processing, it is the 10th thing.\n *\n * });\n * ```\n *\n * Alternative:\n * ```js\n * window.addEventListener(`pointermove`, everyNth(10, evt => {\n *  // Do something with tenth item...\n * });\n * ```\n * @param nth Every nth item\n * @param callback\n * @returns Function which in turn returns true if nth call has been hit, false otherwise\n */\nexport const everyNth = (\n  nth: number,\n  callback?: (...args: readonly unknown[]) => void\n) => {\n  throwIntegerTest(nth, `positive`, `nth`);\n\n  //eslint-disable-next-line functional/no-let\n  let counter = 0;\n  //eslint-disable-next-line functional/prefer-immutable-types\n  return (...args: unknown[]): boolean => {\n    if (++counter === nth) {\n      counter = 0;\n      if (callback) callback(...args);\n      return true;\n    }\n    return false;\n  };\n};\n","/**\n * Runs a function once\n *\n * ```js\n * const init = runOnce(() => {\n *  // do some initialisation\n * });\n *\n * init(); // Runs once\n * init(); // no-op\n * ```\n * @param onRun\n * @returns\n */\nexport const runOnce = (onRun: () => boolean): (() => boolean) => {\n  //eslint-disable-next-line functional/no-let\n  let run = false;\n  //eslint-disable-next-line functional/no-let\n  let success = false;\n  return () => {\n    if (run) return success;\n    run = true;\n    success = onRun();\n    return success;\n  };\n};\n","import { sleep } from './Sleep.js';\nimport { resolveLogOption } from '../debug/Logger.js';\nimport { since, toString as elapsedToString } from './Elapsed.js';\nimport { throwIntegerTest } from '../Guards.js';\nimport { getErrorMessage } from '../debug/GetErrorMessage.js';\n/**\n * Result of backoff\n */\nexport type RetryResult<V> = {\n  /**\n   * Message describing outcome.\n   *\n   * If retry was aborted, message will be abort reason.\n   */\n  readonly message?: string;\n  /**\n   * True if callback function was invoked once where it returned _true_\n   */\n  readonly success: boolean;\n  /**\n   * Number of times callback was attempted\n   */\n  readonly attempts: number;\n  /**\n   * Total elapsed time since beginning of call to `retry`\n   */\n  readonly elapsed: number;\n\n  /**\n   * Value returned by succeeding function,\n   * or _undefined_ if it failed\n   */\n  readonly value: V | undefined;\n};\n\n/**\n * Backoff options\n */\nexport type RetryOpts<V> = {\n  /**\n   * Maximum number of attempts to make\n   */\n  readonly count: number;\n  /**\n   * Starting milliseconds for sleeping after failure\n   * Defaults to 1000.\n   * Must be above zero.\n   */\n  readonly startMs?: number;\n  /**\n   * Initial waiting period before first attempt (optional)\n   */\n  readonly predelayMs?: number;\n  /**\n   * Optional abort signal\n   */\n  readonly abort?: AbortSignal;\n  /**\n   * Log: _true_ logs to console\n   */\n  readonly log?: boolean;\n  /**\n   * Math.pow factor. Defaults to 1.1. How much slower to\n   * get with each retry.\n   */\n  readonly power?: number;\n\n  /***\n   * Default value to return if it fails\n   */\n  readonly defaultValue?: V;\n};\n\n/**\n * Keeps calling `cb` until it returns something other than _undefined_. If it throws an exception,\n * it will cancel the retry, bubbling the exception and cancelling the retry.\n *\n * ```js\n * // A function that only works some of the time\n * const flakyFn = async () => {\n *  // do the thing\n *  if (Math.random() > 0.9) return true; // success\n *  return; // 'failed'\n * };\n *\n * // Retry it up to five times,\n * // starting with 1000ms interval\n * const result = await retry(flakyFn, {\n *  count: 5\n * });\n *\n * if (result.success) {\n *  // Yay\n * } else {\n *  console.log(`Failed after ${result.attempts} attempts. Elapsed: ${result.elapsed}`);\n *  console.log(result.message);\n * }\n * ```\n *\n * An `AbortSignal` can be used to cancel process.\n * ```js\n * const abort = new AbortController();\n * const result = await retry(cb, { startMs: 6000, count: 1000, signal: abort.signal });\n *\n * // Somewhere else...\n * abort('Cancel!'); // Trigger abort\n * ```\n * @param callback Function to run\n * @param opts Options\n * @returns\n */\nexport const retry = async <V>(\n  callback: () => Promise<V | undefined>,\n  //eslint-disable-next-line functional/prefer-immutable-types\n  opts: RetryOpts<V>\n): Promise<RetryResult<V>> => {\n  const signal = opts.abort;\n  const log = resolveLogOption(opts.log);\n  const power = opts.power ?? 1.1;\n  const predelayMs = opts.predelayMs ?? 0;\n  const startedAt = since();\n\n  //eslint-disable-next-line functional/no-let\n  let t = opts.startMs ?? 1000;\n  const count = opts.count;\n  //eslint-disable-next-line functional/no-let\n  let attempts = 0;\n\n  throwIntegerTest(count, `aboveZero`, `count`);\n  if (t <= 0) throw new Error(`startMs must be above zero`);\n\n  if (predelayMs > 0) await sleep({ millis: predelayMs, signal: signal });\n  if (signal?.aborted) {\n    return {\n      success: false,\n      attempts,\n      value: opts.defaultValue,\n      elapsed: startedAt(),\n      message: `Aborted during predelay`,\n    };\n  }\n  while (attempts < count) {\n    attempts++;\n    const callbackResult = await callback();\n    if (callbackResult !== undefined) {\n      return { value: callbackResult, success: true, attempts, elapsed: startedAt() };\n    }\n    log({\n      msg: `retry attempts: ${ attempts } t: ${ elapsedToString(t) }`,\n    });\n\n    // Did not succeed.\n    if (attempts >= count) {\n      break; // Out of attempts, no point sleeping again\n    }\n    // Sleep\n    try {\n      await sleep({ millis: t, signal });\n    } catch (error) {\n      // Eg if abort signal fires\n      return {\n        success: false,\n        attempts,\n        value: opts.defaultValue,\n        message: getErrorMessage(error),\n        elapsed: startedAt(),\n      };\n    }\n\n    // Increase sleep time for next fail\n    t = Math.floor(Math.pow(t, power));\n  }\n\n  return {\n    message: `Giving up after ${ attempts } attempts.`,\n    success: false,\n    attempts,\n    value: opts.defaultValue,\n    elapsed: startedAt(),\n  };\n};\n","import type { QueueOpts } from './QueueTypes.js';\n\nexport const debug = (opts: QueueOpts<any>, message: string): void => {\n  opts.debug ? console.log(`queue:${ message }`) : undefined;\n};\n\nexport const trimQueue = <V>(\n  opts: QueueOpts<V>,\n  queue: ReadonlyArray<V>,\n  toAdd: ReadonlyArray<V>\n): ReadonlyArray<V> => {\n  const potentialLength = queue.length + toAdd.length;\n  const capacity = opts.capacity ?? potentialLength;\n  const toRemove = potentialLength - capacity;\n  const policy = opts.discardPolicy ?? `additions`;\n  // debug(\n  //   opts,\n  //   `queueLen: ${queue.length} potentialLen: ${potentialLength} toRemove: ${toRemove} policy: ${policy} toAdd.length: ${toAdd.length} capacity: ${capacity}`\n  // );\n  // debug(opts, `to add: ${JSON.stringify(toAdd)}`);\n\n  switch (policy) {\n    // Only add what we can from toAdd\n    case `additions`: {\n      // debug(\n      //   opts,\n      //   `trimQueue:DiscardAdditions: queueLen: ${queue.length} slice: ${\n      //     potentialLength - capacity\n      //   } toAddLen: ${toAdd.length} nowFull: ${queue.length === opts.capacity}`\n      // );\n      if (queue.length === 0) return toAdd.slice(0, toAdd.length - toRemove);\n      if (queue.length === opts.capacity) {\n        return queue; // Completely full\n      } else {\n        // Only add some from the new array (from the front)\n        return [ ...queue, ...toAdd.slice(0, toRemove - 1) ];\n      }\n    }\n    // Remove from rear of queue (last index) before adding new things\n    case `newer`: {\n      if (toRemove >= queue.length) {\n        // New items will completely flush out old\n        //debug(opts, `slice start: ${toAdd.length - capacity}`);\n        if (queue.length === 0) {\n          // Special case when queue starts off empty\n          return [ ...toAdd.slice(0, capacity - 1), toAdd.at(-1)! ];\n        }\n        return toAdd.slice(\n          Math.max(0, toAdd.length - capacity),\n          Math.min(toAdd.length, capacity) + 1\n        );\n        //debug(opts, `Final value: ${JSON.stringify(tmp)}`);\n        //return tmp;\n      } else {\n        // Keep some of the old\n        // const toAddFinal = toAdd.slice(\n        //   0,\n        //   Math.min(toAdd.length, capacity - toRemove + 1)\n        // );\n        // Cap 5, queue 5, toAdd: 10.\n        const countToAdd = Math.max(1, toAdd.length - queue.length);\n        const toAddFinal = toAdd.slice(toAdd.length - countToAdd, toAdd.length);\n        const toKeep = queue.slice(0, Math.min(queue.length, capacity - 1)); //toRemove);\n        // debug(\n        //   opts,\n        //   `trimQueue: countToAdd: ${countToAdd} qLen: ${\n        //     queue.length\n        //   } capacity: ${capacity} toRemove: ${toRemove} keeping: ${JSON.stringify(\n        //     toKeep\n        //   )} from orig: ${JSON.stringify(queue)} toAddFinal: ${JSON.stringify(\n        //     toAddFinal\n        //   )}`\n        // );\n        const t = [ ...toKeep, ...toAddFinal ];\n        //debug(opts, `final: ${JSON.stringify(t)}`);\n        return t;\n      }\n    }\n    // Remove from the front of the queue (0 index). ie. older items are discarded\n    case `older`: {\n      // If queue is A, B and toAdd is C, D this yields A, B, C, D\n      return [ ...queue, ...toAdd ].slice(toRemove);\n    }\n    default: {\n      // eslint-disable-next-line @typescript-eslint/restrict-template-expressions\n      throw new Error(`Unknown overflow policy ${ policy }`);\n    }\n  }\n};\n\n/**\n * Adds to the back of the queue (last array index)\n * Last item of `toAdd` will potentially be the new end of the queue (depending on capacity limit and overflow policy)\n * @template V\n * @param {QueueOpts} opts\n * @param {V[]} queue\n * @param {...V[]} toAdd\n * @returns {V[]}\n */\nexport const enqueue = <V>(\n  opts: QueueOpts<V>,\n  queue: ReadonlyArray<V>,\n  ...toAdd: ReadonlyArray<V>\n): ReadonlyArray<V> => {\n  if (opts === undefined) throw new Error(`opts parameter undefined`);\n\n  const potentialLength = queue.length + toAdd.length;\n  const overSize = opts.capacity && potentialLength > opts.capacity;\n\n  const toReturn = overSize\n    ? trimQueue(opts, queue, toAdd)\n    : [ ...queue, ...toAdd ];\n  if (opts.capacity && toReturn.length !== opts.capacity && overSize) {\n    throw new Error(\n      `Bug! Expected return to be at capacity. Return len: ${ toReturn.length\n      } capacity: ${ opts.capacity } opts: ${ JSON.stringify(opts) }`\n    );\n  }\n  if (!opts.capacity && toReturn.length !== potentialLength) {\n    throw new Error(\n      `Bug! Return length not expected. Return len: ${ toReturn.length\n      } expected: ${ potentialLength } opts: ${ JSON.stringify(opts) }`\n    );\n  }\n  return toReturn;\n};\n\n// Remove from front of queue (0 index)\nexport const dequeue = <V>(\n  opts: QueueOpts<V>,\n  queue: ReadonlyArray<V>\n): ReadonlyArray<V> => {\n  if (queue.length === 0) throw new Error(`Queue is empty`);\n  return queue.slice(1);\n};\n\n/**\n * Returns front of queue (oldest item), or undefined if queue is empty\n *\n * @template V\n * @param {QueueOpts} opts\n * @param {V[]} queue\n * @returns {(V | undefined)}\n */\nexport const peek = <V>(\n  opts: QueueOpts<V>,\n  queue: ReadonlyArray<V>\n): V | undefined => queue[ 0 ];\n\nexport const isEmpty = <V>(opts: QueueOpts<V>, queue: ReadonlyArray<V>): boolean =>\n  queue.length === 0;\n\nexport const isFull = <V>(\n  opts: QueueOpts<V>,\n  queue: ReadonlyArray<V>\n): boolean => {\n  if (opts.capacity) {\n    return queue.length >= opts.capacity;\n  }\n  return false;\n};\n","import { type IQueueMutable } from './IQueueMutable.js';\nimport { enqueue, peek, dequeue, isEmpty, isFull } from './QueueFns.js';\nimport { type QueueOpts } from './QueueTypes.js';\nimport { without } from '../arrays/index.js';\nimport { isEqualDefault, type IsEqual } from '../../IsEqual.js';\n/**\n * Returns a mutable queue. Queues are useful if you want to treat 'older' or 'newer'\n * items differently. _Enqueing_ adds items at the back of the queue, while\n * _dequeing_ removes items from the front (ie. the oldest).\n *\n * ```js\n * const q = Queues.mutable();       // Create\n * q.enqueue(`a`, `b`);     // Add two strings\n * const front = q.dequeue();  // `a` is at the front of queue (oldest)\n * ```\n *\n * @example Cap size to 5 items, throwing away newest items already in queue.\n * ```js\n * const q = Queues.mutable({capacity: 5, discardPolicy: `newer`});\n * ```\n *\n * @template V Data type of items\n * @param opts\n * @param startingItems Items are added in array order. So first item will be at the front of the queue.\n */\nexport class QueueMutable<V> implements IQueueMutable<V> {\n  readonly opts: QueueOpts<V>;\n  // eslint-disable-next-line functional/prefer-readonly-type\n  data: ReadonlyArray<V>;\n  eq: IsEqual<V>;\n\n  constructor(opts: QueueOpts<V> = {}, data: ReadonlyArray<V> = []) {\n    if (opts === undefined) throw new Error(`opts parameter undefined`);\n    this.opts = opts;\n    this.data = data;\n    this.eq = opts.eq ?? isEqualDefault;\n  }\n\n  clear() {\n    this.data = [];\n  }\n\n  at(index: number): V {\n    if (index >= this.data.length) throw new Error(`Index outside bounds of queue`);\n    const v = this.data.at(index);\n    if (v === undefined) throw new Error(`Index appears to be outside range of queue`);\n    return v;\n  }\n\n  /**\n   * Return a copy of the array\n   * @returns \n   */\n  toArray() {\n    return [ ...this.data ];\n  }\n\n  enqueue(...toAdd: ReadonlyArray<V>): number {\n    /* eslint-disable-next-line functional/immutable-data */\n    this.data = enqueue(this.opts, this.data, ...toAdd);\n    return this.data.length;\n  }\n\n  dequeue(): V | undefined {\n    const v = peek(this.opts, this.data);\n    if (v === undefined) return;\n    /* eslint-disable-next-line functional/immutable-data */\n    this.data = dequeue(this.opts, this.data);\n    return v;\n  }\n\n  /**\n   * Remove value from queue, regardless of position.\n   * Returns _true_ if something was removed.\n   * \n   * See also {@link removeWhere} to remove based on a predicate\n   * @param value \n   */\n  remove(value: V, comparer?: IsEqual<V>): boolean {\n    const length = this.data.length;\n    this.data = without(this.data, value, comparer ?? this.eq);\n    return this.data.length !== length;\n  }\n\n  /**\n   * Removes values that match `predicate`.\n   * See also {@link remove} if to remove a value based on equality checking.\n   * @param predicate \n   * @returns Returns number of items removed.\n   */\n  removeWhere(predicate: (item: V) => boolean) {\n    const countPre = this.data.length;\n    this.data = this.data.filter((element) => predicate(element));\n    return countPre - this.data.length;\n  }\n\n  get isEmpty(): boolean {\n    return isEmpty(this.opts, this.data);\n  }\n\n  get isFull(): boolean {\n    return isFull(this.opts, this.data);\n  }\n\n  get length(): number {\n    return this.data.length;\n  }\n\n  get peek(): V | undefined {\n    return peek(this.opts, this.data);\n  }\n}\n\nexport function mutable<V>(\n  opts: QueueOpts<V> = {},\n  ...startingItems: ReadonlyArray<V>\n): IQueueMutable<V> {\n  return new QueueMutable({ ...opts }, [ ...startingItems ]);\n}\n\n","import { mutable } from '../collections/queue/QueueMutable.js';\n\ntype Task = () => Promise<void>;\n\nexport type TaskQueueOpts = {\n  /**\n   * How long to wait before starting the queue 'thread'\n   * when something is added.\n   *\n   * Default: 500ms\n   */\n  readonly startDelayMs?: number;\n\n  /**\n   * Once running, sleeping period between each item\n   * being processed.\n   *\n   * Default: 100ms\n   */\n  readonly intervalMs?: number;\n};\n\n/**\n * Simple task queue. Each task is awaited and run\n * in turn.\n *\n * @example Usage\n * ```js\n * const q = new TaskQueue();\n * q.add(async () => {\n *  // Takes one second to run\n *  await sleep(1000);\n * });\n * ```\n */\nexport class TaskQueue {\n  static instance = new TaskQueue();\n  //eslint-disable-next-line @typescript-eslint/no-explicit-any\n  private _timer: any = 0;\n  private _queue;\n  private readonly _startDelayMs;\n  private readonly _intervalMs;\n\n  private constructor(opts: TaskQueueOpts = {}) {\n    this._startDelayMs = opts.startDelayMs ?? 500;\n    this._intervalMs = opts.intervalMs ?? 100;\n    this._queue = mutable<Task>(); // new QueueMutable<Task>();\n  }\n\n  /**\n   * Adds a task. This triggers processing loop if not already started.\n   *\n   * ```js\n   * queue.add(async () => {\n   *  await sleep(1000);\n   * });\n   * ```\n   * @param task Task to run\n   */\n  add(task: () => Promise<void>) {\n    this._queue.enqueue(task);\n    if (this._timer === 0) this.schedule(this._startDelayMs);\n  }\n\n  private schedule(intervalMs: number) {\n    // If the queue is empty, allow loop to stop\n    if (this._queue.length === 0) {\n      //eslint-disable-next-line functional/immutable-data\n      this._timer = 0;\n      return;\n    }\n\n    if (this._timer !== 0) {\n      // Seems to be running\n      return;\n    }\n\n    // Start the processing loop\n    //eslint-disable-next-line functional/immutable-data\n    this._timer = setTimeout(() => {\n      void this.processQueue();\n    }, intervalMs);\n  }\n\n  private async processQueue() {\n    const task = this._queue.dequeue();\n\n    //eslint-disable-next-line functional/immutable-data\n    this._timer = 0;\n    if (task !== undefined) {\n      try {\n        await task();\n        //eslint-disable-next-line functional/immutable-data\n        this._timer = 0;\n        this.schedule(this._intervalMs);\n      } catch (error) {\n        console.error(error);\n      }\n    }\n  }\n}\n","export type ArrayKeys<K, V> = ReadonlyArray<readonly [ key: K, value: V ]>;\nexport type ObjectKeys<K, V> = ReadonlyArray<{\n  readonly key: K;\n  readonly value: V;\n}>;\nexport type EitherKey<K, V> = ArrayKeys<K, V> | ObjectKeys<K, V>;\n\nexport {\n  circularArray,\n  type ICircularArray as CircularArray,\n} from './CircularArray.js';\nexport * as Trees from './tree/index.js';\n\nexport * as Iterables from './Iterables.js';\n\n/**\n * Stacks store items in order.\n *\n * Stacks and queues can be helpful for processing data in order. They each have slightly different behaviour.\n *\n * Like a stack of plates, the newest item (on top) is removed\n * before the oldest items (at the bottom). {@link Queues} operate differently, with\n * the oldest items (at the front of the queue) removed before the newest items (at the end of the queue).\n *\n * Create stacks with {@link Stacks.immutable} or {@link Stacks.mutable}. These return a {@link IStackImmutable} or {@link IStackMutable} respectively.\n *\n * The ixfx implementation allow you to set a capacity limit with three {@link StackDiscardPolicy |policies} for\n * how items are evicted.\n *\n */\nexport * as Stacks from './stack/index.js';\n\nexport { StackMutable } from './stack/StackMutable.js';\nexport { StackImmutable } from './stack/StackImmutable.js';\n\n/**\n * Arrays are a list of data. ixfx provides a number of functions for working with arrays in an immutable manner.\n * This means that the input array is not changed.\n *\n * Import example:\n * ```js\n * import { Arrays } from 'https://unpkg.com/ixfx/dist/collections.js';\n * ```\n * \n * For arrays of numbers:\n * * {@link average}, {@link max}, {@link min}, {@link total}: Calculate average/max/min/total\n * * {@link averageWeighted}: Calculate average, but applies a weighting function, eg to favour items at beginning of array\n * * {@link minMaxAvg}: Find smallest, largest and average\n * * {@link maxIndex}, {@link minIndex}: Return index of largest/smallest value\n * * {@link dotProduct}: Returns the dot-product between two arrays\n * * {@link weight}: Applies a weighting function to all values based on their index\n *\n * Randomisation\n * * {@link randomIndex}: Return a random array index\n * * {@link randomElement}: Return a random value\n * * {@link randomPluck}: Remove a random element from an array, returning it and the new array\n * * {@link shuffle}: Returns a randomly-sorted copy of arra\n *\n * Finding/accessing\n * * {@link filterBetween}: Same as `Array.filter` but only looks within a specified index range\n * * {@link sample}: Returns a new array with a random sampling of input\n * * {@link valuesEqual}: Returns true if all the values in the array are identical\n *\n * Changing the shape\n * * {@link ensureLength}: Returns a copy of array with designated length, either padding it out or truncating as necessary\n * * {@link groupBy}: Groups data into a new Map\n * * {@link interleave}: Flattens several arrays into one, interleaving their values.\n * * {@link remove}: Remove an item by index\n * * {@link without}: Returns an array with specified value omitted\n * * {@link zip}: Groups together elements from several arrays based on their index\n */\nexport * as Arrays from './arrays/index.js';\n\n/**\n * Sets store unique items.\n *\n * ixfx's {@link ISetImmutable} (or {@link ISetMutable}) compares items by value rather than reference, unlike the default JS implementation.\n *\n * Create using {@link Sets.immutable} or {@link Sets.mutable}\n */\nexport * as Sets from './set/index.js';\n\n\nexport { SetStringMutable } from './set/SetMutable.js';\nexport { SetStringImmutable } from './set/SetImmutable.js';\n\n\n/**\n * Queues store items in the order in which they are added.\n *\n * Stacks and queues can be helpful when it's necessary to process data in order, but each one has slightly different behaviour.\n *\n * Like lining up at a bakery, the oldest items (at the front of the queue) are removed\n * before the newest items (at the end of the queue). This is different to {@link Stacks},\n * where the newest item (on top) is removed before the oldest items (at the bottom).\n *\n * The ixfx implementations allow you to set a capacity limit with three {@link QueueDiscardPolicy | policies} for\n * how items are evicted.\n *\n * Create queues with {@link Queues.immutable} or {@link Queues.mutable}. These return a {@link IQueueImmutable} or {@link IQueueMutable} respectively.\n */\nexport * as Queues from './queue/index.js';\n\nexport { QueueMutable } from './queue/QueueMutable.js';\nexport { QueueImmutable } from './queue/QueueImmutable.js';\n\n\n/**\n * Maps associate keys with values. Several helper functions are provided\n * for working with the standard JS Map class.\n *\n * Import example\n * ```js\n * import { Maps } from 'https://unpkg.com/ixfx/dist/collections.js';\n * ```\n * \n * ixfx also includes {@link Maps.IMapMutable}, {@link Maps.IMapImmutable}\n *\n * Overview:\n * * {@link getOrGenerate}: Solves a common scenario of wanting a value by a particular key, or generating it if it doesn't exist\n * * {@link filter}: Yields values in map that match a predicate\n * * {@link find}: Finds the first value that matches a predicate, or _undefined_ if nothing found\n * * {@link hasAnyValue}: Searches through all keys, returning true if any occurence of _value_ was found\n *\n * Transformations:\n * * {@link toArray}: Returns the values of the map as an array\n * * {@link mapToArray}: Applies a function to convert a map's values to an array\n * * {@link toObject}: Coverts a Map to a plain object, useful for JSON serialising.\n * * {@link mapToObjectTransform}: Converts a map to a plain object, but applying a function to values\n * * {@link transformMap}: Like `Array.map`, but for Maps. Useful for generating a map as a transform of an input map.\n * * {@link zipKeyValue}: Given an array of keys and values, combines them together into a map\n */\nexport * as Maps from './map/index.js';\n\n\n","import { throwIntegerTest } from '../Guards.js';\n\n/**\n * The circular array is immutable. It keeps up to `capacity` items.\n * Old items are overridden with new items.\n *\n * `CircularArray` extends the regular JS array. Only use `add` to change the array if you want\n * to keep the `CircularArray` behaviour.\n * @example\n * ```js\n * let a = circularArray(10);\n * a = a.add(`hello`); // Because it's immutable, capture the return result of `add`\n * a.isFull;  // True if circular array is full\n * a.pointer; // The current position in array it will write to\n * ```\n * @class CircularArray\n * @extends Array\n */\nexport interface ICircularArray<V> extends Array<V> {\n  /**\n   * Returns true if the array has filled to capacity and is now\n   * recycling array indexes.\n   */\n  get isFull(): boolean;\n\n  /**\n   * Returns a new Circular with item added\n   *\n   * Items are added at `pointer` position, which automatically cycles through available array indexes.\n   *\n   * @param v Thing to add\n   * @returns Circular with item added\n   * @memberof Circular\n   */\n  add(v: V): ICircularArray<V>;\n\n  get length(): number;\n\n  /**\n   * Returns the current add position of array.\n   */\n  get pointer(): number;\n}\n\nclass CircularArray<V> extends Array {\n  // ✔ Class is unit tested!\n  /* eslint-disable-next-line functional/prefer-readonly-type */\n  #capacity: number;\n  /* eslint-disable-next-line functional/prefer-readonly-type */\n  #pointer: number;\n\n  constructor(capacity = 0) {\n    super();\n    // Allowed to create with capacity zero\n    throwIntegerTest(capacity, `positive`, `capacity`);\n\n    // Can't throw because .filter won't use ctor proprly\n    this.#capacity = capacity;\n    this.#pointer = 0;\n  }\n\n  /**\n   * Add to array\n   * @param thing Thing to add\n   * @returns \n   */\n  add(thing: V): CircularArray<V> {\n    const ca = CircularArray.from(this) as CircularArray<V>;\n    /* eslint-disable-next-line functional/immutable-data */\n    ca[ this.#pointer ] = thing;\n    /* eslint-disable-next-line functional/immutable-data */\n    ca.#capacity = this.#capacity;\n    if (this.#capacity > 0) {\n      /* eslint-disable-next-line functional/immutable-data */\n      ca.#pointer =\n        this.#pointer + 1 === this.#capacity ? 0 : this.#pointer + 1;\n    } else {\n      /* eslint-disable-next-line functional/immutable-data */\n      ca.#pointer = this.#pointer + 1;\n    }\n    return ca;\n  }\n\n  get pointer(): number {\n    return this.#pointer;\n  }\n\n  get isFull(): boolean {\n    if (this.#capacity === 0) return false;\n    return this.length === this.#capacity;\n  }\n}\n\n/**\n * Returns a new circular array. Immutable. A circular array only keeps up to `capacity` items.\n * Old items are overridden with new items.\n *\n * `CircularArray` extends the regular JS array. Only use `add` to change the array if you want\n * to keep the `CircularArray` behaviour.\n *\n * @example Basic functions\n * ```js\n * let a = circularArray(10);\n * a = a.add(`hello`);  // Because it's immutable, capture the return result of `add`\n * a.isFull;            // True if circular array is full\n * a.pointer;           // The current position in array it will write to\n * ```\n *\n * Since it extends the regular JS array, you can access items as usual:\n * @example Accessing\n * ```js\n * let a = circularArray(10);\n * ... add some stuff ..\n * a.forEach(item => // do something with item);\n * ```\n * @param capacity Maximum capacity before recycling array entries\n * @return Circular array\n */\nexport const circularArray = <V>(capacity: number): ICircularArray<V> =>\n  new CircularArray<V>(capacity);\n","import { asDynamicTraversable as ObjectToTraversable } from './TraverseObject.js';\nimport { asDynamicTraversable as TreeNodeToTraversable } from './TreeMutable.js';\nimport type { TraversableTree, TreeNode } from './Types.js';\n\nexport * as Mutable from './TreeMutable.js';\nexport * as Pathed from './Pathed.js'\nexport * as FromObject from './TraverseObject.js';\nexport * as Traverse from './TraversableTree.js';\nexport * from './Compare.js';\nexport type * from './Types.js';\n\nexport const toTraversable = <T>(node: TreeNode<T> | TraversableTree<T> | object) => {\n  if (isTraversable(node)) return node;\n  if (isTreeNode(node)) return TreeNodeToTraversable(node);\n  if (typeof node === `object`) return ObjectToTraversable(node);\n  throw new Error(`Parameter 'node' not convertible`);\n}\n\nexport const isTreeNode = (node: any): node is TreeNode<any> => {\n  if (`parent` in node && `childrenStore` in node && `value` in node) {\n    // eslint-disable-next-line unicorn/no-lonely-if\n    if (Array.isArray(node.childrenStore)) return true;\n  }\n  return false;\n}\n\nexport const isTraversable = (node: any): node is TraversableTree<any> => {\n  return (`children` in node && `getParent` in node && `getValue` in node && `getIdentity` in node);\n}","import { toStringAbbreviate } from '../../Text.js';\nimport { nullUndef } from '../../Guards.js';\nimport { last } from '../../generators/IterableSync.js';\nimport * as TreeArrayBacked from './TreeMutable.js';\nimport { isPrimitive } from '../../KeyValue.js';\nimport type { TraversableTree, TreeNode, SimplifiedNode } from './Types.js';\nexport type Entry = Readonly<{ name: string, sourceValue: any, nodeValue: any }>;\nexport type EntryWithAncestors = Readonly<{ name: string, sourceValue: any, nodeValue: any, ancestors: Array<string> }>;\nexport type EntryStatic = Readonly<{ name: string, value: any, ancestors?: Array<string> }>\n\n/**\n * Options for parsing a path\n */\nexport type PathOpts = {\n  /**\n   * Separator for path, eg '.'\n   */\n  readonly separator?: string;\n\n};\n\nexport function prettyPrintEntries(entries: ReadonlyArray<Entry>) {\n  if (entries.length === 0) return `(empty)`;\n  let t = ``;\n  for (const [ index, entry ] of entries.entries()) {\n    t += `  `.repeat(index);\n    t += entry.name + ` = ` + JSON.stringify(entry.nodeValue) + `\\n`;\n  }\n  return t;\n}\n\n/**\n * Returns a human-friendly debug string for a tree-like structure\n * ```js\n * console.log(Trees.prettyPrint(obj));\n * ```\n * @param indent\n * @param node\n * @param defaultName\n * @returns\n */\nexport const prettyPrint = (\n  node: object,\n  indent = 0,\n  options: Partial<ChildrenOptions> = {}\n): string => {\n  nullUndef(node, `node`);\n  const defaultName = options.name ?? `node`;\n  const entry = getNamedEntry(node, defaultName);\n  const t = `${ `  `.repeat(indent) } + name: ${ entry.name } value: ${ JSON.stringify(entry.nodeValue) }`;\n  const childrenAsArray = [ ...children(node, options) ];\n  return childrenAsArray.length > 0 ? (\n    t +\n    `\\n` +\n    childrenAsArray.map((d) => prettyPrint(d.nodeValue, indent + 1, { ...options, name: d.name })).join(`\\n`)\n  ) : t;\n};\n\nexport const toStringDeep = (node: TreeNode<Entry | EntryStatic>, indent = 0) => {\n  let t = ` `.repeat(indent) + ` ` + node.value?.name;\n  if (node.value !== undefined) {\n    if (`sourceValue` in node.value && `nodeValue` in node.value) {\n      let sourceValue = toStringAbbreviate(node.value?.sourceValue, 20);\n      const nodeValue = toStringAbbreviate(node.value?.nodeValue, 20);\n      sourceValue = sourceValue === nodeValue ? `` : `source: ` + sourceValue;\n      t += ` = ${ nodeValue } ${ sourceValue }`\n    } else if (`value` in node.value && node.value.value !== undefined) t += ` = ${ node.value.value }`;\n\n    if (`ancestors` in node.value) {\n      // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n      t += ` (ancestors: ${ (node.value.ancestors!).join(`, `) })`;\n    }\n  }\n  t += `\\n`\n  for (const c of node.childrenStore) {\n    t += toStringDeep(c, indent + 1);\n  }\n  return t;\n}\n\nexport type ChildrenOptions = Readonly<{\n  filter: `none` | `leaves` | `branches`\n  name: string\n}>;\n\n/**\n * Returns the direct children of a tree-like object as a pairing\n * of node name and value. Supports basic objects, Maps and arrays. \n * \n * Sub-children are included as an object blob.\n * \n * @example Simple object\n * ```js\n * const o = {\n *  colour: {\n *    r: 0.5, g: 0.5, b: 0.5\n *  }\n * };\n * \n * const children = [ ...Trees.children(o) ];\n * // Children:\n * // [\n * //  { name: \"colour\", value: { b: 0.5, g: 0.5, r: 0.5 } }\n * // ]\n * const subChildren = [ ...Trees.children(o.colour) ];\n * // [ { name: \"r\", value: 0.5 }, { name: \"g\", value: 0.5 }, { name: \"b\", value: 0.5 } ]\n * ```\n * \n * Arrays are assigned a name based on index.\n * @example Arrays\n * ```js\n * const colours = [ { r: 1, g: 0, b: 0 }, { r: 0, g: 1, b: 0 }, { r: 0, g: 0, b: 1 } ];\n * // Children: \n * // [\n * //  { name: \"array[0]\", value: {r:1,g:0,b:0} },\n * //  { name: \"array[1]\", value: {r:0,g:1,b:0} },\n * //  { name: \"array[2]\", value: {r:0,g:0,b:1} },\n * // ]\n * ```\n * \n * Pass in `options.name` (eg 'colours') to have names generated as 'colours[0]', etc.\n * Options can also be used to filter children. By default all direct children are returned.\n * @param node \n * @param options  \n */\nexport function* children<T extends object>(\n  node: T,\n  options: Partial<ChildrenOptions> = {}\n): IterableIterator<Entry> {\n  // ✔️ Unit tested\n  nullUndef(node, `node`);\n  //let defaultName = options.name;\n\n  const filter = options.filter ?? `none`;\n\n  // eslint-disable-next-line @typescript-eslint/no-unsafe-return\n  //const valueFor = (v: any) => v;// options.valuesAtLeaves ? (v: any) => { if (isPrimitive(v)) return v; } : (v: any) => v;\n\n  const filterByValue = (v: any): [ filter: boolean, isPrimitive: boolean ] => {\n    if (filter === `none`) return [ true, isPrimitive(v) ];\n    else if (filter === `leaves` && isPrimitive(v)) return [ true, true ];\n    else if (filter === `branches` && !isPrimitive(v)) return [ true, false ];\n    return [ false, isPrimitive(v) ];\n  }\n\n  if (Array.isArray(node)) {\n    //if (options.name === undefined) defaultName = `array`;\n    for (const [ index, element ] of node.entries()) {\n      const f = filterByValue(element);\n      if (f[ 0 ]) {\n        yield { name: index.toString(), sourceValue: element, nodeValue: f[ 1 ] ? element : undefined };\n        //yield { name: defaultName + `[` + index.toString() + `]`, sourceValue: element, nodeValue: f[ 1 ] ? element : undefined };\n      }\n    }\n  } else if (typeof node === `object`) {\n    const entriesIter = (`entries` in node) ? (node as any as Map<any, any>).entries() : Object.entries(node);\n    for (const [ name, value ] of entriesIter) {\n      //onsole.log(`children name: ${ name } type: ${ typeof value } isPrim: ${ isPrimitive(value) } filter: ${ filter }`);\n      const f = filterByValue(value);\n      if (f[ 0 ]) {\n        yield { name: name, sourceValue: value, nodeValue: f[ 1 ] ? value : undefined };\n      }\n    }\n  }\n}\n\nexport function* depthFirst<T extends object>(node: T, options: Partial<ChildrenOptions> = {}, ancestors: Array<string> = []): IterableIterator<EntryWithAncestors> {\n  for (const c of children(node, options)) {\n    //onsole.log(`depthFirst name: ${ c.name } nodeValue: ${ toStringAbbreviate(c.nodeValue) }`)\n    yield { ...c, ancestors: [ ...ancestors ] };\n    yield* depthFirst(c.sourceValue, options, [ ...ancestors, c.name ]);\n  }\n}\n\n/**\n * Finds a given direct child by name\n * @param name\n * @param node\n * @returns\n */\nfunction childByName<T extends object>(\n  name: string,\n  node: T\n): Entry | undefined {\n  for (const d of children(node)) {\n    if (d.name === name) return d;\n  }\n}\n\n/**\n * Returns the closest matching entry, tracing `path` in an array, Map or simple object.\n * Returns an entry with _undefined_ value at the point where tracing stopped.\n * Use {@link traceByPath} to step through all the segments.\n *\n * ```js\n  * const people = {\n    *  jane: {\n *   address: {\n *    postcode: 1000,\n    *    street: 'West St',\n    *    city: 'Blahville'\n *   },\n * colour: 'red'\n  *  }\n * }\n * Trees.getByPath('jane.address.postcode', people); // '.' default separator\n * // ['postcode', 1000]\n * Trees.getByPath('jane.address.country.state', people);\n * // ['country', undefined] - since full path could not be resolved.\n * ```\n * @param path Path, eg `jane.address.postcode`\n * @param node Node to look within\n * @param opts Options for parsing path. By default '.' is used as a separator\n * @returns\n */\nexport function getByPath<T extends object>(\n  path: string,\n  node: T,\n  opts: PathOpts = {}\n): Entry {\n  // ✔️ Unit tested\n  const v = last(traceByPath(path, node, opts));\n  if (!v) throw new Error(`Could not trace path: ${ path } `);\n  return v;\n}\n\n/**\n * Enumerates over children of `node` towards the node named in `path`.\n * This is useful if you want to get the interim steps to the target node.\n * \n * Use {@link getByPath} if you don't care about interim steps.\n *\n * ```js\n  * const people = {\n    *  jane: {\n *   address: {\n *    postcode: 1000,\n    *    street: 'West St',\n    *    city: 'Blahville'\n *   },\n * colour: 'red'\n  *  }\n * }\n * for (const p of Trees.traceByPath('jane.address.street', people)) {\n * // { name: \"jane\", value: { address: { postcode: 1000,street: 'West St', city: 'Blahville' }, colour: 'red'} },\n * // { name: \"address\", value: { postcode: 1000, street: 'West St', city: 'Blahville' } },\n * // { name: \"street\", value: \"West St\" } }\n * }\n * ```\n *\n * Results stop when the path can't be followed any further.\n * The last entry will have a name of the last sought path segment, and _undefined_ as its value.\n * \n * @param path Path to traverse\n * @param node Starting node\n * @param opts Options for path traversal logic\n * @returns\n */\nexport function* traceByPath<T extends object>(\n  path: string,\n  node: T,\n  opts: PathOpts = {}\n): Iterable<EntryWithAncestors> {\n  // ✔️ Unit tested\n  nullUndef(path, `path`);\n  nullUndef(node, `node`);\n\n  const separator = opts.separator ?? `.`;\n  // const allowArrayIndexes = opts.allowArrayIndexes ?? true;\n  const pathSplit = path.split(separator);\n\n  const ancestors: Array<string> = [];\n  for (const p of pathSplit) {\n    const entry = childByName(p, node);\n    //onsole.log(`traceByPath: entry: ${ entry?.name } path: '${ path }' p: '${ p }' source: ${ JSON.stringify(entry?.sourceValue) }`);\n    // if (allowArrayIndexes) {\n    //   const [ withoutBrackets, arrayIndexString ] = betweenChomp(p, `[`, `]`);\n    //   //onsole.log(`  withoutBrackets: ${ withoutBrackets } str: ${ arrayIndexString } without: ${ withoutBrackets }`);\n    //   const arrayIndex = integerParse(arrayIndexString, `positive`, -1);\n    //   if (arrayIndex >= 0) {\n    //     // Get array by name without the []\n    //     entry = childByName(withoutBrackets, node);\n    //     //onsole.log(`  entry: ${ entry?.name }`);\n    //     if (entry && Array.isArray(entry.sourceValue)) {\n    //       // Result was array as expected\n    //       entry = { name: p, sourceValue: entry.sourceValue[ arrayIndex ], nodeValue: entry.sourceValue[ arrayIndex ] };\n    //     }\n    //   }\n    // }\n\n    if (!entry) {\n      yield { name: p, sourceValue: undefined, nodeValue: undefined, ancestors };\n      return;\n    }\n    node = entry.sourceValue;\n    yield { ...entry, ancestors: [ ...ancestors ] };\n    ancestors.push(p);\n  }\n}\n\n/**\n * Returns a projection of `node` as a dynamic traversable.\n\n * Note that the object identity of TraversableTree return results is not stable.\n * This is because they are created on-the-fly by reading fields of `node`.\n * \n * ```js\n  * const c1 = [ ...asDynamicTraversable(someObject).children() ];\n * const c2 = [ ...asDynamicTraversable(someObject).children() ];\n * \n * // Object identity is not the same\n * c1[ 0 ] === c1[ 0 ]; // false\n * // ...even though its referring to the same value\n * c1[ 0 ].getValue() === c1[ 0 ].getValue(); // true\n * ```\n * \n * Instead .getIdentity() to get a stable identity:\n * ```js\n  * c1[ 0 ].getIdentity() === c2[ 0 ].getIdentity(); // true\n * ```\n * @param node \n * @param defaultName \n * @param parent \n * @returns \n */\nexport const asDynamicTraversable = <T extends object>(node: T, options: Partial<ChildrenOptions> = {}, ancestors: Array<string> = [], parent?: TraversableTree<EntryStatic> | undefined,): TraversableTree<EntryStatic> => {\n  const name = options.name ?? `object`;\n  const t: TraversableTree<EntryStatic> = {\n    *children() {\n      for (const c of children(node, options)) {\n        yield asDynamicTraversable(c.sourceValue, { ...options, name: c.name }, [ ...ancestors, name ], t);\n      }\n    },\n    getParent() {\n      return parent;\n    },\n    getValue() {\n      return { name, value: node, ancestors };\n    },\n    getIdentity() {\n      return node;\n    }\n  }\n  return t;\n}\n\n/**\n * Reads all fields and sub-fields of `node`, returning as a 'wrapped' tree structure.\n * @param node \n * @param defaultName \n * @returns \n */\nexport const createWrapped = <T extends object>(node: T, options: Partial<CreateOptions>): TreeArrayBacked.WrappedNode<any> => {\n  return TreeArrayBacked.wrap(create(node, options));\n};\n\nexport type CreateOptions = {\n  name: string\n  /**\n   * If _true_, only leaf nodes have values. This avoids repetition (important\n   * when comparing trees), with semantics being in the tree itself.\n   * \n   * When _false_ (default) values get decomposed down the tree. This\n   * makes it easy to get all the data for a branch of the tree.\n   * \n   * \n   * Eg if storing { person: { address { state: `qld` } } }\n   * When _true_, the tree would be:\n   * ```\n   * person, value: undefined\n   *  + address, value: undefined\n   *    + state, value: 'qld'\n   * ```\n   * But when _false_, the tree would be:\n   * ```\n   * person, value: { address: { state: `qld } }\n   *  + address, value: { state: `qld` }\n   *    + state, value: `qld`\n   * ```\n   */\n  valuesAtLeaves: boolean\n}\n/**\n * Reads all fields and sub-fields of `node`, returning as a basic tree structure\n * @param node \n * @param defaultName \n * @returns \n */\nexport const create = <T extends object>(node: T, options: Partial<CreateOptions> = {}): TreeNode<EntryStatic> => {\n  const valuesAtLeaves = options.valuesAtLeaves ?? false;\n  // eslint-disable-next-line @typescript-eslint/no-unsafe-return\n  const valueFor = valuesAtLeaves ? (v: any) => { if (isPrimitive(v)) return v; } : (v: any) => v;\n  return createImpl(node, valueFor(node), options, []);\n}\n\nconst createImpl = <T extends object>(sourceValue: T, nodeValue: T, options: Partial<CreateOptions> = {}, ancestors: Array<string>): TreeNode<EntryStatic> => {\n  const defaultName = options.name ?? `object_ci`;\n  //onsole.log(`createImpl name: ${ defaultName } nodeValue: ${ JSON.stringify(nodeValue) }`);\n  const r = TreeArrayBacked.root<EntryStatic>({ name: defaultName, value: nodeValue, ancestors: [ ...ancestors ] });\n  ancestors = [ ...ancestors, defaultName ];\n  for (const c of children(sourceValue, options)) {\n    const v = options.valuesAtLeaves ? c.nodeValue : c.sourceValue;\n    TreeArrayBacked.add(createImpl(c.sourceValue, v, { ...options, name: c.name }, ancestors), r);\n  }\n  return r;\n}\n\nexport const createSimplified = <T extends object>(node: T, options: Partial<CreateOptions> = {}): SimplifiedNode<EntryStatic> => {\n  return TreeArrayBacked.stripParentage(create(node, options));\n}\n\n/**\n * Generates a name for a node.\n * Uses the 'name' property if it exists, otherwise uses `defaultName`\n * @param node\n * @param defaultName\n * @returns\n */\nfunction getNamedEntry<T extends object>(node: T, defaultName = ``): Entry {\n  if (`name` in node && `nodeValue` in node && `sourceValue` in node) return node as Entry;\n  if (`name` in node) {\n    return { name: node.name as string, nodeValue: node, sourceValue: node };\n  }\n  return { name: defaultName, nodeValue: node, sourceValue: node };\n}\n\n// /**\n//  * Depth-first traversal over object, array, Map or TreeNode\n//  * @param root\n//  * @returns\n//  */\n// export function* depthFirst(root: object): IterableIterator<Entry> {\n//   if (!root) return;\n//   const stack = new StackMutable<Entry>();\n//   //eslint-disable-next-line functional/immutable-data\n//   stack.push(getEntry(root, `root`));\n//   //eslint-disable-next-line functional/no-let,functional/immutable-data\n//   let entry = stack.pop();\n//   while (entry) {\n//     yield entry;\n//     if (entry) {\n//       //eslint-disable-next-line functional/immutable-data\n//       stack.push(...directChildren(entry.value, entry.name));\n//     }\n//     if (stack.isEmpty) break;\n//     //eslint-disable-next-line functional/immutable-data\n//     entry = stack.pop();\n//   }\n// }\n\n// /**\n//  * Breadth-first traversal over object, array, Map or TreeNode\n//  * @param root\n//  * @returns\n//  */\n// export function* breadthFirst(root: object): IterableIterator<Entry> {\n//   if (!root) return;\n//   const queue = new QueueMutable<Entry>();\n//   queue.enqueue(getEntry(root, `root`));\n//   //eslint-disable-next-line functional/no-let\n//   let entry = queue.dequeue();\n//   while (entry) {\n//     yield entry;\n//     if (entry) {\n//       queue.enqueue(...directChildren(entry.value, entry.name));\n//     }\n//     if (queue.isEmpty) break;\n//     entry = queue.dequeue();\n//   }\n// }\n\n\n// export const fromUnknown = (node: object, name: string, parents: Array<TreeNode<any>> = []): TreeNode<any> => {\n//   const parentsWithUs = [ ...parents ];\n//   const enumerator = Array.isArray(node) ? enumerateArrayChildren : enumerateObjectChildren;\n\n//   const thisNode: TreeNode<any> = {\n//     getLengthChildren() {\n//       return [ ...enumerator(node, parentsWithUs, name) ].length\n//     },\n//     *children() {\n//       for (const c of enumerator(node, parentsWithUs, name)) {\n//         yield c;\n//       }\n//     },\n//     parents() {\n//       return parents.values()\n//     },\n//     name: name,\n//     value: node\n//   }\n//   parentsWithUs.push(thisNode);\n//   return thisNode;\n// }\n\n// function* enumerateObjectChildren(node: object, name: string): IterableIterator<Entry> {\n//   if (`entries` in node) {\n//     for (const entry of (node as any as Map<any, any>)) {\n//       yield fromUnknown(entry[ 1 ], entry[ 0 ], parents);\n//     }\n//   } else {\n//     for (const entry of Object.entries(node)) {\n//       yield fromUnknown(entry[ 1 ], entry[ 0 ], parents);\n//     }\n//   }\n// }\n\n// function* enumerateArrayChildren(node: object, parents: Array<TreeNode<any>>, name: string): IterableIterator<TreeNode<any>> {\n//   const nodeArray = node as Array<any>;\n\n//   // eslint-disable-next-line unicorn/no-for-loop\n//   for (let index = 0; index < nodeArray.length; index++) {\n//     yield fromUnknown(nodeArray[ index ], name + `[ ` + index.toString() + ` ]`, parents);\n//   }\n// }","import { isEqualDefault, type IsEqual } from \"../../IsEqual.js\"\nimport { containsDuplicateInstances, without } from \"../arrays/index.js\"\nimport { QueueMutable } from \"../queue/QueueMutable.js\"\nimport { StackMutable } from \"../stack/StackMutable.js\"\nimport { compare as treeCompare } from './Compare.js';\nimport { toStringAbbreviate } from \"../../Text.js\"\nimport type { LabelledSingleValue, TreeNode, SimplifiedNode, TraversableTree } from \"./Types.js\"\n\n/**\n * Compares two nodes.\n * \n * By default uses `isEqualValueIgnoreOrder` to compare nodes. This means\n * values of nodes will be compared, ignoring the order of fields.\n * @param a \n * @param b \n * @param eq Comparison function. Uses `isEqualValueIgnoreOrder` by default.\n * @returns Compare results\n */\nexport const compare = <T>(a: TreeNode<T>, b: TreeNode<T>, eq?: IsEqual<T>) => {\n  return treeCompare(asDynamicTraversable(a), asDynamicTraversable(b), eq);\n}\n\n/**\n * Converts `TreeNode` to `SimplifiedNode`, removing the 'parent' fields.\n * This can be useful because if you have the whole tree, the parent field\n * is redundant and because it makes circular references can make dumping to console etc more troublesome.\n * @param node \n * @returns \n */\nexport const stripParentage = <T>(node: TreeNode<T>): SimplifiedNode<T> => {\n  const n: SimplifiedNode<T> = {\n    value: node.value,\n    childrenStore: node.childrenStore.map(c => stripParentage(c))\n  }\n  return n;\n}\n/**\n * Wraps a {@link TreeNode} for a more object-oriented means of access.\n */\nexport type WrappedNode<T> = TraversableTree<T> & {\n  /**\n   * Underlying Node\n   */\n  wraps: TreeNode<T>,\n  /**\n   * Gets value, if defined\n   * @returns Value of Node\n   */\n  getValue: () => T | undefined\n  /**\n   * Remove node and its children from tree\n   * @returns \n   */\n  remove: () => void\n  /**\n   * Adds a child node\n   * @param child \n   * @returns \n   */\n  add: (child: WrappedNode<T> | TreeNode<T>) => WrappedNode<T>\n  /**\n   * Adds a new child node, with `value` as its value\n   * @param value \n   * @returns \n   */\n  addValue: (value: T) => WrappedNode<T>\n  /**\n   * Returns _true_ if `child` is an immediate child of this node\n   * @param child \n   * @returns \n   */\n  hasChild: (child: WrappedNode<T> | TreeNode<T>) => boolean\n  queryValue: (value: T) => IterableIterator<WrappedNode<T>>\n  /**\n   * Returns _true_ if `child` is contained any any descendant\n   * @param child\n   * @returns \n   */\n  hasAnyChild: (child: WrappedNode<T> | TreeNode<T>) => boolean\n  /**\n   * Returns _true_ if `parent` is the immediate parent for this node\n   * @param parent \n   * @returns \n   */\n  hasParent: (parent: WrappedNode<T> | TreeNode<T>) => boolean\n  /**\n   * Returns _true_ if `parent` is the immediate or ancestor parent for this node\n   * @param parent \n   * @returns \n   */\n  hasAnyParent: (parent: WrappedNode<T> | TreeNode<T>) => boolean\n}\n\nconst unwrapped = <T>(node: TreeNode<T> | WrappedNode<T>) => (`wraps` in node) ? node.wraps : node;\nconst wrapped = <T>(node: TreeNode<T> | WrappedNode<T>) => (`wraps` in node) ? node : wrap(node);\n\n/**\n * Wraps node `n` for a more object-oriented means of access.\n * It will wrap child nodes on demand. For this reason, WrappedNode object\n * identity is not stable\n * @param n Node to wrap\n * @returns \n */\nexport const wrap = <T>(n: TreeNode<T>): WrappedNode<T> => {\n  return {\n    *children() {\n      for (const c of n.childrenStore) {\n        yield wrap(c)\n      }\n    },\n    getValue: () => n.value as T,\n    getIdentity: () => n,\n    *queryValue(value: T): IterableIterator<WrappedNode<T>> {\n      for (const v of queryByValue(value, unwrapped(n))) {\n        yield wrap(v);\n      }\n    },\n    getParent: () => n.parent === undefined ? undefined : wrap(n.parent),\n    hasParent: (parent: WrappedNode<T> | TreeNode<T>): boolean => {\n      return hasParent(n, unwrapped(parent));\n    },\n    hasAnyParent: (parent: WrappedNode<T> | TreeNode<T>): boolean => {\n      return hasAnyParent(n, unwrapped(parent));\n    },\n    hasChild: (child: WrappedNode<T> | TreeNode<T>): boolean => {\n      return hasChild(unwrapped(child), n);\n    },\n    hasAnyChild: (child: WrappedNode<T> | TreeNode<T>): boolean => {\n      return hasAnyChild(unwrapped(child), n);\n    },\n    remove: () => {\n      remove(n);\n    },\n    addValue: (value: T): WrappedNode<T> => {\n      const nodeValue = addValue(value, n);\n      return wrap(nodeValue);\n    },\n    add: (child: WrappedNode<T> | TreeNode<T>): WrappedNode<T> => {\n      add(unwrapped(child), n);\n      return wrapped(child);\n    },\n    wraps: n\n  }\n}\n\n/**\n * Removes `child` from the tree structure it is in.\n * It removes `child` from its parent. Any sub-children of `child` still remain connected.\n * @param child \n * @returns \n */\nexport const remove = <T>(child: TreeNode<T>) => {\n  const p = child.parent;\n  if (p === undefined) return;\n  child.parent = undefined;\n  p.childrenStore = without(p.childrenStore, child);\n};\n\n/**\n * Depth-first iteration of the children of `node`\n * @param node \n * @returns \n */\nexport function* depthFirst<T>(node: TreeNode<T>): IterableIterator<TreeNode<T>> {\n  if (!root) return;\n  const stack = new StackMutable<TreeNode<T>>();\n  stack.push(...node.childrenStore);\n  let entry: TreeNode<T> | undefined = stack.pop();\n  while (entry) {\n    yield entry;\n    if (entry) {\n      stack.push(...entry.childrenStore);\n    }\n    if (stack.isEmpty) break;\n    entry = stack.pop();\n  }\n}\n\n/**\n * Breadth-first iteration of the children of `node`\n * @param node \n * @returns \n */\nexport function* breadthFirst<T>(node: TreeNode<T>): IterableIterator<TreeNode<T>> {\n  if (!node) return;\n  const queue = new QueueMutable<TreeNode<T>>();\n  queue.enqueue(...node.childrenStore);\n  let entry: TreeNode<T> | undefined = queue.dequeue();\n  while (entry) {\n    yield entry;\n    if (entry) {\n      queue.enqueue(...entry.childrenStore);\n    }\n    if (queue.isEmpty) break;\n    entry = queue.dequeue();\n  }\n}\n\n/**\n * Validates the tree from `root` downwards.\n * @param root \n * @param seen \n * @returns \n */\nexport function treeTest<T>(root: TreeNode<T>, seen: Array<TreeNode<T>> = []): [ ok: boolean, msg: string, node: TreeNode<T> ] {\n  if (root.parent === root) return [ false, `Root has itself as parent`, root ];\n  if (seen.includes(root)) return [ false, `Same node instance is appearing further in tree`, root ];\n  seen.push(root);\n  if (containsDuplicateInstances(root.childrenStore)) return [ false, `Children list contains duplicates`, root ];\n\n  for (const c of root.childrenStore) {\n    if (c.parent !== root) return [ false, `Member of childrenStore does not have .parent set`, c ];\n    if (hasAnyChild(root, c)) return [ false, `Child has parent as its own child`, c ];\n    const v = treeTest(c, seen);\n    if (!v[ 0 ]) return v;\n  }\n  return [ true, ``, root ];\n}\n\n/**\n * Throws an exception if `root` fails tree validation\n * @param root \n * @returns \n */\nexport function throwTreeTest<T>(root: TreeNode<T>) {\n  const v = treeTest(root);\n  if (v[ 0 ]) return;\n  throw new Error(`${ v[ 1 ] } Node: ${ toStringAbbreviate(v[ 2 ].value, 30) }`, { cause: v[ 2 ] })\n}\n/**\n * Iterate over direct children of `root`\n * @param root \n */\nexport function* children<T>(root: TreeNode<T>): IterableIterator<TreeNode<T>> {\n  for (const c of root.childrenStore) {\n    yield c;\n  }\n}\n\n/**\n * Iterate over all parents of `root`. First result is the immediate parent.\n * @param root \n */\nexport function* parents<T>(root: TreeNode<T>): IterableIterator<TreeNode<T>> {\n  let p = root.parent;\n  while (p) {\n    yield p;\n    p = p.parent;\n  }\n}\n\n/**\n * Returns the depth of `node`. A root node (ie. with no parents) has a depth of 0.\n * @param node \n * @returns \n */\nexport function nodeDepth(node: TreeNode<any>): number {\n  const p = [ ...parents(node) ];\n  return p.length;\n}\n\nexport const hasChild = <T>(child: TreeNode<T>, parent: TreeNode<T>) => {\n  for (const c of parent.childrenStore) {\n    if (c === child) return true;\n  }\n  return false;\n}\n\nexport const findChildByValue = <T>(value: T, parent: TreeNode<T>, eq: IsEqual<T> = isEqualDefault): TreeNode<T> | undefined => {\n  for (const c of parent.childrenStore) {\n    if (eq(value, c.value as T)) return c;\n  }\n}\n\nexport function* queryByValue<T>(value: T, parent: TreeNode<T>, eq: IsEqual<T> = isEqualDefault): IterableIterator<TreeNode<T>> {\n  for (const c of parent.childrenStore) {\n    if (eq(value, c.value as T)) yield c;\n  }\n}\n\n/**\n * Returns _true_ if `prospectiveChild` is some child node of `parent`,\n * anywhere in the tree structure.\n * \n * Use {@link hasChild} to only check immediate children.\n * @param prospectiveChild \n * @param parent \n * @returns \n */\nexport const hasAnyChild = <T>(prospectiveChild: TreeNode<T>, parent: TreeNode<T>) => {\n  for (const c of breadthFirst(parent)) {\n    if (c === prospectiveChild) return true;\n  }\n  return false;\n}\n\nexport const findAnyChildByValue = <T>(value: T, parent: TreeNode<T>, eq: IsEqual<T> = isEqualDefault) => {\n  for (const c of breadthFirst(parent)) {\n    if (eq(c.value as T, value)) return c;\n  }\n}\n\nexport const getRoot = <T>(node: TreeNode<T>): TreeNode<T> => {\n  if (node.parent) return getRoot(node.parent);\n  return node;\n}\n\n/**\n * Returns _true_ if `prospectiveParent` is any ancestor\n * parent of `child`.\n * \n * Use {@link hasParent} to only check immediate parent.\n * @param child \n * @param prospectiveParent \n * @returns \n */\nexport const hasAnyParent = <T>(child: TreeNode<T>, prospectiveParent: TreeNode<T>) => {\n  for (const p of parents(child)) {\n    if (p === prospectiveParent) return true;\n  }\n  return false;\n}\n\n/**\n * Returns _true_ if `prospectiveParent` is the immediate\n * parent of `child`.\n * \n * Use {@link hasAnyParent} to check for any ancestor parent.\n * @param child \n * @param prospectiveParent \n * @returns \n */\nexport const hasParent = <T>(child: TreeNode<T>, prospectiveParent: TreeNode<T>) => {\n  return child.parent === prospectiveParent;\n}\n\n/**\n * Computes the maximum depth of the tree.\n * That is, how many steps down from `node` it can go.\n * If a tree is: root -> childA -> subChildB\n * ```js\n * // Yields 2, since there are at max two steps down from root\n * computeMaxDepth(root); \n * ```\n * @param node \n * @returns \n */\nexport const computeMaxDepth = <T>(node: TreeNode<T>) => {\n  return computeMaxDepthImpl(node, 0);\n}\n\nconst computeMaxDepthImpl = <T>(node: TreeNode<T>, startingDepth = 0) => {\n  let depth = startingDepth;\n  for (const c of node.childrenStore) {\n    depth = Math.max(depth, computeMaxDepthImpl(c, startingDepth + 1));\n  }\n  return depth;\n}\n\nexport const add = <T>(child: TreeNode<T>, parent: TreeNode<T>) => {\n  throwAttemptedChild(child, parent);\n  //if (hasAnyChild(parent, child)) throw new Error(`Parent already contains child`);\n  //if (hasAnyParent(child, parent)) throw new Error(`Child already has parent`);\n  const p = child.parent;\n  parent.childrenStore = [ ...parent.childrenStore, child ];\n  child.parent = parent;\n  if (p) {\n    p.childrenStore = without(p.childrenStore, child);\n  }\n}\n\nexport const addValue = <T>(value: T | undefined, parent: TreeNode<T>) => {\n  return createNode(value, parent);\n}\n\n/**\n * Creates the root for a tree, with an optional `value`.\n * Use {@link rootWrapped} if you want a more object-oriented mode of access.\n * @param value \n * @returns \n */\nexport const root = <T>(value?: T | undefined) => {\n  return createNode(value);\n}\n\nexport const fromPlainObject = (value: Record<string, any>, label = ``, parent?: TreeNode<any>, seen: Array<any> = []): TreeNode<LabelledSingleValue<any>> => {\n  const entries = Object.entries(value);\n  parent = parent === undefined ? root() : addValue<LabelledSingleValue<any>>({ label, value }, parent);\n  for (const entry of entries) {\n    const value = entry[ 1 ];\n    // Avoid circular references\n    if (seen.includes(value)) continue;\n    seen.push(value);\n\n    if (typeof entry[ 1 ] === `object`) {\n      fromPlainObject(value, entry[ 0 ], parent, seen);\n    } else {\n      addValue<LabelledSingleValue<any>>({ label: entry[ 0 ], value: value }, parent);\n    }\n  }\n  return parent;\n}\n\n/**\n * Creates a tree, returning it as a {@link WrappedNode} for object-oriented access.\n * Use {@link root} alternatively.\n * @param value \n * @returns \n */\nexport const rootWrapped = <T>(value: T | undefined) => {\n  return wrap(createNode(value));\n}\n\nexport const createNode = <T>(value: T | undefined, parent?: TreeNode<T> | undefined): TreeNode<T> => {\n  const n: TreeNode<T> = {\n    childrenStore: [],\n    parent: parent,\n    value: value\n  }\n  if (parent !== undefined) {\n    parent.childrenStore = [ ...parent.childrenStore, n ];\n  }\n  return n;\n}\n\nexport const childrenLength = <T>(node: TreeNode<T>): number => {\n  return node.childrenStore.length;\n}\n\nexport const value = <T>(node: TreeNode<T>): T | undefined => {\n  return node.value;\n}\n\n/**\n * Projects `node` as a dynamic traversable.\n * Dynamic in the sense that it creates the traversable project for nodes on demand.\n * A consequence is that node identities are not stable.\n * @param node \n * @returns \n */\nexport const asDynamicTraversable = <T>(node: TreeNode<T>): TraversableTree<T> => {\n  const t: TraversableTree<T> = {\n    *children() {\n      for (const c of node.childrenStore) {\n        yield asDynamicTraversable(c);\n      }\n    },\n    getParent() {\n      if (node.parent === undefined) return;\n      return asDynamicTraversable(node.parent);\n    },\n    getValue(): any {\n      return node.value;\n    },\n    getIdentity() {\n      return node;\n    },\n  }\n  return t;\n}\n\nconst throwAttemptedChild = <T>(c: TreeNode<T>, parent: TreeNode<T>) => {\n  if (parent === c) throw new Error(`Cannot add self as child`);\n  if (c.parent === parent) return; // skip if it's already a child\n  if (hasAnyParent(parent, c)) throw new Error(`Child contains parent (1)`, { cause: c });\n  if (hasAnyParent(c, parent)) throw new Error(`Parent already contains child`, { cause: c });\n  if (hasAnyChild(parent, c)) throw new Error(`Child contains parent (2)`, { cause: c });\n}\n\nexport const setChildren = <T>(parent: TreeNode<T>, children: Array<TreeNode<T>>) => {\n  // Verify children are legit\n  for (const c of children) {\n    throwAttemptedChild(c, parent);\n  }\n\n  parent.childrenStore = [ ...children ];\n  for (const c of children) {\n    c.parent = parent;\n  }\n}\n\nexport const toStringDeep = <T>(node: TreeNode<T>, indent = 0): string => {\n  const t = `${ `  `.repeat(indent) } + ${ node.value ? JSON.stringify(node.value) : `-` }`;\n  return node.childrenStore.length > 0 ? (\n    t +\n    `\\n` +\n    node.childrenStore.map((d) => toStringDeep(d, indent + 1)).join(`\\n`)\n  ) : t;\n}\n\nexport function* followValue<T>(root: TreeNode<T>, continuePredicate: (nodeValue: T, depth: number) => boolean, depth = 1): IterableIterator<T | undefined> {\n  for (const c of root.childrenStore) {\n    const value = c.value;\n    if (value === undefined) continue;\n    if (continuePredicate(value, depth)) {\n      yield c.value;\n      yield* followValue(c, continuePredicate, depth + 1);\n    }\n  }\n}\n\n// export function* followNode<T>(root: Node<T>, continuePredicate: (nodeValue: T | undefined, depth: number) => boolean, depth = 1): IterableIterator<Node<T>> {\n//   for (const c of root.childrenStore) {\n//     if (continuePredicate(c.value, depth)) {\n//       yield c;\n//       yield* followNode(c, continuePredicate, depth + 1);\n//     }\n//   }\n// }","import type { StackOpts } from './index.js';\n\nexport const trimStack = <V>(\n  opts: StackOpts,\n  stack: ReadonlyArray<V>,\n  toAdd: ReadonlyArray<V>\n): ReadonlyArray<V> => {\n  const potentialLength = stack.length + toAdd.length;\n  const policy = opts.discardPolicy ?? `additions`;\n  const capacity = opts.capacity ?? potentialLength;\n  const toRemove = potentialLength - capacity;\n  if (opts.debug) {\n    console.log(\n      `Stack.push: stackLen: ${ stack.length } potentialLen: ${ potentialLength } toRemove: ${ toRemove } policy: ${ policy }`\n    );\n  }\n  switch (policy) {\n    case `additions`: {\n      if (opts.debug) {\n        console.log(\n          `Stack.push:DiscardAdditions: stackLen: ${ stack.length } slice: ${ potentialLength - capacity\n          } toAddLen: ${ toAdd.length }`\n        );\n      }\n\n      // eslint-disable-next-line unicorn/prefer-ternary\n      if (stack.length === opts.capacity) {\n        return stack; // Completely full\n      } else {\n        // Only add some from the new array\n        return [ ...stack, ...toAdd.slice(0, toAdd.length - toRemove) ];\n      }\n    }\n    case `newer`: {\n      if (toRemove >= stack.length) {\n        // New items will completely flush out old\n        return toAdd.slice(\n          Math.max(0, toAdd.length - capacity),\n          Math.min(toAdd.length, capacity) + 1\n        );\n      } else {\n        // Keep some of the old (from 0)\n        //if (opts.debug) console.log(` orig: ${JSON.stringify(stack)}`);\n        if (opts.debug) {\n          console.log(` from orig: ${ JSON.stringify(stack.slice(0, stack.length - toRemove)) }`);\n        }\n        return [\n          ...stack.slice(0, stack.length - toRemove),\n          ...toAdd.slice(0, Math.min(toAdd.length, capacity - toRemove + 1)),\n        ];\n      }\n    }\n    case `older`: {\n      // Oldest item in stack is position 0\n      return [ ...stack, ...toAdd ].slice(toRemove);\n    }\n    default: {\n      // eslint-disable-next-line @typescript-eslint/restrict-template-expressions\n      throw new Error(`Unknown discard policy ${ policy }`);\n    }\n  }\n};\n\n// Add to top (last index)\nexport const push = <V>(\n  opts: StackOpts,\n  stack: ReadonlyArray<V>,\n  ...toAdd: ReadonlyArray<V>\n): ReadonlyArray<V> => {\n  // If stack is A, B and toAdd is C, D this yields A, B, C, D\n  //const mutated = [...stack, ...toAdd];\n  const potentialLength = stack.length + toAdd.length;\n\n  const overSize = opts.capacity && potentialLength > opts.capacity;\n  const toReturn = overSize\n    ? trimStack(opts, stack, toAdd)\n    : [ ...stack, ...toAdd ];\n  return toReturn;\n};\n\n// Remove from top (last index)\nexport const pop = <V>(\n  opts: StackOpts,\n  stack: ReadonlyArray<V>\n): ReadonlyArray<V> => {\n  if (stack.length === 0) throw new Error(`Stack is empty`);\n  return stack.slice(0, - 1);\n};\n\n/**\n * Peek at the top of the stack (end of array)\n *\n * @template V\n * @param {StackOpts} opts\n * @param {V[]} stack\n * @returns {(V | undefined)}\n */\nexport const peek = <V>(\n  opts: StackOpts,\n  stack: ReadonlyArray<V>\n): V | undefined => stack.at(-1);\n\nexport const isEmpty = <V>(opts: StackOpts, stack: ReadonlyArray<V>): boolean =>\n  stack.length === 0;\n\nexport const isFull = <V>(\n  opts: StackOpts,\n  stack: ReadonlyArray<V>\n): boolean => {\n  if (opts.capacity) {\n    return stack.length >= opts.capacity;\n  }\n  return false;\n};\n","// -------------------------\n// Mutable\n// -------------------------\n\nimport type { IStackMutable } from './IStackMutable.js';\nimport { push, peek, pop, isEmpty, isFull } from './StackFns.js';\nimport type { StackOpts } from './index.js';\n\n/**\n * Creates a stack. Mutable. Use {@link StackImmutable} for an immutable alternative.\n *\n * @example Basic usage\n * ```js\n * // Create\n * const s = new StackMutable();\n * // Add one or more items\n * s.push(1, 2, 3, 4);\n *\n * // See what's on top\n * s.peek;  // 4\n *\n * // Remove the top-most, and return it\n * s.pop();   // 4\n *\n * // Now there's a new top-most element\n * s.peek;  // 3\n * ```\n */\nexport class StackMutable<V> implements IStackMutable<V> {\n  readonly opts: StackOpts;\n  /* eslint-disable-next-line functional/prefer-readonly-type */\n  data: ReadonlyArray<V>;\n\n  constructor(opts: StackOpts = {}, data: ReadonlyArray<V> = []) {\n    this.opts = opts;\n    this.data = data;\n  }\n\n  /**\n   * Push data onto the stack.\n   * If `toAdd` is empty, nothing happens\n   * @param toAdd Data to add\n   * @returns Length of stack\n   */\n  push(...toAdd: ReadonlyArray<V>): number {\n    if (toAdd.length === 0) return this.data.length;\n    this.data = push(this.opts, this.data, ...toAdd);\n    return this.data.length;\n  }\n\n  forEach(fn: (v: V) => void): void {\n    this.data.forEach(fn);\n  }\n\n  forEachFromTop(fn: (v: V) => void): void {\n    [ ...this.data ].reverse().forEach(fn);\n  }\n\n  pop(): V | undefined {\n    const v = peek(this.opts, this.data);\n    this.data = pop(this.opts, this.data);\n    return v;\n  }\n\n  get isEmpty(): boolean {\n    return isEmpty(this.opts, this.data);\n  }\n\n  get isFull(): boolean {\n    return isFull(this.opts, this.data);\n  }\n\n  get peek(): V | undefined {\n    return peek(this.opts, this.data);\n  }\n\n  get length(): number {\n    return this.data.length;\n  }\n}\n\n/**\n * Creates a stack. Mutable. Use {@link Stacks.immutable} for an immutable alternative.\n *\n * @example Basic usage\n * ```js\n * // Create\n * const s = Stacks.mutable();\n * // Add one or more items\n * s.push(1, 2, 3, 4);\n *\n * // See what's on top\n * s.peek;  // 4\n *\n * // Remove the top-most, and return it\n * s.pop();   // 4\n *\n * // Now there's a new top-most element\n * s.peek;  // 3\n * ```\n */\nexport const mutable = <V>(\n  opts: StackOpts = {},\n  ...startingItems: ReadonlyArray<V>\n): IStackMutable<V> => new StackMutable({ ...opts }, [ ...startingItems ]);\n","import { type IsEqual, isEqualValueIgnoreOrder } from \"../../IsEqual.js\";\nimport * as TreeMutable from './TreeMutable.js';\nimport type { TreeNode, TraversableTree } from './Types.js';\n\nexport type DiffAnnotation<T> = {\n  /**\n   * In the case of changes, this is old value\n   */\n  a: TraversableTree<T>\n  /**\n   * In the case of changes, this is the new value\n   */\n  b: TraversableTree<T>\n  /**\n   * If true, this node's value has been modified\n   */\n  valueChanged: boolean\n  /**\n   * If true, one of the child values has changed\n   */\n  childChanged: boolean\n  /**\n   * List of new children\n   */\n  added: Array<TraversableTree<T>>\n  /**\n   * List of removed children\n   */\n  removed: Array<TraversableTree<T>>\n}\n\nexport type DiffNode<T> = TreeNode<DiffAnnotation<T>> & {\n  toString: () => string\n};\n\nexport const compare = <T>(a: TraversableTree<T>, b: TraversableTree<T>, eq: IsEqual<T> = isEqualValueIgnoreOrder, parent?: DiffNode<T> | undefined): DiffNode<T> => {\n  const valueEqual = valueOrIdentityEqual(a, b, eq);\n  // if (!valueEqual) {\n  //   nsole.log(`changed compare a: ${ toStringSingle(a) } b: ${ toStringSingle(b) }`);\n  // }\n  const childrenCompare = compareChildren(a, b, eq);\n\n  const diff: DiffAnnotation<T> = {\n    valueChanged: !valueEqual, a, b,\n    added: childrenCompare.added,\n    removed: childrenCompare.removed,\n    childChanged: false\n  }\n  const diffNode: DiffNode<T> = {\n    value: diff,\n    childrenStore: [],\n    parent\n  }\n\n  const childrenDiff = childrenCompare.identical.map(c => compare(c[ 0 ], c[ 1 ], eq, diffNode));\n  // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n  const someChildChange = hasChange(diff) || childrenDiff.some(v => hasChange(v.value!));\n  TreeMutable.setChildren(diffNode, childrenDiff);\n  //diffNode.childrenStore = childrenDiff;\n\n  diffNode.toString = () => toString(diffNode, 0);\n  // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n  diffNode.value!.childChanged = someChildChange;\n  TreeMutable.throwTreeTest(diffNode);\n\n  return diffNode;\n}\n\nconst hasChange = (vv: DiffAnnotation<any>): boolean => {\n  if (vv === undefined) return false;\n  if (vv.valueChanged) return true;\n  if (vv.childChanged) return true;\n  if (vv.added.length > 0) return true;\n  if (vv.removed.length > 0) return true;\n  return false;\n}\n\n\nconst compareChildren = <T>(a: TraversableTree<T>, b: TraversableTree<T>, eq: IsEqual<T> = isEqualValueIgnoreOrder) => {\n  const childrenOfA = [ ...a.children() ];\n  const childrenOfB = [ ...b.children() ];\n\n  const identical: Array<[ a: TraversableTree<T>, b: TraversableTree<T> ]> = []\n  const removed: Array<TraversableTree<T>> = [];\n  for (const childA of childrenOfA) {\n    let foundIndex = -1;\n    for (const [ index, childOfB ] of childrenOfB.entries()) {\n      const d = valueOrIdentityEqual(childA, childOfB, eq);\n      if (d) {\n        identical.push([ childA, childOfB ]);\n        foundIndex = index;\n        break;\n      }\n    }\n    if (foundIndex === -1) {\n      // A's child not found in B's children\n      removed.push(childA);\n    } else {\n      // Found, remove it from list of B's children\n      childrenOfB.splice(foundIndex, 1);\n    }\n  }\n  const added = [ ...childrenOfB ];\n  return { added, identical, removed }\n}\n\nconst valueOrIdentityEqual = <T>(a: TraversableTree<T>, b: TraversableTree<T>, eq: IsEqual<T>): boolean => {\n  if (a.getIdentity() === b.getIdentity()) return true;\n  if (eq(a.getValue(), b.getValue())) return true;\n  return false;\n}\n\nconst toStringSingle = <T>(n: TraversableTree<T>) => {\n  return JSON.stringify(n.getValue());\n}\n\nconst toString = <T>(n: DiffNode<T>, indent = 0): string => {\n  if (n === undefined) return `(undefined)`;\n  let t = toStringDiff(n.value, indent);\n  for (const c of n.childrenStore) {\n    t += toString(c, indent + 2);\n  }\n  return t;\n}\n\nconst toStringDiff = <T>(n: DiffAnnotation<T> | undefined, indent: number): string => {\n  const spaces = ` `.repeat(indent);\n  if (n === undefined) return `${ spaces }(undefined)`;\n  const t = [];\n  t.push(`a: ${ toStringSingle(n.a) } b: ${ toStringSingle(n.b) }`);\n  if (n.valueChanged) t.push(`Value changed. Child changed: ${ n.childChanged }`);\n  else t.push(`Value unchanged. Child changed: ${ n.childChanged }`);\n\n  if (n.added.length > 0) {\n    t.push(`Added:`);\n    for (const c of n.added) {\n      t.push(` - ` + toStringSingle(c));\n    }\n  }\n  if (n.removed.length > 0) {\n    t.push(`Removed: ${ n.removed.length }`);\n    for (const c of n.removed) {\n      t.push(` - ` + toStringSingle(c));\n    }\n  }\n  t.push(`----\\n`)\n  return t.map(line => spaces + line).join(`\\n`);\n}","// import { sort } from 'fp-ts/lib/Array.js';\n// import { pipe } from 'fp-ts/lib/function.js';\n// import * as S from 'fp-ts/lib/string.js';\n// import * as N from 'fp-ts/lib/number.js';\n// import { reverse as reverseOrd, contramap } from 'fp-ts/lib/Ord.js';\n\nimport { defaultComparer, jsComparer } from './Util.js';\nimport { minMaxAvg as arrayMinMaxAg } from './collections/arrays/index.js';\n\n/// ✔ Sorting functions are unit tested\n\nexport type StringOrNumber = string | number | bigint;\nexport type Primitive = string | number | bigint | boolean;\n\nexport type BasicType = StringOrNumber | object;\nexport type KeyValue = readonly [ key: string, value: StringOrNumber ];\n\nexport function isPrimitive(v: any): v is Primitive {\n  if (typeof v == `number`) return true;\n  if (typeof v === `string`) return true;\n  if (typeof v == `bigint`) return true;\n  if (typeof v === `boolean`) return true;\n  return false;\n}\n\n// const byKey = (reverse = false) => pipe(\n//   reverse ? reverseOrd(S.Ord) : S.Ord,\n//   contramap((v: KeyValue) => v[ 0 ])\n// );\n\n// export const byValueString = (reverse = false) => pipe(\n//   reverse ? reverseOrd(S.Ord) : S.Ord,\n//   contramap((v: KeyValue) => v[ 1 ] as string)\n// );\n\n// const byValueNumber = (reverse = false) => pipe(\n//   reverse ? reverseOrd(N.Ord) : N.Ord,\n//   contramap((v: KeyValue) => v[ 1 ] as number)\n// );\n\n// export const sortByKey = (reverse = false) => sort<KeyValue>(byKey(reverse));\n// export const sortByValueString = (reverse = false) => sort<KeyValue>(byValueString(reverse));\n// export const sortByValueNumber = (reverse = false) => sort<KeyValue>(byValueNumber(reverse));\n\n// eslint-disable-next-line functional/prefer-readonly-type,functional/prefer-immutable-types\nexport type KeyValueSorter = (data: Array<KeyValue>) => Array<KeyValue>;\n\nconst sorterByValueIndex = (index: number, reverse = false) => {\n  return (values: Array<KeyValue>) => {\n    const s = values.toSorted((a, b) => {\n      return defaultComparer(a[ index ], b[ index ]);\n    });\n    if (reverse) return s.reverse();\n    return s;\n  }\n}\n\nexport type SortSyles = `value` | `value-reverse` | `key` | `key-reverse`;\nexport const getSorter = (sortStyle: SortSyles): KeyValueSorter => {\n  switch (sortStyle) {\n    case `value`: {\n      return sorterByValueIndex(1, false);\n    }\n    case `value-reverse`: {\n      return sorterByValueIndex(1, true);\n    }\n    case `key`: {\n      return sorterByValueIndex(0, false);\n    }\n    case `key-reverse`: {\n      return sorterByValueIndex(0, true);\n    }\n    default: {\n      throw new Error(`Unknown sorting value '${ (sortStyle as string) }'. Expecting: value, value-reverse, key or key-reverse`);\n    }\n  }\n};\n\n\nexport const minMaxAvg = (entries: ReadonlyArray<KeyValue>, conversionFunction?: (v: KeyValue) => number) => {\n  const converter = conversionFunction ?? ((v: KeyValue) => v[ 1 ] as number);\n  const values = entries.map<number>(entry => converter(entry));\n  return arrayMinMaxAg(values);\n};","import * as TreeArrayBacked from \"./TreeMutable.js\";\nimport type { LabelledValue, LabelledNode, TreeNode } from \"./Types.js\";\n/**\n * Options for parsing a path\n */\nexport type PathOpts = Readonly<{\n  /**\n   * Separator for path, eg '.'\n   */\n  separator: string;\n  /**\n   * If two values are stored at same path, what to do? Default: overwrite\n   * * overwrite: last-write wins\n   * * ignore: first-write wins\n   * * allow: allow multiple values\n   */\n  duplicates: `overwrite` | `allow` | `ignore`\n}>;\n\n\n\n/**\n * Creates a wrapper for working with 'pathed' trees.\n * An example is a filesystem.\n * \n * ```js\n * const t = create();\n * // Store a value. Path implies a structure of\n * //   c -> users -> admin\n * // ...which is autoatically created\n * t.add({x:10}, `c.users.admin`);\n * \n * t.add({x:20}, `c.users.guest`);\n * // Tree will now be:\n * // c-> users -> admin\n * //            -> guest\n * \n * t.getValue(`c.users.guest`); // { x:20 }\n * ```\n * \n * By default only a single value can be stored at a path.\n * Set options to allow this:\n * ```js\n * const t = create({ duplicates: `allow` });\n * t.add({x:10}, `c.users.admin`);\n * t.add({x:20}, `c.users.admin`);\n * t.getValue(`c.users.admin`);   // Throws an error because there are multiple values\n * t.getValues(`c.users.admin`);  // [ {x:10}, {x:20 } ]\n * ```\n * @param pathOpts \n * @returns \n */\nexport const create = <T>(pathOpts: Partial<PathOpts> = {}) => {\n  let root: TreeNode<LabelledValue<T>> | undefined;\n\n  const add = (value: T, path: string) => {\n    const n = addValueByPath(value, path, root, pathOpts);\n    if (root === undefined) {\n      root = TreeArrayBacked.getRoot(n);\n    }\n  }\n\n  const prettyPrint = () => {\n    if (root === undefined) return `(empty)`;\n    return TreeArrayBacked.toStringDeep(root);\n  }\n\n  const getValue = (path: string): T | undefined => {\n    if (root === undefined) return;\n    return valueByPath(path, root, pathOpts);\n  }\n\n  const remove = (path: string): boolean => {\n    if (root === undefined) return false;\n    return removeByPath(path, root, pathOpts);\n  }\n\n  const hasPath = (path: string): boolean => {\n    if (root === undefined) return false;\n    const c = findChildByPath(path, root, pathOpts);\n    return c !== undefined;\n  }\n\n  const getNode = (path: string): LabelledNode<T> | undefined => {\n    if (root === undefined) return;\n    const c = findChildByPath(path, root, pathOpts);\n    return c;\n  }\n\n  const childrenLength = (path: string): number => {\n    if (root === undefined) return 0;\n    const c = findChildByPath(path, root, pathOpts);\n    if (c === undefined) return 0;\n    return c.childrenStore.length;\n  }\n\n  const getValues = (path: string): Array<T> => {\n    if (root === undefined) return [];\n    return valuesByPath(path, root, pathOpts);\n  }\n\n  const clearValues = (path: string): boolean => {\n    if (root === undefined) return false;\n    return clearValuesByPath(path, root, pathOpts);\n  }\n  return { add, prettyPrint, remove, getValue, getValues, hasPath, childrenLength, getNode, clearValues }\n}\n\n/**\n * Adds a value by a string path, with '.' as a the default delimiter\n * Automatically generates intermediate nodes.\n *\n * ```js\n * const root = addValueByPath({}, 'c');\n * addValueByPath({x:'blah'}, 'c.users.admin', root);\n * ```\n *\n * Creates the structure:\n * ```\n * c          value: { }            label: c\n * + users    value: undefined      label: users\n *  + admin   value: { x: 'blah' }  label: admin\n * ```\n * \n * By default, multiple values under same key are overwritten, with the most recent winning.\n * @param value\n * @param path\n * @param pathOpts\n */\nexport const addValueByPath = <T>(value: T, path: string, node?: LabelledNode<T> | undefined, pathOpts: Partial<PathOpts> = {}): LabelledNode<T> => {\n  const separator = pathOpts.separator ?? `.`;\n  const duplicatePath = pathOpts.duplicates ?? `overwrite`;\n  const split = path.split(separator);\n  let count = 0;\n  for (const p of split) {\n    const lastEntry = count === split.length - 1;\n    //onsole.log(`p: ${ p }`);\n    const found = findChildByLabel(p, node);\n    if (found === undefined) {\n      //onsole.log(`  - not found`);\n      const labelled: LabelledValue<T> = {\n        value: (lastEntry ? value : undefined),\n        label: p\n      };\n      node = TreeArrayBacked.createNode(labelled, node);\n    } else {\n      node = found;\n      if (lastEntry) {\n        switch (duplicatePath) {\n          case `ignore`: {\n            break;\n          }\n          case `allow`: {\n            const existing = getValuesFromNode(node);\n            node.value = {\n              values: [ ...existing, value ],\n              label: p\n            }\n            break;\n          }\n          case `overwrite`: {\n            node.value = {\n              value,\n              label: p\n            }\n            break;\n          }\n        }\n      } else {\n        //onsole.log(`  - found!`, found.value);\n        node = found;\n      }\n    }\n    count++;\n  }\n  if (node === undefined) throw new Error(`Could not create tree`);\n  return node;\n}\n\nexport const removeByPath = <T>(path: string, root: LabelledNode<T>, pathOpts: Partial<PathOpts> = {}): boolean => {\n  if (root === undefined) return false;\n  const c = findChildByPath(path, root, pathOpts);\n  if (c === undefined) return false;\n  TreeArrayBacked.remove(c);\n  return true;\n}\n\nexport const clearValuesByPath = <T>(path: string, root: LabelledNode<T>, pathOpts: Partial<PathOpts> = {}): boolean => {\n  if (root === undefined) return false;\n  const c = findChildByPath(path, root, pathOpts);\n  if (c === undefined) return false;\n  c.value = {\n    label: c.value?.label ?? ``,\n    value: undefined\n  }\n  return true;\n}\nexport const childrenLengthByPath = <T>(path: string, node: LabelledNode<T>, pathOpts: Partial<PathOpts> = {}): number => {\n  if (node === undefined) return 0;\n  const c = findChildByPath(path, node, pathOpts);\n  if (c === undefined) return 0;\n  return c.childrenStore.length;\n}\n/**\n * Searches direct children, returning the node that has the given `label`\n * @param label\n * @returns\n */\nconst findChildByLabel = <T>(label: string, node: LabelledNode<T> | undefined): LabelledNode<T> | undefined => {\n  if (node === undefined) return undefined;\n  if (label === undefined) throw new Error(`Parameter 'label' cannot be undefined`);\n  if (node.value?.label === label) return node;\n  for (const c of node.childrenStore) {\n    if (c.value?.label === label) return c;\n  }\n}\n\nexport const valueByPath = <T>(path: string, node: LabelledNode<T>, pathOpts: Partial<PathOpts> = {}): T | undefined => {\n  const values = valuesByPath(path, node, pathOpts);\n  if (values.length === 0) return undefined;\n  if (values.length > 1) throw new Error(`Multiple values at path. Use getValues instead`);\n  return values[ 0 ];\n}\n\nconst getValuesFromNode = <T>(c: LabelledNode<T>): Array<T> => {\n  if (c.value === undefined) return [];\n  if (`values` in c.value) return c.value.values;\n  if (`value` in c.value) {\n    if (c.value.value === undefined) return [];\n    return [ c.value.value ];\n  }\n  return [];\n}\n\nconst findChildByPath = <T>(path: string, node: LabelledNode<T>, pathOpts: Partial<PathOpts> = {}) => {\n  const separator = pathOpts.separator ?? `.`;\n  const split = path.split(separator);\n  let c: LabelledNode<T> | undefined = node;\n  for (const p of split) {\n    c = findChildByLabel(p, c);\n    if (c === undefined) {\n      return;\n    }\n  }\n  return c;\n}\n\nexport const valuesByPath = <T>(path: string, node: LabelledNode<T>, pathOpts: Partial<PathOpts> = {}): Array<T> => {\n  const separator = pathOpts.separator ?? `.`;\n  const split = path.split(separator);\n  let c: LabelledNode<T> | undefined = node;\n  for (const p of split) {\n    //onsole.log(`getValue p: ${ p }`);\n    c = findChildByLabel(p, c);\n    if (c === undefined) {\n      //onsole.log(`getValue  - could not find. node: ${ JSON.stringify(node.value) }`);\n      return [];\n    }\n  }\n  return getValuesFromNode(c);\n}","import { toStringAbbreviate } from \"../../Text.js\";\nimport { isEqualDefault, type IsEqual } from \"../../IsEqual.js\";\nimport { QueueMutable } from \"../queue/QueueMutable.js\";\nimport { StackMutable } from \"../stack/StackMutable.js\";\nimport type { TraversableTree } from \"./Types.js\";\n\nexport const childrenLength = <T>(tree: TraversableTree<T>): number => {\n  return [ ...tree.children() ].length;\n}\n\n/**\n * Returns _true_ if `child` is parented at any level (grand-parented etc) by `possibleParent`\n * @param child Child being sought\n * @param possibleParent Possible parent of child\n * @param eq Equality comparison function {@link isEqualDefault} used by default\n * @returns\n */\nexport const hasAnyParent = <T>(\n  child: TraversableTree<T>,\n  possibleParent: TraversableTree<T>,\n  eq?: IsEqual<TraversableTree<T>>\n): boolean => {\n  return hasParent(child, possibleParent, eq, Number.MAX_SAFE_INTEGER);\n};\n\nexport const hasAnyParentValue = <T>(\n  child: TraversableTree<T>,\n  possibleParentValue: T,\n  eq?: IsEqual<T>\n): boolean => {\n  return hasParentValue(child, possibleParentValue, eq, Number.MAX_SAFE_INTEGER);\n};\n\nexport const findAnyParentByValue = <TValue>(\n  child: TraversableTree<TValue>,\n  possibleParentValue: TValue,\n  eq?: IsEqual<TValue>\n): TraversableTree<TValue> | undefined => {\n  return findParentByValue(child, possibleParentValue, eq, Number.MAX_SAFE_INTEGER);\n};\n\n/**\n * Returns _true_ if `child` exists within `possibleParent`. By default it only looks at the immediate\n * parent (maxDepth: 0). Use Number.MAX_SAFE_INTEGER for searching recursively upwards (or {@link hasAnyParent})\n * @param child Child being sought\n * @param possibleParent Possible parent of child\n * @param maxDepth Max depth of traversal. Default of 0 only looks for immediate parent.\n * @param eq Equality comparison function. {@link isEqualDefault} used by default.\n * @returns\n */\nexport const hasParent = <T>(\n  child: TraversableTree<T>,\n  possibleParent: TraversableTree<T>,\n  eq: IsEqual<TraversableTree<T>> = isEqualDefault<TraversableTree<T>>,\n  maxDepth = 0\n): boolean => {\n  if (maxDepth < 0) return false;\n  const p = child.getParent();\n  if (p === undefined) return false;\n  if (eq(p, possibleParent)) return true;\n  if (eq(p.getIdentity(), possibleParent.getIdentity())) return true;\n  return hasParent(p, possibleParent, eq, maxDepth - 1);\n};\n\nexport const hasParentValue = <TValue>(\n  child: TraversableTree<TValue>,\n  possibleParentValue: TValue,\n  eq: IsEqual<TValue> = isEqualDefault<TValue>,\n  maxDepth = 0\n): boolean => {\n  if (maxDepth < 0) return false;\n  const p = child.getParent();\n  if (p === undefined) return false;\n  if (eq(p.getValue(), possibleParentValue)) return true;\n  return hasParentValue(p, possibleParentValue, eq, maxDepth - 1);\n};\n\nexport const findParentByValue = <TValue>(\n  child: TraversableTree<TValue>,\n  possibleParentValue: TValue,\n  eq: IsEqual<TValue> = isEqualDefault<TValue>,\n  maxDepth = 0\n): TraversableTree<TValue> | undefined => {\n  if (maxDepth < 0) return;\n  const p = child.getParent();\n  if (p === undefined) return;\n  if (eq(p.getValue(), possibleParentValue)) return p;\n  return findParentByValue(p, possibleParentValue, eq, maxDepth - 1);\n};\n\n/**\n * Returns _true_ if `prospectiveChild` can be legally added to `parent`.\n * _False_ is returned if:\n *  * `parent` and `prospectiveChild` are equal\n *  * `parent` already contains `prospectiveChild`\n *  * `prospectiveChild` has `parent` as its own child\n *\n * Throws an error if `parent` or `prospectiveChild` is null/undefined.\n * @param parent Parent to add to\n * @param prospectiveChild Prospective child\n * @param eq Equality function\n */\nexport const couldAddChild = <T>(\n  parent: TraversableTree<T>,\n  prospectiveChild: TraversableTree<T>,\n  eq: IsEqual<TraversableTree<T>> = isEqualDefault\n) => {\n\n  if (eq(parent, prospectiveChild)) throw new Error(`Child equals parent`);\n  if (hasAnyChild(parent, prospectiveChild, eq)) {\n    throw new Error(`Circular. Parent already has child`);\n  }\n  if (hasAnyChild(prospectiveChild, parent, eq)) {\n    throw new Error(`Prospective child has parent as child relation`);\n  }\n};\n\n/**\n * Returns _true_ if _possibleChild_ is contained within _parent_ tree.\n * That is, it is any sub-child.\n * @param parent Parent tree\n * @param possibleChild Sought child\n * @param eq Equality function, or {@link isEqualDefault} if undefined.\n * @returns\n */\nexport const hasAnyChild = <T>(\n  parent: TraversableTree<T>,\n  possibleChild: TraversableTree<T>,\n  eq: IsEqual<TraversableTree<T>> = isEqualDefault\n): boolean => {\n  return hasChild(parent, possibleChild, eq, Number.MAX_SAFE_INTEGER);\n};\n\nexport const hasAnyChildValue = <T>(\n  parent: TraversableTree<T>,\n  possibleChildValue: T,\n  eq: IsEqual<T> = isEqualDefault\n): boolean => {\n  return hasChildValue(parent, possibleChildValue, eq, Number.MAX_SAFE_INTEGER);\n};\n\n/**\n * Returns _true_ if _possibleChild_ is contained within _maxDepth_ children\n * of _parent_ node. By default only looks at immediate children (maxDepth = 0).\n *\n * ```js\n * // Just check parentNode for childNode\n * Trees.hasChild(parentNode, childNode);\n * // See if parentNode or parentNode's parents have childNode\n * Trees.hasChild(parentNode, childNode, 1);\n * // Use custom equality function, in this case comparing on name field\n * Trees.hasChild(parentNode, childNode, 0, (a, b) => a.name === b.name);\n * ```\n * @param parent Parent tree\n * @param possibleChild Sought child\n * @param maxDepth Maximum depth. 0 for immediate children, Number.MAX_SAFE_INTEGER for boundless\n * @param eq Equality function, or {@link isEqualDefault} if undefined.\n * @returns\n */\nexport const hasChild = <T>(\n  parent: TraversableTree<T>,\n  possibleChild: TraversableTree<T>,\n  eq: IsEqual<TraversableTree<T>> = isEqualDefault,\n  maxDepth = 0\n): boolean => {\n\n  if (maxDepth < 0) return false;\n  if (eq(parent, possibleChild)) return true;\n  if (eq(parent.getIdentity(), possibleChild.getIdentity())) return true;\n  for (const c of breadthFirst(parent, maxDepth)) {\n    if (eq(c, possibleChild)) return true;\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-call\n    if (eq(c.getIdentity(), possibleChild.getIdentity())) return true;\n  }\n  return false;\n};\n\nexport const hasChildValue = <T>(\n  parent: TraversableTree<T>,\n  possibleValue: T,\n  eq: IsEqual<T> = isEqualDefault,\n  maxDepth = 0\n): boolean => {\n\n  if (maxDepth < 0) return false;\n  if (eq(parent.getValue(), possibleValue)) return true;\n  for (const c of breadthFirst(parent, maxDepth)) {\n    if (eq(c.getValue(), possibleValue)) return true;\n  }\n  return false;\n};\n\n/**\n * Iterates over siblings of `node`.\n * \n * Other iteration options:\n * * {@link breadthFirst}: Children, breadth-first\n * * {@link depthFirst}: Children, depth-first\n * * {@link parents}: Chain of parents, starting with immediate parent\n * * {@link siblings}: Nodes with same parent\n * @param node Node to begin from\n * @returns \n */\nexport function* siblings<T>(node: TraversableTree<T>): IterableIterator<TraversableTree<T>> {\n  const p = node.getParent();\n  if (p === undefined) return;\n  for (const s of p.children()) {\n    if (s === node) continue;\n    yield s;\n  }\n}\n\n/**\n * Iterates over parents of `node`, starting with immediate parent\n * \n * Other iteration options:\n * * {@link breadthFirst}: Children, breadth-first\n * * {@link depthFirst}: Children, depth-first\n * * {@link parents}: Chain of parents, starting with immediate parent\n * * {@link siblings}: Nodes with same parent\n * @param node Node to begin from\n * @returns \n */\nexport function* parents<T>(node: TraversableTree<T>): IterableIterator<TraversableTree<T>> {\n  let p = node.getParent();\n  while (p !== undefined) {\n    yield p;\n    p = p.getParent();\n  }\n}\n\n\nexport const findAnyChildByValue = <TValue>(parent: TraversableTree<TValue>,\n  possibleValue: TValue,\n  eq: IsEqual<TValue> = isEqualDefault\n): TraversableTree<TValue> | undefined => {\n  return findChildByValue(parent, possibleValue, eq, Number.MAX_SAFE_INTEGER);\n};\n\nexport const findChildByValue = <TValue>(parent: TraversableTree<TValue>,\n  possibleValue: TValue,\n  eq: IsEqual<TValue> = isEqualDefault,\n  maxDepth = 0\n): TraversableTree<TValue> | undefined => {\n\n  if (maxDepth < 0) return;\n  if (eq(parent.getValue(), possibleValue)) return parent;\n\n  for (const d of breadthFirst(parent, maxDepth)) {\n    // This child matches\n    if (eq(d.getValue(), possibleValue)) return d;\n  }\n  return;\n};\n\n/**\n * Iterates over children of `root`, depth-first.\n * \n * Other iteration options:\n * * {@link breadthFirst}: Children, breadth-first\n * * {@link depthFirst}: Children, depth-first\n * * {@link parents}: Chain of parents, starting with immediate parent\n * * {@link siblings}: Nodes with same parent\n * @param root Root node \n * @returns \n */\nexport function* depthFirst<T>(root: TraversableTree<T>): IterableIterator<TraversableTree<T>> {\n  if (!root) return;\n  const stack = new StackMutable<TraversableTree<T>>();\n  let entry: TraversableTree<T> | undefined = root;\n  while (entry) {\n    stack.push(...entry.children());\n    entry = stack.pop();\n    if (entry) yield entry;\n  }\n}\n\n/**\n * Iterates over the children of `root`, breadth-first\n * \n * Other iteration options:\n * * {@link breadthFirst}: Children, breadth-first\n * * {@link depthFirst}: Children, depth-first\n * * {@link parents}: Chain of parents, starting with immediate parent\n * * {@link siblings}: Nodes with same parent\n * @param root Root node\n * @param depth How many levels to traverse \n * @returns \n */\nexport function* breadthFirst<T>(root: TraversableTree<T>, depth = Number.MAX_SAFE_INTEGER): IterableIterator<TraversableTree<T>> {\n  if (!root) return;\n  const queue = new QueueMutable<TraversableTree<T>>();\n  let entry: TraversableTree<T> | undefined = root;\n  while (entry) {\n    if (depth < 0) return;\n    for (const c of entry.children()) {\n      yield c;\n      queue.enqueue(c);\n    }\n    entry = queue.dequeue();\n    depth--;\n  }\n}\n\n/**\n * Applies `predicate` to `root` and all its child nodes, returning the node where\n * `predicate` yields _true_.\n * Use {@link findByValue} to find a node by its value\n * @param root \n * @param predicate \n * @param order Iterate children by breadth or depth. Default 'breadth'\n * @returns \n */\nexport function find<T>(root: TraversableTree<T>, predicate: (node: TraversableTree<T>) => boolean, order: `breadth` | `depth` = `breadth`): TraversableTree<T> | undefined {\n  if (predicate(root)) return root;\n  const iter = order === `breadth` ? breadthFirst : depthFirst;\n  for (const c of iter(root)) {\n    if (predicate(c)) return c;\n  }\n}\n\n/**\n * Applies `predicate` to `root` and all its child nodes, returning the node value for\n * `predicate` yields _true_.\n * Use {@link find} to filter by nodes rather than values\n * \n * ```js\n * const n = findByValue(root, (v) => v.name === 'Bob');\n * ```\n * @param root \n * @param predicate \n * @param order Iterate children by breadth or depth. Default 'breadth'\n * @returns \n */\nexport function findByValue<T>(root: TraversableTree<T>, predicate: (nodeValue: T) => boolean, order: `breadth` | `depth` = `breadth`): TraversableTree<T> | undefined {\n  if (predicate(root.getValue())) return root;\n  const iter = order === `breadth` ? breadthFirst : depthFirst;\n\n  for (const c of iter(root)) {\n    if (predicate(c.getValue())) return c;\n  }\n}\n\n/**\n * Search through children in a path-like manner.\n * \n * It finds the first child of `root` that matches `continuePredicate`. \n * The function gets passed a depth of 1 to begin with. It recurses, looking for the next sub-child, etc.\n * \n * If it can't find a child, it stops.\n * \n * This is different to 'find' functions, which exhausively search all possible child nodes, regardless of position in tree.\n * \n * ```js\n * const path = 'a.aa.aaa'.split('.');\n * const pred = (nodeValue, depth) => {\n *  if (nodeValue === path[0]) {\n *    path.shift(); // Remove first element\n *    return true;\n *  }\n *  return false;\n * }\n * \n * // Assuming we have a tree of string values:\n * // a\n * //   - aa\n * //       - aaa\n * //   - ab\n * // b\n * //   - ba\n * for (const c of follow(tree, pred)) {\n *  // Returns nodes: a, aa and then aaa\n * }\n * ```\n * @param root \n * @param continuePredicate \n * @param depth \n */\nexport function* followValue<T>(root: TraversableTree<T>, continuePredicate: (nodeValue: T, depth: number) => boolean, depth = 1): IterableIterator<T> {\n  for (const c of root.children()) {\n    if (continuePredicate(c.getValue(), depth)) {\n      yield c.getValue();\n      yield* followValue(c, continuePredicate, depth + 1);\n    }\n  }\n}\n\nexport function toStringDeep<T>(node: TraversableTree<T>, depth = 0) {\n  if (node === undefined) return `(undefined)`;\n  if (node === null) return `(null)`;\n  const v = node.getValue();\n  let type: string = typeof v;\n  if (Array.isArray(v)) type = `array`;\n  let t = `  `.repeat(depth) + `value: ${ JSON.stringify(v) } (${ type })\\n`;\n  for (const n of node.children()) {\n    t += toStringDeep(n, depth + 1);\n  }\n  return t;\n}\n\nexport function toString(...nodes: Array<TraversableTree<any>>) {\n  let t = ``;\n  for (const node of nodes) {\n    const v = node.getValue();\n    const vString = toStringAbbreviate(v);\n    const children = [ ...node.children() ];\n    const parent = node.getParent();\n    let type: string = typeof v;\n    if (Array.isArray(v)) type = `array`;\n    t += `value: ${ vString } (${ type }) kids: ${ children.length } parented: ${ parent ? `y` : `n` }\\n`;\n  }\n  return t;\n}","export type { IStack } from './IStack.js';\nexport type { IStackMutable } from './IStackMutable.js';\nexport type { IStackImmutable } from './IStackImmutable.js';\n\n// ✔ Unit tested!\nexport type StackDiscardPolicy = `older` | `newer` | `additions`;\n\nexport type StackOpts = {\n  readonly debug?: boolean;\n  readonly capacity?: number;\n  readonly discardPolicy?: StackDiscardPolicy;\n};\n\nexport { immutable } from './StackImmutable.js';\nexport { mutable } from './StackMutable.js';\n","// -------------------------\n// Immutable\n// -------------------------\nimport type { IStackImmutable } from './IStackImmutable.js';\nimport { push, pop, isEmpty, isFull, peek } from './StackFns.js';\nimport type { StackOpts } from './index.js';\n\nexport class StackImmutable<V> implements IStackImmutable<V> {\n  private readonly opts: StackOpts;\n  /* eslint-disable-next-line functional/prefer-readonly-type */\n  readonly data: ReadonlyArray<V>;\n\n  constructor(opts: StackOpts = {}, data: ReadonlyArray<V> = []) {\n    this.opts = opts;\n    this.data = data;\n  }\n\n  push(...toAdd: ReadonlyArray<V>): StackImmutable<V> {\n    return new StackImmutable<V>(\n      this.opts,\n      push(this.opts, this.data, ...toAdd)\n    );\n  }\n\n  pop(): IStackImmutable<V> {\n    return new StackImmutable<V>(this.opts, pop(this.opts, this.data));\n  }\n\n  forEach(fn: (v: V) => void): void {\n    this.data.forEach(fn);\n  }\n\n  forEachFromTop(fn: (v: V) => void): void {\n    [...this.data].reverse().forEach(fn);\n  }\n\n  get isEmpty(): boolean {\n    return isEmpty(this.opts, this.data);\n  }\n\n  get isFull(): boolean {\n    return isFull(this.opts, this.data);\n  }\n\n  get peek(): V | undefined {\n    return peek(this.opts, this.data);\n  }\n\n  get length(): number {\n    return this.data.length;\n  }\n}\n\n/**\n * Returns a stack. Immutable. Use {@link Stacks.mutable} for a mutable alternative.\n *\n * The basic usage is `push`/`pop` to add/remove, returning the modified stack. Use the\n * property `peek` to see what's on top.\n *\n * @example Basic usage\n * ```js\n * // Create\n * let s = stack();\n * // Add one or more items\n * s = s.push(1, 2, 3, 4);\n * // See what's at the top of the stack\n * s.peek;      // 4\n *\n * // Remove from the top of the stack, returning\n * // a new stack without item\n * s = s.pop();\n * s.peek;        // 3\n * ```\n * @param opts Options\n * @param startingItems List of items to add to stack. Items will be pushed 'left to right', ie array index 0 will be bottom of the stack.\n */\nexport const immutable = <V>(\n  opts: StackOpts = {},\n  ...startingItems: ReadonlyArray<V>\n): IStackImmutable<V> => new StackImmutable({ ...opts }, [...startingItems]);\n","export type ValueSetEventMap<V> = {\n  readonly add: { readonly value: V; readonly updated: boolean };\n  readonly clear: boolean;\n  readonly delete: V;\n};\n\nexport { mutable } from './SetMutable.js';\nexport { immutable } from './SetImmutable.js';\nexport { type ISetMutable } from './ISetMutable.js';\nexport { type ISetImmutable } from './ISetImmutable.js';\n","// ✔ UNIT TESTED\nimport { type ToString, defaultKeyer } from '../../Util.js';\nimport { SimpleEventEmitter } from '../../Events.js';\nimport { type ISetMutable } from './ISetMutable.js';\nimport { type ValueSetEventMap } from './index.js';\n\n/**\n * Creates a {@link ISetMutable}.\n * @param keyString Function that produces a key based on a value. If unspecified, uses `JSON.stringify`\n * @returns\n */\nexport const mutable = <V>(\n  keyString?: ToString<V> | undefined\n): ISetMutable<V> => new SetStringMutable(keyString);\n\n/**\n * Mutable string set\n */\nexport class SetStringMutable<V>\n  extends SimpleEventEmitter<ValueSetEventMap<V>>\n  implements ISetMutable<V>\n{\n  // ✔ UNIT TESTED\n  /* eslint-disable functional/prefer-readonly-type */\n  store = new Map<string, V>();\n  keyString: ToString<V>;\n\n  /**\n   * Constructor\n   * @param keyString Function which returns a string version of added items. If unspecified `JSON.stringify`\n   */\n  constructor(keyString: ToString<V> | undefined) {\n    super();\n    this.keyString = keyString ?? defaultKeyer<V>;\n  }\n\n  /**\n   * Number of items stored in set\n   */\n  get size() {\n    return this.store.size;\n  }\n\n  /**\n   * Adds one or more items to set. `add` event is fired for each item\n   * @param values items to add\n   */\n  add(...values: Array<V>): boolean {\n    //eslint-disable-next-line functional/no-let\n    let somethingAdded = false;\n    for (const value of values) {\n      const isUpdated = this.has(value);\n      this.store.set(this.keyString(value), value);\n      super.fireEvent(`add`, { value: value, updated: isUpdated });\n      if (!isUpdated) somethingAdded = true;\n    }\n    return somethingAdded;\n  }\n\n  /**\n   * Returns values from set as an iterable\n   * @returns\n   */\n  //eslint-disable-next-line functional/prefer-tacit\n  values() {\n    return this.store.values();\n  }\n\n  /**\n   * Clear items from set\n   */\n  clear() {\n    this.store.clear();\n    super.fireEvent(`clear`, true);\n  }\n\n  /**\n   * Delete value from set.\n   * @param v Value to delete\n   * @returns _True_ if item was found and removed\n   */\n  delete(v: V): boolean {\n    const isDeleted = this.store.delete(this.keyString(v));\n    if (isDeleted) super.fireEvent(`delete`, v);\n    return isDeleted;\n  }\n\n  /**\n   * Returns _true_ if item exists in set\n   * @param v\n   * @returns\n   */\n  has(v: V): boolean {\n    return this.store.has(this.keyString(v));\n  }\n\n  /**\n   * Returns array copy of set\n   * @returns Array copy of set\n   */\n  toArray(): Array<V> {\n    return [ ...this.store.values() ];\n  }\n}\n","import { type ToString, defaultKeyer, toStringDefault } from '../../Util.js';\nimport { type ISetImmutable } from './index.js';\n\nexport class SetStringImmutable<V> implements ISetImmutable<V> {\n  private store: Map<string, V>;\n  private keyString;\n\n  //eslint-disable-next-line functional/prefer-immutable-types\n  constructor(keyString?: ToString<V>, map?: Map<string, V>) {\n    this.store = map ?? new Map<string, V>();\n    this.keyString = keyString ?? defaultKeyer<V>;\n  }\n\n  get size(): number {\n    return this.store.size;\n  }\n\n  add(...values: readonly V[]): ISetImmutable<V> {\n    const s = new Map<string, V>(this.store);\n    for (const v of values) {\n      const key = this.keyString(v);\n      s.set(key, v);\n    }\n    return new SetStringImmutable<V>(this.keyString, s);\n  }\n\n  delete(v: V): ISetImmutable<V> {\n    const s = new Map<string, V>(this.store);\n    const key = this.keyString(v);\n    if (s.delete(key)) return new SetStringImmutable(this.keyString, s);\n    return this;\n  }\n\n  has(v: V): boolean {\n    const key = this.keyString(v);\n    return this.store.has(key);\n  }\n\n  toArray(): V[] {\n    return [...this.store.values()];\n  }\n\n  *values() {\n    yield* this.store.values();\n  }\n}\n\n/**\n * Immutable set that uses a `keyString` function to determine uniqueness\n *\n * @param keyString Function that produces a key based on a value. If unspecified, uses `JSON.stringify`.\n * @returns\n */\nexport const immutable = <V>(\n  keyString: ToString<V> = toStringDefault\n): ISetImmutable<V> => new SetStringImmutable(keyString);\n","\nexport * from './QueueTypes.js';\nexport { type IQueueMutable } from './IQueueMutable.js';\nexport { type IQueueImmutable } from './IQueueImmutable.js';\nexport { type IPriorityQueueMutable } from './IPriorityQueueMutable.js';\nexport { type QueueOpts } from './QueueTypes.js';\nexport { immutable } from './QueueImmutable.js';\nexport { mutable, QueueMutable } from './QueueMutable.js';\nexport { priority } from './PriorityMutable.js';\n","import type { IQueueImmutable } from './IQueueImmutable.js';\nimport { peek, isFull, isEmpty, enqueue, dequeue } from './QueueFns.js';\nimport { type QueueOpts } from './index.js';\n\n// -------------------------------\n// Immutable\n// -------------------------------\nexport class QueueImmutable<V> implements IQueueImmutable<V> {\n  readonly opts: QueueOpts<V>;\n  readonly data: ReadonlyArray<V>;\n\n  /**\n   * Creates an instance of Queue.\n   * @param {QueueOpts} opts Options foor queue\n   * @param {V[]} data Initial data. Index 0 is front of queue\n   * @memberof Queue\n   */\n  constructor(opts: QueueOpts<V> = {}, data: ReadonlyArray<V> = []) {\n    if (opts === undefined) throw new Error(`opts parameter undefined`);\n\n    this.opts = opts;\n    this.data = data;\n  }\n\n  forEach(fn: (v: V) => void) {\n    //eslint-disable-next-line functional/no-let\n    for (let index = this.data.length - 1; index >= 0; index--) {\n      fn(this.data[ index ]);\n    }\n  }\n\n  forEachFromFront(fn: (v: V) => void) {\n    // From front of queue\n    this.data.forEach(fn); //(vv) => fn(vv));\n  }\n\n  enqueue(...toAdd: ReadonlyArray<V>): QueueImmutable<V> {\n    return new QueueImmutable<V>(\n      this.opts,\n      enqueue(this.opts, this.data, ...toAdd)\n    );\n  }\n\n  dequeue(): QueueImmutable<V> {\n    return new QueueImmutable<V>(this.opts, dequeue(this.opts, this.data));\n  }\n\n  get isEmpty(): boolean {\n    return isEmpty(this.opts, this.data);\n  }\n\n  get isFull(): boolean {\n    return isFull(this.opts, this.data);\n  }\n\n  get length(): number {\n    return this.data.length;\n  }\n\n  get peek(): V | undefined {\n    return peek(this.opts, this.data);\n  }\n}\n\n/**\n * Returns an immutable queue. Queues are useful if you want to treat 'older' or 'newer'\n * items differently. _Enqueing_ adds items at the back of the queue, while\n * _dequeing_ removes items from the front (ie. the oldest).\n *\n * ```js\n * let q = Queues.immutable();           // Create\n * q = q.enqueue(`a`, `b`);   // Add two strings\n * const front = q.peek();    // `a` is at the front of queue (oldest)\n * q = q.dequeue();           // q now just consists of `b`\n * ```\n * @example Cap size to 5 items, throwing away newest items already in queue.\n * ```js\n * const q = Queues.immutable({capacity: 5, discardPolicy: `newer`});\n * ```\n *\n * @template V Data type of items\n * @param opts\n * @param startingItems Index 0 is the front of the queue\n * @returns A new queue\n */\nexport const immutable = <V>(\n  opts: QueueOpts<V> = {},\n  ...startingItems: ReadonlyArray<V>\n): IQueueImmutable<V> => {\n  opts = { ...opts }; // Make a copy of options\n  return new QueueImmutable(opts, [ ...startingItems ]); // Make a copy of array so it can't be modified\n};\n","import { isEqualDefault, type IsEqual } from \"../../IsEqual.js\";\nimport { max as IterablesMax, min as IterablesMin } from \"../Iterables.js\";\nimport type { IPriorityQueueMutable, PriorityItem } from \"./IPriorityQueueMutable.js\";\nimport { QueueMutable } from \"./QueueMutable.js\";\nimport type { QueueOpts } from \"./QueueTypes.js\";\n\nexport class PriorityMutable<V> extends QueueMutable<PriorityItem<V>> implements IPriorityQueueMutable<V> {\n\n  constructor(opts: QueueOpts<PriorityItem<V>> = {}) {\n    if (opts.eq === undefined) {\n      opts = {\n        ...opts,\n        eq: (a, b) => {\n          return isEqualDefault(a.item, b.item);\n        }\n      }\n    }\n    super(opts);\n  }\n\n  enqueueWithPriority(item: V, priority: number) {\n    super.enqueue({ item, priority });\n  }\n\n  changePriority(item: V, priority: number, addIfMissing = false, eq?: IsEqual<V>) {\n    if (item === undefined) throw new Error(`Item cannot be undefined`);\n    let toDelete: PriorityItem<V> | undefined;\n    for (const d of this.data) {\n      if (eq) {\n        if (eq(d.item, item)) {\n          toDelete = d;\n          break;\n        }\n      } else {\n        if (this.eq(d, { item, priority: 0 })) {\n          toDelete = d;\n          break;\n        }\n      }\n    }\n    if (toDelete === undefined && !addIfMissing) throw new Error(`Item not found in priority queue. Item: ${ JSON.stringify(item) }`);\n    if (toDelete !== undefined) {\n      this.remove(toDelete);\n    }\n    this.enqueueWithPriority(item, priority);\n  }\n\n  dequeueMax(): V | undefined {\n    const m = IterablesMax(this.data, v => v.priority);\n    if (m === undefined) return;\n    this.remove(m);\n    return m.item;\n  }\n\n  dequeueMin(): V | undefined {\n    const m = IterablesMin(this.data, v => v.priority);\n    if (m === undefined) return;\n    this.remove(m);\n    return m.item;\n  }\n\n  peekMax(): V | undefined {\n    const m = IterablesMax(this.data, v => v.priority);\n    if (m === undefined) return;\n    return m.item;\n  }\n\n  peekMin(): V | undefined {\n    const m = IterablesMin(this.data, v => v.priority);\n    if (m === undefined) return;\n    return m.item;\n  }\n}\n\nexport function priority<V>(\n  opts: QueueOpts<PriorityItem<V>> = {}\n): IPriorityQueueMutable<V> {\n  return new PriorityMutable(opts);\n}","export { create as expiringMap, ExpiringMap } from './ExpiringMap.js';\nexport type {\n  ExpiringMapEvent,\n  ExpiringMapEvents,\n  Opts as ExpiringMapOpts,\n} from './ExpiringMap.js';\n\nexport type { IMapOf } from './IMapOf.js';\nexport { immutable, type IMapImmutable } from './Map.js';\nexport { mutable, type IMapMutable } from './MapMutable.js';\nexport { ofSetMutable } from './MapOfSetMutable.js';\nexport { ofCircularMutable } from './MapOfCircularMutable.js';\nexport type { MapCircularOpts } from './MapOfCircularMutable.js';\nexport type { IMapOfMutable } from './IMapOfMutable.js';\nexport type { IMappish, IWithEntries } from './IMappish.js';\nexport type { MapArrayOpts } from './MapOfArrayMutable.js';\nexport { NumberMap } from './NumberMap.js';\nexport * from './MapMulti.js';\nexport * from './MapFns.js';\nexport * from './GetOrGenerate.js';","import { SimpleEventEmitter } from '../../Events.js';\nimport { sortByValueProperty } from './MapFns.js';\nimport { throwIntegerTest } from '../../Guards.js';\n\n/**\n * Expiring map options\n */\nexport type Opts = {\n  /**\n   * Capacity limit\n   */\n  readonly capacity?: number;\n  /**\n   * Policy for evicting items if capacity is reached\n   */\n  readonly evictPolicy?: `none` | `oldestGet` | `oldestSet`;\n  /**\n   * Automatic deletion policy.\n   * none: no automatic deletion (default)\n   * get/set: interval based on last get/set\n   * either: if either interval has elapsed\n   */\n  readonly autoDeletePolicy?: `none` | `get` | `set` | `either`;\n  /**\n   * Automatic deletion interval\n   */\n  readonly autoDeleteElapsedMs?: number;\n};\n\ntype Item<V> = {\n  readonly value: V;\n  readonly lastSet: number;\n  readonly lastGet: number;\n};\n\n/**\n * Event from the ExpiringMap\n */\nexport type ExpiringMapEvent<K, V> = {\n  readonly key: K;\n  readonly value: V;\n};\n\nexport type ExpiringMapEvents<K, V> = {\n  /**\n   * Fires when an item is removed due to eviction\n   * or automatic expiry\n   */\n  readonly expired: ExpiringMapEvent<K, V>;\n  /**\n   * Fires when a item with a new key is added\n   */\n  readonly newKey: ExpiringMapEvent<K, V>;\n\n  /**\n   * Fires when an item is manually removed,\n   * removed due to eviction or automatic expiry\n   */\n  readonly removed: ExpiringMapEvent<K, V>;\n};\n\n/**\n * Create a ExpiringMap instance\n * @param opts\n * @returns\n */\nexport const create = <K, V>(opts: Opts = {}): ExpiringMap<K, V> =>\n  new ExpiringMap(opts);\n/***\n * A map that can have a capacity limit. The elapsed time for each get/set\n * operation is maintained allowing for items to be automatically removed.\n * `has()` does not affect the last access time.\n *\n * By default, it uses the `none` eviction policy, meaning that when full\n * an error will be thrown if attempting to add new keys.\n *\n * Eviction policies:\n * `oldestGet` removes the item that hasn't been accessed the longest,\n * `oldestSet` removes the item that hasn't been updated the longest.\n *\n * ```js\n * const map = new ExpiringMap();\n * map.set(`fruit`, `apple`);\n *\n * // Remove all entries that were set more than 100ms ago\n * map.deleteWithElapsed(100, `set`);\n * // Remove all entries that were last accessed more than 100ms ago\n * map.deleteWithElapsed(100, `get`);\n * // Returns the elapsed time since `fruit` was last accessed\n * map.elapsedGet(`fruit`);\n * // Returns the elapsed time since `fruit` was last set\n * map.elapsedSet(`fruit`);\n * ```\n *\n * Last set/get time for a key can be manually reset using `touch(key)`.\n *\n *\n * Events:\n * * `expired`: when an item is automatically removed.\n * * `removed`: when an item is manually or automatically removed.\n * * `newKey`: when a new key is added\n *\n * ```js\n * map.addEventListener(`expired`, evt => {\n *  const { key, value } = evt;\n * });\n * ```\n * The map can automatically remove items based on elapsed intervals.\n *\n * @example Automatically delete items that haven't been accessed for one second\n * ```js\n * const map = new ExpiringMap({\n *  autoDeleteElapsed: 1000,\n *  autoDeletePolicy: `get`\n * });\n * ```\n *\n * @example Automatically delete the oldest item if we reach a capacity limit\n * ```\n * const map = new ExpiringMap({\n *  capacity: 5,\n *  evictPolicy: `oldestSet`\n * });\n * ```\n */\nexport class ExpiringMap<K, V> extends SimpleEventEmitter<\n  ExpiringMapEvents<K, V>\n> {\n  private capacity: number;\n  private store: Map<K, Item<V>>;\n  private keyCount: number;\n  private evictPolicy;\n\n  private autoDeleteElapsedMs: number;\n  private autoDeletePolicy;\n\n  constructor(opts: Opts = {}) {\n    super();\n    this.capacity = opts.capacity ?? -1;\n\n    throwIntegerTest(this.capacity, `nonZero`, `capacity`);\n    this.store = new Map();\n    this.keyCount = 0;\n\n    if (opts.evictPolicy && this.capacity <= 0) {\n      throw new Error(`evictPolicy is set, but no capacity limit is set`);\n    }\n    this.evictPolicy = opts.evictPolicy ?? `none`;\n    this.autoDeleteElapsedMs = opts.autoDeleteElapsedMs ?? -1;\n    this.autoDeletePolicy = opts.autoDeletePolicy ?? `none`;\n\n    if (this.autoDeleteElapsedMs > 0) {\n      setInterval(\n        () => this.#maintain(),\n        Math.max(1000, this.autoDeleteElapsedMs * 2)\n      );\n    }\n  }\n\n  /**\n   * Returns the number of keys being stored.\n   */\n  get keyLength() {\n    return this.keyCount;\n  }\n\n  *entries(): IterableIterator<[ k: K, v: V ]> {\n    for (const entry of this.store.entries()) {\n      yield [ entry[ 0 ], entry[ 1 ].value ];\n    }\n  }\n\n  *values(): IterableIterator<V> {\n    for (const v of this.store.values()) {\n      yield v.value;\n    }\n  }\n\n  *keys(): IterableIterator<K> {\n    yield* this.store.keys();\n  }\n\n  /**\n   * Returns the elapsed time since `key`\n   * was set. Returns _undefined_ if `key`\n   * does not exist\n   */\n  elapsedSet(key: K): number | undefined {\n    const v = this.store.get(key);\n    if (!v) return v;\n    return Date.now() - v.lastSet;\n  }\n\n  /**\n   * Returns the elapsed time since `key`\n   * was accessed. Returns _undefined_ if `key`\n   * does not exist\n   */\n  elapsedGet(key: K): number | undefined {\n    const v = this.store.get(key);\n    if (!v) return v;\n    return Date.now() - v.lastGet;\n  }\n\n  /**\n   * Returns true if `key` is stored.\n   * Does not affect the key's last access time.\n   * @param key\n   * @returns\n   */\n  has(key: K): boolean {\n    return this.store.has(key);\n  }\n\n  /**\n   * Gets an item from the map by key, returning\n   * undefined if not present\n   * @param key Key\n   * @returns Value, or undefined\n   */\n  get(key: K): V | undefined {\n    const v = this.store.get(key);\n    if (v) {\n      return v.value;\n    }\n  }\n\n  /**\n   * Deletes the value under `key`, if present.\n   *\n   * Returns _true_ if something was removed.\n   * @param key\n   * @returns\n   */\n  delete(key: K): boolean {\n    const val = this.store.get(key);\n    if (!val) return false;\n    const d = this.store.delete(key);\n    this.keyCount = this.keyCount - 1;\n    this.fireEvent(`removed`, {\n      key,\n      value: val.value,\n    });\n    return d;\n  }\n\n  /**\n   * Updates the lastSet/lastGet time for a value\n   * under `k`.\n   *\n   * Returns false if key was not found\n   * @param key\n   * @returns\n   */\n  touch(key: K): boolean {\n    const v = this.store.get(key);\n    if (!v) return false;\n    this.store.set(key, {\n      ...v,\n      lastSet: Date.now(),\n      lastGet: Date.now(),\n    });\n    return true;\n  }\n\n  private findEvicteeKey() {\n    if (this.evictPolicy === `none`) return null;\n    //eslint-disable-next-line functional/no-let\n    let sortBy = ``;\n    if (this.evictPolicy === `oldestGet`) sortBy = `lastGet`;\n    else if (this.evictPolicy === `oldestSet`) sortBy = `lastSet`;\n    else throw Error(`Unknown eviction policy ${ this.evictPolicy }`);\n    const sorted = sortByValueProperty(this.store, sortBy);\n    return sorted[ 0 ][ 0 ];\n  }\n\n  #maintain() {\n    if (this.autoDeletePolicy === `none`) return;\n    this.deleteWithElapsed(this.autoDeleteElapsedMs, this.autoDeletePolicy);\n  }\n\n  /**\n   * Deletes all values where elapsed time has past\n   * for get/set or either.\n   *\n   * Remove items are returned\n   * @param time\n   * @param prop get/set/either\n   */\n  deleteWithElapsed(\n    time: number,\n    prop: `get` | `set` | `either`\n  ): [ k: K, v: V ][] {\n    const entries = [ ...this.store.entries() ];\n    const prune: [ k: K, v: V ][] = [];\n    const now = Date.now();\n    for (const e of entries) {\n      const elapsedGet = now - e[ 1 ].lastGet;\n      const elapsedSet = now - e[ 1 ].lastSet;\n      const elapsed =\n        prop === `get`\n          ? elapsedGet\n          : prop === `set`\n            ? elapsedSet\n            : Math.max(elapsedGet, elapsedSet);\n      if (elapsed >= time) {\n        prune.push([ e[ 0 ], e[ 1 ].value ]);\n      }\n    }\n\n    for (const e of prune) {\n      this.store.delete(e[ 0 ]);\n      this.keyCount = this.keyCount - 1;\n      const eventArgs = {\n        key: e[ 0 ],\n        value: e[ 1 ],\n      };\n      this.fireEvent(`expired`, eventArgs);\n      this.fireEvent(`removed`, eventArgs);\n    }\n    return prune;\n  }\n\n  /**\n   * Sets the `key` to be `value`.\n   *\n   * If the key already exists, it is updated.\n   *\n   * If the map is full, according to its capacity,\n   * another value is selected for removal.\n   * @param key\n   * @param value\n   * @returns\n   */\n  set(key: K, value: V) {\n    const existing = this.store.get(key);\n\n    if (existing) {\n      // Update set time\n      this.store.set(key, {\n        ...existing,\n        lastSet: performance.now(),\n      });\n      return;\n    }\n\n    // New key\n    if (this.keyCount === this.capacity && this.capacity > 0) {\n      // Evict first\n      const key = this.findEvicteeKey();\n      if (!key) {\n        throw new Error(`ExpiringMap full (capacity: ${ this.capacity })`);\n      }\n      const existing = this.store.get(key);\n      this.store.delete(key);\n      this.keyCount = this.keyCount - 1;\n      if (existing) {\n        const eventArgs = { key, value: existing.value };\n        this.fireEvent(`expired`, eventArgs);\n        this.fireEvent(`removed`, eventArgs);\n      }\n    }\n\n    this.keyCount++;\n    this.store.set(key, {\n      lastGet: 0,\n      lastSet: Date.now(),\n      value: value,\n    });\n\n    this.fireEvent(`newKey`, { key, value });\n  }\n}\n","import type { ArrayKeys, EitherKey, ObjectKeys } from '../index.js';\n\n/**\n * Adds an array o [k,v] to the map, returning a new instance\n * @param map Initial data\n * @param data Data to add\n * @returns New map with data added\n */\nconst addArray = <K, V>(\n  map: ReadonlyMap<K, V>,\n  data: ArrayKeys<K, V>\n): ReadonlyMap<K, V> => {\n  const x = new Map<K, V>(map.entries());\n  for (const d of data) {\n    if (d[ 0 ] === undefined) throw new Error(`key cannot be undefined`);\n    if (d[ 1 ] === undefined) throw new Error(`value cannot be undefined`);\n    x.set(d[ 0 ], d[ 1 ]);\n  }\n  return x;\n};\n\n/**\n * Adds objects to the map, returning a new instance\n * @param map Initial data\n * @param data Data to add\n * @returns A new map with data added\n */\nconst addObjects = <K, V>(\n  map: ReadonlyMap<K, V>,\n  data: ObjectKeys<K, V>\n): ReadonlyMap<K, V> => {\n  const x = new Map<K, V>(map.entries());\n  for (const d of data) {\n    if (d.key === undefined) throw new Error(`key cannot be undefined`);\n    if (d.value === undefined) throw new Error(`value cannot be undefined`);\n\n    x.set(d.key, d.value);\n  }\n  return x;\n};\n\n/**\n * Returns true if map contains key\n *\n * @example\n * ```js\n * if (has(map, `London`)) ...\n * ```\n * @param map Map to search\n * @param key Key to find\n * @returns True if map contains key\n */\nexport const has = <K, V>(map: ReadonlyMap<K, V>, key: K): boolean =>\n  map.has(key);\n\n/**\n * Adds data to a map, returning the new map.\n *\n * Can add items in the form of [key,value] or {key, value}.\n * @example These all produce the same result\n * ```js\n * map.set(`hello`, `samantha`);\n * map.add([`hello`, `samantha`]);\n * map.add({key: `hello`, value: `samantha`})\n * ```\n * @param map Initial data\n * @param data One or more data to add in the form of [key,value] or {key, value}\n * @returns New map with data added\n */\nexport const add = <K, V>(\n  map: ReadonlyMap<K, V>,\n  ...data: EitherKey<K, V>\n): ReadonlyMap<K, V> => {\n  if (map === undefined) throw new Error(`map parameter is undefined`);\n  if (data === undefined) throw new Error(`data parameter i.s undefined`);\n  if (data.length === 0) return map;\n\n  const firstRecord = data[ 0 ];\n  const isObject =\n    typeof (firstRecord as { readonly key: K; readonly value: V }).key !==\n    `undefined` &&\n    typeof (firstRecord as { readonly key: K; readonly value: V }).value !==\n    `undefined`; //(typeof (data[0] as {readonly key:K}).key !== undefined && typeof (data[0] as {readonly value:V}).value !== undefined);\n  return isObject\n    ? addObjects(map, data as ObjectKeys<K, V>)\n    : addArray(map, data as ArrayKeys<K, V>);\n};\n\n/**\n * Sets data in a copy of the initial map\n * @param map Initial map\n * @param key Key\n * @param value Value to  set\n * @returns New map with data set\n */\nexport const set = <K, V>(map: ReadonlyMap<K, V>, key: K, value: V) => {\n  const x = new Map<K, V>(map.entries());\n  x.set(key, value);\n  return x;\n};\n\n/**\n * Delete a key from the map, returning a new map\n * @param map Initial data\n * @param key\n * @returns New map with data deleted\n */\nexport const del = <K, V>(\n  map: ReadonlyMap<K, V>,\n  key: K\n): ReadonlyMap<K, V> => {\n  const x = new Map<K, V>(map.entries());\n  x.delete(key);\n  return x;\n};\n","import { type EitherKey } from '../index.js';\nimport type { IMapBase } from './IMapBase.js';\nimport { add, del, set } from './MapImmutableFns.js';\n\n/**\n * An immutable map. Rather than changing the map, functions like `add` and `delete`\n * return a new map reference which must be captured.\n *\n * Immutable data is useful because as it gets passed around your code, it never\n * changes from underneath you. You have what you have.\n *\n * @example\n * ```js\n * let m = map(); // Create\n * let m2 = m.set(`hello`, `samantha`);\n * // m is still empty, only m2 contains a value.\n * ```\n *\n * @template K Type of map keys. Typically `string`\n * @template V Type of stored values\n */\n//eslint-disable-next-line @typescript-eslint/consistent-type-definitions\nexport interface IMapImmutable<K, V> extends IMapBase<K, V> {\n  /**\n   * Adds one or more items, returning the changed map.\n   *\n   * Can add items in the form of `[key,value]` or `{key, value}`.\n   * @example These all produce the same result\n   * ```js\n   * map.set(`hello`, `samantha`);\n   * map.add([`hello`, `samantha`]);\n   * map.add({key: `hello`, value: `samantha`})\n   * ```\n   * @param itemsToAdd\n   */\n  add(...itemsToAdd: EitherKey<K, V>): IMapImmutable<K, V>;\n  /**\n   * Deletes an item by key, returning the changed map\n   * @param key\n   */\n  delete(key: K): IMapImmutable<K, V>;\n  /**\n   * Returns an empty map\n   */\n  clear(): IMapImmutable<K, V>;\n\n\n  /**\n   * Sets `key` to be `value`, overwriting anything existing.\n   * Returns a new map with added key.\n   * @param key\n   * @param value\n   */\n  set(key: K, value: V): IMapImmutable<K, V>;\n\n}\n\n/**\n * Returns an {@link IMapImmutable}.\n * Use {@link Maps.mutable} as a mutable alternatve.\n *\n * @example Basic usage\n * ```js\n * // Creating\n * let m = map();\n * // Add\n * m = m.set(\"name\", \"sally\");\n * // Recall\n * m.get(\"name\");\n * ```\n *\n * @example Enumerating\n * ```js\n * for (const [key, value] of map.entries()) {\n *  console.log(`${key} = ${value}`);\n * }\n * ```\n *\n * @example Overview\n * ```js\n * // Create\n * let m = map();\n * // Add as array or key & value pair\n * m = m.add([\"name\" , \"sally\"]);\n * m = m.add({ key: \"name\", value: \"sally\" });\n * // Add using the more typical set\n * m = m.set(\"name\", \"sally\");\n * m.get(\"name\");   // \"sally\";\n * m.has(\"age\");    // false\n * m.has(\"name\");   // true\n * m.isEmpty;       // false\n * m = m.delete(\"name\");\n * m.entries();     // Iterator of key value pairs\n * ```\n *\n * Since it is immutable, `add()`, `delete()` and `clear()` return a new version with change.\n *\n * @param dataOrMap Optional initial data in the form of an array of `{ key: value }` or `[ key, value ]`\n */\nexport const immutable = <K, V>(\n  dataOrMap?: ReadonlyMap<K, V> | EitherKey<K, V>\n): IMapImmutable<K, V> => {\n  if (dataOrMap === undefined) return immutable([]);\n  if (Array.isArray(dataOrMap)) return immutable<K, V>(add(new Map(), ...dataOrMap));\n\n  const data = dataOrMap as ReadonlyMap<K, V>;\n  return {\n    add: (...itemsToAdd: EitherKey<K, V>) => {\n      const s = add(data, ...itemsToAdd);\n      return immutable(s);\n    },\n    set: (key: K, value: V) => {\n      const s = set(data, key, value);\n      return immutable(s);\n    },\n    get: (key: K) => data.get(key),\n    delete: (key: K) => immutable(del(data, key)),\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    clear: () => immutable(),\n    has: (key: K) => data.has(key),\n    entries: () => data.entries(),\n    values: () => data.values(),\n    isEmpty: () => data.size === 0,\n  };\n};\n","import { type EitherKey } from '../index.js';\nimport type { IMapBase } from './IMapBase.js';\nimport { add, del, set, has } from './MapImmutableFns.js';\n\n/**\n * A mutable map.\n *\n * It is a wrapper around the in-built Map type, but adds roughly the same API as {@link IMapImmutable}.\n *\n * @template K Type of map keys. Typically `string`\n * @template V Type of stored values\n */\n//eslint-disable-next-line @typescript-eslint/consistent-type-definitions\nexport interface IMapMutable<K, V> extends IMapBase<K, V> {\n  /**\n   * Adds one or more items to map\n   *\n   * Can add items in the form of [key,value] or `{key, value}`.\n   * @example These all produce the same result\n   * ```js\n   * map.set(`hello`, `samantha`);\n   * map.add([`hello`, `samantha`]);\n   * map.add({key: `hello`, value: `samantha`})\n   * ```\n   * @param itemsToAdd\n   * @param itemsToAdd\n   */\n  add(...itemsToAdd: EitherKey<K, V>): void;\n  /**\n   * Sets a value to a specified key\n   * @param key\n   * @param value\n   */\n  set(key: K, value: V): void;\n  /**\n   * Deletes an item by key\n   * @param key\n   */\n  delete(key: K): void;\n  /**\n   * Clears map\n   */\n  clear(): void;\n}\n\n/**\n * Returns a {@link IMapMutable} (which just wraps the in-built Map)\n * Use {@link Maps.immutable} for the immutable alternative.\n *\n * @example Basic usage\n * ```js\n * const m = mapMutable();\n * // Add one or more entries\n * m.add([\"name\", \"sally\"]);\n * // Alternatively:\n * m.set(\"name\", \"sally\");\n * // Recall\n * m.get(\"name\");           // \"sally\"\n * m.delete(\"name\");\n * m.isEmpty; // True\n * m.clear();\n * ```\n * @param data Optional initial data in the form of an array of `{ key: value }` or `[ key, value ]`\n */\nexport const mutable = <K, V>(...data: EitherKey<K, V>): IMapMutable<K, V> => {\n  // eslint-disable-next-line functional/no-let\n  let m = add(new Map<K, V>(), ...data);\n  return {\n    add: (...data: EitherKey<K, V>) => {\n      m = add(m, ...data);\n    },\n    delete: (key: K) => {\n      m = del(m, key);\n    },\n    clear: () => {\n      m = add(new Map<K, V>());\n    },\n    set: (key: K, value: V): void => {\n      m = set(m, key, value);\n    },\n    get: (key: K): V | undefined => m.get(key),\n    entries: () => m.entries(),\n    values: () => m.values(),\n    isEmpty: () => m.size === 0,\n    has: (key: K) => has(m, key),\n  };\n};\n","import {\n  type IsEqual,\n  isEqualDefault\n} from '../../IsEqual.js';\nimport type {\n  MapArrayEvents,\n  IMapOfMutableExtended,\n} from './IMapOfMutableExtended.js';\nimport type { MapMultiOpts, MultiValue } from './MapMulti.js';\nimport { SimpleEventEmitter } from '../../Events.js';\nimport type { IMapOf } from './IMapOf.js';\nimport { toStringDefault, type ToString } from '../../Util.js';\n\n/**\n * @internal\n */\nexport class MapOfMutableImpl<V, M>\n  extends SimpleEventEmitter<MapArrayEvents<V>>\n  implements IMapOfMutableExtended<V, M>\n{\n  /* eslint-disable-next-line functional/prefer-readonly-type */\n  readonly #map = new Map<string, M>();\n  readonly groupBy: ToString<V>;\n  readonly type: MultiValue<V, M>;\n\n  constructor(type: MultiValue<V, M>, opts: MapMultiOpts<V> = {}) {\n    super();\n    this.type = type;\n    this.groupBy = opts.groupBy ?? toStringDefault;\n  }\n\n  /**\n   * Returns the type name. For in-built implementations, it will be one of: array, set or circular\n   */\n  get typeName() {\n    return this.type.name;\n  }\n\n  /**\n   * Returns the number of keys\n   */\n  get lengthKeys(): number {\n    return this.#map.size;\n  }\n\n  /**\n   * Returns the length of the longest child list\n   */\n  get lengthMax() {\n    //eslint-disable-next-line functional/no-let\n    let m = 0;\n    for (const v of this.#map.values()) {\n      m = Math.max(m, this.type.count(v));\n    }\n    return m;\n  }\n\n  debugString(): string {\n    const keys = [ ...this.#map.keys() ];\n    // eslint-disable-next-line functional/no-let\n    let r = `Keys: ${ keys.join(`, `) }\\r\\n`;\n    for (const k of keys) {\n      const v = this.#map.get(k);\n      if (v === undefined) {\n        r += ` - ${ k } (undefined)\\r\\n`\n      } else {\n        const asArray = this.type.toArray(v);\n        if (asArray !== undefined) {\n          r += ` - ${ k } (${ this.type.count(v) }) = ${ JSON.stringify(\n            asArray\n          ) }\\r\\n`;\n        }\n      }\n    };\n    return r;\n  }\n\n  get isEmpty(): boolean {\n    return this.#map.size === 0;\n  }\n\n  clear() {\n    this.#map.clear();\n    super.fireEvent(`clear`, true);\n  }\n\n  //eslint-disable-next-line functional/prefer-immutable-types\n  addKeyedValues(key: string, ...values: Array<V>) {\n    const set = this.#map.get(key);\n    if (set === undefined) {\n      this.#map.set(key, this.type.add(undefined, values));\n      super.fireEvent(`addedKey`, { key: key });\n      super.fireEvent(`addedValues`, { values: values });\n    } else {\n      // eslint-disable-next-line functional/immutable-data\n      this.#map.set(key, this.type.add(set, values));\n      super.fireEvent(`addedValues`, { values: values });\n    }\n  }\n  //eslint-disable-next-line functional/prefer-immutable-types\n  set(key: string, values: Array<V>) {\n    this.addKeyedValues(key, ...values);\n    return this;\n  }\n\n  addValue(...values: ReadonlyArray<V>) {\n    for (const v of values) this.addKeyedValues(this.groupBy(v), v);\n  }\n\n  hasKeyValue(key: string, value: V, eq: IsEqual<V>): boolean {\n    const m = this.#map.get(key);\n    if (m === undefined) return false;\n    return this.type.has(m, value, eq);\n  }\n\n  //eslint-disable-next-line functional/prefer-tacit\n  has(key: string): boolean {\n    return this.#map.has(key);\n  }\n\n  deleteKeyValue(key: string, value: V): boolean {\n    const a = this.#map.get(key);\n    if (a === undefined) return false;\n    return this.deleteKeyValueFromMap(a, key, value);\n  }\n\n  private deleteKeyValueFromMap(map: M, key: string, value: V): boolean {\n    const preCount = this.type.count(map);\n    const filtered = this.type.without(map, value);\n    const postCount = filtered.length;\n    this.#map.set(key, this.type.add(undefined, filtered));\n    return preCount > postCount;\n  }\n\n  deleteByValue(value: V): boolean {\n    //eslint-disable-next-line functional/no-let\n    let something = false;\n    [ ...this.#map.keys() ].filter((key) => {\n      const a = this.#map.get(key);\n      if (!a) throw new Error(`Bug: map could not be accessed`);\n      if (this.deleteKeyValueFromMap(a, key, value)) {\n        something = true; // note that something was deleted\n\n        // If key is empty, delete it\n        if (this.count(key) === 0) this.delete(key);\n      }\n    });\n    return something;\n  }\n\n  delete(key: string): boolean {\n    const a = this.#map.get(key);\n    if (a === undefined) return false;\n    this.#map.delete(key);\n    this.fireEvent(`deleteKey`, { key: key });\n    return true;\n  }\n\n  firstKeyByValue(\n    value: V,\n    eq: IsEqual<V> = isEqualDefault\n  ): string | undefined {\n    const keys = [ ...this.#map.keys() ];\n    const found = keys.find((key) => {\n      const a = this.#map.get(key);\n      if (a === undefined) throw new Error(`Bug: map could not be accessed`);\n      const r = this.type.has(a, value, eq);\n      return r;\n    });\n    return found;\n  }\n\n  count(key: string): number {\n    const entry = this.#map.get(key);\n    if (entry === undefined) return 0;\n    return this.type.count(entry);\n  }\n\n  /**\n   * Iterates over values stored under `key`\n   * An empty array is returned if there are no values\n   */\n  *get(key: string): IterableIterator<V> {\n    const m = this.#map.get(key);\n    if (m === undefined) return;\n    yield* this.type.iterable(m);\n  }\n\n  /**\n   * Iterate over the values stored under `key`.\n   * If key does not exist, iteration is essentially a no-op\n   * @param key\n   * @returns\n   */\n  *valuesFor(key: string) {\n    const m = this.#map.get(key);\n    if (m === undefined) return;\n    yield* this.type.iterable(m);\n  }\n\n  //eslint-disable-next-line functional/prefer-tacit\n  getSource(key: string): M | undefined {\n    return this.#map.get(key);\n  }\n\n  /* eslint-disable-next-line functional/prefer-readonly-type */\n  *keys(): IterableIterator<string> {\n    yield* this.#map.keys();\n    //return Array.from(this.#map.keys());\n  }\n\n  *entriesFlat(): IterableIterator<[ key: string, value: V ]> {\n    for (const entry of this.#map.entries()) {\n      for (const v of this.type.iterable(entry[ 1 ])) {\n        yield [ entry[ 0 ], v ];\n      }\n    }\n  }\n\n  *valuesFlat(): IterableIterator<V> {\n    for (const entry of this.#map.entries()) {\n      yield* this.type.iterable(entry[ 1 ]);\n    }\n  }\n\n  *entries(): IterableIterator<[ key: string, value: Array<V> ]> {\n    //yield* this.#map.entries();\n    for (const [ k, v ] of this.#map.entries()) {\n      const temporary = [ ...this.type.iterable(v) ];\n      yield [ k, temporary ];\n    }\n  }\n\n  /* eslint-disable-next-line functional/prefer-readonly-type */\n  *keysAndCounts(): IterableIterator<[ string, number ]> {\n    //const keys = this.keys();\n    /* eslint-disable-next-line functional/prefer-readonly-type */\n    //const r = keys.map(k => [k, this.count(k)]) as Array<[string, number]>;\n    //return r;\n\n    for (const key of this.keys()) {\n      yield [ key, this.count(key) ];\n    }\n  }\n\n  merge(other: IMapOf<V>) {\n    // const keys = other.keys();\n    // keys.forEach(key => {\n    //   const data = other.get(key);\n    //   if (data !== undefined) this.addKeyedValues(key, ...data);\n    // });\n    for (const key of other.keys()) {\n      const data = other.get(key);\n      this.addKeyedValues(key, ...data);\n    }\n  }\n\n  get size() {\n    return this.#map.size;\n  }\n  /*\n    forEach_(\n      fn: (\n        value: ReadonlyArray<V>,\n        key: string,\n        //eslint-disable-next-line functional/prefer-immutable-types\n        map: Map<string, ReadonlyArray<V>>\n      ) => void,\n      _?: any\n    ) {\n      // for (const [key,value] of this.#map.entries()) {\n      //   value\n      // }\n      // @ts-expect-error\n      this.#map.forEach(fn);\n    }\n    */\n\n  get [ Symbol.toStringTag ]() {\n    return this.#map[ Symbol.toStringTag ];\n  }\n\n  // [Symbol.iterator]() {\n  //   return this.type[Symbol.iterator]();\n  // }\n}\n","import { toStringDefault } from '../../Util.js';\nimport { without } from '../arrays/index.js';\nimport type { MapSetOpts, MultiValue } from './MapMulti.js';\nimport { MapOfMutableImpl } from './MapOfMultiImpl.js';\nimport {\n  hasAnyValue as mapHasAnyValue,\n  toArray as mapToArray,\n  find as mapFind,\n  filter as mapFilter,\n  addKeepingExisting,\n} from './MapFns.js';\nimport type { IMapOfMutableExtended } from './IMapOfMutableExtended.js';\n\n/**\n * Returns a {@link IMapOfMutableExtended} that uses a set to hold values.\n * This means that only unique values are stored under each key. By default it\n * uses the JSON representation to compare items.\n *\n * Options: `{ hash: toStringFn } }`\n *\n * `hash` is a {@link Util.ToString} function: `(object) => string`. By default it uses\n * `JSON.stringify`.\n *\n * @example Only storing the newest three items per key\n * ```js\n * const map = mapOfSetMutable();\n * map.add(`hello`, [1, 2, 3, 1, 2, 3]);\n * const hello = map.get(`hello`); // [1, 2, 3]\n * ```\n *\n * @example\n * ```js\n * const hash = (v) => v.name; // Use name as the key\n * const map = mapOfSetMutable(hash);\n * map.add(`hello`, {age:40, name: `Mary`});\n * map.add(`hello`, {age:29, name: `Mary`}); // Value ignored as same name exists\n * ```\n * @param opts\n * @returns\n */\nexport const ofSetMutable = <V>(\n  opts?: MapSetOpts<V>\n): IMapOfMutableExtended<V, ReadonlyMap<string, V>> => {\n  const hash = opts?.hash ?? toStringDefault;\n  const comparer = (a: V, b: V) => hash(a) === hash(b);\n\n  const t: MultiValue<V, ReadonlyMap<string, V>> = {\n    get name() {\n      return `set`;\n    },\n    iterable: (source) => source.values(),\n    add: (dest, values) => addKeepingExisting(dest, hash, ...values),\n    count: (source) => source.size,\n    find: (source, predicate) => mapFind(source, predicate),\n    filter: (source, predicate) => mapFilter(source, predicate),\n    toArray: (source) => mapToArray(source),\n    has: (source, value) => mapHasAnyValue(source, value, comparer),\n    without: (source, value) => without(mapToArray(source), value, comparer),\n  };\n  const m = new MapOfMutableImpl<V, ReadonlyMap<string, V>>(t, opts);\n  return m;\n};\n","import { isEqualDefault } from '../../IsEqual.js';\nimport { type ICircularArray, circularArray } from '../CircularArray.js';\nimport type { MapMultiOpts, MultiValue } from './MapMulti.js';\nimport { MapOfMutableImpl } from './MapOfMultiImpl.js';\nimport type { IMapOfMutableExtended } from './IMapOfMutableExtended.js';\n\nexport type MapCircularOpts<V> = MapMultiOpts<V> & {\n  readonly capacity: number;\n};\n\n/**\n * Returns a {@link IMapOfMutableExtended} that uses a {@link ICircularArray} to hold values. Mutable.\n * This means that the number of values stored under each key will be limited to the defined\n * capacity.\n *\n * Required option:\n * * `capacity`: how many items to hold\n *\n * @example Only store the most recent three items per key\n * ```js\n * const map = ofCircularMutable({capacity: 3});\n * map.add(`hello`, [1, 2, 3, 4, 5]);\n * const hello = map.get(`hello`); // [3, 4, 5]\n * ```\n *\n *\n * @param opts\n * @returns\n */\nexport const ofCircularMutable = <V>(\n  opts: MapCircularOpts<V>\n): IMapOfMutableExtended<V, ICircularArray<V>> => {\n  const comparer = isEqualDefault;\n\n  const t: MultiValue<V, ICircularArray<V>> = {\n    get name() {\n      return `circular`;\n    },\n    add: (dest, values) => {\n      if (dest === undefined) dest = circularArray<V>(opts.capacity);\n      for (const v of values) {\n        //values.forEach(v => dest = dest?.add(v));\n        dest = dest.add(v);\n      }\n      return dest;\n    },\n    count: (source) => source.length,\n    find: (source, predicate) => source.find(predicate),\n    filter: (source, predicate) => source.filter(predicate),\n    toArray: (source) => source,\n    iterable: (source) => source.values(),\n    has: (source, value) =>\n      source.find((v) => comparer(v, value)) !== undefined,\n    without: (source, value) => source.filter((v) => !comparer(v, value)),\n  };\n  return new MapOfMutableImpl<V, ICircularArray<V>>(t, opts);\n};\n","/**\n * Simple map for numbers.\n * \n * Keys not present in map return the `defaultValue` given in the constructor\n * ```js\n * // All keys default to zero.\n * const map = new NumberMap();\n * map.get(`hello`); // 0\n * ```\n * \n * To check if a key is present, use `has`:\n * ```js\n * map.has(`hello`); // false\n * ```\n * \n * Math:\n * ```js\n * // Adds 1 by default to value of `hello`\n * map.add(`hello`);         // 1\n * map.multiply(`hello`, 2); // 2 \n * \n * // Reset key to default value\n * map.reset(`hello`); // 0\n * ```\n * \n * Different default value:\n * ```js\n * const map = new NumberMap(10);\n * map.get(`hello`); // 10\n * ```\n * \n * Regular `set` works as well:\n * ```js\n * map.set(`hello`, 5);\n * map.add(`hello`, 2); // 7\n * ```\n */\nexport class NumberMap<K> extends Map<K, number> {\n  readonly defaultValue: number;\n\n  constructor(defaultValue = 0) {\n    super();\n    this.defaultValue = defaultValue;\n  }\n\n  get(key: K): number {\n    const v = super.get(key);\n    if (v === undefined) return this.defaultValue;\n    return v;\n  }\n\n  reset(key: K): number {\n    super.set(key, this.defaultValue);\n    return this.defaultValue;\n  }\n\n  multiply(key: K, amount: number): number {\n    const v = super.get(key);\n    let value = v ?? this.defaultValue;\n    value *= amount;\n    super.set(key, value);\n    return value;\n  }\n\n  add(key: K, amount = 1): number {\n    const v = super.get(key);\n    let value = v ?? this.defaultValue;\n    value += amount;\n    super.set(key, value);\n    return value;\n  }\n\n  subtract(key: K, amount = 1): number {\n    const v = super.get(key);\n    let value = v ?? this.defaultValue;\n    value -= amount;\n    super.set(key, value);\n    return value;\n  }\n}","import type { ToString } from '../../Util.js';\nimport { type IsEqual, isEqualDefault } from '../../IsEqual.js';\nimport { type IMapOfMutableExtended } from './IMapOfMutableExtended.js';\nimport { type MapMultiOpts, type MultiValue } from './MapMulti.js';\nimport { MapOfMutableImpl } from './MapOfMultiImpl.js';\n\n/**\n * Map of array options\n */\nexport type MapArrayOpts<V> = MapMultiOpts<V> & {\n  /**\n   * Comparer to use\n   */\n  readonly comparer?: IsEqual<V>;\n  /**\n   * Key function\n   */\n  readonly convertToString?: ToString<V>;\n};\n\n/**\n * Returns a {@link IMapOfMutableExtended} to allow storing multiple values under a key, unlike a regular Map.\n * @example\n * ```js\n * const map = ofArrayMutable();\n * map.addKeyedValues(`hello`, [1,2,3,4]); // Adds series of numbers under key `hello`\n *\n * const hello = map.get(`hello`); // Get back values\n * ```\n *\n * Takes options:\n * * `comparer`: {@link IsEqual}\n * * `toString`: {@link Util.ToString}\n *\n * A custom {@link Util.ToString} function can be provided as the `convertToString` opion. This is then used when checking value equality (`has`, `without`)\n * ```js\n * const map = ofArrayMutable({ convertToString:(v) => v.name}); // Compare values based on their `name` field;\n * ```\n *\n * Alternatively, a {@link IsEqual} function can be used:\n * ```js\n * const map = ofArrayMutable({comparer: (a, b) => a.name === b.name });\n * ```\n * @param opts\n * @template V Data type of items\n * @returns {@link IMapOfMutableExtended}\n */\nexport const ofArrayMutable = <V>(\n  opts: MapArrayOpts<V> = {}\n): IMapOfMutableExtended<V, ReadonlyArray<V>> => {\n  // const toStringFunction = opts.toString === undefined ?  \n  // const comparer =\n  //   opts.comparer === undefined\n  //     ? (opts.toString === undefined\n  //       ? (a: V, b: V) => opts.toString(a) === opts.toString(b)\n  //       : isEqualDefault)\n  //     : opts.comparer;\n  // const convertToStringComparer = opts.convertToString === undefined ? undefined : (a: V, b: V) => {\n  //   const r = opts.convertToString(a) === opts.convertToString(b)\n  //   console.log(`ofArrayMutable toString comparer: r: ${ r } a: ${ a } b: ${ b }`);\n  //   console.log(`ofArrayMutable toString comparer: a: ${ opts.toString(a) } b: ${ opts.toString(b) }`);\n  //   return r;\n  // };\n\n  const convertToString = opts.convertToString;\n  const toStringFunction: IsEqual<V> = typeof convertToString === `undefined` ? isEqualDefault : (a: V, b: V) => convertToString(a) === convertToString(b)\n\n  const comparer = opts.comparer ?? toStringFunction;\n\n  const t: MultiValue<V, ReadonlyArray<V>> = {\n    get name() {\n      return `array`;\n    },\n    add: (destination, values) => {\n      if (destination === undefined) return [ ...values ];\n      return [ ...destination, ...values ];\n    },\n    iterable: (source) => source.values(),\n    count: (source) => source.length,\n    find: (source, predicate) => source.find(f => predicate(f)),\n    filter: (source, predicate) => source.filter(f => predicate(f)),\n    toArray: (source) => source,\n    has: (source, value) => source.some((v) => comparer(v, value)),\n    without: (source, value) => source.filter((v) => !comparer(v, value)),\n    //[Symbol.iterator]: (source) => source[Symbol.iterator]()\n  };\n  const m = new MapOfMutableImpl<V, ReadonlyArray<V>>(t, opts);\n  return m;\n};\n","type WithEvents = {\n  addEventListener(type: string, callbackfn: any): void;\n  removeEventListener(type: string, callbackfn: any): void;\n}\n\n//export { eachInterval } from './flow/Interval.js';\n\nexport const isAsyncIterable = (v: any): v is AsyncIterable<any> =>\n  Symbol.asyncIterator in new Object(v);\n\nexport const isIterable = (v: any): v is Iterable<any> =>\n  Symbol.iterator in new Object(v);\n\nexport const eventsToIterable = <V>(\n  eventSource: WithEvents,\n  eventType: string\n): AsyncIterator<any> => {\n  const pullQueue: Array<any> = [];\n  const pushQueue: Array<any> = [];\n  let done = false;\n  const pushValue = (args: any) => {\n    if (pullQueue.length > 0) {\n      //eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n      const resolver = pullQueue.shift();\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-call\n      resolver(...args);\n    } else {\n      pushQueue.push(args);\n    }\n  };\n\n  const pullValue = (): Promise<V> =>\n    new Promise<V>((resolve) => {\n      if (pushQueue.length > 0) {\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n        const arguments_ = pushQueue.shift();\n        // @ts-expect-error\n        resolve(...arguments_);\n      } else {\n        pullQueue.push(resolve);\n      }\n    });\n\n  const handler = (...arguments_: any) => {\n    pushValue(arguments_);\n  };\n\n  eventSource.addEventListener(eventType, handler);\n\n  const r: AsyncIterator<V> = {\n    next: async (): Promise<IteratorResult<V>> => {\n      if (done) return { done: true, value: undefined };\n      return {\n        done: false,\n        value: await pullValue(),\n      };\n    },\n    //eslint-disable-next-line @typescript-eslint/require-await\n    return: async (): Promise<IteratorResult<V>> => {\n      done = true;\n      eventSource.removeEventListener(eventType, handler);\n      return { done: true, value: undefined };\n    },\n    //eslint-disable-next-line @typescript-eslint/require-await\n    throw: async (error: any): Promise<IteratorResult<V>> => {\n      done = true;\n      return {\n        done: true,\n        value: Promise.reject(error),\n      };\n    },\n  };\n  return r;\n};\n","import { Async } from \"../index.js\";\nimport type { GenOrData, GenFactoryNoInput, Gen } from \"./Types.js\";\nimport { isAsyncIterable } from \"../Iterable.js\";\nimport { sleep } from \"../../flow/Sleep.js\";\n/**\n * Wrap the primitive value as generator\n * @param value \n */\nfunction* primitiveToGenerator(value: number | boolean | string) {\n  yield value;\n}\n\n/**\n * Wrap the primitive value as an async generator\n * @param value \n */\nasync function* primitiveToAsyncGenerator(value: number | boolean | string) {\n  yield value;\n  await sleep(1);\n}\n\n/**\n * Resolve the array, data or function to a Generator\n * @param input \n * @returns \n */\nexport function resolveToGen<V>(input: GenOrData<V> | GenFactoryNoInput<V>): Gen<V> {\n  if (Array.isArray(input)) {\n    const a = input.values();\n    (a as any)._name = `arrayInput`;\n    return a;\n  } else if (typeof input === `number` || typeof input === `boolean` || typeof input === `string`) {\n    // Assumes V is primitive\n    return primitiveToGenerator(input) as Gen<V>;\n  } else if (typeof input === `function`) {\n    return input();\n  }\n  return input;\n}\n\n/**\n * Resolve the data, primitive or function to an AsyncGenerator\n * @param input \n * @returns \n */\nexport function resolveToAsyncGen<V>(input: GenOrData<V> | GenFactoryNoInput<V> | undefined): AsyncGenerator<V> | undefined {\n  if (input === undefined) return;\n  if (Array.isArray(input)) {\n    return Async.fromArray(input);\n  } else if (typeof input === `number` || typeof input === `boolean` || typeof input === `string`) {\n    // Assumes V is primitive\n    return primitiveToAsyncGenerator(input) as AsyncGenerator<V>;\n  } else if (typeof input === `function`) {\n    return input();\n  } else if (isAsyncIterable(input)) {\n    return input;\n  }\n  return Async.fromIterable(input);\n}\n","import { intervalToMs, type Interval } from \"../../flow/IntervalType.js\";\nimport { sleep } from \"../../flow/Sleep.js\";\nimport type { Link, GenOrData, DelayOptions, RankFunction, RankOptions, RankArrayOptions } from \"./Types.js\";\nimport { resolveToGen } from \"./Util.js\";\nimport { Elapsed } from \"../../flow/index.js\";\nimport { throwIntegerTest } from \"../../Guards.js\";\n/**\n * Transform values from one type to another. Just like a map function.\n * @param transformer \n * @returns \n */\nexport function transform<In, Out>(transformer: (v: In) => Out): Link<In, Out> {\n  async function* transform(input: GenOrData<In>): AsyncGenerator<Out> {\n    input = resolveToGen(input);\n    for await (const value of input) {\n      yield transformer(value);\n    }\n  }\n  transform._name = `transform`;\n  return transform;\n}\n\n/**\n * Take `limit` number of results from the stream, before closing\n * @param limit \n * @returns \n */\nexport function take<In>(limit: number): Link<In, In> {\n  async function* take(input: GenOrData<In>): AsyncGenerator<In> {\n    input = resolveToGen(input);\n    let yielded = 0;\n    for await (const value of input) {\n      if (++yielded > limit) break;\n      yield value;\n    }\n  }\n  take._name = `take`;\n  return take;\n}\n\n/**\n * Takes an array of values, flattening to a single one\n * using the provided `flattener` function.\n * \n * ```js\n * // Create a chain that flattens values\n * const flatten = Chains.flatten(values => Math.max(...values));\n * // Feed it a single input (an array), get a single output back:\n * const result = await Chains.single(flatten, [ 1, 2, 3]); // 3\n * ```\n * @param flattener Function to flatten array of values to a single value\n * @returns \n */\nexport function flatten<In, Out>(flattener: (v: Array<In>) => Out): Link<Array<In>, Out> {\n  async function* flatten(input: GenOrData<Array<In>>): AsyncGenerator<Out> {\n    input = resolveToGen(input);\n    for await (const value of input) {\n      yield flattener(value);\n    }\n  }\n  flatten._name = `flatten`;\n  return flatten;\n}\n\n/**\n * Allow values through until a duration has elapsed. After\n * that, the chain stops.\n * @param elapsed \n * @returns \n */\nexport function duration<In>(elapsed: Interval): Link<In, In> {\n  const durationMs = intervalToMs(elapsed, 0);\n\n  async function* duration(input: GenOrData<In>): AsyncGenerator<In> {\n    input = resolveToGen(input);\n    const elapsed = Elapsed.since();\n    for await (const value of input) {\n      if (elapsed() > durationMs) break;\n      yield value;\n    }\n  }\n  duration._name = `duration`;\n  return duration;\n}\n\n/**\n * Add delay before/after values are emitted from the input stream.\n * @param options \n * @returns \n */\nexport function delay<In>(options: DelayOptions): Link<In, In> {\n  const before = intervalToMs(options.before, 0);\n  const after = intervalToMs(options.after, 0);\n\n  async function* delay(input: GenOrData<In>): AsyncGenerator<In> {\n    input = resolveToGen(input);\n    for await (const value of input) {\n      if (before > 0) {\n        await sleep(before);\n      }\n      yield value;\n      if (after > 0) {\n        await sleep(after);\n      }\n    }\n  }\n  delay._name = `delay`;\n  return delay;\n}\n\n/**\n * Ensure a minimum length of time between values.\n * Values being produced too quickly are dropped.\n * \n * In the following example, only three values will be let through.\n * ```js\n * const chain = Chains.chain(\n *  // Produce values every 10ms for 350ms\n *  Chains.tick({ interval: 10, elapsed: 350 }),\n *  // Only let a value through every 100ms\n *  Chains.debounce(100)\n * );\n * ```\n * @param rate \n * @returns \n */\nexport function debounce<In>(rate: Interval): Link<In, In> {\n  const rateMs = intervalToMs(rate, 0);\n\n  async function* debounce(input: GenOrData<In>): AsyncGenerator<In> {\n    input = resolveToGen(input);\n    let elapsed = Elapsed.since();\n    for await (const value of input) {\n      if (elapsed() < rateMs) continue;\n      yield value;\n      elapsed = Elapsed.since();\n    }\n  }\n  debounce._name = `debounce`;\n  return debounce;\n}\n\n\n/**\n * Returns a running tally of how many items have been\n * emitted from the input source.\n * \n * This is different than {@link total} which adds up numeric values\n * @returns \n */\nexport function tally<In>(): Link<In, number> {\n  async function* tally(input: GenOrData<In>): AsyncGenerator<number> {\n    input = resolveToGen(input);\n    let count = 0;\n    for await (const _ of input) {\n      yield ++count;\n    }\n  }\n  tally._name = `tally`;\n  return tally;\n}\n\n/**\n * Returns the smallest value from the input.\n * Can work with numbers or number[] as input.\n * Non-numeric data is filtered out.\n * @returns \n */\nexport function min(): Link<number | Array<number>, number> {\n  async function* min(input: GenOrData<number | Array<number>>): AsyncGenerator<number> {\n    input = resolveToGen(input);\n    let min = Number.MAX_SAFE_INTEGER;\n    for await (const value of input) {\n      const arrayValue = Array.isArray(value) ? value : [ value ]\n      for (const subValue of arrayValue) {\n        if (typeof subValue !== `number`) break;\n        min = Math.min(subValue, min);\n        yield min;\n      }\n\n      // if (typeof value !== `number`) break;\n      // min = Math.min(value, min);\n      // yield min;\n    }\n  }\n  min._name = `min`;\n  return min;\n}\n\n/**\n * Returns the largest value from the input\n * Non-numeric data is filtered out\n * @returns \n */\nexport function max(): Link<number | Array<number>, number> {\n  async function* max(input: GenOrData<number | Array<number>>): AsyncGenerator<number> {\n    input = resolveToGen(input);\n    let max = Number.MIN_SAFE_INTEGER;\n    for await (const value of input) {\n      const valueArray = Array.isArray(value) ? value : [ value ];\n      for (const subValue of valueArray) {\n        if (typeof subValue !== `number`) break;\n        max = Math.max(subValue, max);\n        yield max;\n      }\n    }\n  }\n  max._name = `max`;\n  return max;\n}\n\n/**\n * Emits the currently ranked 'highest' value from a stream. Only\n * values exceeding the current highest are emitted.\n * \n * eg, if we are ranking on numerical value, an input stream of:\n * ```\n * 4, 1, 6, 10, 2, 4\n * ```\n * \n * Results in the output stream of:\n * ```\n * 4, 6, 10\n * ```\n * \n * @example \n * ```js\n * // Rank based on a field\n * Chains.Links.rank((a,b) => {\n *  if (a.size > b.size) return `a`;\n *  if (a.size < b.size) return `b`;\n *  return `eq`;\n * });\n * ```\n * @param options \n * @returns \n */\nexport function rank<In>(r: RankFunction<In>, options: Partial<RankOptions> = {}): Link<In, In> {\n  const includeType = options.includeType;\n  const emitEqualRanked = options.emitEqualRanked ?? false;\n  const emitRepeatHighest = options.emitRepeatHighest ?? false;\n  async function* rank(input: GenOrData<In>): AsyncGenerator<In> {\n    input = resolveToGen(input);\n    let best: In | undefined;\n    for await (const value of input) {\n      let emit = false;\n      if (includeType && typeof value !== includeType) continue;\n      if (best === undefined) {\n        best = value;\n        emit = true;\n      } else {\n        const result = r(value, best);\n        //console.log(`result: ${ result } value: ${ JSON.stringify(value) } best: ${ JSON.stringify(best) }`);\n        if (result == `a`) {\n          // New value is the current best\n          best = value;\n          emit = true;\n        } else if (result === `eq` && emitEqualRanked) {\n          // New value is same rank as previous, but we have flag on\n          emit = true;\n        } else if (emitRepeatHighest) {\n          // Emit current highest due to flag\n          emit = true;\n        }\n      }\n      if (emit) yield best;\n    }\n  }\n  rank._name = `rank`;\n  return rank;\n}\n\n/**\n * Emits the highest-ranked value from amongst an array of values.\n * \n * By default, it tracks the highest-ranked _between_ arrays.\n * \n * For example:\n * ```js\n * // Input\n * [ [4,5,6], [1,2,3] ]\n * // Outputs:\n * [ 6 ]\n * ```\n * \n * This behaviour can be modified with an option to only compare _within_ arrays.\n * ```\n * // Input\n * [ [4,5,6], [1,2,3] ]\n * // Output:\n * [ 6, 3 ]\n * ```\n * \n * Uses the `rank` option to determine which is more highly ranked.\n * ```js\n * Chains.Links.rankArray(\n *  (a, b) => {\n *    if (a > b) return `a`; // a is higher\n *    else if (b > a) return `b`; // b is higher\n *    return `eq`; // same\n *  }\n * )\n * ```\n * @param options \n * @returns \n */\nexport function rankArray<In>(r: RankFunction<In>, options: Partial<RankArrayOptions> = {}): Link<Array<In>, In> {\n  const includeType = options.includeType;\n  const emitEqualRanked = options.emitEqualRanked ?? false;\n  const emitRepeatHighest = options.emitRepeatHighest ?? false;\n  const withinArrays = options.withinArrays ?? false;\n\n  async function* rankArray(input: GenOrData<Array<In>>): AsyncGenerator<In> {\n    input = resolveToGen(input);\n    let best: In | undefined;\n    for await (const value of input) {\n      let emit = false;\n      if (withinArrays) best = undefined; // Reset\n      for (const subValue of value) {\n        if (includeType && typeof subValue !== includeType) continue;\n        if (best === undefined) {\n          best = subValue;\n          emit = true;\n        } else {\n          const result = r(subValue, best);\n          if (result == `a`) {\n            // New value is the current best\n            best = subValue;\n            emit = true;\n          } else if (result === `eq` && emitEqualRanked) {\n            // New value is same rank as previous, but we have flag on\n            emit = true;\n          } else if (emitRepeatHighest) {\n            // Emit current highest due to flag\n            emit = true;\n          }\n        }\n      }\n\n      if (emit && best) yield best;\n    }\n  }\n  rankArray._name = `rankArray`;\n  return rankArray;\n}\n\n/**\n * Returns the average from the input.\n * Non-numeric values are filtered out.\n * @returns \n */\nexport function average(): Link<number, number> {\n  async function* average(input: GenOrData<number>): AsyncGenerator<number> {\n    input = resolveToGen(input);\n    let total = 0;\n    let count = 0;\n    for await (const value of input) {\n      if (typeof value !== `number`) break;\n      count++;\n      total += value;\n      yield total / count;\n    }\n  }\n  average._name = `average`;\n  return average;\n}\n\n/**\n * Returns the total of the numeric values.\n * Non-numeric values are filtered out.\n * @returns \n */\nexport function total(): Link<number, number> {\n  async function* average(input: GenOrData<number>): AsyncGenerator<number> {\n    input = resolveToGen(input);\n    let total = 0;\n    for await (const value of input) {\n      if (typeof value !== `number`) break;\n      total += value;\n      yield total;\n    }\n  }\n  average._name = `average`;\n  return average;\n}\n\n/**\n * Chunks an input stream into `size` chunks.\n * \n * Eg, with a chunk size of 3, the input stream of:\n *  1, 2, 3, 4, 5, 6\n * Yields:\n *  [ 1, 2, 3 ], [ 4, 5, 6 ]\n * \n * If `returnRemainders` is _true_ (default), any left over values are returned even if\n * it's less than `size`.\n * @param size \n * @param returnRemainders If true (default) left over data that didn't make a full chunk is also returned\n * @returns \n */\nexport function chunk<In>(size: number, returnRemainders = true): Link<In, Array<In>> {\n  throwIntegerTest(size, `aboveZero`, `size`);\n  async function* chunk(input: GenOrData<In>): AsyncGenerator<Array<In>> {\n    input = resolveToGen(input);\n    let buffer: Array<In> = [];\n    for await (const value of input) {\n      buffer.push(value);\n      if (buffer.length >= size) {\n        yield buffer;\n        buffer = []\n      }\n    }\n    if (returnRemainders && buffer.length > 0) yield buffer;\n  }\n  chunk._name = `chunk`;\n  return chunk;\n}\n\n/**\n * Filters the input source, only allowing through\n * data for which `predicate` returns _true_\n * \n * {@link drop}, on the other hand excludes values for which predicate is _true_\n * @param predicate \n * @returns \n */\nexport function filter<In>(predicate: (v: In) => boolean): Link<In, In> {\n  async function* filter(input: GenOrData<In>): AsyncGenerator<In> {\n    input = resolveToGen(input);\n    for await (const value of input) {\n      if (predicate(value)) {\n        yield value;\n      }\n    }\n  }\n  filter._name = `filter`;\n  return filter;\n}\n\n\n\n/**\n * Drops all values from input stream for which `predicate` returns _true_\n * \n * {@link filter}, on the other hand includes values where the predicate is _true_\n * @param predicate \n * @returns \n */\nexport function drop<In>(predicate: (v: In) => boolean): Link<In, In> {\n  async function* drop(input: GenOrData<In>): AsyncGenerator<In> {\n    input = resolveToGen(input);\n    for await (const value of input) {\n      if (!predicate(value)) {\n        yield value;\n      }\n    }\n  }\n  drop._name = `drop`;\n  return drop;\n}\n","//import { query as DomQuery } from \"../../dom/Query.js\";\n\nimport type { GenOrData, Link } from \"./Types.js\";\nimport { resolveToGen } from \"./Util.js\";\nimport { resolveEl } from \"../../dom/ResolveEl.js\";\nimport { toStringDefault } from \"../../Util.js\";\n\nexport type QueryOptions = {\n  baseElement: HTMLElement;\n}\n\nexport type CreateOptions<In> = {\n  /**\n   * Parent element to create elements in. Defaults to `document.body`.\n   */\n  parentEl: string | HTMLElement\n  /**\n   * When set, provide a custom function to return a unique key for a value.\n   * This is used for matching values with elements when using immutable data.\n   * \n   * By default uses the\n   * JSON.stringify() representation.\n   * \n   * To match elements with values by reference, set `byReference` instead.\n   * \n   * @param value \n   * @returns \n   */\n  key: (value: In) => string\n  /**\n   * Default: _false_. When _true_, associate created elements\n   * to values by reference rather than value. This can be useful with mutable values.\n   * \n   * Use this _or_ the `key` option.\n   */\n  byReference: boolean\n  /**\n   * What kind of HTML element to make, defaults to DIV\n   */\n  tagName: string\n  /**\n   * Called whenever an element is created but not yet added to parent element\n   * @param element \n   * @returns \n   */\n  beforeInsert: (element: HTMLElement) => void\n  /**\n   * Called after an element is inserted to the parent element\n   */\n  afterInsert: (element: HTMLElement) => void\n  /**\n   * Called after an element has been removed\n   * @param element \n   * @returns \n   */\n  beforeRemove: (element: HTMLElement) => void\n}\n\nconst createMap = <T, TValue>(key?: (value: T) => string) => {\n  const keyFunction = key ?? ((value: T) => value);\n\n  const map = new Map<ReturnType<typeof keyFunction>, TValue>();\n  return {\n    has(key: T) {\n      return map.has(keyFunction(key));\n    },\n    get(key: T) {\n      return map.get(keyFunction(key));\n    },\n    set(key: T, value: TValue) {\n      // eslint-disable-next-line @typescript-eslint/restrict-template-expressions\n      //console.log(`Chains.Dom.createMap: key: ${ keyFunction(key) } value: ${ value }`);\n      map.set(keyFunction(key), value);\n    },\n    entries() {\n      return map.entries();\n    },\n    delete(key: T | string) {\n      map.delete(key);\n    }\n  }\n\n}\n\nexport type ElementWithValue<T> = {\n  el: HTMLElement\n  value: T\n}\n\n/**\n * Creates a HTML element per value. By default compares\n * values by `JSON.stringify`. Set `byReference:true` to\n * compare values based on reference. Or provide a toString\n * function via `key`.\n * \n * ```js\n * // Generate a random number between 0...4 every second\n * const looper = Generators.interval(() => Math.floor(Math.random()*5), 1000);\n * \n * // Make a chain\n * const ch = Chains.run(\n *  looper,\n *  Chains.Links.delay({before:1000}),\n *  Chains.Dom.perValue()\n * );\n *\n * setTimeout(async () => {\n *    for await (const v of ch) {\n *      const {el,value} = v;\n *      el.textContent = `${value} - ${Date.now().toString()}`;\n *    }\n *    console.log(`ch iteration done`);\n *  });\n * ```\n */\nexport function perValue<In>(options: Partial<CreateOptions<In>> = {}): Link<In, ElementWithValue<In>> {\n  const byReference = options.byReference;\n  const tagName = options.tagName ?? `div`;\n  if (byReference && options.key) throw new Error(`byReference and key options are mutually exclusive`);\n  const keyFunction = byReference ? undefined : options.key ?? toStringDefault;\n  const map = createMap<In, HTMLElement>(keyFunction);\n  const parentElementOrQuery = options.parentEl ?? document.body;\n  const parentEl = resolveEl(parentElementOrQuery);\n\n  const usedElements = new Set<HTMLElement>();\n\n  async function* perValue(input: GenOrData<In>): AsyncGenerator<ElementWithValue<In>> {\n    for await (const value of resolveToGen(input)) {\n      let el = map.get(value);\n      if (!el) {\n        el = document.createElement(tagName);\n        map.set(value, el);\n        if (options.beforeInsert) options.beforeInsert(el);\n        parentEl.append(el);\n        if (options.afterInsert) options.afterInsert(el);\n      }\n      usedElements.add(el);\n      yield { el, value };\n    }\n\n    // Remove unused elements\n    for (const [ id, el ] of map.entries()) {\n      if (usedElements.has(el)) continue;\n      if (options.beforeRemove) options.beforeRemove(el);\n      el.remove();\n      map.delete(id);\n    }\n  }\n  perValue._name = `dom.perValue`;\n  return perValue;\n}\n\n//export type Link<In, Out> = (input: GenOrData<In>) => AsyncGenerator<Out>;\n\n/**\n * From an input stream of strings, yields an output of HTMLElememnts\n * @param options \n * @returns \n */\nexport function query(options: Partial<QueryOptions> = {}): Link<string, HTMLElement> {\n  const baseElement = options.baseElement ?? document;\n\n  async function* query(input: GenOrData<string>): AsyncGenerator<HTMLElement> {\n    const gen = resolveToGen(input);\n    for await (const value of gen) {\n      for (const element of baseElement.querySelectorAll(value)) {\n        yield element as HTMLElement;\n      }\n    }\n  }\n  query._name = `dom.query`;\n  return query;\n}\n\n","import { shuffle } from '../collections/arrays/index.js';\nimport { numberTest as guardNumberTest, integerTest as guardIntegerTest, throwFromResult } from '../Guards.js';\n\nimport { range } from '../generators/IterableSync.js';\nimport { type RandomSource, defaultRandom, type RandomOptions } from './Types.js';\nimport { floatSource } from './FloatSource.js';\n\nexport { randomElement as arrayElement } from '../collections/arrays/index.js';\nexport { randomHue as hue } from '../visual/Colour.js';\n\nexport * from './FloatSource.js';\nexport * from './String.js';\nexport * from './Types.js';\nexport * from './Weighted.js';\nexport * from './WeightedIndex.js';\nexport * from './WeightedInteger.js';\n\n/**\n * Returns a random number with gaussian (ie. bell-curved) distribution\n * \n * @example Random number between 0..1 with gaussian distribution\n * ```js\n * import * as Random from 'https://unpkg.com/ixfx/dist/random.js';\n * Random.gaussian();\n * ```\n * \n * @example Distribution can be skewed\n * ```js\n * Random.gaussian(10);\n * ```\n * \n\n * @param skew Skew factor. Defaults to 1, no skewing. Above 1 will skew to left, below 1 will skew to right\n * @returns \n */\nexport const gaussian = (skew = 1) => gaussianSource(skew)();\n\n/**\n * Returns a function that generates a gaussian-distributed random number\n *  * @example Random number between 0..1 with gaussian distribution\n * ```js\n * import * as Random from 'https://unpkg.com/ixfx/dist/random.js';\n *\n * // Create function\n * const r = Random.gaussianFn();\n *\n * // Generate random value\n * r();\n * ```\n *\n * @example Pass the random number generator elsewhere\n * ```js\n * import * as Random from 'https://unpkg.com/ixfx/dist/random.js';\n * import * as Arrays from 'https://unpkg.com/ixfx/dist/arrays.js';\n * const r = Random.gaussianFn(10);\n *\n * // Randomise array with gaussian distribution\n * Arrays.shuffle(r);\n * ```\n * @param skew\n * @returns\n */\nexport const gaussianSource = (skew = 1): RandomSource => {\n  const min = 0;\n  const max = 1;\n  // Source: https://stackoverflow.com/questions/25582882/javascript-math-random-normal-distribution-gaussian-bell-curve\n\n  const compute = (): number => {\n    const u = calculateNonZero();\n    const v = calculateNonZero();\n    //eslint-disable-next-line functional/no-let\n    let result = Math.sqrt(-2 * Math.log(u)) * Math.cos(2 * Math.PI * v);\n\n    result = result / 10 + 0.5; // Translate to 0 -> 1\n    if (result > 1 || result < 0) {\n      result = compute(); //;gaussian(skew); // resample between 0 and 1 if out of range\n    } else {\n      result = Math.pow(result, skew); // Skew\n      result *= max - min; // Stretch to fill range\n      result += min; // offset to min\n    }\n    return result;\n  };\n  return compute;\n};\n\nconst calculateNonZero = (source: RandomSource = defaultRandom) => {\n  let v = 0;\n  while (v === 0) {\n    //eslint-disable-next-line functional/no-expression-statements\n    v = source();\n  }\n  return v;\n}\n\n/**\n * Returns a function that produces a random integer between `max` (exclusive) and 0 (inclusive)\n * Use {@link integer} if you want a random number directly.\n *\n * Invoke directly:\n * ```js\n * integerSource(10)();  // Random number 0-9\n * ```\n *\n * Or keep a reference to re-compute:\n * ```js\n * const r = integerSource(10);\n * r(); // Produce a random integer\n * ```\n *\n * If a negative value is given, this is assumed to be the\n * minimum (inclusive), with 0 as the max (inclusive)\n * ```js\n * integerSource(-5)();  // Random number from -5 to 0\n * ```\n *\n * Specify options for a custom minimum or source of random:\n * ```js\n * integerSource({ max: 5,  min: 10 })();  // Random number 4-10\n * integerSource({ max: -5, min: -10 })(); // Random number from -10 to -6\n * integerSource({ max: 10, source: Math.random })(); // Random number between 0-9, with custom source of random\n * ```\n *\n * Throws an error if max & min are equal\n * @param maxOrOptions Max value (exclusive), or set of options\n * @returns Random integer\n */\nexport const integerSource = (maxOrOptions: number | RandomOptions): RandomSource => {\n  if (typeof maxOrOptions === `undefined`) {\n    throw new TypeError(`maxOrOptions is undefined`);\n  }\n  const options = typeof maxOrOptions === `number` ? { max: maxOrOptions } : maxOrOptions;\n  //eslint-disable-next-line functional/no-let\n  let max = Math.floor(options.max);\n  //eslint-disable-next-line functional/no-let\n  let min = Math.floor(options.min ?? 0);\n\n  // If we just get -5 as the max, invert so\n  // max:1 and min: -5 instead for -5...0 range\n  if (!options.min && max < 0) {\n    max = 1;\n    min = options.max;\n  }\n  const randomSource = options.source ?? defaultRandom;\n  if (min > max) {\n    throw new Error(`Min value is greater than max (min: ${ min } max: ${ max })`);\n  }\n\n  throwFromResult(guardNumberTest(min, ``, `min`));\n  throwFromResult(guardNumberTest(max, ``, `max`));\n\n  if (max === min) {\n    throw new Error(`Max and min values cannot be the same (${ max })`);\n  }\n\n  // Distance\n  const amt = Math.abs(max - min);\n  return () => Math.floor(randomSource() * amt) + min;\n};\n\n/**\n * Returns a random integer between `max` (exclusive) and 0 (inclusive)\n * Use {@link integerSource} to return a function instead.\n *\n * ```js\n * integer(10);  // Random number 0-9\n * ```\n *\n * If a negative value is given, this is assumed to be the\n * minimum (inclusive), with 0 as the max (inclusive)\n * ```js\n * integer(-5);  // Random number from -5 to 0\n * ```\n *\n * Specify options for a custom minimum or source of random:\n * ```js\n * integer({ max: 5,  min: 10 });  // Random number 4-10\n * integer({ max: -5, min: -10 }); // Random number from -10 to -6\n * integer({ max: 10, source: Math.random }); // Random number between 0-9, with custom source of random\n * ```\n *\n * Throws an error if max & min are equal\n * @param maxOrOptions Max value (exclusive), or set of options\n * @returns Random integer\n */\nexport const integer = (maxOrOptions: number | RandomOptions): number =>\n  integerSource(maxOrOptions)();\n\n\n\n/**\n * Returns a random float between `max` (exclusive) and 0 (inclusive). Max is 1 if unspecified.\n * Use {@link floatSource} to get a function that produces values. This is used internally.\n *\n * ```js\n * // Random number between 0..1 (but not including 1)\n * // (this would be identical to Math.random())\n * const v = float();\n * // Random float between 0..100 (but not including 100)\n * const v = float(100);\n * ```\n *\n * Options can be used:\n * ```js\n * // Random float between 20..40 (possibly including 20, but always lower than 40)\n * const v = float({ min: 20, max: 40 });\n * ```\n * @param maxOrOptions Maximum value (exclusive) or options\n * @returns Random number\n */\nexport const float = (maxOrOptions: number | RandomOptions = 1): number =>\n  floatSource(maxOrOptions)();\n\n/**\n * Generates a short roughly unique id\n * ```js\n * const id = shortGuid();\n * ```\n * @param opts Options.\n * @returns\n */\nexport const shortGuid = (options: Readonly<{ source?: RandomSource }> = {}) => {\n  const source = options.source ?? defaultRandom;\n  // Via Stackoverflow...\n  const firstPart = Math.trunc(source() * 46_656);\n  const secondPart = Math.trunc(source() * 46_656);\n  const firstPartString = `000${ firstPart.toString(36) }`.slice(-3);\n  const secondPartString = `000${ secondPart.toString(36) }`.slice(-3);\n  return firstPartString + secondPartString;\n};\n\n/**\n * Returns a random number of minutes, with a unit of milliseconds.\n * Max value is exclusive.\n * Use {@link minutesMs} to get a value directly, or {@link minutesMsSource} to return a function.\n *\n * @example Random value from 0 to one milli less than 5 * 60 * 1000\n * ```js\n * // Create function that returns value\n * const f = minutesMsSource(5);\n *\n * f(); // Generate value\n * ```\n *\n * @example Specified options:\n * ```js\n * // Random time between one minute and 5 minutes\n * const f = minutesMsSource({ max: 5, min: 1 });\n * f();\n * ```\n *\n * @remarks\n * It's a very minor function, but can make\n * code a little more literate:\n * ```js\n * // Random timeout of up to 5 mins\n * setTimeout(() => { ... }, minutesMsSource(5));\n * ```\n * @param maxMinutesOrOpts\n * @see {@link minutesMs}\n * @returns Function that produces a random value\n */\nexport const minutesMsSource = (\n  maxMinutesOrOptions: number | RandomOptions\n): RandomSource => {\n  const options =\n    typeof maxMinutesOrOptions === `number`\n      ? { max: maxMinutesOrOptions }\n      : maxMinutesOrOptions;\n  const min = (options.min ?? 0) * 60 * 1000;\n  const max = options.max * 60 * 1000;\n  return integerSource({ ...options, max, min });\n};\n\n/**\n * @example Random value from 0 to one milli less than 5 * 60 * 1000\n * ```js\n * // Random value from 0 to one milli less than 5*60*1000\n * minuteMs(5);\n * ```\n *\n * @example Specified options:\n * ```js\n * // Random time between one minute and 5 minutes\n * minuteMs({ max: 5, min: 1 });\n * ```\n * @inheritDoc minutesMsSource\n *\n * @param maxMinutesOrOpts\n * @see {@link minutesMsSource}\n * @returns Milliseconds\n */\nexport const minutesMs = (maxMinutesOrOptions: number | RandomOptions): number =>\n  minutesMsSource(maxMinutesOrOptions)();\n\n/**\n * Returns function which produces a random number of seconds, with a unit of milliseconds.\n * Maximum value is exclusive.\n * Use {@link secondsMs} to return a random value directly, or {@link secondsMsSource} to return a function.\n *\n * @example Random milliseconds between 0..4999\n * ```js\n * // Create function\n * const f = secondsMsSource(5000);\n * // Produce a value\n * const value = f();\n * ```\n *\n * @example Options can be provided\n * ```js\n * // Random milliseconds between 1000-4999\n * const value = secondsMsSource({ max:5, min:1 })();\n * // Note the extra () at the end to execute the function\n * ```\n *\n * @remarks\n * It's a very minor function, but can make\n * code a little more literate:\n * ```js\n * // Random timeout of up to 5 seconds\n * setTimeout(() => { ...}, secondsMsSource(5));\n * ```\n * @param maxSecondsOrOpts Maximum seconds, or options.\n * @returns Milliseconds\n */\nexport const secondsMsSource = (\n  maxSecondsOrOptions: number | RandomOptions\n): RandomSource => {\n  const options =\n    typeof maxSecondsOrOptions === `number`\n      ? { max: maxSecondsOrOptions }\n      : maxSecondsOrOptions;\n  const min = (options.min ?? 0) * 1000;\n  const max = options.max * 1000;\n  return () => integer({ ...options, max, min });\n};\n\n/**\n * @example Random milliseconds between 0..4999\n * ```js\n * secondsMs(5000);\n * ```\n *\n * @example Options can be provided\n * ```js\n * // Random milliseconds between 1000-4999\n * secondsMs({ max:5, min:1 });\n * ```\n * @inheritDoc secondsMsSource\n * @param maxSecondsOrOpts\n * @returns\n */\nexport const secondsMs = (maxSecondsOrOptions: number | RandomOptions): number =>\n  secondsMsSource(maxSecondsOrOptions)();\n\nexport type GenerateRandomOptions = RandomOptions & Readonly<{\n  /**\n   * If true, number range is looped\n   */\n  loop?: boolean;\n}>;\n\n/**\n * Returns a generator over random unique integers, up to\n * but not including the given max value.\n *\n * @example 0..9 range\n * ```js\n * const rand = [ ...integerUniqueGen(10) ];\n * // eg: [2, 9, 6, 0, 8, 7, 3, 4, 5, 1]\n * ```\n *\n * @example Options can be provided:\n * ```js\n * // 5..9 range\n * const rand = [ ...integerUniqueGen({ min: 5, max: 10 })];\n * ```\n *\n * Range can be looped. Once the initial random walk through the number\n * range completes, it starts again in a new random way.\n *\n * ```js\n * for (const r of integerUniqueGen({ max: 10, loop: true })) {\n *  // Warning: loops forever\n * }\n * ```\n *\n * Behind the scenes, an array of numbers is created that captures the range, this is then\n * shuffled on the first run, and again whenever the iterator loops, if that's allowed.\n *\n * As a consequence, large ranges will consume larger amounts of memory.\n * @param maxOrOptions\n * @returns\n */\nexport function* integerUniqueGen(\n  maxOrOptions: number | GenerateRandomOptions\n): IterableIterator<number> {\n  const options = typeof maxOrOptions === `number` ? { max: maxOrOptions } : maxOrOptions;\n  const min = options.min ?? 0;\n  const max = options.max;\n  const source = options.source ?? defaultRandom;\n  const loop = options.loop ?? false;\n\n  throwFromResult(guardIntegerTest(min, ``, `min`));\n  throwFromResult(guardIntegerTest(max, ``, `max`));\n  if (min > max) {\n    throw new Error(`Min value is greater than max. Min: ${ min } Max: ${ max }`);\n  }\n\n  const origRange = [ ...range(min, max - min) ];\n  //eslint-disable-next-line functional/no-let\n  let numberRange = shuffle(origRange);\n  //eslint-disable-next-line functional/no-let\n  let index = 0;\n  while (true) {\n    if (index === numberRange.length) {\n      if (loop) numberRange = shuffle(origRange, source);\n      else return;\n    }\n    yield numberRange[ index++ ];\n  }\n}\n\nexport { randomIndex as arrayIndex } from '../collections/arrays/index.js';","\nimport { type RandomOptions, type RandomSource, defaultRandom } from \"./Types.js\";\nimport { numberTest as guardNumberTest, throwFromResult } from '../Guards.js';\n/**\n * Returns a function that produces random float values.\n * Use {@link float} to produce a valued directly.\n *\n * Random float between `max` (exclusive) and 0 (inclusive). Max is 1 if unspecified.\n *\n *\n * ```js\n * // Random number between 0..1 (but not including 1)\n * // (this would be identical to Math.random())\n * const r = floatSource();\n * r(); // Execute to produce random value\n *\n * // Random float between 0..100 (but not including 100)\n * const v = floatSource(100)();\n * ```\n *\n * Options can be used:\n * ```js\n * // Random float between 20..40 (possibly including 20, but always lower than 40)\n * const r = floatSource({ min: 20, max: 40 });\n * ```\n * @param maxOrOptions Maximum value (exclusive) or options\n * @returns Random number\n */\nexport const floatSource = (maxOrOptions: number | RandomOptions = 1): RandomSource => {\n  const options = typeof maxOrOptions === `number` ? { max: maxOrOptions } : maxOrOptions;\n  //eslint-disable-next-line functional/no-let\n  let max = options.max;\n  //eslint-disable-next-line functional/no-let\n  let min = options.min ?? 0;\n  const source = options.source ?? defaultRandom;\n\n  throwFromResult(guardNumberTest(min, ``, `min`));\n  throwFromResult(guardNumberTest(max, ``, `max`));\n\n  if (!options.min && max < 0) {\n    min = max;\n    max = 0;\n  }\n  if (min > max) {\n    throw new Error(`Min is greater than max. Min: ${ min } max: ${ max }`);\n  }\n\n  return () => source() * (max - min) + min;\n};","import * as d3Colour from 'd3-color';\nimport * as d3Interpolate from 'd3-interpolate';\nimport { defaultRandom, type RandomSource } from '../random/Types.js';\nimport { throwNumberTest } from '../Guards.js';\n\nexport type Hsl = { h: number; s: number; l: number; opacity?: number };\nexport type Rgb = { r: number; g: number; b: number; opacity?: number };\nexport type Spaces = `hsl` | `rgb` | `lab` | `hcl` | `cubehelix`;\n/**\n * @private\n */\nexport type Colour = d3Colour.RGBColor | d3Colour.HSLColor;\n\n/**\n * A representation of colour. Eg: `blue`, `rgb(255,0,0)`, `hsl(20,100%,50%)`\n */\nexport type Colourish = string | d3Colour.ColorCommonInstance;\n\n/**\n * Options for interpolation\n */\nexport type InterpolationOpts = {\n  /**\n   * Gamma correction. Eg 4 brightens values. Only applies to rgb and cubehelix\n   * [Read more](https://github.com/d3/d3-interpolate#interpolate_gamma)\n   */\n  gamma?: number;\n  /**\n   * Colour space\n   */\n  space?: Spaces;\n  /**\n   * If true, interpolation happens the longer distance. Only applies to hsl, hcl and cubehelix\n   */\n  long?: boolean;\n};\n\n/**\n * Parses colour to `{ h, s, l }`. `opacity` field is added if it exists on source.\n * @param colour\n * @returns\n */\nexport const toHsl = (colour: Colourish): Hsl => {\n  const c = resolveColour(colour);\n  // eslint-disable-next-line @typescript-eslint/restrict-template-expressions\n  if (c === null) throw new Error(`Could not resolve colour ${ colour }`);\n\n  if (isHsl(c)) return c;\n  if (isRgb(c)) {\n    const asHsl = d3Colour.hsl(c);\n    if (c.opacity) return { ...asHsl, opacity: c.opacity };\n    return asHsl;\n  }\n  // eslint-disable-next-line @typescript-eslint/restrict-template-expressions\n  throw new Error(`Could not resolve colour ${ colour }`);\n};\n\n/**\n * Returns a full HSL colour string (eg `hsl(20,50%,75%)`) based on a index.\n * It's useful for generating perceptually different shades as the index increments.\n *\n * ```\n * el.style.backgroundColor = goldenAgeColour(10);\n * ```\n *\n * Saturation and lightness can be specified, as numeric ranges of 0-1.\n *\n * @param saturation Saturation (0-1), defaults to 0.5\n * @param lightness Lightness (0-1), defaults to 0.75\n * @param alpha Opacity (0-1), defaults to 1.0\n * @returns HSL colour string eg `hsl(20,50%,75%)`\n */\nexport const goldenAngleColour = (\n  index: number,\n  saturation = 0.5,\n  lightness = 0.75,\n  alpha = 1\n) => {\n  throwNumberTest(index, `positive`, `index`);\n  throwNumberTest(saturation, `percentage`, `saturation`);\n  throwNumberTest(lightness, `percentage`, `lightness`);\n  throwNumberTest(alpha, `percentage`, `alpha`);\n\n  // Via Stackoverflow\n  const hue = index * 137.508; // use golden angle approximation\n  return alpha === 1 ? `hsl(${ hue },${ saturation * 100 }%,${ lightness * 100 }%)` : `hsl(${ hue },${ saturation * 100 }%,${ lightness * 100 }%,${ alpha * 100 }%)`;\n};\n\n/**\n * Returns a random hue component\n * ```\n * // Generate hue\n * const h =randomHue(); // 0-359\n *\n * // Generate hue and assign as part of a HSL string\n * el.style.backgroundColor = `hsl(${randomHue(), 50%, 75%})`;\n * ```\n * @param rand\n * @returns\n */\nexport const randomHue = (rand: RandomSource = defaultRandom): number => {\n  const r = rand();\n  return r * 360;\n};\n\n/**\n * Parses colour to `{ r, g, b }`. `opacity` field is added if it exists on source.\n * [Named colours](https://html-color-codes.info/color-names/)\n * @param colour\n * @returns\n */\nexport const toRgb = (colour: Colourish): Rgb => {\n  const c = resolveColour(colour);\n  const rgb = c.rgb();\n  return c.opacity < 1 ? { r: rgb.r, g: rgb.g, b: rgb.b, opacity: c.opacity } : { r: rgb.r, g: rgb.g, b: rgb.b };\n};\n\nconst resolveColour = (c: Colourish): Colour => {\n  if (typeof c === `string`) {\n    const css = d3Colour.color(c);\n    if (css !== null) return css;\n    const error = c.startsWith(`hsl`) && c.indexOf(`%`) <= 0 ? new Error(`Could not resolve CSS colour ${ c }. HSL values should be in the form: hsl(0, 50%, 50%)`) : new Error(`Could not resolve CSS colour ${ c }`);\n    throw error;\n  } else {\n    if (isHsl(c)) return d3Colour.hsl(c.h, c.s, c.l);\n    if (isRgb(c)) return d3Colour.rgb(c.r, c.g, c.b);\n  }\n  throw new Error(`Could not resolve colour ${ JSON.stringify(c) }`);\n};\n\n/**\n * Returns a colour in hex format `#000000`\n * @param colour\n * @returns Hex format, including #\n */\nexport const toHex = (colour: Colourish): string => {\n  const c = resolveColour(colour);\n  return c.formatHex();\n};\n\n/**\n * Returns a variation of colour with its opacity multiplied by `amt`.\n *\n * ```js\n * // Return a colour string for blue that is 50% opaque\n * opacity(`blue`, 0.5);\n * // eg: `rgba(0,0,255,0.5)`\n *\n * // Returns a colour string that is 50% more opaque\n * opacity(`hsla(200,100%,50%,50%`, 0.5);\n * // eg: `hsla(200,100%,50%,25%)`\n * ```\n *\n * [Named colours](https://html-color-codes.info/color-names/)\n * @param colour A valid CSS colour\n * @param amt Amount to multiply opacity by\n * @returns String representation of colour\n */\nexport const opacity = (colour: Colourish, amt: number): string => {\n  const c = resolveColour(colour);\n  c.opacity *= amt;\n  return c.toString();\n};\n\n/**\n * Gets a CSS variable.\n * ```\n * // Fetch --accent variable, or use `yellow` if not found.\n * getCssVariable(`accent`, `yellow`);\n * ```\n * @param name Name of variable. Omit the `--`\n * @param fallbackColour Fallback colour if not found\n * @param root  Element to search variable from\n * @returns Colour or fallback.\n */\nexport const getCssVariable = (\n  name: string,\n  fallbackColour = `black`,\n  root?: HTMLElement\n): string => {\n  if (root === undefined) root = document.body;\n  const fromCss = getComputedStyle(root).getPropertyValue(`--${ name }`).trim();\n  if (fromCss === undefined || fromCss.length === 0) return fallbackColour;\n  return fromCss;\n};\n\n/**\n * Interpolates between two colours, returning a string in the form `rgb(r,g,b)`\n *\n * @example\n * ```js\n * // Get 50% between blue and red\n * interpolate(0.5, `blue`, `red`);\n *\n * // Get midway point, with specified colour space\n * interpolate(0.5, `hsl(200, 100%, 50%)`, `pink`, {space: `hcl`});\n * ```\n *\n * [Named colours](https://html-color-codes.info/color-names/)\n * @param amount Amount (0 = from, 0.5 halfway, 1= to)\n * @param from Starting colour\n * @param to Final colour\n * @param optsOrSpace Options for interpolation, or string name for colour space, eg `hsl`.\n * @returns String representation of colour, eg. `rgb(r,g,b)`\n */\nexport const interpolate = (\n  amount: number,\n  from: Colourish,\n  to: Colourish,\n  optsOrSpace?: string | InterpolationOpts\n): string => {\n  throwNumberTest(amount, `percentage`, `amount`);\n  if (typeof from !== `string`)\n    throw new Error(`Expected string for 'from' param`);\n  if (typeof to !== `string`) throw new Error(`Expected string for 'to' param`);\n\n  let opts: InterpolationOpts;\n  if (typeof optsOrSpace === `undefined`) opts = {};\n  else if (typeof optsOrSpace === `string`)\n    opts = { space: optsOrSpace as Spaces };\n  else opts = optsOrSpace;\n\n  const inter = getInterpolator(opts, [ from, to ]);\n  if (inter === undefined) throw new Error(`Could not handle colour/space`);\n  return inter(amount);\n};\n\nconst getInterpolator = (\n  optsOrSpace: InterpolationOpts | string,\n  colours: Array<Colourish>\n): ((t: number) => string) | undefined => {\n  if (!Array.isArray(colours))\n    throw new Error(`Expected one or more colours as parameters`);\n\n  let opts: InterpolationOpts;\n  if (typeof optsOrSpace === `undefined`) opts = {};\n  else if (typeof optsOrSpace === `string`)\n    opts = { space: optsOrSpace as Spaces };\n  else opts = optsOrSpace;\n\n  if (!Array.isArray(colours))\n    throw new Error(`Expected array for colours parameter`);\n  if (colours.length < 2)\n    throw new Error(`Interpolation expects at least two colours`);\n  const { space = `rgb`, long = false } = opts;\n  let inter;\n\n  switch (space) {\n    case `lab`: {\n      inter = d3Interpolate.interpolateLab;\n      break;\n    }\n    case `hsl`: {\n      inter = long\n        ? d3Interpolate.interpolateHslLong\n        : d3Interpolate.interpolateHsl;\n      break;\n    }\n    case `hcl`: {\n      inter = long\n        ? d3Interpolate.interpolateHclLong\n        : d3Interpolate.interpolateHcl;\n      break;\n    }\n    case `cubehelix`: {\n      inter = long\n        ? d3Interpolate.interpolateCubehelixLong\n        : d3Interpolate.interpolateCubehelix;\n      break;\n    }\n    case `rgb`: {\n      inter = d3Interpolate.interpolateRgb;\n    }\n    default: {\n      inter = d3Interpolate.interpolateRgb;\n    }\n  }\n\n  if (opts.gamma && (space === `rgb` || space === `cubehelix`)) {\n    inter = (inter as d3Interpolate.ColorGammaInterpolationFactory).gamma(\n      opts.gamma\n    );\n  }\n\n  return colours.length > 2 ? d3Interpolate.piecewise(inter, colours) : inter(colours[ 0 ], colours[ 1 ]);\n};\n\n/**\n * Produces a scale of colours as a string array\n *\n * @example\n * ```js\n * // Yields array of 5 colour strings\n * const s = scale(5, {space:`hcl`}, `blue`, `red`);\n * // Produces scale between three colours\n * const s = scale(5, {space:`hcl`}, `blue`, `yellow`, `red`);\n * ```\n * @param steps Number of colours\n * @param opts Options for interpolation, or string colour space eg `hsl`\n * @param colours From/end colours (or more)\n * @returns\n */\nexport const scale = (\n  steps: number,\n  opts: InterpolationOpts | string,\n  ...colours: Array<Colourish>\n): Array<string> => {\n  throwNumberTest(steps, `aboveZero`, `steps`);\n  if (!Array.isArray(colours))\n    throw new Error(`Expected one or more colours as parameters`);\n  const inter = getInterpolator(opts, colours);\n  if (inter === undefined) throw new Error(`Could not handle colour/space`);\n\n  const perStep = 1 / (steps - 1);\n  const r = [];\n  //eslint-disable-next-line functional/no-let\n  let amt = 0;\n  //eslint-disable-next-line functional/no-let\n  for (let index = 0; index < steps; index++) {\n    //eslint-disable-next-line functional/immutable-data\n    r.push(inter(amt));\n    amt += perStep;\n    if (amt > 1) amt = 1;\n  }\n  return r;\n};\n\nconst isHsl = (p: Colour | d3Colour.ColorCommonInstance | Hsl): p is Hsl => {\n  if ((p as Hsl).h === undefined) return false;\n  if ((p as Hsl).s === undefined) return false;\n  if ((p as Hsl).l === undefined) return false;\n  return true;\n};\n\nconst isRgb = (p: Colour | d3Colour.ColorCommonInstance | Rgb): p is Rgb => {\n  if ((p as Rgb).r === undefined) return false;\n  if ((p as Rgb).g === undefined) return false;\n  if ((p as Rgb).b === undefined) return false;\n  return true;\n};\n\n// const rgbToHsl = (r: number, g: number, b: number): Hsl => {\n//   r /= 255;\n//   g /= 255;\n//   b /= 255;\n\n//   var min = Math.min(r, g, b),\n//     max = Math.max(r, g, b),\n//     delta = max - min,\n//     h,\n//     s,\n//     l;\n\n//   h = 0;\n//   if (max === min) {\n//     h = 0;\n//   } else if (r === max) {\n//     h = (g - b) / delta;\n//   } else if (g === max) {\n//     h = 2 + (b - r) / delta;\n//   } else if (b === max) {\n//     h = 4 + (r - g) / delta;\n//   }\n\n//   h = Math.min(h * 60, 360);\n\n//   if (h < 0) {\n//     h += 360;\n//   }\n\n//   l = (min + max) / 2;\n\n//   if (max === min) {\n//     s = 0;\n//   } else if (l <= 0.5) {\n//     s = delta / (max + min);\n//   } else {\n//     s = delta / (2 - max - min);\n//   }\n\n//   return {h, s, l};\n// };\n","export default function(constructor, factory, prototype) {\n  constructor.prototype = factory.prototype = prototype;\n  prototype.constructor = constructor;\n}\n\nexport function extend(parent, definition) {\n  var prototype = Object.create(parent.prototype);\n  for (var key in definition) prototype[key] = definition[key];\n  return prototype;\n}\n","import define, {extend} from \"./define.js\";\n\nexport function Color() {}\n\nexport var darker = 0.7;\nexport var brighter = 1 / darker;\n\nvar reI = \"\\\\s*([+-]?\\\\d+)\\\\s*\",\n    reN = \"\\\\s*([+-]?(?:\\\\d*\\\\.)?\\\\d+(?:[eE][+-]?\\\\d+)?)\\\\s*\",\n    reP = \"\\\\s*([+-]?(?:\\\\d*\\\\.)?\\\\d+(?:[eE][+-]?\\\\d+)?)%\\\\s*\",\n    reHex = /^#([0-9a-f]{3,8})$/,\n    reRgbInteger = new RegExp(`^rgb\\\\(${reI},${reI},${reI}\\\\)$`),\n    reRgbPercent = new RegExp(`^rgb\\\\(${reP},${reP},${reP}\\\\)$`),\n    reRgbaInteger = new RegExp(`^rgba\\\\(${reI},${reI},${reI},${reN}\\\\)$`),\n    reRgbaPercent = new RegExp(`^rgba\\\\(${reP},${reP},${reP},${reN}\\\\)$`),\n    reHslPercent = new RegExp(`^hsl\\\\(${reN},${reP},${reP}\\\\)$`),\n    reHslaPercent = new RegExp(`^hsla\\\\(${reN},${reP},${reP},${reN}\\\\)$`);\n\nvar named = {\n  aliceblue: 0xf0f8ff,\n  antiquewhite: 0xfaebd7,\n  aqua: 0x00ffff,\n  aquamarine: 0x7fffd4,\n  azure: 0xf0ffff,\n  beige: 0xf5f5dc,\n  bisque: 0xffe4c4,\n  black: 0x000000,\n  blanchedalmond: 0xffebcd,\n  blue: 0x0000ff,\n  blueviolet: 0x8a2be2,\n  brown: 0xa52a2a,\n  burlywood: 0xdeb887,\n  cadetblue: 0x5f9ea0,\n  chartreuse: 0x7fff00,\n  chocolate: 0xd2691e,\n  coral: 0xff7f50,\n  cornflowerblue: 0x6495ed,\n  cornsilk: 0xfff8dc,\n  crimson: 0xdc143c,\n  cyan: 0x00ffff,\n  darkblue: 0x00008b,\n  darkcyan: 0x008b8b,\n  darkgoldenrod: 0xb8860b,\n  darkgray: 0xa9a9a9,\n  darkgreen: 0x006400,\n  darkgrey: 0xa9a9a9,\n  darkkhaki: 0xbdb76b,\n  darkmagenta: 0x8b008b,\n  darkolivegreen: 0x556b2f,\n  darkorange: 0xff8c00,\n  darkorchid: 0x9932cc,\n  darkred: 0x8b0000,\n  darksalmon: 0xe9967a,\n  darkseagreen: 0x8fbc8f,\n  darkslateblue: 0x483d8b,\n  darkslategray: 0x2f4f4f,\n  darkslategrey: 0x2f4f4f,\n  darkturquoise: 0x00ced1,\n  darkviolet: 0x9400d3,\n  deeppink: 0xff1493,\n  deepskyblue: 0x00bfff,\n  dimgray: 0x696969,\n  dimgrey: 0x696969,\n  dodgerblue: 0x1e90ff,\n  firebrick: 0xb22222,\n  floralwhite: 0xfffaf0,\n  forestgreen: 0x228b22,\n  fuchsia: 0xff00ff,\n  gainsboro: 0xdcdcdc,\n  ghostwhite: 0xf8f8ff,\n  gold: 0xffd700,\n  goldenrod: 0xdaa520,\n  gray: 0x808080,\n  green: 0x008000,\n  greenyellow: 0xadff2f,\n  grey: 0x808080,\n  honeydew: 0xf0fff0,\n  hotpink: 0xff69b4,\n  indianred: 0xcd5c5c,\n  indigo: 0x4b0082,\n  ivory: 0xfffff0,\n  khaki: 0xf0e68c,\n  lavender: 0xe6e6fa,\n  lavenderblush: 0xfff0f5,\n  lawngreen: 0x7cfc00,\n  lemonchiffon: 0xfffacd,\n  lightblue: 0xadd8e6,\n  lightcoral: 0xf08080,\n  lightcyan: 0xe0ffff,\n  lightgoldenrodyellow: 0xfafad2,\n  lightgray: 0xd3d3d3,\n  lightgreen: 0x90ee90,\n  lightgrey: 0xd3d3d3,\n  lightpink: 0xffb6c1,\n  lightsalmon: 0xffa07a,\n  lightseagreen: 0x20b2aa,\n  lightskyblue: 0x87cefa,\n  lightslategray: 0x778899,\n  lightslategrey: 0x778899,\n  lightsteelblue: 0xb0c4de,\n  lightyellow: 0xffffe0,\n  lime: 0x00ff00,\n  limegreen: 0x32cd32,\n  linen: 0xfaf0e6,\n  magenta: 0xff00ff,\n  maroon: 0x800000,\n  mediumaquamarine: 0x66cdaa,\n  mediumblue: 0x0000cd,\n  mediumorchid: 0xba55d3,\n  mediumpurple: 0x9370db,\n  mediumseagreen: 0x3cb371,\n  mediumslateblue: 0x7b68ee,\n  mediumspringgreen: 0x00fa9a,\n  mediumturquoise: 0x48d1cc,\n  mediumvioletred: 0xc71585,\n  midnightblue: 0x191970,\n  mintcream: 0xf5fffa,\n  mistyrose: 0xffe4e1,\n  moccasin: 0xffe4b5,\n  navajowhite: 0xffdead,\n  navy: 0x000080,\n  oldlace: 0xfdf5e6,\n  olive: 0x808000,\n  olivedrab: 0x6b8e23,\n  orange: 0xffa500,\n  orangered: 0xff4500,\n  orchid: 0xda70d6,\n  palegoldenrod: 0xeee8aa,\n  palegreen: 0x98fb98,\n  paleturquoise: 0xafeeee,\n  palevioletred: 0xdb7093,\n  papayawhip: 0xffefd5,\n  peachpuff: 0xffdab9,\n  peru: 0xcd853f,\n  pink: 0xffc0cb,\n  plum: 0xdda0dd,\n  powderblue: 0xb0e0e6,\n  purple: 0x800080,\n  rebeccapurple: 0x663399,\n  red: 0xff0000,\n  rosybrown: 0xbc8f8f,\n  royalblue: 0x4169e1,\n  saddlebrown: 0x8b4513,\n  salmon: 0xfa8072,\n  sandybrown: 0xf4a460,\n  seagreen: 0x2e8b57,\n  seashell: 0xfff5ee,\n  sienna: 0xa0522d,\n  silver: 0xc0c0c0,\n  skyblue: 0x87ceeb,\n  slateblue: 0x6a5acd,\n  slategray: 0x708090,\n  slategrey: 0x708090,\n  snow: 0xfffafa,\n  springgreen: 0x00ff7f,\n  steelblue: 0x4682b4,\n  tan: 0xd2b48c,\n  teal: 0x008080,\n  thistle: 0xd8bfd8,\n  tomato: 0xff6347,\n  turquoise: 0x40e0d0,\n  violet: 0xee82ee,\n  wheat: 0xf5deb3,\n  white: 0xffffff,\n  whitesmoke: 0xf5f5f5,\n  yellow: 0xffff00,\n  yellowgreen: 0x9acd32\n};\n\ndefine(Color, color, {\n  copy(channels) {\n    return Object.assign(new this.constructor, this, channels);\n  },\n  displayable() {\n    return this.rgb().displayable();\n  },\n  hex: color_formatHex, // Deprecated! Use color.formatHex.\n  formatHex: color_formatHex,\n  formatHex8: color_formatHex8,\n  formatHsl: color_formatHsl,\n  formatRgb: color_formatRgb,\n  toString: color_formatRgb\n});\n\nfunction color_formatHex() {\n  return this.rgb().formatHex();\n}\n\nfunction color_formatHex8() {\n  return this.rgb().formatHex8();\n}\n\nfunction color_formatHsl() {\n  return hslConvert(this).formatHsl();\n}\n\nfunction color_formatRgb() {\n  return this.rgb().formatRgb();\n}\n\nexport default function color(format) {\n  var m, l;\n  format = (format + \"\").trim().toLowerCase();\n  return (m = reHex.exec(format)) ? (l = m[1].length, m = parseInt(m[1], 16), l === 6 ? rgbn(m) // #ff0000\n      : l === 3 ? new Rgb((m >> 8 & 0xf) | (m >> 4 & 0xf0), (m >> 4 & 0xf) | (m & 0xf0), ((m & 0xf) << 4) | (m & 0xf), 1) // #f00\n      : l === 8 ? rgba(m >> 24 & 0xff, m >> 16 & 0xff, m >> 8 & 0xff, (m & 0xff) / 0xff) // #ff000000\n      : l === 4 ? rgba((m >> 12 & 0xf) | (m >> 8 & 0xf0), (m >> 8 & 0xf) | (m >> 4 & 0xf0), (m >> 4 & 0xf) | (m & 0xf0), (((m & 0xf) << 4) | (m & 0xf)) / 0xff) // #f000\n      : null) // invalid hex\n      : (m = reRgbInteger.exec(format)) ? new Rgb(m[1], m[2], m[3], 1) // rgb(255, 0, 0)\n      : (m = reRgbPercent.exec(format)) ? new Rgb(m[1] * 255 / 100, m[2] * 255 / 100, m[3] * 255 / 100, 1) // rgb(100%, 0%, 0%)\n      : (m = reRgbaInteger.exec(format)) ? rgba(m[1], m[2], m[3], m[4]) // rgba(255, 0, 0, 1)\n      : (m = reRgbaPercent.exec(format)) ? rgba(m[1] * 255 / 100, m[2] * 255 / 100, m[3] * 255 / 100, m[4]) // rgb(100%, 0%, 0%, 1)\n      : (m = reHslPercent.exec(format)) ? hsla(m[1], m[2] / 100, m[3] / 100, 1) // hsl(120, 50%, 50%)\n      : (m = reHslaPercent.exec(format)) ? hsla(m[1], m[2] / 100, m[3] / 100, m[4]) // hsla(120, 50%, 50%, 1)\n      : named.hasOwnProperty(format) ? rgbn(named[format]) // eslint-disable-line no-prototype-builtins\n      : format === \"transparent\" ? new Rgb(NaN, NaN, NaN, 0)\n      : null;\n}\n\nfunction rgbn(n) {\n  return new Rgb(n >> 16 & 0xff, n >> 8 & 0xff, n & 0xff, 1);\n}\n\nfunction rgba(r, g, b, a) {\n  if (a <= 0) r = g = b = NaN;\n  return new Rgb(r, g, b, a);\n}\n\nexport function rgbConvert(o) {\n  if (!(o instanceof Color)) o = color(o);\n  if (!o) return new Rgb;\n  o = o.rgb();\n  return new Rgb(o.r, o.g, o.b, o.opacity);\n}\n\nexport function rgb(r, g, b, opacity) {\n  return arguments.length === 1 ? rgbConvert(r) : new Rgb(r, g, b, opacity == null ? 1 : opacity);\n}\n\nexport function Rgb(r, g, b, opacity) {\n  this.r = +r;\n  this.g = +g;\n  this.b = +b;\n  this.opacity = +opacity;\n}\n\ndefine(Rgb, rgb, extend(Color, {\n  brighter(k) {\n    k = k == null ? brighter : Math.pow(brighter, k);\n    return new Rgb(this.r * k, this.g * k, this.b * k, this.opacity);\n  },\n  darker(k) {\n    k = k == null ? darker : Math.pow(darker, k);\n    return new Rgb(this.r * k, this.g * k, this.b * k, this.opacity);\n  },\n  rgb() {\n    return this;\n  },\n  clamp() {\n    return new Rgb(clampi(this.r), clampi(this.g), clampi(this.b), clampa(this.opacity));\n  },\n  displayable() {\n    return (-0.5 <= this.r && this.r < 255.5)\n        && (-0.5 <= this.g && this.g < 255.5)\n        && (-0.5 <= this.b && this.b < 255.5)\n        && (0 <= this.opacity && this.opacity <= 1);\n  },\n  hex: rgb_formatHex, // Deprecated! Use color.formatHex.\n  formatHex: rgb_formatHex,\n  formatHex8: rgb_formatHex8,\n  formatRgb: rgb_formatRgb,\n  toString: rgb_formatRgb\n}));\n\nfunction rgb_formatHex() {\n  return `#${hex(this.r)}${hex(this.g)}${hex(this.b)}`;\n}\n\nfunction rgb_formatHex8() {\n  return `#${hex(this.r)}${hex(this.g)}${hex(this.b)}${hex((isNaN(this.opacity) ? 1 : this.opacity) * 255)}`;\n}\n\nfunction rgb_formatRgb() {\n  const a = clampa(this.opacity);\n  return `${a === 1 ? \"rgb(\" : \"rgba(\"}${clampi(this.r)}, ${clampi(this.g)}, ${clampi(this.b)}${a === 1 ? \")\" : `, ${a})`}`;\n}\n\nfunction clampa(opacity) {\n  return isNaN(opacity) ? 1 : Math.max(0, Math.min(1, opacity));\n}\n\nfunction clampi(value) {\n  return Math.max(0, Math.min(255, Math.round(value) || 0));\n}\n\nfunction hex(value) {\n  value = clampi(value);\n  return (value < 16 ? \"0\" : \"\") + value.toString(16);\n}\n\nfunction hsla(h, s, l, a) {\n  if (a <= 0) h = s = l = NaN;\n  else if (l <= 0 || l >= 1) h = s = NaN;\n  else if (s <= 0) h = NaN;\n  return new Hsl(h, s, l, a);\n}\n\nexport function hslConvert(o) {\n  if (o instanceof Hsl) return new Hsl(o.h, o.s, o.l, o.opacity);\n  if (!(o instanceof Color)) o = color(o);\n  if (!o) return new Hsl;\n  if (o instanceof Hsl) return o;\n  o = o.rgb();\n  var r = o.r / 255,\n      g = o.g / 255,\n      b = o.b / 255,\n      min = Math.min(r, g, b),\n      max = Math.max(r, g, b),\n      h = NaN,\n      s = max - min,\n      l = (max + min) / 2;\n  if (s) {\n    if (r === max) h = (g - b) / s + (g < b) * 6;\n    else if (g === max) h = (b - r) / s + 2;\n    else h = (r - g) / s + 4;\n    s /= l < 0.5 ? max + min : 2 - max - min;\n    h *= 60;\n  } else {\n    s = l > 0 && l < 1 ? 0 : h;\n  }\n  return new Hsl(h, s, l, o.opacity);\n}\n\nexport function hsl(h, s, l, opacity) {\n  return arguments.length === 1 ? hslConvert(h) : new Hsl(h, s, l, opacity == null ? 1 : opacity);\n}\n\nfunction Hsl(h, s, l, opacity) {\n  this.h = +h;\n  this.s = +s;\n  this.l = +l;\n  this.opacity = +opacity;\n}\n\ndefine(Hsl, hsl, extend(Color, {\n  brighter(k) {\n    k = k == null ? brighter : Math.pow(brighter, k);\n    return new Hsl(this.h, this.s, this.l * k, this.opacity);\n  },\n  darker(k) {\n    k = k == null ? darker : Math.pow(darker, k);\n    return new Hsl(this.h, this.s, this.l * k, this.opacity);\n  },\n  rgb() {\n    var h = this.h % 360 + (this.h < 0) * 360,\n        s = isNaN(h) || isNaN(this.s) ? 0 : this.s,\n        l = this.l,\n        m2 = l + (l < 0.5 ? l : 1 - l) * s,\n        m1 = 2 * l - m2;\n    return new Rgb(\n      hsl2rgb(h >= 240 ? h - 240 : h + 120, m1, m2),\n      hsl2rgb(h, m1, m2),\n      hsl2rgb(h < 120 ? h + 240 : h - 120, m1, m2),\n      this.opacity\n    );\n  },\n  clamp() {\n    return new Hsl(clamph(this.h), clampt(this.s), clampt(this.l), clampa(this.opacity));\n  },\n  displayable() {\n    return (0 <= this.s && this.s <= 1 || isNaN(this.s))\n        && (0 <= this.l && this.l <= 1)\n        && (0 <= this.opacity && this.opacity <= 1);\n  },\n  formatHsl() {\n    const a = clampa(this.opacity);\n    return `${a === 1 ? \"hsl(\" : \"hsla(\"}${clamph(this.h)}, ${clampt(this.s) * 100}%, ${clampt(this.l) * 100}%${a === 1 ? \")\" : `, ${a})`}`;\n  }\n}));\n\nfunction clamph(value) {\n  value = (value || 0) % 360;\n  return value < 0 ? value + 360 : value;\n}\n\nfunction clampt(value) {\n  return Math.max(0, Math.min(1, value || 0));\n}\n\n/* From FvD 13.37, CSS Color Module Level 3 */\nfunction hsl2rgb(h, m1, m2) {\n  return (h < 60 ? m1 + (m2 - m1) * h / 60\n      : h < 180 ? m2\n      : h < 240 ? m1 + (m2 - m1) * (240 - h) / 60\n      : m1) * 255;\n}\n","export const radians = Math.PI / 180;\nexport const degrees = 180 / Math.PI;\n","import define, {extend} from \"./define.js\";\nimport {Color, rgbConvert, Rgb} from \"./color.js\";\nimport {degrees, radians} from \"./math.js\";\n\n// https://observablehq.com/@mbostock/lab-and-rgb\nconst K = 18,\n    Xn = 0.96422,\n    Yn = 1,\n    Zn = 0.82521,\n    t0 = 4 / 29,\n    t1 = 6 / 29,\n    t2 = 3 * t1 * t1,\n    t3 = t1 * t1 * t1;\n\nfunction labConvert(o) {\n  if (o instanceof Lab) return new Lab(o.l, o.a, o.b, o.opacity);\n  if (o instanceof Hcl) return hcl2lab(o);\n  if (!(o instanceof Rgb)) o = rgbConvert(o);\n  var r = rgb2lrgb(o.r),\n      g = rgb2lrgb(o.g),\n      b = rgb2lrgb(o.b),\n      y = xyz2lab((0.2225045 * r + 0.7168786 * g + 0.0606169 * b) / Yn), x, z;\n  if (r === g && g === b) x = z = y; else {\n    x = xyz2lab((0.4360747 * r + 0.3850649 * g + 0.1430804 * b) / Xn);\n    z = xyz2lab((0.0139322 * r + 0.0971045 * g + 0.7141733 * b) / Zn);\n  }\n  return new Lab(116 * y - 16, 500 * (x - y), 200 * (y - z), o.opacity);\n}\n\nexport function gray(l, opacity) {\n  return new Lab(l, 0, 0, opacity == null ? 1 : opacity);\n}\n\nexport default function lab(l, a, b, opacity) {\n  return arguments.length === 1 ? labConvert(l) : new Lab(l, a, b, opacity == null ? 1 : opacity);\n}\n\nexport function Lab(l, a, b, opacity) {\n  this.l = +l;\n  this.a = +a;\n  this.b = +b;\n  this.opacity = +opacity;\n}\n\ndefine(Lab, lab, extend(Color, {\n  brighter(k) {\n    return new Lab(this.l + K * (k == null ? 1 : k), this.a, this.b, this.opacity);\n  },\n  darker(k) {\n    return new Lab(this.l - K * (k == null ? 1 : k), this.a, this.b, this.opacity);\n  },\n  rgb() {\n    var y = (this.l + 16) / 116,\n        x = isNaN(this.a) ? y : y + this.a / 500,\n        z = isNaN(this.b) ? y : y - this.b / 200;\n    x = Xn * lab2xyz(x);\n    y = Yn * lab2xyz(y);\n    z = Zn * lab2xyz(z);\n    return new Rgb(\n      lrgb2rgb( 3.1338561 * x - 1.6168667 * y - 0.4906146 * z),\n      lrgb2rgb(-0.9787684 * x + 1.9161415 * y + 0.0334540 * z),\n      lrgb2rgb( 0.0719453 * x - 0.2289914 * y + 1.4052427 * z),\n      this.opacity\n    );\n  }\n}));\n\nfunction xyz2lab(t) {\n  return t > t3 ? Math.pow(t, 1 / 3) : t / t2 + t0;\n}\n\nfunction lab2xyz(t) {\n  return t > t1 ? t * t * t : t2 * (t - t0);\n}\n\nfunction lrgb2rgb(x) {\n  return 255 * (x <= 0.0031308 ? 12.92 * x : 1.055 * Math.pow(x, 1 / 2.4) - 0.055);\n}\n\nfunction rgb2lrgb(x) {\n  return (x /= 255) <= 0.04045 ? x / 12.92 : Math.pow((x + 0.055) / 1.055, 2.4);\n}\n\nfunction hclConvert(o) {\n  if (o instanceof Hcl) return new Hcl(o.h, o.c, o.l, o.opacity);\n  if (!(o instanceof Lab)) o = labConvert(o);\n  if (o.a === 0 && o.b === 0) return new Hcl(NaN, 0 < o.l && o.l < 100 ? 0 : NaN, o.l, o.opacity);\n  var h = Math.atan2(o.b, o.a) * degrees;\n  return new Hcl(h < 0 ? h + 360 : h, Math.sqrt(o.a * o.a + o.b * o.b), o.l, o.opacity);\n}\n\nexport function lch(l, c, h, opacity) {\n  return arguments.length === 1 ? hclConvert(l) : new Hcl(h, c, l, opacity == null ? 1 : opacity);\n}\n\nexport function hcl(h, c, l, opacity) {\n  return arguments.length === 1 ? hclConvert(h) : new Hcl(h, c, l, opacity == null ? 1 : opacity);\n}\n\nexport function Hcl(h, c, l, opacity) {\n  this.h = +h;\n  this.c = +c;\n  this.l = +l;\n  this.opacity = +opacity;\n}\n\nfunction hcl2lab(o) {\n  if (isNaN(o.h)) return new Lab(o.l, 0, 0, o.opacity);\n  var h = o.h * radians;\n  return new Lab(o.l, Math.cos(h) * o.c, Math.sin(h) * o.c, o.opacity);\n}\n\ndefine(Hcl, hcl, extend(Color, {\n  brighter(k) {\n    return new Hcl(this.h, this.c, this.l + K * (k == null ? 1 : k), this.opacity);\n  },\n  darker(k) {\n    return new Hcl(this.h, this.c, this.l - K * (k == null ? 1 : k), this.opacity);\n  },\n  rgb() {\n    return hcl2lab(this).rgb();\n  }\n}));\n","import define, {extend} from \"./define.js\";\nimport {Color, rgbConvert, Rgb, darker, brighter} from \"./color.js\";\nimport {degrees, radians} from \"./math.js\";\n\nvar A = -0.14861,\n    B = +1.78277,\n    C = -0.29227,\n    D = -0.90649,\n    E = +1.97294,\n    ED = E * D,\n    EB = E * B,\n    BC_DA = B * C - D * A;\n\nfunction cubehelixConvert(o) {\n  if (o instanceof Cubehelix) return new Cubehelix(o.h, o.s, o.l, o.opacity);\n  if (!(o instanceof Rgb)) o = rgbConvert(o);\n  var r = o.r / 255,\n      g = o.g / 255,\n      b = o.b / 255,\n      l = (BC_DA * b + ED * r - EB * g) / (BC_DA + ED - EB),\n      bl = b - l,\n      k = (E * (g - l) - C * bl) / D,\n      s = Math.sqrt(k * k + bl * bl) / (E * l * (1 - l)), // NaN if l=0 or l=1\n      h = s ? Math.atan2(k, bl) * degrees - 120 : NaN;\n  return new Cubehelix(h < 0 ? h + 360 : h, s, l, o.opacity);\n}\n\nexport default function cubehelix(h, s, l, opacity) {\n  return arguments.length === 1 ? cubehelixConvert(h) : new Cubehelix(h, s, l, opacity == null ? 1 : opacity);\n}\n\nexport function Cubehelix(h, s, l, opacity) {\n  this.h = +h;\n  this.s = +s;\n  this.l = +l;\n  this.opacity = +opacity;\n}\n\ndefine(Cubehelix, cubehelix, extend(Color, {\n  brighter(k) {\n    k = k == null ? brighter : Math.pow(brighter, k);\n    return new Cubehelix(this.h, this.s, this.l * k, this.opacity);\n  },\n  darker(k) {\n    k = k == null ? darker : Math.pow(darker, k);\n    return new Cubehelix(this.h, this.s, this.l * k, this.opacity);\n  },\n  rgb() {\n    var h = isNaN(this.h) ? 0 : (this.h + 120) * radians,\n        l = +this.l,\n        a = isNaN(this.s) ? 0 : this.s * l * (1 - l),\n        cosh = Math.cos(h),\n        sinh = Math.sin(h);\n    return new Rgb(\n      255 * (l + a * (A * cosh + B * sinh)),\n      255 * (l + a * (C * cosh + D * sinh)),\n      255 * (l + a * (E * cosh)),\n      this.opacity\n    );\n  }\n}));\n","export function basis(t1, v0, v1, v2, v3) {\n  var t2 = t1 * t1, t3 = t2 * t1;\n  return ((1 - 3 * t1 + 3 * t2 - t3) * v0\n      + (4 - 6 * t2 + 3 * t3) * v1\n      + (1 + 3 * t1 + 3 * t2 - 3 * t3) * v2\n      + t3 * v3) / 6;\n}\n\nexport default function(values) {\n  var n = values.length - 1;\n  return function(t) {\n    var i = t <= 0 ? (t = 0) : t >= 1 ? (t = 1, n - 1) : Math.floor(t * n),\n        v1 = values[i],\n        v2 = values[i + 1],\n        v0 = i > 0 ? values[i - 1] : 2 * v1 - v2,\n        v3 = i < n - 1 ? values[i + 2] : 2 * v2 - v1;\n    return basis((t - i / n) * n, v0, v1, v2, v3);\n  };\n}\n","import {basis} from \"./basis.js\";\n\nexport default function(values) {\n  var n = values.length;\n  return function(t) {\n    var i = Math.floor(((t %= 1) < 0 ? ++t : t) * n),\n        v0 = values[(i + n - 1) % n],\n        v1 = values[i % n],\n        v2 = values[(i + 1) % n],\n        v3 = values[(i + 2) % n];\n    return basis((t - i / n) * n, v0, v1, v2, v3);\n  };\n}\n","export default x => () => x;\n","import constant from \"./constant.js\";\n\nfunction linear(a, d) {\n  return function(t) {\n    return a + t * d;\n  };\n}\n\nfunction exponential(a, b, y) {\n  return a = Math.pow(a, y), b = Math.pow(b, y) - a, y = 1 / y, function(t) {\n    return Math.pow(a + t * b, y);\n  };\n}\n\nexport function hue(a, b) {\n  var d = b - a;\n  return d ? linear(a, d > 180 || d < -180 ? d - 360 * Math.round(d / 360) : d) : constant(isNaN(a) ? b : a);\n}\n\nexport function gamma(y) {\n  return (y = +y) === 1 ? nogamma : function(a, b) {\n    return b - a ? exponential(a, b, y) : constant(isNaN(a) ? b : a);\n  };\n}\n\nexport default function nogamma(a, b) {\n  var d = b - a;\n  return d ? linear(a, d) : constant(isNaN(a) ? b : a);\n}\n","import {rgb as colorRgb} from \"d3-color\";\nimport basis from \"./basis.js\";\nimport basisClosed from \"./basisClosed.js\";\nimport nogamma, {gamma} from \"./color.js\";\n\nexport default (function rgbGamma(y) {\n  var color = gamma(y);\n\n  function rgb(start, end) {\n    var r = color((start = colorRgb(start)).r, (end = colorRgb(end)).r),\n        g = color(start.g, end.g),\n        b = color(start.b, end.b),\n        opacity = nogamma(start.opacity, end.opacity);\n    return function(t) {\n      start.r = r(t);\n      start.g = g(t);\n      start.b = b(t);\n      start.opacity = opacity(t);\n      return start + \"\";\n    };\n  }\n\n  rgb.gamma = rgbGamma;\n\n  return rgb;\n})(1);\n\nfunction rgbSpline(spline) {\n  return function(colors) {\n    var n = colors.length,\n        r = new Array(n),\n        g = new Array(n),\n        b = new Array(n),\n        i, color;\n    for (i = 0; i < n; ++i) {\n      color = colorRgb(colors[i]);\n      r[i] = color.r || 0;\n      g[i] = color.g || 0;\n      b[i] = color.b || 0;\n    }\n    r = spline(r);\n    g = spline(g);\n    b = spline(b);\n    color.opacity = 1;\n    return function(t) {\n      color.r = r(t);\n      color.g = g(t);\n      color.b = b(t);\n      return color + \"\";\n    };\n  };\n}\n\nexport var rgbBasis = rgbSpline(basis);\nexport var rgbBasisClosed = rgbSpline(basisClosed);\n","export default function(a, b) {\n  if (!b) b = [];\n  var n = a ? Math.min(b.length, a.length) : 0,\n      c = b.slice(),\n      i;\n  return function(t) {\n    for (i = 0; i < n; ++i) c[i] = a[i] * (1 - t) + b[i] * t;\n    return c;\n  };\n}\n\nexport function isNumberArray(x) {\n  return ArrayBuffer.isView(x) && !(x instanceof DataView);\n}\n","import value from \"./value.js\";\nimport numberArray, {isNumberArray} from \"./numberArray.js\";\n\nexport default function(a, b) {\n  return (isNumberArray(b) ? numberArray : genericArray)(a, b);\n}\n\nexport function genericArray(a, b) {\n  var nb = b ? b.length : 0,\n      na = a ? Math.min(nb, a.length) : 0,\n      x = new Array(na),\n      c = new Array(nb),\n      i;\n\n  for (i = 0; i < na; ++i) x[i] = value(a[i], b[i]);\n  for (; i < nb; ++i) c[i] = b[i];\n\n  return function(t) {\n    for (i = 0; i < na; ++i) c[i] = x[i](t);\n    return c;\n  };\n}\n","export default function(a, b) {\n  var d = new Date;\n  return a = +a, b = +b, function(t) {\n    return d.setTime(a * (1 - t) + b * t), d;\n  };\n}\n","export default function(a, b) {\n  return a = +a, b = +b, function(t) {\n    return a * (1 - t) + b * t;\n  };\n}\n","import value from \"./value.js\";\n\nexport default function(a, b) {\n  var i = {},\n      c = {},\n      k;\n\n  if (a === null || typeof a !== \"object\") a = {};\n  if (b === null || typeof b !== \"object\") b = {};\n\n  for (k in b) {\n    if (k in a) {\n      i[k] = value(a[k], b[k]);\n    } else {\n      c[k] = b[k];\n    }\n  }\n\n  return function(t) {\n    for (k in i) c[k] = i[k](t);\n    return c;\n  };\n}\n","import number from \"./number.js\";\n\nvar reA = /[-+]?(?:\\d+\\.?\\d*|\\.?\\d+)(?:[eE][-+]?\\d+)?/g,\n    reB = new RegExp(reA.source, \"g\");\n\nfunction zero(b) {\n  return function() {\n    return b;\n  };\n}\n\nfunction one(b) {\n  return function(t) {\n    return b(t) + \"\";\n  };\n}\n\nexport default function(a, b) {\n  var bi = reA.lastIndex = reB.lastIndex = 0, // scan index for next number in b\n      am, // current match in a\n      bm, // current match in b\n      bs, // string preceding current number in b, if any\n      i = -1, // index in s\n      s = [], // string constants and placeholders\n      q = []; // number interpolators\n\n  // Coerce inputs to strings.\n  a = a + \"\", b = b + \"\";\n\n  // Interpolate pairs of numbers in a & b.\n  while ((am = reA.exec(a))\n      && (bm = reB.exec(b))) {\n    if ((bs = bm.index) > bi) { // a string precedes the next number in b\n      bs = b.slice(bi, bs);\n      if (s[i]) s[i] += bs; // coalesce with previous string\n      else s[++i] = bs;\n    }\n    if ((am = am[0]) === (bm = bm[0])) { // numbers in a & b match\n      if (s[i]) s[i] += bm; // coalesce with previous string\n      else s[++i] = bm;\n    } else { // interpolate non-matching numbers\n      s[++i] = null;\n      q.push({i: i, x: number(am, bm)});\n    }\n    bi = reB.lastIndex;\n  }\n\n  // Add remains of b.\n  if (bi < b.length) {\n    bs = b.slice(bi);\n    if (s[i]) s[i] += bs; // coalesce with previous string\n    else s[++i] = bs;\n  }\n\n  // Special optimization for only a single match.\n  // Otherwise, interpolate each of the numbers and rejoin the string.\n  return s.length < 2 ? (q[0]\n      ? one(q[0].x)\n      : zero(b))\n      : (b = q.length, function(t) {\n          for (var i = 0, o; i < b; ++i) s[(o = q[i]).i] = o.x(t);\n          return s.join(\"\");\n        });\n}\n","import {color} from \"d3-color\";\nimport rgb from \"./rgb.js\";\nimport {genericArray} from \"./array.js\";\nimport date from \"./date.js\";\nimport number from \"./number.js\";\nimport object from \"./object.js\";\nimport string from \"./string.js\";\nimport constant from \"./constant.js\";\nimport numberArray, {isNumberArray} from \"./numberArray.js\";\n\nexport default function(a, b) {\n  var t = typeof b, c;\n  return b == null || t === \"boolean\" ? constant(b)\n      : (t === \"number\" ? number\n      : t === \"string\" ? ((c = color(b)) ? (b = c, rgb) : string)\n      : b instanceof color ? rgb\n      : b instanceof Date ? date\n      : isNumberArray(b) ? numberArray\n      : Array.isArray(b) ? genericArray\n      : typeof b.valueOf !== \"function\" && typeof b.toString !== \"function\" || isNaN(b) ? object\n      : number)(a, b);\n}\n","import {hsl as colorHsl} from \"d3-color\";\nimport color, {hue} from \"./color.js\";\n\nfunction hsl(hue) {\n  return function(start, end) {\n    var h = hue((start = colorHsl(start)).h, (end = colorHsl(end)).h),\n        s = color(start.s, end.s),\n        l = color(start.l, end.l),\n        opacity = color(start.opacity, end.opacity);\n    return function(t) {\n      start.h = h(t);\n      start.s = s(t);\n      start.l = l(t);\n      start.opacity = opacity(t);\n      return start + \"\";\n    };\n  }\n}\n\nexport default hsl(hue);\nexport var hslLong = hsl(color);\n","import {lab as colorLab} from \"d3-color\";\nimport color from \"./color.js\";\n\nexport default function lab(start, end) {\n  var l = color((start = colorLab(start)).l, (end = colorLab(end)).l),\n      a = color(start.a, end.a),\n      b = color(start.b, end.b),\n      opacity = color(start.opacity, end.opacity);\n  return function(t) {\n    start.l = l(t);\n    start.a = a(t);\n    start.b = b(t);\n    start.opacity = opacity(t);\n    return start + \"\";\n  };\n}\n","import {hcl as colorHcl} from \"d3-color\";\nimport color, {hue} from \"./color.js\";\n\nfunction hcl(hue) {\n  return function(start, end) {\n    var h = hue((start = colorHcl(start)).h, (end = colorHcl(end)).h),\n        c = color(start.c, end.c),\n        l = color(start.l, end.l),\n        opacity = color(start.opacity, end.opacity);\n    return function(t) {\n      start.h = h(t);\n      start.c = c(t);\n      start.l = l(t);\n      start.opacity = opacity(t);\n      return start + \"\";\n    };\n  }\n}\n\nexport default hcl(hue);\nexport var hclLong = hcl(color);\n","import {cubehelix as colorCubehelix} from \"d3-color\";\nimport color, {hue} from \"./color.js\";\n\nfunction cubehelix(hue) {\n  return (function cubehelixGamma(y) {\n    y = +y;\n\n    function cubehelix(start, end) {\n      var h = hue((start = colorCubehelix(start)).h, (end = colorCubehelix(end)).h),\n          s = color(start.s, end.s),\n          l = color(start.l, end.l),\n          opacity = color(start.opacity, end.opacity);\n      return function(t) {\n        start.h = h(t);\n        start.s = s(t);\n        start.l = l(Math.pow(t, y));\n        start.opacity = opacity(t);\n        return start + \"\";\n      };\n    }\n\n    cubehelix.gamma = cubehelixGamma;\n\n    return cubehelix;\n  })(1);\n}\n\nexport default cubehelix(hue);\nexport var cubehelixLong = cubehelix(color);\n","import {default as value} from \"./value.js\";\n\nexport default function piecewise(interpolate, values) {\n  if (values === undefined) values = interpolate, interpolate = value;\n  var i = 0, n = values.length - 1, v = values[0], I = new Array(n < 0 ? 0 : n);\n  while (i < n) I[i] = interpolate(v, v = values[++i]);\n  return function(t) {\n    var i = Math.max(0, Math.min(n - 1, Math.floor(t *= n)));\n    return I[i](t - i);\n  };\n}\n","// Easings from https://easings.net/\nimport { msElapsedTimer, relativeTimer, ticksElapsedTimer, type TimerSource } from '../flow/Timer.js';\nimport { interpolate } from '../data/Interpolate.js';\nimport type { HasCompletion } from '../flow/Types.js';\n\n\nconst sqrt = Math.sqrt;\nconst pow = Math.pow;\nconst cos = Math.cos;\n//eslint-disable-next-line @typescript-eslint/naming-convention\nconst pi = Math.PI;\nconst sin = Math.sin;\n/*\ntype RelativeTimer = {\n  reset(): void\n  elapsed(): number\n  isDone(): boolean\n}\n\ntype TimerSource = (upperBound: number) => RelativeTimer;\n\nconst msRelativeTimer = function (upperBound: number): RelativeTimer {\n  let start = performance.now();\n  return {\n    reset: () => {\n      start = performance.now();\n    },\n    elapsed: () => clamp((performance.now() - start) / upperBound),\n    isDone: () => (performance.now() - start) >= upperBound,\n  };\n};\n\nconst tickRelativeTimer = function (upperBound: number): RelativeTimer {\n  let start = 0;\n  return {\n    reset: () => {\n      start = 0;\n    },\n    elapsed: () => clamp(start++ / upperBound),\n    isDone: () => start >= upperBound,\n  };\n};\n*/\n\nexport type EasingFn = (x: number) => number;\n\n/**\n * Creates an easing based on clock time. Time\n * starts being counted when easing function is created.\n * @example Time based easing\n * ```\n * import { Easings } from \"https://unpkg.com/ixfx/dist/modulation.js\";\n * const t = Easings.time(`quintIn`, 5*1000); // Will take 5 seconds to complete\n * ...\n * t.compute(); // Get current value of easing\n * t.reset();   // Reset to 0\n * t.isDone;    // _True_ if finished\n * ```\n * @param nameOrFunction Name of easing, or an easing function\n * @param durationMs Duration in milliseconds\n * @returns Easing\n */\nexport const time = function (\n  nameOrFunction: EasingName | EasingFn,\n  durationMs: number\n): Easing {\n  return create(nameOrFunction, durationMs, msElapsedTimer);\n};\n\n/**\n * Creates an easing based on ticks\n *\n * @example Tick-based easing\n * ```\n * import { Easings } from \"https://unpkg.com/ixfx/dist/modulation.js\";\n * const t = Easings.tick(`sineIn`, 1000);   // Will take 1000 ticks to complete\n * t.compute(); // Each call to `compute` progresses the tick count\n * t.reset();   // Reset to 0\n * t.isDone;    // _True_ if finished\n * ```\n * @param nameOrFn Name of easing, or an easing function\n * @param durationTicks Duration in ticks\n * @returns Easing\n */\nexport const tick = function (\n  nameOrFunction: EasingName | EasingFn,\n  durationTicks: number\n): Easing {\n  return create(nameOrFunction, durationTicks, ticksElapsedTimer);\n};\n\n/**\n * 'Ease' from `0` to `1` over a delicious curve. Commonly used for animation\n * and basic modelling of phyical motion.\n *\n * Create via {@link tick} or {@link time}, call `compute` to calculate the next\n * value in the progression, until you reach `1` or `isDone` returns true.\n *\n */\nexport type Easing = HasCompletion & {\n  /**\n   * Computes the current value of the easing\n   *\n   * @returns {number}\n   */\n  compute(): number;\n\n  /**\n   * Reset the easing\n   */\n  reset(): void;\n  /**\n   * Returns true if the easing is complete\n   *\n   * @returns {boolean}\n   */\n  get isDone(): boolean;\n};\n\n/**\n * Creates a new easing by name\n *\n * ```js\n * import { Easings } from \"https://unpkg.com/ixfx/dist/modulation.js\";\n * const e = Easings.create(`circInOut`, 1000, msElapsedTimer);\n * ```\n * @param nameOrFn Name of easing, or an easing function\n * @param duration Duration (meaning depends on timer source)\n * @param timerSource Timer source. Eg {@link tickRelativeTimer}, {@link msRelativeTimer}\n * @returns\n */\nconst create = function (\n  nameOrFunction: EasingName | EasingFn,\n  duration: number,\n  timerSource: TimerSource\n): Easing {\n  const fn = typeof nameOrFunction === `function` ? nameOrFunction : get(nameOrFunction);\n  if (fn === undefined) {\n    const error = typeof nameOrFunction === `string` ? new Error(`Easing function not found: ${ nameOrFunction }`) : new Error(`Easing function not found`);\n    throw error;\n  }\n\n  // Get a relative version of timer\n  const timer = relativeTimer(duration, {\n    timer: timerSource(),\n    clampValue: true,\n  });\n  let startCount = 1;\n\n  return {\n    get isDone() {\n      return timer.isDone;\n    },\n    get runState() {\n      if (timer.isDone) return `idle`;\n      return `scheduled`;\n    },\n    /**\n     * Returns 1 if it has been created, returns +1 for each additional time the timer has been reset.\n     */\n    get startCount() {\n      return startCount;\n    },\n    compute: () => {\n      const relative = timer.elapsed;\n      return fn(relative);\n    },\n    reset: () => {\n      timer.reset();\n      startCount++;\n    },\n  };\n};\n\n/**\n * Creates an easing function using a simple cubic bezier defined by two points.\n *\n * Eg: https://cubic-bezier.com/#0,1.33,1,-1.25\n *  a:0, b: 1.33, c: 1, d: -1.25\n *\n * ```js\n * import { Easings } from \"https://unpkg.com/ixfx/dist/modulation.js\";\n * // Time-based easing using bezier\n * const e = Easings.time(fromCubicBezier(1.33, -1.25), 1000);\n * e.compute();\n * ```\n * @param b\n * @param d\n * @param t\n * @returns Value\n */\nexport const fromCubicBezier =\n  (b: number, d: number): EasingFn =>\n    (t: number) => {\n      const s = 1 - t;\n      const s2 = s * s;\n      const t2 = t * t;\n      const t3 = t2 * t;\n      return 3 * b * s2 * t + 3 * d * s * t2 + t3;\n    };\n\n/**\n * Returns a mix of two easing functions.\n *\n * ```js\n * import { Easings } from \"https://unpkg.com/ixfx/dist/modulation.js\";\n * // Get a 50/50 mix of two easing functions at t=0.25\n * Easings.mix(0.5, 0.25, Easings.functions.sineIn, Easings.functions.sineOut);\n *\n * // 10% of sineIn, 90% of sineOut\n * Easings.mix(0.90, 0.25, Easings.functions.sineIn, Easings.functions.sineOut);\n * ```\n * @param amt 'Progress' value passed to the easing functions\n * @param balance Mix between a and b\n * @param easingA\n * @param easingB\n * @returns Numeric value\n */\nexport const mix = (\n  amt: number,\n  balance: number,\n  easingA: EasingFn,\n  easingB: EasingFn\n) => interpolate(balance, easingA(amt), easingB(amt));\n\n/**\n * Returns a 'crossfade' of two easing functions, synchronised with the progress through the easing. That is:\n * * 0.0 will yield 100% of easingA at its `easing(0)` value.\n * * 0.2 will yield 80% of a, 20% of b, with both at their `easing(0.2)` values\n * * 0.5 will yield 50% of both functions both at their `easing(0.5)` values\n * * 0.8 will yield 20% of a, 80% of a, with both at their `easing(0.8)` values\n * * 1.0 will yield 100% of easingB at its `easing(1)` value.\n *\n * So easingB will only ever kick in at higher `amt` values and `easingA` will only be present in lower valus.\n *\n * ```js\n * import { Easings } from \"https://unpkg.com/ixfx/dist/modulation.js\";\n * Easings.crossFade(0.5, Easings.functions.sineIn, Easings.functions.sineOut);\n * ```\n * @param amt\n * @param easingA\n * @param easingB\n * @returns Numeric value\n */\nexport const crossfade = (amt: number, easingA: EasingFn, easingB: EasingFn) =>\n  mix(amt, amt, easingA, easingB);\n\n/**\n * Easing name\n */\nexport type EasingName = keyof typeof functions;\n\n/**\n * Returns an easing function by name, or _undefined_ if not found.\n * This is a manual way of working with easing functions. If you want to\n * ease over time or ticks, use `Flow.Timer.msElapsedTimer` or `Flow.Timer.ticksElapsedTimer`.\n *\n * ```js\n * const fn = Easings.get(`sineIn`);\n * // Returns 'eased' transformation of 0.5\n * fn(0.5);\n * ```\n *\n * This function is useful if trying to resolve an easing by string. If you\n * know in advance what easing to use, you could also access it via\n * `Easings.functions.NAME`, eg `Easings.functions.sineIn`.\n * @param easingName eg `sineIn`\n * @returns Easing function\n */\nexport const get = function (easingName: EasingName): EasingFn | undefined {\n  if (easingName === null) throw new Error(`easingName is null`);\n  if (easingName === undefined) throw new Error(`easingName is undefined`);\n  const name = easingName.toLocaleLowerCase();\n  const found = Object.entries(functions).find(\n    ([ k, _v ]) => k.toLocaleLowerCase() === name\n  );\n\n  if (found === undefined) return found;\n  return found[ 1 ];\n};\n\n/**\n * Iterate over available easings.\n * @private\n * @returns Returns list of available easing names\n */\nexport function* getEasings(): Iterable<string> {\n  yield* Object.keys(functions);\n};\n\n/**\n * Returns a roughly gaussian easing function\n * ```js\n * import { Easings } from \"https://unpkg.com/ixfx/dist/modulation.js\";\n * const fn = Easings.gaussian();\n * ```\n *\n * Try different positive and negative values for `stdDev` to pinch\n * or flatten the bell shape.\n * @param standardDeviation\n * @returns\n */\nexport const gaussian = (standardDeviation = 0.4): EasingFn => {\n  const a = 1 / sqrt(2 * pi);\n  const mean = 0.5;\n\n  return (t: number) => {\n    const f = a / standardDeviation;\n    // p:-8 pinched\n    //eslint-disable-next-line functional/no-let\n    let p = -2.5; // -1/1.25;\n    //eslint-disable-next-line functional/no-let\n    let c = (t - mean) / standardDeviation;\n    c *= c;\n    p *= c;\n    const v = f * pow(Math.E, p); // * (2/pi);//0.62;\n    if (v > 1) return 1;\n    if (v < 0) return 0;\n\n    //if (v >1) console.log(v);\n    //if (v < 0) console.log(v);\n    return v;\n  };\n};\n\nconst bounceOut = function (x: number): number {\n  const n1 = 7.5625;\n  const d1 = 2.75;\n\n  if (x < 1 / d1) {\n    return n1 * x * x;\n  } else if (x < 2 / d1) {\n    return n1 * (x -= 1.5 / d1) * x + 0.75;\n  } else if (x < 2.5 / d1) {\n    return n1 * (x -= 2.25 / d1) * x + 0.9375;\n  } else {\n    return n1 * (x -= 2.625 / d1) * x + 0.984_375;\n  }\n};\n\nconst quintIn = (x: number): number => x * x * x * x * x;\nconst quintOut = (x: number): number => 1 - pow(1 - x, 5);\nconst arch = (x: number): number => x * (1 - x) * 4;\n\n/**\n * Weighted average\n * \n * `slowDownFactor` \n * @param currentValue \n * @param targetValue \n * @param slowDownFactor \n * @returns \n */\nexport const weightedAverage = (currentValue: number, targetValue: number, slowDownFactor: number) => {\n  return ((currentValue * (slowDownFactor - 1)) + targetValue) / slowDownFactor\n}\n\nexport const functions = {\n  smoothstep: (x: number): number => x * x * (3 - 2 * x),\n  smootherstep: (x: number): number => (x * (x * 6 - 15) + 10) * x * x * x,\n  arch,\n  bell: gaussian(),\n  sineIn: (x: number): number => 1 - cos((x * pi) / 2),\n  sineOut: (x: number): number => sin((x * pi) / 2),\n  quadIn: (x: number): number => x * x,\n  quadOut: (x: number): number => 1 - (1 - x) * (1 - x),\n  sineInOut: (x: number): number => -(cos(pi * x) - 1) / 2,\n  quadInOut: (x: number): number =>\n    x < 0.5 ? 2 * x * x : 1 - pow(-2 * x + 2, 2) / 2,\n  cubicIn: (x: number): number => x * x * x,\n  cubicOut: (x: number): number => 1 - pow(1 - x, 3),\n  quartIn: (x: number): number => x * x * x * x,\n  quartOut: (x: number): number => 1 - pow(1 - x, 4),\n  quintIn,\n  quintOut, //: (x: number): number => 1 - pow(1 - x, 5),\n  expoIn: (x: number): number => (x === 0 ? 0 : pow(2, 10 * x - 10)),\n  expoOut: (x: number): number => (x === 1 ? 1 : 1 - pow(2, -10 * x)),\n  quintInOut: (x: number): number =>\n    x < 0.5 ? 16 * x * x * x * x * x : 1 - pow(-2 * x + 2, 5) / 2,\n  expoInOut: (x: number): number =>\n    x === 0\n      ? 0\n      : x === 1\n        ? 1\n        // eslint-disable-next-line unicorn/no-nested-ternary\n        : x < 0.5\n          ? pow(2, 20 * x - 10) / 2\n          : (2 - pow(2, -20 * x + 10)) / 2,\n  circIn: (x: number): number => 1 - sqrt(1 - pow(x, 2)),\n  circOut: (x: number): number => sqrt(1 - pow(x - 1, 2)),\n  backIn: (x: number): number => {\n    const c1 = 1.701_58;\n    const c3 = c1 + 1;\n\n    return c3 * x * x * x - c1 * x * x;\n  },\n  backOut: (x: number): number => {\n    const c1 = 1.701_58;\n    const c3 = c1 + 1;\n\n    return 1 + c3 * pow(x - 1, 3) + c1 * pow(x - 1, 2);\n  },\n  circInOut: (x: number): number =>\n    x < 0.5\n      ? (1 - sqrt(1 - pow(2 * x, 2))) / 2\n      : (sqrt(1 - pow(-2 * x + 2, 2)) + 1) / 2,\n  backInOut: (x: number): number => {\n    const c1 = 1.701_58;\n    const c2 = c1 * 1.525;\n\n    return x < 0.5\n      ? (pow(2 * x, 2) * ((c2 + 1) * 2 * x - c2)) / 2\n      : (pow(2 * x - 2, 2) * ((c2 + 1) * (x * 2 - 2) + c2) + 2) / 2;\n  },\n  elasticIn: (x: number): number => {\n    const c4 = (2 * pi) / 3;\n\n    return x === 0\n      ? 0\n      : (x === 1\n        ? 1\n        : -pow(2, 10 * x - 10) * sin((x * 10 - 10.75) * c4));\n  },\n  elasticOut: (x: number): number => {\n    const c4 = (2 * pi) / 3;\n\n    return x === 0\n      ? 0\n      : (x === 1\n        ? 1\n        : pow(2, -10 * x) * sin((x * 10 - 0.75) * c4) + 1);\n  },\n  bounceIn: (x: number): number => 1 - bounceOut(1 - x),\n  bounceOut: bounceOut,\n  elasticInOut: (x: number): number => {\n    const c5 = (2 * pi) / 4.5;\n\n    return x === 0\n      ? 0\n      : x === 1\n        ? 1\n        // eslint-disable-next-line unicorn/no-nested-ternary\n        : x < 0.5\n          ? -(pow(2, 20 * x - 10) * sin((20 * x - 11.125) * c5)) / 2\n          : (pow(2, -20 * x + 10) * sin((20 * x - 11.125) * c5)) / 2 + 1;\n  },\n  bounceInOut: (x: number): number =>\n    x < 0.5 ? (1 - bounceOut(1 - 2 * x)) / 2 : (1 + bounceOut(2 * x - 1)) / 2,\n};\n","import { throwNumberTest, throwIntegerTest } from '../Guards.js';\n\n/**\n * Wraps an integer number within a specified range, defaulting to degrees (0-360). Use {@link wrap} for floating-point wrapping.\n *\n * This is useful for calculations involving degree angles and hue, which wrap from 0-360.\n * Eg: to add 200 to 200, we don't want 400, but 40.\n *\n * ```js\n * const v = wrapInteger(200+200, 0, 360); // 40\n * ```\n *\n * Or if we minus 100 from 10, we don't want -90 but 270\n * ```js\n * const v = wrapInteger(10-100, 0, 360); // 270\n * ```\n *\n * `wrapInteger` uses 0-360 as a default range, so both of these\n * examples could just as well be:\n *\n * ```js\n * wrapInteger(200+200);  // 40\n * wrapInteger(10-100);  // 270\n * ```\n *\n * Non-zero starting points can be used. A range of 20-70:\n * ```js\n * const v = wrapInteger(-20, 20, 70); // 50\n * ```\n *\n * Note that the minimum value is inclusive, while the maximum is _exclusive_.\n * So with the default range of 0-360, 360 is never reached:\n *\n * ```js\n * wrapInteger(360); // 0\n * wrapInteger(361); // 1\n * ```\n *\n * If you just want to lock values to a range without wrapping, consider {@link clamp}.\n *\n * @param v Value to wrap\n * @param min Integer minimum of range (default: 0). Inclusive\n * @param max Integer maximum of range (default: 360). Exlusive\n * @returns\n */\nexport const wrapInteger = (v: number, min = 0, max = 360) => {\n  throwIntegerTest(v, undefined, `v`);\n  throwIntegerTest(min, undefined, `min`);\n  throwIntegerTest(max, undefined, `max`);\n\n  if (v === min) return min;\n  if (v === max) return min; // Wraps\n  if (v > 0 && v < min) v += min;\n\n  v -= min;\n  max -= min;\n  v = v % max;\n\n  if (v < 0) v = max - Math.abs(v) + min;\n  return v + min;\n};\n\n/**\n * Wraps floating point numbers to be within a range (default: 0..1). Use {@link wrapInteger} if you want to wrap integer values.\n *\n * This logic makes sense for some things like rotation angle.\n *\n * If you just want to lock values to a range without wrapping, consider {@link clamp}.\n *\n * ```js\n * wrap(1.2);   // 0.2\n * wrap(2);     // 1.0\n * wrap(-0.2); // 0.8\n * ```\n *\n * A range can be provided too:\n * ```js\n * wrap(30, 20, 50);  \t // 30\n * wrap(60, 20, 50);    //  30\n * ```\n * @param v\n * @param min\n * @param max\n * @returns\n */\nexport const wrap = (v: number, min = 0, max = 1) => {\n  throwNumberTest(v, ``, `min`);\n  throwNumberTest(min, ``, `min`);\n  throwNumberTest(max, ``, `max`);\n\n  if (v === min) return min;\n  if (v === max) return min; // Wraps\n\n  while (v <= min || v >= max) {\n    if (v === max) break;\n    if (v === min) break;\n    if (v > max) {\n      v = min + (v - max);\n    } else if (v < min) {\n      v = max - (min - v);\n    }\n  }\n  return v;\n};\n\n/**\n * Performs a calculation within a wrapping number range. This is a lower-level function.\n * See also: {@link wrapInteger} for simple wrapping within a range.\n *\n * `min` and `max` define the start and end of the valid range, inclusive. Eg for hue degrees it'd be 0, 360.\n * `a` and `b` is the range you want to work in.\n *\n * For example, let's say you want to get the middle point between a hue of 30 and a hue of 330 (ie warmer colours):\n * ```js\n * wrapRange(0,360, (distance) => {\n *  // for a:0 and b:330, distance would be 90 from 30 degrees to 330 (via zero)\n *  return distance * 0.5; // eg return middle point\n * }, 30, 330);\n * ```\n *\n * The return value of the callback should be in the range of 0-distance. `wrapRange` will subsequently\n * conform it to the `min` and `max` range before it's returned to the caller.\n *\n * @param a Output start (eg. 60)\n * @param b Output end (eg 300)\n * @param min Range start (eg 0)\n * @param max Range end (eg 360)\n * @param fn Returns a computed value from 0 to `distance`.\n * @returns\n */\nexport const wrapRange = (\n  min: number,\n  max: number,\n  fn: (distance: number) => number,\n  a: number,\n  b: number\n) => {\n  //eslint-disable-next-line functional/no-let\n  let r = 0;\n  // No wrapping\n  const distF = Math.abs(b - a);\n  // When b is wrapped forwards\n  const distFwrap = Math.abs(max - a + b);\n  // When b is wrapped backwards (10, 300)\n  const distBWrap = Math.abs(a + (360 - b));\n\n  const distMin = Math.min(distF, distFwrap, distBWrap);\n  if (distMin === distBWrap) {\n    // (10, 300) = 70\n    r = a - fn(distMin);\n  } else if (distMin === distFwrap) {\n    // (300, 60) = 120\n    r = a + fn(distMin);\n  } else {\n    // Forwards or backwards without wrapping\n    if (a > b) {\n      // (240,120) -- backwards\n      r = a - fn(distMin);\n    } else {\n      // (120,240) -- forwards\n      r = a + fn(distMin);\n    }\n  }\n  return wrapInteger(r, min, max);\n};\n","import { wrap } from './Wrap.js';\nexport const piPi = Math.PI * 2;\n\n/**\n * Interpolates between `a` and `b` by `amount`. Aka `lerp`.\n *\n * [ixfx Guide](https://clinth.github.io/ixfx-docs/modulation/interpolate/)\n *\n * @example Get the halfway point between 30 and 60\n * ```js\n * import {interpolate} from 'https://unpkg.com/ixfx/dist/data.js';\n * interpolate(0.5, 30, 60);\n * ```\n *\n * Interpolation is often used for animation. In that case, `amount`\n * would start at 0 and you would keep interpolating up to `1`\n * @example\n * ```js\n * import { interpolate } from 'https://unpkg.com/ixfx/dist/data.js';\n * import { percentPingPong } from 'https://unpkg.com/ixfx/dist/modulation.js'\n *\n * // Go back and forth between 0 and 1 by 0.1\n * let pp = percentPingPong(0.1);\n * continuously(() => {\n *  // Get position in ping-pong\n *  const amt = pp.next().value;\n *  // interpolate between Math.PI and Math.PI*2\n *  const v = interpolate(amt, Math.PI, Math.PI*2);\n *  // do something with v...\n * }).start();\n * ```\n *\n * See also {@link Visual.Colour.interpolate | Visual.Colour.interpolate }, {@link Geometry.Points.interpolate | Geometry.Points.interpolate}.\n * @param amount Interpolation amount, between 0 and 1 inclusive\n * @param a Start (ie when `amt` is 0)\n * @param b End (ie. when `amt` is 1)\n * @returns Interpolated value which will be between `a` and `b`.\n */\nexport const interpolate = (amount: number, a: number, b: number): number => {\n  const v = (1 - amount) * a + amount * b;\n  return v;\n};\n\n/**\n * Interpolate between angles `a` and `b` by `amount`. Angles are in radians.\n *\n * ```js\n * import { interpolateAngle } from 'https://unpkg.com/ixfx/dist/data.js';\n * interpolateAngle(0.5, Math.PI, Math.PI/2);\n * ```\n * @param amount\n * @param aRadians\n * @param bRadians\n * @returns\n */\nexport const interpolateAngle = (\n  amount: number,\n  aRadians: number,\n  bRadians: number\n): number => {\n  const t = wrap(bRadians - aRadians, 0, piPi);\n  return interpolate(amount, aRadians, aRadians + (t > Math.PI ? t - piPi : t));\n};\n","import { defaultRandom, type RandomSource } from './Types.js';\nimport { type EasingName, get as EasingGet } from '../modulation/Easing.js';\n/**\n * Options for producing weighted distribution\n */\nexport type WeightedOptions = Readonly<{\n  /**\n   * Easing function to use (optional)\n   */\n  easing?: EasingName;\n  /**\n   * Random source (optional)\n   */\n  source?: RandomSource;\n}>\n/***\n * Returns a random number, 0..1, weighted by a given easing function.\n * Default easing is `quadIn`, which skews towards zero.\n *\n * Use {@link weightedSource} to return a function instead.\n *\n * ```js\n * import * as Random from 'https://unpkg.com/ixfx/dist/random.js';\n * Random.weighted();          // quadIn easing by default, which skews toward low values\n * Random.weighted(`quadOut`); // quadOut favours high values\n * ```\n * @param easingNameOrOpts Options. Uses 'quadIn' by default.\n * @see {@link weightedSource} Returns a function rather than value\n * @returns Random number (0-1)\n */\nexport const weighted = (\n  easingNameOrOptions: EasingName | WeightedOptions = `quadIn`\n): number => weightedSource(easingNameOrOptions)();\n\n/***\n * Returns a random number, 0..1, weighted by a given easing function.\n * Default easing is `quadIn`, which skews towards zero.\n * Use {@link weighted} to get a value directly.\n *\n * ```js\n * import * as Random from 'https://unpkg.com/ixfx/dist/random.js';\n * const r1 = Random.weightedSource();          // quadIn easing by default, which skews toward low values\n * r1(); // Produce a value\n *\n * const r2 = Random.weightedSource(`quadOut`); // quadOut favours high values\n * r2(); // Produce a value\n * ```\n * @param easingName Easing name or options `quadIn` by default.\n * @see {@link weighted} Returns value instead of function\n * @returns Function which returns a weighted random value\n */\nexport const weightedSource = (\n  easingNameOrOptions: EasingName | WeightedOptions = `quadIn`\n): RandomSource => {\n  const options =\n    typeof easingNameOrOptions === `string`\n      ? { easing: easingNameOrOptions }\n      : easingNameOrOptions;\n  const source = options.source ?? defaultRandom;\n  const easingName = options.easing ?? `quadIn`;\n  const easingFunction = EasingGet(easingName);\n  if (easingFunction === undefined) {\n    throw new Error(`Easing function '${ easingName }' not found.`);\n  }\n\n  const compute = (): number => {\n    const r = source();\n    return easingFunction(r);\n  };\n  return compute;\n};","import { clamp } from \"../data/Clamp.js\";\nimport { type RandomSource, defaultRandom } from \"./Types.js\";\nimport type { WeightedOptions } from \"./Weighted.js\";\nimport { numberTest as guardNumberTest, throwFromResult } from '../Guards.js';\nimport { get as EasingGet } from '../modulation/Easing.js';\nexport type WeightedIntegerOptions = WeightedOptions & Readonly<{\n  min?: number;\n  max: number;\n}>;\n/**\n * Random integer, weighted according to an easing function.\n * Number will be inclusive of `min` and below `max`.\n *\n * @example 0..99\n * ```js\n * import * as Random from 'https://unpkg.com/ixfx/dist/random.js';\n * const r = Random.weightedIntegerFn(100);\n * r(); // Produce value\n * ```\n *\n * @example 20..29\n * ```js\n * const r = Random.weightedIntegerFn({ min: 20, max: 30 });\n * r(); // Produce value\n * ```\n *\n * @example  0..99 with 'quadIn' easing\n * ```js\n * const r = Random.weightedInteger({ max: 100, easing: `quadIn` });\n * ```\n *\n * Note: result from easing function will be clamped to\n * the min/max (by default 0-1);\n *\n * @param maxOrOptions Maximum (exclusive)\n * @returns Function that produces a random weighted integer\n */\nexport const weightedIntegerSource = (\n  maxOrOptions: number | WeightedIntegerOptions\n): RandomSource => {\n  const options = typeof maxOrOptions === `number` ? { max: maxOrOptions } : maxOrOptions;\n  const source = options.source ?? defaultRandom;\n  const max = options.max;\n  const min = options.min ?? 0;\n  const easingName = options.easing ?? `quadIn`;\n  if (typeof max === `undefined`) throw new Error(`max field is undefined`);\n  if (typeof easingName !== `string`) {\n    throw new TypeError(`easing field expected to be string`);\n  }\n  throwFromResult(guardNumberTest(max));\n\n  const easingFunction = EasingGet(easingName);\n  if (easingFunction === undefined) {\n    throw new Error(`Easing '${ easingName }' not found`);\n  }\n\n  throwFromResult(guardNumberTest(min));\n  if (max <= min) throw new Error(`Max should be greater than min`);\n\n  const compute = (): number => {\n    const r = clamp(easingFunction(source()));\n    return Math.floor(r * (max - min)) + min;\n  };\n  return compute;\n};\n\n/**\n * @example 0..99\n * ```js\n * import * as Random from 'https://unpkg.com/ixfx/dist/random.js';\n * Random.weightedInteger(100);\n * ```\n *\n * @example 20..29\n * ```js\n * Random.weightedInteger({ min: 20, max: 30 });\n * ```\n *\n * @example  0..99 with 'quadIn' easing\n * ```js\n * Random.weightedInteger({ max: 100, easing: `quadIn` })\n * ```\n * @inheritDoc {@link weightedIntegerSource}\n * @param maxOrOptions\n * @returns Random weighted integer\n */\nexport const weightedInteger = (maxOrOptions: number | WeightedIntegerOptions): number =>\n  weightedIntegerSource(maxOrOptions)();","import { toStringAbbreviate } from \"./Text.js\";\n\n/**\n * If input is a string, it is returned.\n * If input is a primitive type, in-built string coersion is used.\n * Otherwise, it returns the result of `JSON.stringify()`.\n * \n * @param itemToMakeStringFor \n * @returns \n */\nexport const toStringDefault = (itemToMakeStringFor: any): string => {\n  switch (typeof itemToMakeStringFor) {\n    case `string`: {\n      return itemToMakeStringFor;\n    }\n    case `object`: {\n      return JSON.stringify(itemToMakeStringFor);\n    }\n    default: {\n      return `` + itemToMakeStringFor;\n    }\n  }\n}\n// typeof itemToMakeStringFor === `string`\n//   ? itemToMakeStringFor\n//   : JSON.stringify(itemToMakeStringFor);\n\n/**\n * If input is a string, it is returned.\n * Otherwise, it returns the result of JSON.stringify() with fields ordered.\n * \n * This allows for more consistent comparisons when object field orders are different but values the same.\n * @param itemToMakeStringFor \n * @returns \n */\nexport const toStringOrdered = (itemToMakeStringFor: any) => {\n  if (typeof itemToMakeStringFor === `string`) return itemToMakeStringFor;\n  const allKeys = new Set<string>();\n  // eslint-disable-next-line @typescript-eslint/no-unsafe-return\n  JSON.stringify(itemToMakeStringFor, (key: string, value: any) => (allKeys.add(key), value));\n  return JSON.stringify(itemToMakeStringFor, [ ...allKeys ].sort());\n}\n\n/**\n * Function that returns true if `a` and `b` are considered equal\n */\nexport type IsEqual<T> = (a: T, b: T) => boolean;\n\n/**\n * Default comparer function is equiv to checking `a === b`.\n * Use {@link isEqualValueDefault} to compare by value, via comparing JSON string representation.\n */\nexport const isEqualDefault = <T>(a: T, b: T): boolean => a === b;\n\n/**\n * Comparer returns true if string representation of `a` and `b` are equal.\n * Use {@link isEqualDefault} to compare using === semantics\n * Uses `toStringDefault` to generate a string representation (via `JSON.stringify`).\n * \n * Returns _false_ if the ordering of fields is different, even though values are identical:\n * ```js\n * isEqualValueDefault({ a: 10, b: 20}, { b: 20, a: 10 }); // false\n * ```\n * \n * Use {@link isEqualValueIgnoreOrder} to ignore order (with an overhead of additional processing).\n * ```js\n * isEqualValueIgnoreOrder({ a: 10, b: 20}, { b: 20, a: 10 }); // true\n * ```\n * \n * Use {@link isEqualValuePartial} to partially match `b` against `a`.\n * @returns True if the contents of `a` and `b` are equal\n */\nexport const isEqualValueDefault = <T>(a: T, b: T): boolean => {\n  // ✔ UNIT TESTED\n  if (a === b) return true; // Object references are the same, or string values are the same\n  return toStringDefault(a) === toStringDefault(b); // String representations are the same\n};\n\n/**\n * Returns _true_ if `a` contains the values of `b`. `a` may contain other values, but we\n * only check against what is in `b`. `a` and `b` must both be simple objects.\n * \n * ```js\n * const obj = {\n *  name: `Elle`,\n *  size: 100,\n *  colour: {\n *    red: 0.5,\n *    green: 0.1,\n *    blue: 0.2\n *  }\n * }\n * \n * isEqualValuePartial(obj, { name: `Elle` }); // true\n * isEqualValuePartial(obj, { name: { colour: red: { 0.5, green: 0.1  }} }); // true\n * \n * isEqualValuePartial(obj, { name: `Ellen` });     // false\n * isEqualValuePartial(obj, { lastname: `Elle` });  // false\n * ```\n * @param a \n * @param b \n * @param fieldComparer \n * @returns \n */\nexport const isEqualValuePartial = <T1 extends Record<string, any>, T2 extends Record<string, any>>(a: T1, b: T2, fieldComparer?: IsEqual<any>): boolean => {\n  if (typeof a !== `object`) throw new Error(`Parameter 'a' expected to be object`);\n  if (typeof b !== `object`) throw new Error(`Parameter 'b' expected to be object`);\n\n  if (Object.is(a, b)) return true;\n  const comparer = fieldComparer ?? isEqualValuePartial;\n  for (const entryB of Object.entries(b)) {\n    const valueA = a[ entryB[ 0 ] ];\n    const valueB = entryB[ 1 ];\n    if (typeof valueA === `object` && typeof valueB === `object`) {\n      if (!comparer(valueA, valueB)) {\n        return false;\n      }\n    } else {\n      if (valueA !== valueB) {\n        return false;\n      }\n    }\n  }\n  return true;\n}\n\n/**\n * Wraps the `eq` function, tracing the input data result\n * ```js\n * // Init trace\n * const traceEq = isEqualTrace(isEqualValueDefault); \n * // Use it in some function that takes IsEqual<T>\n * compare(a, b, eq);\n * ```\n * @param eq \n * @returns \n */\nexport const isEqualTrace = <T>(eq: IsEqual<T>): IsEqual<T> => {\n  return (a, b) => {\n    const result = eq(a, b);\n    console.log(`isEqualTrace eq: ${ result } a: ${ toStringAbbreviate(a) } b: ${ toStringAbbreviate(b) }`);\n    return result;\n  }\n}\n\n/**\n * Comparer returns true if string representation of `a` and `b` are equal, regardless of field ordering.\n * Uses `toStringOrdered` to generate a string representation (via JSON.stringify`).\n * \n * ```js\n * isEqualValueIgnoreOrder({ a: 10, b: 20}, { b: 20, a: 10 }); // true\n * isEqualValue({ a: 10, b: 20}, { b: 20, a: 10 }); // false, fields are different order\n * ```\n * \n * There is an overhead to ordering fields. Use {@link isEqualValueDefault} if it's not possible that field ordering will change.\n * @returns True if the contents of `a` and `b` are equal\n */\nexport const isEqualValueIgnoreOrder = <T>(a: T, b: T): boolean => {\n  // ✔ UNIT TESTED\n  if (a === b) return true; // Object references are the same, or string values are the same\n  return toStringOrdered(a) === toStringOrdered(b); // String representations are the same\n};","// ✔ UNIT TESTED\n\nimport { type IsEqual, isEqualDefault } from '../../IsEqual.js';\nimport type { IMapOf } from './IMapOf.js';\nimport type { IWithEntries } from './IMappish.js';\n\n/**\n * Finds first entry by iterable value. Expects a map with an iterable as values.\n *\n * ```js\n * const map = new Map();\n * map.set('hello', ['a', 'b', 'c']);\n * map.set('there', ['d', 'e', 'f']);\n *\n * const entry = firstEntryByIterablePredicate(map, (value, key) => {\n *  return (value === 'e');\n * });\n * // Entry is: ['there', ['d', 'e', 'f']]\n * ```\n *\n * An alternative is {@link firstEntryByIterableValue} to search by value.\n * @param map Map to search\n * @param predicate Filter function returns true when there is a match of value\n * @returns Entry, or _undefined_ if `filter` function never returns _true_\n */\nexport const firstEntryByIterablePredicate = <K, V>(\n  map: IWithEntries<K, Iterable<V>>,\n  predicate: (value: V, key: K) => boolean\n): readonly [ key: K, value: Iterable<V> ] | undefined => {\n  for (const e of map.entries()) {\n    const val = e[ 1 ];\n    for (const subValue of val) {\n      if (predicate(subValue, e[ 0 ])) return e;\n    }\n  }\n};\n\n/**\n * Returns the size of the largest key, or 0 if empty.\n */\nexport const lengthMax = <V>(map: IMapOf<V>): number => {\n  //eslint-disable-next-line functional/no-let\n  let largest: readonly [ string, number ] = [ '', 0 ];\n  for (const e of map.keysAndCounts()) {\n    if (e[ 1 ] > largest[ 1 ]) {\n      largest = e;\n    }\n  }\n  return largest[ 1 ];\n};\n\n/**\n * Finds first entry by iterable value. Expects a map with an iterable as values.\n *\n * ```js\n * const map = new Map();\n * map.set('hello', ['a', 'b', 'c']);\n * map.set('there', ['d', 'e', 'f']);\n *\n * const entry = firstEntryByIterableValue(map, 'e');\n * // Entry is: ['there', ['d', 'e', 'f']]\n * ```\n *\n * An alternative is {@link firstEntryByIterablePredicate} to search by predicate function.\n * @param map Map to search\n * @param value Value to seek\n * @param isEqual Filter function which checks equality. Uses JS comparer by default.\n * @returns Entry, or _undefined_ if `value` not found.\n */\nexport const firstEntryByIterableValue = <K, V>(\n  map: IWithEntries<K, Iterable<V>>,\n  value: V,\n  isEqual: IsEqual<V> = isEqualDefault\n): readonly [ key: K, value: Iterable<V> ] | undefined => {\n  for (const e of map.entries()) {\n    const val = e[ 1 ];\n    for (const subValue of val) {\n      if (isEqual(subValue, value)) return e;\n    }\n  }\n};\n","import { type IsEqual, isEqualDefault } from '../../IsEqual.js';\nimport {\n  defaultKeyer,\n  type ToString,\n} from '../../Util.js';\nimport { firstEntryByIterableValue } from './MapMultiFns.js';\n\nexport class MapOfSimpleBase<V> {\n  protected map: Map<string, ReadonlyArray<V>>;\n  protected readonly groupBy;\n  protected valueEq;\n\n  /**\n   * Constructor\n   * @param groupBy Creates keys for values when using `addValue`. By default uses JSON.stringify\n   * @param valueEq Compare values. By default uses JS logic for equality\n   */\n  constructor(\n    groupBy: ToString<V> = defaultKeyer,\n    valueEq: IsEqual<V> = isEqualDefault<V>,\n    initial: Array<[ string, ReadonlyArray<V> ]> = []\n  ) {\n    this.groupBy = groupBy;\n    this.valueEq = valueEq;\n    this.map = new Map(initial);\n  }\n\n\n  /**\n   * Iterate over all entries\n   */\n  *entriesFlat(): IterableIterator<[ key: string, value: V ]> {\n    for (const key of this.map.keys()) {\n      // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n      for (const value of this.map.get(key)!) {\n        yield [ key, value ];\n      }\n    }\n  }\n\n  *entries(): IterableIterator<[ key: string, value: Array<V> ]> {\n    for (const [ k, v ] of this.map.entries()) {\n      yield [ k, [ ...v ] ];\n    }\n  }\n\n  firstKeyByValue(value: V, eq: IsEqual<V> = isEqualDefault) {\n    const entry = firstEntryByIterableValue(this, value, eq);\n    if (entry) return entry[ 0 ];\n  }\n\n  /**\n   * Get all values under `key`\n   * @param key\n   * @returns\n   */\n  *get(key: string): IterableIterator<V> {\n    const m = this.map.get(key);\n    if (!m) return;\n    yield* m.values();\n  }\n\n  /**\n   * Iterate over all keys\n   */\n  *keys(): IterableIterator<string> {\n    yield* this.map.keys();\n  }\n\n  /**\n   * Iterate over all values (regardless of key)\n   */\n  *valuesFlat(): IterableIterator<V> {\n    for (const entries of this.map) {\n      yield* entries[ 1 ];\n    }\n  }\n\n  /**\n   * Iterate over keys and length of values stored under keys\n   */\n  *keysAndCounts(): IterableIterator<[ string, number ]> {\n    for (const entries of this.map) {\n      yield [ entries[ 0 ], entries[ 1 ].length ];\n    }\n  }\n\n  /**\n   * Returns _true_ if `key` exists\n   * @param key\n   * @returns\n   */\n  //eslint-disable-next-line functional/prefer-tacit\n  has(key: string): boolean {\n    return this.map.has(key);\n  }\n\n  /**\n   * Returns _true_ if `value` exists under `key`.\n   * @param key Key\n   * @param value Value to seek under `key`\n   * @returns _True_ if `value` exists under `key`.\n   */\n  hasKeyValue(key: string, value: V): boolean {\n    const values = this.map.get(key);\n    if (!values) return false;\n    for (const v of values) {\n      if (this.valueEq(v, value)) return true;\n    }\n    return false;\n  }\n\n  /**\n   * Debug dump of contents\n   * @returns\n   */\n  debugString(): string {\n    // eslint-disable-next-line functional/no-let\n    let r = ``;\n    const keys = [ ...this.map.keys() ];\n    keys.every((k) => {\n      const v = this.map.get(k);\n      if (v === undefined) return;\n      r += k + ` (${ v.length }) = ${ JSON.stringify(v) }\\r\\n`;\n    });\n    return r;\n  }\n\n  /**\n   * _True_ if empty\n   */\n  get isEmpty(): boolean {\n    return this.map.size === 0;\n  }\n\n  /**\n   * Return number of values stored under `key`.\n   * Returns 0 if `key` is not found.\n   * @param key\n   * @returns\n   */\n  count(key: string): number {\n    const values = this.map.get(key);\n    if (!values) return 0;\n    return values.length;\n  }\n\n  get lengthKeys() {\n    return this.map.size;\n  }\n\n}\n","import { type IsEqual, isEqualDefault } from '../../IsEqual.js';\nimport {\n  type ToString,\n  defaultKeyer\n} from '../../Util.js';\nimport type { IMapOfMutable } from './IMapOfMutable.js';\nimport { MapOfSimpleBase } from './MapOfSimpleBase.js';\n\n/**\n * A simple mutable map of arrays, without events. It can store multiple values\n * under the same key.\n *\n * For a fancier approaches, consider {@link ofArrayMutable}, {@link ofCircularMutable} or {@link ofSetMutable}.\n *\n * @example\n * ```js\n * const m = mapOfSimpleMutable();\n * m.add(`hello`, 1, 2, 3); // Adds numbers under key `hello`\n * m.delete(`hello`);       // Deletes everything under `hello`\n *\n * const hellos = m.get(`hello`); // Get list of items under `hello`\n * ```\n *\n * Constructor takes a `groupBy` parameter, which yields a string key for a value. This is the\n * basis by which values are keyed when using `addValues`.\n *\n * Constructor takes a `valueEq` parameter, which compares values. This is used when checking\n * if a value exists under a key, for example.\n * @template V Type of items\n */\nexport class MapOfSimpleMutable<V>\n  extends MapOfSimpleBase<V>\n  implements IMapOfMutable<V>\n{\n  addKeyedValues(key: string, ...values: ReadonlyArray<V>) {\n    const existing = this.map.get(key);\n    if (existing === undefined) {\n      this.map.set(key, values);\n    } else {\n      this.map.set(key, [ ...existing, ...values ]);\n    }\n  }\n\n\n  /**\n   * Adds a value, automatically extracting a key via the\n   * `groupBy` function assigned in the constructor options.\n   * @param values Adds several values\n   */\n  addValue(...values: ReadonlyArray<V>) {\n    for (const v of values) {\n      const key = this.groupBy(v);\n      this.addKeyedValues(key, v);\n    }\n  }\n\n  /**\n   * Delete `value` under a particular `key`\n   * @param key\n   * @param value\n   * @returns _True_ if `value` was found under `key`\n   */\n  deleteKeyValue(key: string, value: V): boolean {\n    const existing = this.map.get(key);\n    if (existing === undefined) return false;\n    const without = existing.filter((existingValue) => !this.valueEq(existingValue, value));\n    this.map.set(key, without);\n    return without.length < existing.length;\n  }\n\n  /**\n   * Deletes `value` regardless of key.\n   *\n   * Uses the constructor-defined equality function.\n   * @param value Value to delete\n   * @returns\n   */\n  deleteByValue(value: V): boolean {\n    //eslint-disable-next-line functional/no-let\n    let del = false;\n    const entries = [ ...this.map.entries() ];\n    for (const keyEntries of entries) {\n      for (const values of keyEntries[ 1 ]) {\n        if (this.valueEq(values, value)) {\n          del = true;\n          this.deleteKeyValue(keyEntries[ 0 ], value);\n        }\n      }\n    }\n    return del;\n  }\n\n  /**\n   * Deletes all values under `key`,\n   * @param key\n   * @returns _True_ if `key` was found and values stored\n   */\n  delete(key: string): boolean {\n    const values = this.map.get(key);\n    if (!values) return false;\n    if (values.length === 0) return false;\n    this.map.delete(key);\n    return true;\n  }\n\n  /**\n   * Clear contents\n   */\n  clear() {\n    this.map.clear();\n  }\n}\n\n/**\n * A simple mutable map of arrays, without events. It can store multiple values\n * under the same key.\n *\n * For a fancier approaches, consider {@link ofArrayMutable}, {@link ofCircularMutable} or {@link ofSetMutable}.\n *\n * @example\n * ```js\n * const m = mapOfSimpleMutable();\n * m.add(`hello`, 1, 2, 3); // Adds numbers under key `hello`\n * m.delete(`hello`);       // Deletes everything under `hello`\n *\n * const hellos = m.get(`hello`); // Get list of items under `hello`\n * ```\n *\n * @template V Type of items\n * @returns New instance\n */\nexport const ofSimpleMutable = <V>(\n  groupBy: ToString<V> = defaultKeyer,\n  valueEq: IsEqual<V> = isEqualDefault<V>\n): IMapOfMutable<V> => new MapOfSimpleMutable<V>(groupBy, valueEq);\n"],"mappings":"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","names":["interval","interval","value","max","min","length","count","chunks","concat","dropWhile","equals","every","fill","filter","find","flatten","forEach","map","max","min","range","reduce","slice","some","takeWhile","unique","zip","value","slice","toString","value","chunks","concat","dropWhile","equals","every","fill","forEach","filter","find","flatten","map","max","min","range","length","reduce","some","takeWhile","unique","zip","run","forEach","value","min","max","length","total","duration","interval","once","wrap","length","value","init","chunks","flatten","max","mergeByKey","min","unique","zip","map","value","isEqual","set","filter","toArray","fromIterable","find","total","slice","total","min","max","validNumbers","length","value","total","min","max","next","value","toArray","zip","length","zip","max","min","max","value","min","flatten","length","add","total","map","chunks","mergeByKey","filter","unique","fromIterable","isEqual","init","run","unique","first","interval","interval","value","reset","done","timeout","run","count","value","length","forEach","reduce","asDynamicTraversable","children","depthFirst","toStringDeep","compare","remove","peek","isEmpty","isFull","peek","isEmpty","isFull","mutable","toString","compare","value","remove","root","children","minMaxAvg","minMaxAvg","children","toStringDeep","filter","value","depthFirst","asDynamicTraversable","create","create","root","add","value","prettyPrint","remove","childrenLength","count","breadthFirst","childrenLength","depthFirst","find","findAnyChildByValue","findChildByValue","followValue","hasAnyChild","hasAnyParent","hasChild","hasParent","parents","toString","toStringDeep","childrenLength","hasAnyParent","hasParent","hasAnyChild","hasChild","breadthFirst","parents","findAnyChildByValue","findChildByValue","depthFirst","root","find","followValue","toStringDeep","toString","children","asDynamicTraversable","mutable","isEmpty","isFull","peek","immutable","mutable","mutable","value","map","immutable","immutable","immutable","priority","max","min","create","filter","find","fromIterable","immutable","mutable","toArray","create","time","value","key","existing","map","add","value","immutable","add","value","mutable","add","data","value","asArray","set","value","map","find","filter","toArray","value","value","value","value","value","average","debounce","delay","filter","flatten","max","min","total","transform","value","take","flatten","duration","elapsed","delay","debounce","tally","count","min","max","rank","rankArray","average","total","chunk","filter","drop","value","map","key","perValue","query","flatten","delay","debounce","filter","min","max","average","total","fromFunction","fromEvent","asPromise","asValue","value","functions","run","gaussian","max","min","opacity","value","min","max","opacity","opacity","opacity","t1","t2","t3","color","rgb","opacity","i","hsl","hue","opacity","lab","opacity","hcl","hue","opacity","cubehelix","hue","opacity","interpolate","i","hue","rgb","root","to","lab","tick","min","max","wrap","interpolate","wrap","create","tick","duration","t2","t3","interpolate","max","min","gaussian","min","max","range","interval","chunk","between","length","chunks","toStringDefault","value","firstEntryByIterableValue","map","value","isEqual","groupBy","value","firstEntryByIterableValue","value","without","del","groupBy"]}