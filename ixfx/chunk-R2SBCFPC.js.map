{"version":3,"sources":["../src/data/PrimitiveTracker.ts","../src/data/NumberTracker.ts"],"sourcesContent":["//import { repeat } from '../flow/index.js';\n\nimport type { TrackedValueOpts } from './TrackedValue.js';\nimport { TrackerBase } from './TrackerBase.js';\n\nexport type TimestampedPrimitive<V extends number | string> = {\n  at: number\n  value: V\n}\n\nexport abstract class PrimitiveTracker<\n  V extends number | string,\n  TResult\n> extends TrackerBase<V, TResult> {\n\n  //computeResults(_p: Timestamped[]): TResult;\n\n  values: Array<V>;\n  timestamps: Array<number>;\n  //data: Array<TimestampedPrimitive<V>>;\n\n  constructor(opts?: TrackedValueOpts) {\n    super(opts);\n    //this.data = [];\n    this.values = [];\n    this.timestamps = [];\n  }\n\n  /**\n   * Reduces size of value store to `limit`. Returns\n   * number of remaining items\n   * @param limit\n   */\n  trimStore(limit: number): number {\n    if (limit >= this.values.length) return this.values.length;\n    //this.data = this.data.slice(-limit);\n    this.values = this.values.slice(-limit);\n    this.timestamps = this.timestamps.slice(-limit);\n    return this.values.length;\n  }\n\n  onTrimmed() {\n    // no-op\n  }\n\n  get last(): V | undefined {\n    return this.values.at(-1);\n  }\n\n  get initial(): V | undefined {\n    return this.values.at(0);\n  }\n\n  /**\n   * Returns number of recorded values (this can include the initial value)\n   */\n  get size() {\n    return this.values.length;\n  }\n\n  /**\n   * Returns the elapsed time, in milliseconds since the instance was created\n   */\n  get elapsed(): number {\n    if (this.values.length < 0) throw new Error(`No values seen yet`);\n    return Date.now() - this.timestamps[ 0 ];\n  }\n\n  onReset() {\n    this.values = [];\n    this.timestamps = [];\n  }\n\n  /**\n   * Tracks a value\n   */\n  filterData(rawValues: Array<V>): Array<TimestampedPrimitive<V>> {\n    const lastValue = rawValues.at(-1);\n    const last: TimestampedPrimitive<V> = { value: lastValue as unknown as V, at: performance.now() };\n\n    const values: Array<TimestampedPrimitive<V>> = rawValues.map(value => ({\n      at: performance.now(),\n      value: value\n    }));\n\n    //const now = Date.now();\n    if (this.storeIntermediate) {\n      this.values.push(...rawValues);\n      //this.timestamps.push(...repeat(p.length, () => now));\n      this.timestamps.push(...values.map(v => v.at));\n    } else switch (this.values.length) {\n      case 0: {\n        // Add as initial value\n        this.values.push(last.value);\n        this.timestamps.push(last.at);\n        break;\n      }\n      case 2: {\n        // Replace last value\n        this.values[ 1 ] = last.value;\n        this.timestamps[ 1 ] = last.at;\n        break;\n      }\n      case 1: {\n        // Add last value\n        this.values.push(last.value);\n        this.timestamps.push(last.at);\n        break;\n      }\n      // No default\n    }\n\n    return values;\n  }\n}\n","import { PrimitiveTracker, type TimestampedPrimitive } from './PrimitiveTracker.js';\nimport {\n  type TrackedValueOpts as TrackOpts,\n} from './TrackedValue.js';\nimport { minFast, maxFast, totalFast } from '../numbers/NumericArrays.js';\n\nexport type NumberTrackerResults = {\n  readonly total: number\n  readonly min: number\n  readonly max: number\n  readonly avg: number\n};\n\nexport class NumberTracker extends PrimitiveTracker<number, NumberTrackerResults> {\n  total = 0;\n  min = Number.MAX_SAFE_INTEGER;\n  max = Number.MIN_SAFE_INTEGER;\n\n  // eslint-disable-next-line @typescript-eslint/no-useless-constructor\n  constructor(opts?: TrackOpts) {\n    super(opts);\n    /** no-op */\n  }\n\n  get avg() {\n    return this.total / this.seenCount;\n  }\n\n  /**\n   * Difference between last value and initial.\n   * Eg. if last value was 10 and initial value was 5, 5 is returned (10 - 5)\n   * If either of those is missing, undefined is returned\n   */\n  difference(): number | undefined {\n    if (this.last === undefined) return;\n    if (this.initial === undefined) return;\n    return this.last - this.initial;\n  }\n\n  /**\n   * Relative difference between last value and initial.\n   * Eg if last value was 10 and initial value was 5, 2 is returned (200%)\n   */\n  relativeDifference(): number | undefined {\n    if (this.last === undefined) return;\n    if (this.initial === undefined) return;\n    return this.last / this.initial;\n  }\n\n  onReset() {\n    this.min = Number.MAX_SAFE_INTEGER;\n    this.max = Number.MIN_SAFE_INTEGER;\n    this.total = 0;\n    super.onReset();\n  }\n\n  onTrimmed() {\n    this.min = minFast(this.values);\n    this.max = maxFast(this.values);\n    this.total = totalFast(this.values);\n  }\n\n  computeResults(values: Array<TimestampedPrimitive<number>>): NumberTrackerResults {\n    if (values.some((v) => Number.isNaN(v))) throw new Error(`Cannot add NaN`);\n    const numbers = values.map(value => value.value);\n\n    this.total = numbers.reduce((accumulator, v) => accumulator + v, this.total);\n    this.min = Math.min(...numbers, this.min);\n    this.max = Math.max(...numbers, this.max);\n    const r: NumberTrackerResults = {\n      max: this.max,\n      min: this.min,\n      total: this.total,\n      avg: this.avg\n    }\n    return r;\n  }\n\n  getMinMaxAvg() {\n    return {\n      min: this.min,\n      max: this.max,\n      avg: this.avg,\n    };\n  }\n}\n\n/**\n * Keeps track of the total, min, max and avg in a stream of values. By default values\n * are not stored.\n *\n * Usage:\n *\n * ```js\n * import { numberTracker } from 'https://unpkg.com/ixfx/dist/data.js';\n *\n * const t = numberTracker();\n * t.seen(10);\n *\n * t.avg / t.min/ t.max\n * t.initial; // initial value\n * t.size;    // number of seen values\n * t.elapsed; // milliseconds since intialisation\n * t.last;    // last value\n * ```\n *\n * To get `{ avg, min, max, total }`\n * ```\n * t.getMinMax()\n * ```\n *\n * Use `t.reset()` to clear everything.\n *\n * Trackers can automatically reset after a given number of samples\n * ```\n * // reset after 100 samples\n * const t = numberTracker({ resetAfterSamples: 100 });\n * ```\n *\n * To store values, use the `storeIntermediate` option:\n *\n * ```js\n * const t = numberTracker({ storeIntermediate: true });\n * ```\n *\n * Difference between last value and initial value:\n * ```js\n * t.relativeDifference();\n * ```\n *\n * Get raw data (if it is being stored):\n * ```js\n * t.values; // array of numbers\n * t.timestampes; // array of millisecond times, indexes correspond to t.values\n * ```\n * @class NumberTracker\n */\nexport const numberTracker = (opts: TrackOpts = {}) => new NumberTracker(opts);\n"],"mappings":"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","names":[]}