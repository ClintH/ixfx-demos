{"version":3,"sources":["../src/iterables/index.ts","../src/iterables/chain/index.ts","../src/iterables/chain/Dom.ts","../src/iterables/chain/Util.ts","../src/iterables/chain/Links.ts","../src/iterables/chain/AddToArray.ts","../src/iterables/chain/AsArray.ts","../src/iterables/chain/AsCallback.ts","../src/iterables/chain/AsPromise.ts","../src/iterables/chain/AsValue.ts","../src/iterables/chain/FromArray.ts","../src/iterables/chain/FromEvent.ts","../src/iterables/chain/FromFunction.ts","../src/iterables/chain/FromIterable.ts","../src/iterables/chain/Lazy.ts","../src/iterables/chain/MergeFlat.ts","../src/iterables/chain/CombineLatestToArray.ts","../src/iterables/chain/CombineLatestToObject.ts","../src/iterables/chain/Run.ts","../src/iterables/chain/Single.ts","../src/iterables/chain/Sync.ts","../src/iterables/chain/Ticks.ts"],"sourcesContent":["/* eslint-disable unicorn/no-array-callback-reference */\n/* eslint-disable unicorn/no-array-for-each */\n/* eslint-disable unicorn/no-array-method-this-argument */\n\nimport * as Async from '../iterables/IterableAsync.js';\nimport * as Sync from '../iterables/IterableSync.js';\nexport * as Async from '../iterables/IterableAsync.js';\nexport * as Sync from '../iterables/IterableSync.js';\nexport * as Chains from './chain/index.js';\nexport * from './Iterable.js';\nimport { isAsyncIterable } from '../iterables/Iterable.js';\nimport * as Chains from './chain/index.js';\nimport type { Interval } from '../flow/IntervalType.js';\n\nimport { toStringDefault } from '../Util.js';\nimport type { GenFactoryNoInput } from './chain/Types.js';\n\nexport function combineLatestToArray(sources: Array<Chains.GenOrData<any> | GenFactoryNoInput<any>>, options: Partial<Chains.CombineLatestOptions> = {}): AsyncGenerator<Array<any>> {\n  return Chains.combineLatestToArray(sources, options);\n}\n\nexport function min<V>(it: AsyncIterable<V>, gt?: (a: V, b: V) => boolean): AsyncGenerator<V>;\nexport function min<V>(it: Iterable<V>, gt?: (a: V, b: V) => boolean): Generator<V>;\n\n\n\n/**\n * Returns a stream of minimum values.\n * \n * Streaming result: works with endless iterables.\n * \n * ```js\n * min([\n *  {i:0,v:1},\n *  {i:1,v:9},\n *  {i:2,v:-2}\n * ], (a, b) => a.v > b.v);\n * // Yields: {i:2, v:1}, {i:2,v:-2}\n * ```\n * @param it Iterable\n * @param gt Should return _true_ if `a` is greater than `b`.\n * @returns Yields minimum values\n */\nexport function min<V>(it: AsyncIterable<V> | Iterable<V>, gt = (a: V, b: V) => a > b): AsyncGenerator<V> | Generator<V> {\n  return isAsyncIterable(it) ? Async.min(it, gt) : Sync.min(it, gt);\n}\n\nexport function max<V>(it: AsyncIterable<V>, gt?: (a: V, b: V) => boolean): AsyncGenerator<V>;\nexport function max<V>(it: Iterable<V>, gt?: (a: V, b: V) => boolean): Generator<V>;\n\n/**\n * Returns the maximum value of an iterable as it changes.\n * Streaming result: works with endless iterables.\n * \n * ```js\n * // Rank values by their 'v' field\n * const rank = (a,b) => a.v > b.v;\n * \n * min([\n *  {i:0,v:1},\n *  {i:1,v:9},\n *  {i:2,v:-2}\n * ], rank);\n * // Yields: {i:0,v:1}, {i:1,v:9}\n * ```\n * @param it Iterable\n * @param gt Should return _true_ if `a` is greater than `b`.\n * @returns Iterable of maximum values\n */\nexport function max<V>(it: AsyncIterable<V> | Iterable<V>, gt = (a: V, b: V) => a > b): AsyncGenerator<V> | Generator<V> {\n  return isAsyncIterable(it) ? Async.max(it, gt) : Sync.max(it, gt);\n}\n\nexport function dropWhile<V>(it: AsyncIterable<V>, f: (v: V) => boolean): AsyncGenerator<V>;\nexport function dropWhile<V>(it: Iterable<V>, f: (v: V) => boolean): Generator<V>;\n\n/**\n * Drops elements that do not meet the predicate `f`.\n * Streaming result: works with endless iterables.\n * \n * ```js\n * dropWhile([1, 2, 3, 4], e => e < 3);\n * returns [3, 4]\n * ```\n * @param it\n * @param f\n */\nexport function dropWhile<V>(it: AsyncIterable<V> | Iterable<V>, f: (v: V) => boolean): AsyncGenerator<V> | Generator<V> {\n  return isAsyncIterable(it) ? Async.dropWhile(it, f) : Sync.dropWhile(it, f);\n}\n\nexport function until(it: AsyncIterable<any>, f: () => Promise<boolean> | Promise<undefined>): Promise<undefined>;\nexport function until(it: Iterable<any>, f: () => boolean | never): void;\nexport function until(it: Iterable<any>, f: () => Promise<boolean>): Promise<undefined>;\n\nexport function until(it: AsyncIterable<any> | Iterable<any>, callback: () => Promise<boolean> | never | boolean | Promise<undefined>): Promise<undefined> | undefined {\n  if (isAsyncIterable(it)) {\n    return Async.until(it, callback);\n  } else {\n    // @ts-expect-error\n    Sync.until(it, callback);\n  }\n}\n\n\nexport function chunks<V>(it: Iterable<V>, size: number): Generator<Array<V>>;\nexport function chunks<V>(it: AsyncIterable<V>, size: number): AsyncGenerator<Array<V>>;\n\n/**\n * Breaks an iterable into array chunks\n * \n * Streaming: works with infinite iterables.\n * \n * ```js\n * chunks([1,2,3,4,5,6,7,8,9,10], 3);\n * // Yields [[1, 2, 3], [4, 5, 6], [7, 8, 9], [10]]\n * ```\n * @param it\n * @param size\n */\nexport function chunks<V>(it: AsyncIterable<V> | Iterable<V>, size: number): Generator<Array<V>> | AsyncGenerator<Array<V>> {\n  return isAsyncIterable(it) ? Async.chunks(it, size) : Sync.chunks(it, size);\n}\n\nexport function filter<V>(it: AsyncIterable<V>, f: (v: V) => boolean | Promise<boolean>): AsyncGenerator<V>;\nexport function filter<V>(it: AsyncIterable<V>, f: (v: V) => boolean): Generator<V>;\n\n/**\n * Filters an iterable, only yielding items which match `f`.\n *\n * ```js\n * filter([1, 2, 3, 4], e => e % 2 == 0);\n * returns [2, 4]\n * ```\n * \n * When using async iterables, `f` can be async as well.\n * @param it\n * @param f\n */\nexport function filter<V>(it: AsyncIterable<V> | Iterable<V>, f: (v: V) => boolean | Promise<boolean>): AsyncGenerator<V> | Generator<V> {\n  // eslint-disable-next-line unicorn/no-array-method-this-argument, unicorn/no-array-callback-reference\n  return isAsyncIterable(it) ? Async.filter(it, f) : Sync.filter(it, f as (v: V) => boolean);\n}\n\n\nexport function fill<V>(it: AsyncIterable<V>, v: V): AsyncGenerator<V>;\nexport function fill<V>(it: Iterable<V>, v: V): Generator<V>;\n\n/**\n * Yields `v` for each item within `it`.\n *\n * ```js\n * fill([1, 2, 3], 0);\n * // Yields: [0, 0, 0]\n * ```\n * \n * This is like a `map` where we return a fixed value, ignoring the input.\n * @param it\n * @param v\n */\nexport function fill<V>(it: AsyncIterable<V> | Iterable<V>, v: V): AsyncGenerator<V> | Generator<V> {\n  return isAsyncIterable(it) ? Async.fill(it, v) : Sync.fill(it, v);\n}\n\nexport function concat<V>(...its: Array<Iterable<V>>): Generator<V>;\nexport function concat<V>(...its: Array<AsyncIterable<V>>): AsyncGenerator<V>;\n\n\n/**\n * Return concatenation of iterators.\n * \n * Non-streaming: If one of the input iterables is endless, the other ones won't\n * be processed.\n * @param its\n */\nexport function concat<V>(...its: Array<Iterable<V>> | Array<AsyncIterable<V>>): AsyncGenerator<V> | Generator<V> {\n  return isAsyncIterable(its[ 0 ]) ? Async.concat(...its as Array<AsyncIterable<V>>) : Sync.concat(...its as Array<Iterable<V>>);\n}\n\nexport function find<V>(it: Array<V> | Iterable<V>, f: (v: V) => boolean): V | undefined;\nexport function find<V>(it: AsyncIterable<V>, f: (v: V) => boolean | Promise<boolean>): Promise<V | undefined>;\n\n/**\n * Returns first item from iterable `it` that matches predicate `f`\n * ```js\n * find([1, 2, 3, 4], e => e > 2);\n * // Yields: 3\n * ```\n * \n * When using async iterables, `f` can be async as well.\n * @param it\n * @param f\n * @returns\n */\nexport function find<V>(it: Array<V> | Iterable<V> | AsyncIterable<V>, f: (v: V) => boolean | Promise<boolean>): Promise<V | undefined> | V | undefined {\n  // eslint-disable-next-line unicorn/no-array-method-this-argument, unicorn/no-array-callback-reference\n  return isAsyncIterable(it) ? Async.find(it, f) : Sync.find(it, f as (v: V) => boolean);\n}\n\n/**\n * Execute function `f` for each item in iterable.\n * If `f` returns _false_, iteration stops.\n * ```js\n * forEach(iterable, v => {\n *  // do something with value\n * });\n * ```\n * \n * When using an async iterable, `f` can also be async.\n * @param it\n * @param f\n */\nexport function forEach<V>(it: Array<V> | AsyncIterable<V> | Iterable<V>, f: (v: V) => boolean | Promise<boolean>) {\n  if (isAsyncIterable(it)) {\n    return Async.forEach(it, f);\n  } else {\n    Sync.forEach(it, f as (v: V) => boolean);\n  }\n}\n\nexport function map<V, X>(it: AsyncIterable<V>, f: (v: V) => Promise<X> | X): Generator<X>;\nexport function map<V, X>(it: Array<V> | Iterable<V>, f: (v: V) => X): Generator<X>;\n\n/**\n * Maps an iterable through function `f`\n * ```js\n * // For every input value, multiply it by itself\n * map([1, 2, 3], e => e*e)\n * // Yields: 1, 4, 9\n * ```\n * \n * It can also be used to transform types:\n * ```js\n * map([1, 2, 3], e => { value: e });\n * // Yields: { value: 1 }, { value: 2 }, { value: 3 }\n * ```\n * @param it\n * @param f\n */\nexport function map<V, X>(it: Array<V> | AsyncIterable<V> | Iterable<V>, f: (v: V) => X | Promise<X>) {\n  return isAsyncIterable(it) ? Async.map(it, f) : Sync.map(it, f);\n}\n\nexport function fromArray<V>(array: Array<V>, interval: Interval): AsyncGenerator<V>;\nexport function fromArray<V>(array: Array<V>): Generator<V>;\n\n/**\n * Yield values from `array`, one at a time.\n * Use `interval` to add time between each item.\n * The first item is yielded without delay.\n * \n * @param array Array of values\n * @param interval Interval (defaults: 1ms)\n */\nexport function fromArray<V>(array: Array<V>, interval?: Interval): AsyncGenerator<V> | Generator<V> {\n  return interval === undefined ? Sync.fromArray(array) : Async.fromArray(array, interval);\n}\n\nexport function flatten<V>(it: AsyncIterable<Array<V> | V>): AsyncIterable<V>;\nexport function flatten<V>(it: Iterable<Array<V> | V> | Array<V>): Iterable<V>;\n\n/**\n * Returns a 'flattened' copy of array, un-nesting arrays one level.\n * Streaming: works with unlimited iterables.\n * ```js\n * flatten([1, [2, 3], [[4]]]);\n * // Yields: [1, 2, 3, [4]];\n * ```\n * @param it\n */\nexport function flatten<V>(it: Array<V> | AsyncIterable<V | Array<V>> | Iterable<V | Array<V>>): AsyncIterable<V> | Iterable<V> {\n  return isAsyncIterable(it) ? Async.flatten(it) : Sync.flatten(it);\n}\n\nexport function some<V>(it: AsyncIterable<V>, f: (v: V) => boolean | Promise<boolean>): Promise<boolean>\nexport function some<V>(it: Iterable<V> | Array<V>, f: (v: V) => boolean): boolean\n\n/**\n * Returns true the first time `f` returns true. Useful for spotting any occurrence of\n * data, and exiting quickly\n * ```js\n * some([1, 2, 3, 4], e => e % 3 === 0);\n * // Yields: true\n * ```\n * @param it Iterable\n * @param f Filter function\n * @returns\n */\nexport function some<V>(it: AsyncIterable<V> | Iterable<V>, f: (v: V) => boolean | Promise<boolean>): boolean | Promise<boolean> {\n  return isAsyncIterable(it) ? Async.some(it, f) : Sync.some(it, f as (v: V) => boolean);\n}\n\nexport function reduce<V>(it: AsyncIterable<V>, f: (accumulator: V, current: V) => V, start: V): Promise<V>;\nexport function reduce<V>(it: Iterable<V> | Array<V>, f: (accumulator: V, current: V) => V, start: V): V;\n\n/**\n * Reduce for iterables\n * ```js\n * reduce([1, 2, 3], (acc, cur) => acc + cur, 0);\n * // Yields: 6\n * ```\n * @param it Iterable\n * @param f Function\n * @param start Start value\n * @returns\n */\nexport function reduce<V>(it: AsyncIterable<V> | Iterable<V> | Array<V>, f: (accumulator: V, current: V) => V, start: V): Promise<V> | V {\n  return isAsyncIterable(it) ? Async.reduce(it, f, start) : Sync.reduce(it, f, start);\n}\n\nexport function slice<V>(it: AsyncIterable<V>, start?: number, end?: number): AsyncGenerator<V>;\nexport function slice<V>(it: Iterable<V> | Array<V>, start?: number, end?: number): Generator<V>;\n/**\n * Returns a section from an iterable\n * @param it Iterable\n * @param start Start index\n * @param end Exclusive end index (or until completion)\n */\nexport function slice<V>(\n  it: Iterable<V> | AsyncIterable<V> | Array<V>,\n  start = 0,\n  end = Number.POSITIVE_INFINITY\n) {\n  return isAsyncIterable(it) ? Async.slice(it, start, end) : Sync.slice(it, end);\n}\n\nexport function unique<V>(iterable: Iterable<V> | Array<Iterable<V>>): Generator<V>;\nexport function unique<V>(iterable: AsyncIterable<V> | Array<AsyncIterable<V>>): AsyncGenerator<V>;\n\n\n/**\n * Returns unique items from an iterable or\n * array of iterables.\n *\n * ```js\n * const data = [ 'apples', 'oranges' ]\n * const data2 = [ 'oranges', 'pears' ]\n * const unique = [...unique([data,data2]];\n * // Yields: [ 'apples', 'oranges', 'pears' ]\n * ```\n *\n * Uses object reference to compare values.\n * Use {@link uniqueByValue} if this doesn't suffice.\n * @param iterable Iterable, or array of iterables\n */\nexport function unique<V>(iterable: Array<V> | AsyncIterable<V> | Iterable<V> | Array<Iterable<V>> | Array<AsyncIterable<V>>): Generator<V> | AsyncGenerator<V> {\n  if (Array.isArray(iterable)) {\n    if (iterable.length === 0) return Sync.fromArray([]);\n    return isAsyncIterable(iterable[ 0 ]) ? Async.unique(iterable as Array<AsyncIterable<V>>) : Sync.unique(iterable as Array<Iterable<V>>);\n  } else if (isAsyncIterable(iterable)) {\n    return Async.unique(iterable);\n  } else {\n    return Sync.unique(iterable);\n  }\n}\n\nexport function uniqueByValue<T>(input: Iterable<T> | Array<T>, toString: (v: T) => string, seen?: Set<string>): Generator<T>;\nexport function uniqueByValue<T>(input: AsyncIterable<T>, toString: (v: T) => string, seen?: Set<string>): AsyncGenerator<T>;\n\n/**\n * Filters the `input` iterable, only yielding unique values. Use {@link unique} to compare\n * by object reference instead.\n * \n * Streaming: Works with unbounded iterables.\n * \n * ```js\n * const d = ['a', 'b', 'c', 'b', 'd' ];\n * for (const v of uniqueByValue(d)) {\n *  // Yields: 'a', 'b', 'c', 'd'\n * // (extra 'b' is skipped)\n * }\n * ```\n * \n * By default, JSON.stringify is used to create a string representing value. These are added\n * to a Set of strings, which is how we keep track of uniqueness. If the value is already a string it is used as-is.\n * \n * This allows you to have custom logic for what determines uniqueness. Eg, using a single field\n * of an object as an identifier:\n * \n * ```js\n * const people = [\n *  { name: `Mary`, size: 20 }, { name: `Abdul`, size: 19 }, { name: `Mary`, size: 5 }\n * ]\n * for (const v of uniqueByValue(d, v=>v.name)) {\n *  // Yields: { name: `Mary`, size: 20 }, { name: `Abdul`, size: 19 }\n *  // Second 'Mary' is skipped because name is the same, even though size field is different.\n * }\n * ```\n * \n * If you want to keep track of the set of keys, or prime it with some existing data, provide a Set instance:\n * ```js\n * const unique = new Set();\n * unique.add(`b`);\n * const d = [`a`, `b`, `c`];\n * for (const v of uniqueByValue(d, toStringDefault, unique)) {\n *  // Yields: `a`, `c`\n *  // `b` is skipped because it was already in set\n * }\n * // After completion, `unique` contains `a`, `b` and `c`.\n * ```\n * \n * Creating your own Set is useful for tracking unique values across several calls to `uniqueByValue`.\n * @param input \n * @param seen \n * @param toString \n */\nexport function* uniqueByValue<T>(input: AsyncIterable<T> | Iterable<T> | Array<T>, toString: (v: T) => string = toStringDefault, seen: Set<string> = new Set<string>()): Generator<T> | AsyncGenerator<T> {\n  return isAsyncIterable(input) ? Async.uniqueByValue(input, toString, seen) : Sync.uniqueByValue(input, toString, seen);\n}\n\nexport function toArray<V>(it: AsyncIterable<V>, count?: number): Promise<Array<V>>;\nexport function toArray<V>(it: Iterable<V>, count?: number): Array<V>;\n\n/**\n * Returns an array of values from an iterator.\n *\n * ```js\n * const data = await toArray(adsrIterable(opts, 10));\n * ```\n *\n * Note: If the iterator is infinite, be sure to provide a `count` or the function\n * will never return.\n *\n * @param it Asynchronous iterable\n * @param count Number of items to return, by default all.\n * @returns\n */\n//eslint-disable-next-line func-style\nexport function toArray<V>(it: Iterable<V> | AsyncIterable<V>, count = Number.POSITIVE_INFINITY): Array<V> | Promise<Array<V>> {\n  return isAsyncIterable(it) ? Async.toArray(it, count) : Sync.toArray(it, count);\n}\n\nexport function every<V>(it: Iterable<V> | Array<V>, f: (v: V) => boolean): boolean\nexport function every<V>(it: AsyncIterable<V>, f: (v: V) => boolean | Promise<boolean>): Promise<boolean>\n\n/**\n * Returns _true_ if `f` returns _true_ for\n * every item in iterable.\n * \n * Streaming: If an infinite iterable is used, function will never return value.\n * @param it\n * @param f\n * @returns\n */\nexport function every<V>(it: Iterable<V> | Array<V> | AsyncIterable<V>, f: (v: V) => boolean | Promise<boolean>): Promise<boolean> | boolean {\n  return isAsyncIterable(it) ? Async.every(it, f) : Sync.every(it, f as (v: V) => boolean);\n}\n\nexport function equals<V>(it1: AsyncIterable<V>, it2: AsyncIterable<V>, equality?: (a: V, b: V) => boolean): Promise<boolean>\nexport function equals<V>(it1: IterableIterator<V>, it2: IterableIterator<V>, equality?: (a: V, b: V) => boolean): boolean\n\n/**\n * Returns _true_ if items in two iterables are equal, as\n * determined by the `equality` function.\n * Order matters. It compares items at the same 'step' of each iterable.\n * @param it1\n * @param it2\n * @param equality\n * @returns\n */\nexport function equals<V>(it1: AsyncIterable<V> | IterableIterator<V>, it2: AsyncIterable<V> | IterableIterator<V>, equality?: (a: V, b: V) => boolean) {\n  const as = isAsyncIterable(it1) && isAsyncIterable(it2);\n  return as ? Async.equals(it1, it2, equality) : Sync.equals(it1 as IterableIterator<V>, it2 as IterableIterator<V>, equality);\n}\n\nexport function zip<V>(...its: ReadonlyArray<AsyncIterable<V>>): Generator<Array<V>>;\nexport function zip<V>(...its: ReadonlyArray<Iterable<V>>): Generator<V>;\n\n\n/**\n * Combine same-positioned items from several iterables\n * ```js\n * zip( [1, 2, 3], [4, 5, 6], [7, 8, 9] );\n * Yields: [ [1, 4, 7], [2, 5, 8], [3, 6, 9] ]\n * ```\n * @param its\n * @returns\n */\nexport function zip<V>(...its: ReadonlyArray<AsyncIterable<V>> | ReadonlyArray<Iterable<V>>) {\n  if (its.length === 0) return Sync.fromArray([]);\n  return isAsyncIterable(its[ 0 ]) ? Async.zip(...its as ReadonlyArray<AsyncIterable<V>>) : Sync.zip(...its as ReadonlyArray<Iterable<V>>);\n}\n\nexport function fromIterable<V>(iterable: Iterable<V>): Generator<V>\nexport function fromIterable<V>(iterable: AsyncIterable<V> | Iterable<V>, interval: Interval): AsyncGenerator<V>\n\n/**\n * Yield values from `iterable`, one at a time.\n * Use `interval` to add time between each item.\n * The first item is yielded without delay.\n * @param iterable Iterable or AsyncIterable\n * @param [interval=1] Interval to wait between yield\n */\nexport function fromIterable<V>(iterable: Iterable<V> | AsyncIterable<V>, interval?: Interval): AsyncGenerator<V> | Generator<V> {\n  if (isAsyncIterable(iterable) || interval !== undefined) return Async.fromIterable(iterable, interval);\n  return Sync.fromIterable(iterable);\n}\n","export * as Dom from './Dom.js';\nexport * as Links from './Links.js';\nexport * from './Types.js';\n\nexport * from './AddToArray.js';\nexport * from './AsArray.js';\nexport * from './AsCallback.js';\nexport * from './AsPromise.js';\nexport * from './AsValue.js';\nexport * from './FromArray.js';\nexport * from './FromEvent.js';\nexport * from './FromFunction.js';\nexport * from './FromIterable.js';\nexport * from './Lazy.js';\nexport * from './MergeFlat.js';\nexport * from './CombineLatestToArray.js';\nexport * from './CombineLatestToObject.js';\nexport * from './Run.js';\nexport * from './Single.js';\nexport * from './Sync.js';\nexport * from './Ticks.js'\nexport * from './Util.js';\n\n/**\n * Prepare a chain, allowing you to provide a source at execution time.\n * ```js\n * const chain = Chains.prepare(\n *  Chains.transform<string,number>( v => number.parseInt(v) ),\n *  Chains.filter<number>(v => v % 2 === 0)\n * );\n *\n * // Run it with provided source\n * for await (const v of chain([`1`, `2`, `3`])) {\n *\n * }\n * ```\n * @param functions\n * @returns\n */\n// export function prepare<In, Out>(...functions: Links<In, Out>) {\n//   const r = (source: GenOrData<In> | GenFactoryNoInput<Out>) => {\n//     return run(source);\n//   }\n//   return r;\n// }\n","//import { query as DomQuery } from \"../../dom/Query.js\";\n\nimport type { GenOrData, Link } from \"./Types.js\";\nimport { resolveToGen } from \"./Util.js\";\nimport { resolveEl } from \"../../dom/ResolveEl.js\";\nimport { toStringDefault } from \"../../Util.js\";\n\nexport type QueryOptions = {\n  baseElement: HTMLElement;\n}\n\nexport type CreateOptions<In> = {\n  /**\n   * Parent element to create elements in. Defaults to `document.body`.\n   */\n  parentEl: string | HTMLElement\n  /**\n   * When set, provide a custom function to return a unique key for a value.\n   * This is used for matching values with elements when using immutable data.\n   * \n   * By default uses the\n   * JSON.stringify() representation.\n   * \n   * To match elements with values by reference, set `byReference` instead.\n   * \n   * @param value \n   * @returns \n   */\n  key: (value: In) => string\n  /**\n   * Default: _false_. When _true_, associate created elements\n   * to values by reference rather than value. This can be useful with mutable values.\n   * \n   * Use this _or_ the `key` option.\n   */\n  byReference: boolean\n  /**\n   * What kind of HTML element to make, defaults to DIV\n   */\n  tagName: string\n  /**\n   * Called whenever an element is created but not yet added to parent element\n   * @param element \n   * @returns \n   */\n  beforeInsert: (element: HTMLElement) => void\n  /**\n   * Called after an element is inserted to the parent element\n   */\n  afterInsert: (element: HTMLElement) => void\n  /**\n   * Called after an element has been removed\n   * @param element \n   * @returns \n   */\n  beforeRemove: (element: HTMLElement) => void\n}\n\nconst createMap = <T, TValue>(key?: (value: T) => string) => {\n  const keyFunction = key ?? ((value: T) => value);\n\n  const map = new Map<ReturnType<typeof keyFunction>, TValue>();\n  return {\n    has(key: T) {\n      return map.has(keyFunction(key));\n    },\n    get(key: T) {\n      return map.get(keyFunction(key));\n    },\n    set(key: T, value: TValue) {\n      // eslint-disable-next-line @typescript-eslint/restrict-template-expressions\n      //console.log(`Chains.Dom.createMap: key: ${ keyFunction(key) } value: ${ value }`);\n      map.set(keyFunction(key), value);\n    },\n    entries() {\n      return map.entries();\n    },\n    delete(key: T | string) {\n      map.delete(key);\n    }\n  }\n\n}\n\nexport type ElementWithValue<T> = {\n  el: HTMLElement\n  value: T\n}\n\n/**\n * Creates a HTML element per value. By default compares\n * values by `JSON.stringify`. Set `byReference:true` to\n * compare values based on reference. Or provide a toString\n * function via `key`.\n * \n * ```js\n * // Generate a random number between 0...4 every second\n * const looper = Generators.interval(() => Math.floor(Math.random()*5), 1000);\n * \n * // Make a chain\n * const ch = Chains.run(\n *  looper,\n *  Chains.Links.delay({before:1000}),\n *  Chains.Dom.perValue()\n * );\n *\n * setTimeout(async () => {\n *    for await (const v of ch) {\n *      const {el,value} = v;\n *      el.textContent = `${value} - ${Date.now().toString()}`;\n *    }\n *    console.log(`ch iteration done`);\n *  });\n * ```\n */\nexport function perValue<In>(options: Partial<CreateOptions<In>> = {}): Link<In, ElementWithValue<In>> {\n  const byReference = options.byReference;\n  const tagName = options.tagName ?? `div`;\n  if (byReference && options.key) throw new Error(`byReference and key options are mutually exclusive`);\n  const keyFunction = byReference ? undefined : options.key ?? toStringDefault;\n  const map = createMap<In, HTMLElement>(keyFunction);\n  const parentElementOrQuery = options.parentEl ?? document.body;\n  const parentEl = resolveEl(parentElementOrQuery);\n\n  const usedElements = new Set<HTMLElement>();\n\n  async function* perValue(input: GenOrData<In>): AsyncGenerator<ElementWithValue<In>> {\n    for await (const value of resolveToGen(input)) {\n      let el = map.get(value);\n      if (!el) {\n        el = document.createElement(tagName);\n        map.set(value, el);\n        if (options.beforeInsert) options.beforeInsert(el);\n        parentEl.append(el);\n        if (options.afterInsert) options.afterInsert(el);\n      }\n      usedElements.add(el);\n      yield { el, value };\n    }\n\n    // Remove unused elements\n    for (const [ id, el ] of map.entries()) {\n      if (usedElements.has(el)) continue;\n      if (options.beforeRemove) options.beforeRemove(el);\n      el.remove();\n      map.delete(id);\n    }\n  }\n  perValue._name = `dom.perValue`;\n  return perValue;\n}\n\n//export type Link<In, Out> = (input: GenOrData<In>) => AsyncGenerator<Out>;\n\n/**\n * From an input stream of strings, yields an output of HTMLElememnts\n * @param options \n * @returns \n */\nexport function query(options: Partial<QueryOptions> = {}): Link<string, HTMLElement> {\n  const baseElement = options.baseElement ?? document;\n\n  async function* query(input: GenOrData<string>): AsyncGenerator<HTMLElement> {\n    const gen = resolveToGen(input);\n    for await (const value of gen) {\n      for (const element of baseElement.querySelectorAll(value)) {\n        yield element as HTMLElement;\n      }\n    }\n  }\n  query._name = `dom.query`;\n  return query;\n}\n\n","import * as Async from \"../IterableAsync.js\";\nimport type { GenOrData, GenFactoryNoInput, Gen } from \"./Types.js\";\nimport { isAsyncIterable } from \"../Iterable.js\";\nimport { sleep } from \"../../flow/Sleep.js\";\n\nexport function isGenFactoryNoInput<Out>(c: any): c is GenFactoryNoInput<Out> {\n  if (!(`_type` in c)) return false;\n  if (c._type === `GenFactoryNoInput`) return true;\n  return false;\n}\n\n/**\n * Wrap the primitive value as generator\n * @param value \n */\nfunction* primitiveToGenerator(value: number | boolean | string) {\n  yield value;\n}\n\nexport const oncePromise = (target: EventTarget, name: string): Promise<any> => {\n  return new Promise(resolve => {\n    const handler = (...args: Array<any>) => {\n      target.removeEventListener(name, handler);\n      resolve(args);\n    };\n    target.addEventListener(name, handler);\n  });\n};\n\n/**\n * Wrap the primitive value as an async generator\n * @param value \n */\nasync function* primitiveToAsyncGenerator(value: number | boolean | string) {\n  yield value;\n  await sleep(1);\n}\n\n/**\n * Resolve the array, data or function to a Generator\n * @param input \n * @returns \n */\nexport function resolveToGen<V>(input: GenOrData<V> | GenFactoryNoInput<V>): Gen<V> {\n  if (Array.isArray(input)) {\n    const a = input.values();\n    (a as any)._name = `arrayInput`;\n    return a;\n  } else if (typeof input === `number` || typeof input === `boolean` || typeof input === `string`) {\n    // Assumes V is primitive\n    return primitiveToGenerator(input) as Gen<V>;\n  } else if (typeof input === `function`) {\n    return input();\n  }\n  return input;\n}\n\n/**\n * Resolve the data, primitive or function to an AsyncGenerator\n * @param input \n * @returns \n */\nexport function resolveToAsyncGen<V>(input: GenOrData<V> | GenFactoryNoInput<V> | undefined): AsyncGenerator<V> | undefined {\n  if (input === undefined) return;\n  if (Array.isArray(input)) {\n    return Async.fromArray(input);\n  } else if (typeof input === `number` || typeof input === `boolean` || typeof input === `string`) {\n    // Assumes V is primitive\n    return primitiveToAsyncGenerator(input) as AsyncGenerator<V>;\n  } else if (typeof input === `function`) {\n    return input();\n  } else if (isAsyncIterable(input)) {\n    return input;\n  }\n  return Async.fromIterable(input);\n}\n","import { intervalToMs, type Interval } from \"../../flow/IntervalType.js\";\nimport { sleep } from \"../../flow/Sleep.js\";\nimport type { Link, GenOrData, DelayOptions, RankFunction, RankOptions, RankArrayOptions } from \"./Types.js\";\nimport { resolveToGen } from \"./Util.js\";\nimport { Elapsed } from \"../../flow/index.js\";\nimport { throwIntegerTest } from \"../../Guards.js\";\n/**\n * Transform values from one type to another. Just like a map function.\n * @param transformer \n * @returns \n */\nexport function transform<In, Out>(transformer: (v: In) => Out): Link<In, Out> {\n  async function* transform(input: GenOrData<In>): AsyncGenerator<Out> {\n    input = resolveToGen(input);\n    for await (const value of input) {\n      yield transformer(value);\n    }\n  }\n  transform._name = `transform`;\n  return transform;\n}\n\n/**\n * Take `limit` number of results from the stream, before closing\n * @param limit \n * @returns \n */\nexport function take<In>(limit: number): Link<In, In> {\n  async function* take(input: GenOrData<In>): AsyncGenerator<In> {\n    input = resolveToGen(input);\n    let yielded = 0;\n    for await (const value of input) {\n      if (++yielded > limit) break;\n      yield value;\n    }\n  }\n  take._name = `take`;\n  return take;\n}\n\n/**\n * Takes an array of values, flattening to a single one\n * using the provided `flattener` function.\n * \n * ```js\n * // Create a chain that flattens values\n * const flatten = Chains.flatten(values => Math.max(...values));\n * // Feed it a single input (an array), get a single output back:\n * const result = await Chains.single(flatten, [ 1, 2, 3]); // 3\n * ```\n * @param flattener Function to flatten array of values to a single value\n * @returns \n */\nexport function flatten<In, Out>(flattener: (v: Array<In>) => Out): Link<Array<In>, Out> {\n  async function* flatten(input: GenOrData<Array<In>>): AsyncGenerator<Out> {\n    input = resolveToGen(input);\n    for await (const value of input) {\n      yield flattener(value);\n    }\n  }\n  flatten._name = `flatten`;\n  return flatten;\n}\n\n/**\n * Allow values through until a duration has elapsed. After\n * that, the chain stops.\n * @param elapsed \n * @returns \n */\nexport function duration<In>(elapsed: Interval): Link<In, In> {\n  const durationMs = intervalToMs(elapsed, 0);\n\n  async function* duration(input: GenOrData<In>): AsyncGenerator<In> {\n    input = resolveToGen(input);\n    const elapsed = Elapsed.since();\n    for await (const value of input) {\n      if (elapsed() > durationMs) break;\n      yield value;\n    }\n  }\n  duration._name = `duration`;\n  return duration;\n}\n\n/**\n * Add delay before/after values are emitted from the input stream.\n * @param options \n * @returns \n */\nexport function delay<In>(options: DelayOptions): Link<In, In> {\n  const before = intervalToMs(options.before, 0);\n  const after = intervalToMs(options.after, 0);\n\n  async function* delay(input: GenOrData<In>): AsyncGenerator<In> {\n    input = resolveToGen(input);\n    for await (const value of input) {\n      if (before > 0) {\n        await sleep(before);\n      }\n      yield value;\n      if (after > 0) {\n        await sleep(after);\n      }\n    }\n  }\n  delay._name = `delay`;\n  return delay;\n}\n\n/**\n * Ensure a minimum length of time between values.\n * Values being produced too quickly are dropped.\n * \n * In the following example, only three values will be let through.\n * ```js\n * const chain = Chains.chain(\n *  // Produce values every 10ms for 350ms\n *  Chains.tick({ interval: 10, elapsed: 350 }),\n *  // Only let a value through every 100ms\n *  Chains.debounce(100)\n * );\n * ```\n * @param rate \n * @returns \n */\nexport function debounce<In>(rate: Interval): Link<In, In> {\n  const rateMs = intervalToMs(rate, 0);\n\n  async function* debounce(input: GenOrData<In>): AsyncGenerator<In> {\n    input = resolveToGen(input);\n    let elapsed = Elapsed.since();\n    for await (const value of input) {\n      if (elapsed() < rateMs) continue;\n      yield value;\n      elapsed = Elapsed.since();\n    }\n  }\n  debounce._name = `debounce`;\n  return debounce;\n}\n\n\n/**\n * Returns a running tally of how many items have been\n * emitted from the input source.\n * \n * This is different than {@link total} which adds up numeric values\n * @returns \n */\nexport function tally<In>(): Link<In, number> {\n  async function* tally(input: GenOrData<In>): AsyncGenerator<number> {\n    input = resolveToGen(input);\n    let count = 0;\n    for await (const _ of input) {\n      yield ++count;\n    }\n  }\n  tally._name = `tally`;\n  return tally;\n}\n\n/**\n * Returns the smallest value from the input.\n * Can work with numbers or number[] as input.\n * Non-numeric data is filtered out.\n * @returns \n */\nexport function min(): Link<number | Array<number>, number> {\n  async function* min(input: GenOrData<number | Array<number>>): AsyncGenerator<number> {\n    input = resolveToGen(input);\n    let min = Number.MAX_SAFE_INTEGER;\n    for await (const value of input) {\n      const arrayValue = Array.isArray(value) ? value : [ value ]\n      for (const subValue of arrayValue) {\n        if (typeof subValue !== `number`) break;\n        min = Math.min(subValue, min);\n        yield min;\n      }\n\n      // if (typeof value !== `number`) break;\n      // min = Math.min(value, min);\n      // yield min;\n    }\n  }\n  min._name = `min`;\n  return min;\n}\n\n/**\n * Returns the largest value from the input\n * Non-numeric data is filtered out\n * @returns \n */\nexport function max(): Link<number | Array<number>, number> {\n  async function* max(input: GenOrData<number | Array<number>>): AsyncGenerator<number> {\n    input = resolveToGen(input);\n    let max = Number.MIN_SAFE_INTEGER;\n    for await (const value of input) {\n      const valueArray = Array.isArray(value) ? value : [ value ];\n      for (const subValue of valueArray) {\n        if (typeof subValue !== `number`) break;\n        max = Math.max(subValue, max);\n        yield max;\n      }\n    }\n  }\n  max._name = `max`;\n  return max;\n}\n\n/**\n * Emits the currently ranked 'highest' value from a stream. Only\n * values exceeding the current highest are emitted.\n * \n * eg, if we are ranking on numerical value, an input stream of:\n * ```\n * 4, 1, 6, 10, 2, 4\n * ```\n * \n * Results in the output stream of:\n * ```\n * 4, 6, 10\n * ```\n * \n * @example \n * ```js\n * // Rank based on a field\n * Chains.Links.rank((a,b) => {\n *  if (a.size > b.size) return `a`;\n *  if (a.size < b.size) return `b`;\n *  return `eq`;\n * });\n * ```\n * @param options \n * @returns \n */\nexport function rank<In>(r: RankFunction<In>, options: Partial<RankOptions> = {}): Link<In, In> {\n  const includeType = options.includeType;\n  const emitEqualRanked = options.emitEqualRanked ?? false;\n  const emitRepeatHighest = options.emitRepeatHighest ?? false;\n  async function* rank(input: GenOrData<In>): AsyncGenerator<In> {\n    input = resolveToGen(input);\n    let best: In | undefined;\n    for await (const value of input) {\n      let emit = false;\n      if (includeType && typeof value !== includeType) continue;\n      if (best === undefined) {\n        best = value;\n        emit = true;\n      } else {\n        const result = r(value, best);\n        //console.log(`result: ${ result } value: ${ JSON.stringify(value) } best: ${ JSON.stringify(best) }`);\n        if (result == `a`) {\n          // New value is the current best\n          best = value;\n          emit = true;\n        } else if (result === `eq` && emitEqualRanked) {\n          // New value is same rank as previous, but we have flag on\n          emit = true;\n        } else if (emitRepeatHighest) {\n          // Emit current highest due to flag\n          emit = true;\n        }\n      }\n      if (emit) yield best;\n    }\n  }\n  rank._name = `rank`;\n  return rank;\n}\n\n/**\n * Emits the highest-ranked value from amongst an array of values.\n * \n * By default, it tracks the highest-ranked _between_ arrays.\n * \n * For example:\n * ```js\n * // Input\n * [ [4,5,6], [1,2,3] ]\n * // Outputs:\n * [ 6 ]\n * ```\n * \n * This behaviour can be modified with an option to only compare _within_ arrays.\n * ```\n * // Input\n * [ [4,5,6], [1,2,3] ]\n * // Output:\n * [ 6, 3 ]\n * ```\n * \n * Uses the `rank` option to determine which is more highly ranked.\n * ```js\n * Chains.Links.rankArray(\n *  (a, b) => {\n *    if (a > b) return `a`; // a is higher\n *    else if (b > a) return `b`; // b is higher\n *    return `eq`; // same\n *  }\n * )\n * ```\n * @param options \n * @returns \n */\nexport function rankArray<In>(r: RankFunction<In>, options: Partial<RankArrayOptions> = {}): Link<Array<In>, In> {\n  const includeType = options.includeType;\n  const emitEqualRanked = options.emitEqualRanked ?? false;\n  const emitRepeatHighest = options.emitRepeatHighest ?? false;\n  const withinArrays = options.withinArrays ?? false;\n\n  async function* rankArray(input: GenOrData<Array<In>>): AsyncGenerator<In> {\n    input = resolveToGen(input);\n    let best: In | undefined;\n    for await (const value of input) {\n      let emit = false;\n      if (withinArrays) best = undefined; // Reset\n      for (const subValue of value) {\n        if (includeType && typeof subValue !== includeType) continue;\n        if (best === undefined) {\n          best = subValue;\n          emit = true;\n        } else {\n          const result = r(subValue, best);\n          if (result == `a`) {\n            // New value is the current best\n            best = subValue;\n            emit = true;\n          } else if (result === `eq` && emitEqualRanked) {\n            // New value is same rank as previous, but we have flag on\n            emit = true;\n          } else if (emitRepeatHighest) {\n            // Emit current highest due to flag\n            emit = true;\n          }\n        }\n      }\n\n      if (emit && best) yield best;\n    }\n  }\n  rankArray._name = `rankArray`;\n  return rankArray;\n}\n\n/**\n * Returns the average from the input.\n * Non-numeric values are filtered out.\n * @returns \n */\nexport function average(): Link<number, number> {\n  async function* average(input: GenOrData<number>): AsyncGenerator<number> {\n    input = resolveToGen(input);\n    let total = 0;\n    let count = 0;\n    for await (const value of input) {\n      if (typeof value !== `number`) break;\n      count++;\n      total += value;\n      yield total / count;\n    }\n  }\n  average._name = `average`;\n  return average;\n}\n\n/**\n * Returns the total of the numeric values.\n * Non-numeric values are filtered out.\n * @returns \n */\nexport function total(): Link<number, number> {\n  async function* average(input: GenOrData<number>): AsyncGenerator<number> {\n    input = resolveToGen(input);\n    let total = 0;\n    for await (const value of input) {\n      if (typeof value !== `number`) break;\n      total += value;\n      yield total;\n    }\n  }\n  average._name = `average`;\n  return average;\n}\n\n/**\n * Chunks an input stream into `size` chunks.\n * \n * Eg, with a chunk size of 3, the input stream of:\n *  1, 2, 3, 4, 5, 6\n * Yields:\n *  [ 1, 2, 3 ], [ 4, 5, 6 ]\n * \n * If `returnRemainders` is _true_ (default), any left over values are returned even if\n * it's less than `size`.\n * @param size \n * @param returnRemainders If true (default) left over data that didn't make a full chunk is also returned\n * @returns \n */\nexport function chunk<In>(size: number, returnRemainders = true): Link<In, Array<In>> {\n  throwIntegerTest(size, `aboveZero`, `size`);\n  async function* chunk(input: GenOrData<In>): AsyncGenerator<Array<In>> {\n    input = resolveToGen(input);\n    let buffer: Array<In> = [];\n    for await (const value of input) {\n      buffer.push(value);\n      if (buffer.length >= size) {\n        yield buffer;\n        buffer = []\n      }\n    }\n    if (returnRemainders && buffer.length > 0) yield buffer;\n  }\n  chunk._name = `chunk`;\n  return chunk;\n}\n\n/**\n * Filters the input source, only allowing through\n * data for which `predicate` returns _true_\n * \n * {@link drop}, on the other hand excludes values for which predicate is _true_\n * @param predicate \n * @returns \n */\nexport function filter<In>(predicate: (v: In) => boolean): Link<In, In> {\n  async function* filter(input: GenOrData<In>): AsyncGenerator<In> {\n    input = resolveToGen(input);\n    for await (const value of input) {\n      if (predicate(value)) {\n        yield value;\n      }\n    }\n  }\n  filter._name = `filter`;\n  return filter;\n}\n\n\n\n/**\n * Drops all values from input stream for which `predicate` returns _true_\n * \n * {@link filter}, on the other hand includes values where the predicate is _true_\n * @param predicate \n * @returns \n */\nexport function drop<In>(predicate: (v: In) => boolean): Link<In, In> {\n  async function* drop(input: GenOrData<In>): AsyncGenerator<In> {\n    input = resolveToGen(input);\n    for await (const value of input) {\n      if (!predicate(value)) {\n        yield value;\n      }\n    }\n  }\n  drop._name = `drop`;\n  return drop;\n}\n","import type { GenFactoryNoInput } from \"./Types.js\";\n\n/**\n * Adds values to the provided array as they are produced,\n * mutating array.\n * \n * ```js\n * const data = [];\n * addToArray(data, tick({ interval: 1000, loops: 5 }));\n * // Execution continues immediately, with `data` mutated over time\n * ```\n * @param valueToWrap \n * @param array \n */\nexport async function addToArray<Out>(array: Array<Out>, valueToWrap: AsyncGenerator<Out> | GenFactoryNoInput<Out>) {\n  const outputType = (typeof valueToWrap === `function`) ? valueToWrap() : valueToWrap;\n  for await (const value of outputType) {\n    array.push(value);\n  }\n}","import type { GenFactoryNoInput } from \"./Types.js\"\n\nimport { toArray as AsyncToArray } from \"../IterableAsync.js\";\n\n/**\n * Async function that returns the chain as an array of values\n * ```js\n * const values = await asArray(tick( { interval: 1000, loops: 5 }));\n * // After 5 seconds, values will be a set of timestamps.\n * ```\n * @param valueToWrap \n * @returns \n */\nexport async function asArray<Out>(valueToWrap: AsyncGenerator<Out> | GenFactoryNoInput<Out>): Promise<Array<Out>> {\n  const outputType = (typeof valueToWrap === `function`) ? valueToWrap() : valueToWrap;\n  return AsyncToArray(outputType);\n}","import type { GenFactoryNoInput, GenOrData } from \"./Types.js\";\n\n/**\n * Calls `callback` whenever the chain/generator produces a value.\n * \n * When using `asCallback`, call it with `await` to let generator run its course before continuing:\n * ```js\n * await asCallback(tick({ interval:1000, loops:5 }), x => {\n *  // Gets called 5 times, with 1000ms interval\n * });\n * console.log(`Hi`); // Prints after 5 seconds\n * ```\n * \n * Or if you skip the `await`, code continues and callback will still run:\n * ```js\n * asCallback(tick({ interval: 1000, loops: 5}), x => {\n *  // Gets called 5 times, with 1000ms interval\n * });\n * console.log(`Hi`); // Prints immediately\n * ```\n * @param valueToWrap \n * @param callback \n */\nexport async function asCallback<V>(valueToWrap: GenOrData<V> | GenFactoryNoInput<V>, callback: (v: V) => unknown, onDone?: () => void) {\n  const outputType = (typeof valueToWrap === `function`) ? valueToWrap() : valueToWrap;\n  for await (const value of outputType) {\n    callback(value);\n  }\n  if (onDone) onDone();\n}","import type { GenFactoryNoInput } from \"./Types.js\";\n\n/**\n * Treats the chain/generator as a promise\n * \n * ```js\n * const ticker = asPromise(tick({ interval: 1000 }));\n * const x = await ticker(); //  Waits for 1000ms before giving a value\n * ```\n * \n * This will only ever return one value. To return multiple values, it's necessary\n * to call `asPromise` and `await` the result in a loop.\n * @param valueToWrap \n * @returns \n */\nexport function asPromise<V>(valueToWrap: AsyncGenerator<V> | GenFactoryNoInput<V>) {\n  let lastValue: V | undefined;\n\n  const outputType = (typeof valueToWrap === `function`) ? valueToWrap() : valueToWrap;\n\n  async function asPromise(): Promise<V | undefined> {\n    const v = await outputType.next();\n    if (v.done) return;\n    lastValue = v.value;\n    return lastValue;\n  }\n  return asPromise;\n}","import type { GenFactoryNoInput } from \"./Types.js\";\n\n/**\n * Returns the most recent value from the chain/generator, or\n * `initialValue` (defaulting to _undefined_) if no value\n * has been emitted yet.\n * \n * ```js\n * const ticker = asValue(tick({ interval: 1000 }));\n * x = ticker(); // Get the most recent value\n * ```\n * \n * Every time it's called, it fetches a new value from the generator, assuming\n * it isn't already awaiting a result.\n * \n * In the meantime, the last value (or `initialValue`) is returned.\n * @param valueToWrap Value to wrap\n * @param initialValue Initial value\n * @returns \n */\nexport function asValue<V>(valueToWrap: AsyncGenerator<V> | GenFactoryNoInput<V>, initialValue?: V) {\n  let lastValue: V | undefined = initialValue;\n  let awaiting = false;\n  const outputType = (typeof valueToWrap === `function`) ? valueToWrap() : valueToWrap;\n\n  function asValue(): V | undefined {\n    if (!awaiting) {\n      awaiting = true;\n      outputType.next().then(v => {\n        lastValue = v.value;\n        awaiting = false;\n      }).catch((error: unknown) => {\n        awaiting = false;\n        throw error;\n      });\n    }\n    return lastValue;\n  }\n  return asValue;\n}","import type { Interval } from \"../../flow/IntervalType.js\";\nimport { sleep } from \"../../flow/Sleep.js\";\nimport { isAsyncIterable, isIterable } from \"../Iterable.js\";\nimport type { GenFactoryNoInput } from \"./Types.js\";\n\nexport function fromArray<Out>(it: Array<Out>, delay: Interval = 5): GenFactoryNoInput<Out> {\n  async function* fromArray(): AsyncGenerator<Out> {\n    for (const v of it) {\n      await sleep(delay);\n      yield v;\n    }\n  }\n  fromArray._name = `fromArray`;\n  /* eslint-disable-next-line @typescript-eslint/no-unnecessary-type-assertion */\n  fromArray._type = `GenFactoryNoInput` as const;\n  return fromArray;\n}\n\n","import type { GenFactoryNoInput } from \"./Types.js\";\nimport { oncePromise } from \"./Util.js\";\n\nexport function fromEvent<Out>(target: EventTarget, name: string): GenFactoryNoInput<Out> {\n  async function* fromEvent(): AsyncGenerator<Out> {\n    while (true) {\n      yield await oncePromise(target, name) as Out;\n    }\n  }\n  fromEvent._name = `fromEvent`;\n  /* eslint-disable-next-line @typescript-eslint/no-unnecessary-type-assertion */\n  fromEvent._type = `GenFactoryNoInput` as const;\n  return fromEvent;\n}","import type { GenFactoryNoInput } from \"./Types.js\";\n\n/**\n * Produce a value from a callback. When\n * the callback returns _undefined_ it is considered done.\n * \n * ```js\n * const callback = () => Math.random();\n * \n * const f = Chains.fromFunction(callback);\n * for await (const v of f) {\n *  // v is a new random number\n * }\n * ```\n * \n * In the context of a chain:\n * ```js\n * let produced = 0;\n * const chain = Chains.chain<number, string>(\n *  // Produce incrementing numbers\n *  Chains.fromFunction(() => produced++),\n *  // Convert to `x:0`, `x:1` ...\n *  Chains.transform(v => `x:${ v }`),\n *  // Take first 5 results\n *  Chains.cap(5)\n * );\n * const data = await Chains.asArray(chain);\n * ```\n * @param callback \n * @returns \n */\nexport function fromFunction<Out>(callback: () => Promise<Out> | Out): GenFactoryNoInput<Out> {\n  async function* fromFunction(): AsyncGenerator<Out> {\n    while (true) {\n      const v = await callback();\n      if (v === undefined) break;\n      yield v;\n    }\n  }\n\n  fromFunction._name = `fromFunction`;\n  /* eslint-disable-next-line @typescript-eslint/no-unnecessary-type-assertion */\n  fromFunction._type = `GenFactoryNoInput` as const;\n  return fromFunction;\n}\n","import type { GenFactoryNoInput } from \"./Types.js\";\n\nexport function fromIterable<Out>(it: Iterable<Out> | AsyncIterable<Out>): GenFactoryNoInput<Out> {\n  async function* fromIterable(): AsyncGenerator<Out> {\n    for await (const v of it) {\n      yield v;\n    }\n  }\n  fromIterable._name = `fromIterable`;\n  /* eslint-disable-next-line @typescript-eslint/no-unnecessary-type-assertion */\n  fromIterable._type = `GenFactoryNoInput` as const;\n  return fromIterable;\n}","import type { Interval } from \"../../flow/IntervalType.js\";\nimport { Async } from \"../index.js\";\nimport { fromFunction } from \"./FromFunction.js\";\nimport type { GenOrData, LazyChain, DelayOptions, Link, RankArrayOptions, RankFunction, RankOptions } from \"./Types.js\";\nimport { isGenFactoryNoInput, resolveToAsyncGen } from \"./Util.js\";\nimport * as L from './Links.js';\n\nconst getLinkName = (c: Link<any, any>): string => {\n  return c._name;\n  //return `_name` in c ? c._name as string : c.name;\n}\n\nexport function lazy<In, Out>(): LazyChain<In, Out> {\n  const chained: Array<Link<any, any>> = [];\n  let dataToUse: GenOrData<In> | undefined;\n\n  const asGenerator = <V>(data?: GenOrData<In>) => {\n    if (data === undefined) data = dataToUse;\n    let d = resolveToAsyncGen(data);\n    for (const c of chained) {\n      if (d === undefined) {\n        if (isGenFactoryNoInput<In>(c)) {\n          d = c();\n        } else {\n          throw new Error(`Function '${ getLinkName(c) }' requires input. Provide it to the function, or call 'input' earlier.`)\n        }\n      } else {\n        d = c(d);\n      }\n    }\n    return d as AsyncGenerator<V>\n  }\n\n  const w: LazyChain<In, Out> = {\n    rankArray: (r: RankFunction<In>, options: Partial<RankArrayOptions>): LazyChain<In, Out> => {\n      chained.push(L.rankArray(r, options));\n      return w;\n    },\n    rank: (r: RankFunction<In>, options: Partial<RankOptions>): LazyChain<In, Out> => {\n      chained.push(L.rank(r, options));\n      return w;\n    },\n    transform: (transformer: (v: any) => any) => {\n      chained.push(L.transform(transformer));\n      return w;\n    },\n    flatten: (flattener: (values: Array<any>) => any) => {\n      chained.push(L.flatten(flattener));\n      return w;\n    },\n    drop: (predicate: (v: In) => boolean) => {\n      chained.push(L.drop(predicate));\n      return w;\n    },\n    delay: (options: DelayOptions) => {\n      chained.push(L.delay(options));\n      return w;\n    },\n    duration: (elapsed: Interval) => {\n      chained.push(L.duration(elapsed));\n      return w;\n    },\n    debounce: (rate: Interval) => {\n      chained.push(L.debounce(rate));\n      return w;\n    },\n    fromFunction: (callback: () => any) => {\n      chained.push(fromFunction(callback));\n      return w;\n    },\n    take: (limit: number) => {\n      chained.push(L.take(limit));\n      return w;\n    },\n    chunk: (size: number, returnRemainders = true) => {\n      chained.push(L.chunk(size, returnRemainders))\n      return w;\n    },\n    filter: (predicate: (input: any) => boolean) => {\n      chained.push(L.filter(v => predicate(v)));\n      return w;\n    },\n    min: (): LazyChain<any, number> => {\n      chained.push(L.min());\n      return w as unknown as LazyChain<any, number>;\n    },\n    max: (): LazyChain<any, number> => {\n      chained.push(L.max());\n      return w as unknown as LazyChain<any, number>;\n    },\n    average: (): LazyChain<any, number> => {\n      chained.push(L.average());\n      return w as unknown as LazyChain<any, number>;\n    },\n    total: (): LazyChain<any, number> => {\n      chained.push(L.total());\n      return w as unknown as LazyChain<any, number>;\n    },\n    tally: (): LazyChain<any, number> => {\n      chained.push(L.tally());\n      return w as unknown as LazyChain<any, number>;\n    },\n    input(data: GenOrData<In>) {\n      dataToUse = data;\n      return w\n    },\n    asGenerator,\n    asAsync(data?: GenOrData<In>) {\n      let d = data ?? dataToUse;\n      for (const c of chained) {\n        if (d === undefined && isGenFactoryNoInput<In>(c)) {\n          d = c();\n        } else if (d === undefined) {\n          throw new Error(`Function '${ getLinkName(c) }' needs input. Pass in data calling 'asAsync', or call 'input' earlier`);\n        } else {\n          d = c(d);\n        }\n      }\n      return w;\n    },\n    asArray: async (data?: GenOrData<In>): Promise<Array<Out>> => {\n      const g = asGenerator<Out>(data);\n      return await Async.toArray<Out>(g);\n    },\n    firstOutput: async (data?: GenOrData<In>): Promise<Out | undefined> => {\n      const g = asGenerator<Out>(data);\n      const v = await g.next();\n      return v.value as Out;\n    },\n    lastOutput: async (data?: GenOrData<In>): Promise<Out | undefined> => {\n      const g = asGenerator<Out>(data);\n      let lastValue: Out | undefined;\n      for await (const v of g) {\n        lastValue = v as Out;\n      }\n      return lastValue;\n    },\n  }\n  return w as unknown as LazyChain<In, Out>;\n}","import type { GenFactoryNoInput, GenOrData } from \"./Types.js\";\nimport { Queues } from \"../../collections/index.js\";\nimport { sleep } from \"../..//flow/Sleep.js\";\nimport { resolveToAsyncGen } from \"./Util.js\";\n/**\n * Merge values from several sources into one stream, interleaving values.\n * When all streams are complete it finishes.\n * \n * Alternatively:\n * - {@link combineLatestToArray}/{@link combineLatestToObject} emits snapshots of all the generators, as quickly as the fastest one\n * - {@link syncToArray}/{@link syncToObject} which releases a set of results when all inputs have emitted a value\n * @param sources \n */\nexport async function* mergeFlat<Out>(...sources: Array<GenOrData<any> | GenFactoryNoInput<any>>): AsyncGenerator<Out> {\n  const sourcesInput = sources.map(source => resolveToAsyncGen(source));\n  const buffer = Queues.mutable<Out>();\n  let completed = 0;\n\n  const schedule = async (source: AsyncGenerator<any> | undefined) => {\n    if (source === undefined) {\n      completed++;\n      return;\n    }\n\n    const x = await source.next();\n    if (x.done) {\n      completed++;\n    } else {\n      buffer.enqueue(x.value as Out);\n      // eslint-disable-next-line @typescript-eslint/no-misused-promises\n      setTimeout(() => schedule(source), 1);\n    }\n  }\n\n  for (const source of sourcesInput) {\n    // eslint-disable-next-line @typescript-eslint/no-misused-promises\n    setTimeout(() => schedule(source), 1);\n  }\n\n  const loopSpeed = 10;\n  let loopFactor = 1;\n  while (completed < sourcesInput.length) {\n    const d = buffer.dequeue();\n    if (d === undefined) {\n      // Grow loop factor up to 10\n      loopFactor = Math.min(loopFactor + 1, 10);\n    } else {\n      yield d;\n      // Reset loop factor\n      loopFactor = 1;\n    }\n    await sleep(loopSpeed * loopFactor);\n  }\n}","import type { GenOrData, GenFactoryNoInput, CombineLatestOptions, Gen } from \"./Types.js\";\nimport { resolveToGen } from \"./Util.js\";\nimport { isEqual as ArrayIsEqual } from \"../../collections/arrays/index.js\";\n\n/**\n * Monitors sources, storing as they happen to an array.\n * Whenever a new value is emitted, the whole array is sent out, containing current\n * values from each source, or _undefined_ if not yet emitted.\n * \n * The tempo of this stream will be set by the fastest source stream.\n * See {@link syncToArray} to have pace determined by slowest source, and only\n * send when each source has produce a new value compared to last time.\n * \n * Set `onSourceDone` to choose behaviour if a source stops. By default it\n * is 'break', meaning the whole combined stream stops.\n * \n * If a source completes and onSourceDone = 'allow', the option\n * 'finalValue' sets the logic for what values get returned for the source.\n * By default the setting is 'undefined', thus _undefined_ results. 'last' will be the last (old) value\n * from that source.\n */\nexport async function* combineLatestToArray(sources: Array<GenOrData<any> | GenFactoryNoInput<any>>, options: Partial<CombineLatestOptions> = {}): AsyncGenerator<Array<any>> {\n  const onSourceDone = options.onSourceDone ?? `break`;\n  const finalValue = options.finalValue ?? `undefined`;\n  const afterEmit = options.afterEmit ?? `last`;\n  type InputState = {\n    waiting: Promise<any> | undefined,\n    index: number\n    gen: Gen<any>\n    done: boolean\n    lastValue: any\n  }\n  const inputs = sources.map<InputState>((source, index) => ({ waiting: undefined, index, gen: resolveToGen(source), done: false, lastValue: undefined }));\n\n  const isDone = () => !inputs.some(v => !v.done);\n  const isWaiting = () => inputs.some(v => v.waiting !== undefined);\n  const allEmpty = (d: Array<any>) => !d.some(v => v !== undefined);\n\n  let lastEmitted: Array<any> = [];\n  //let count = 0;\n  while (true) {\n    const promises = [];\n    for (const input of inputs) {\n      //console.log(`  ${ input.index } done: ${ input.done } waiting: ${ input.waiting !== undefined } last: ${ input.lastValue }`);\n      if (input.done) continue;\n      if (input.waiting !== undefined) {\n        promises.push(input.waiting);\n        continue;\n      }\n      const p = Promise.resolve((async () => {\n        if (input.done) return input;\n        const v = await input.gen.next();\n        input.waiting = undefined;\n        if (v.done) {\n          input.done = true;\n          if (finalValue === `undefined`) input.lastValue = undefined;\n        } else {\n          //console.log(`   ${ input.index } value: ${ v.value }`);\n          input.lastValue = v.value;\n        }\n        return input;\n      })());\n      input.waiting = p;\n      promises.push(p);\n    }\n    const won = await Promise.race(promises);\n\n    if (won.done && onSourceDone === `break`) break;\n\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-return\n    const d = inputs.map(v => v.lastValue);\n    if (d.length === 0) {\n      return;\n    }\n\n    const dataEmpty = allEmpty(d);\n\n    if (dataEmpty && !isWaiting()) {\n      return;\n    }\n\n    if (!ArrayIsEqual(lastEmitted, d) && !dataEmpty) {\n      lastEmitted = d;\n      yield d;\n    }\n    if (afterEmit === `undefined`) {\n      for (const input of inputs) {\n        if (input.waiting !== undefined) continue;\n        input.lastValue = undefined;\n      }\n    }\n    if (isDone()) {\n      break;\n    }\n  }\n}\n","import type { GenOrData, GenFactoryNoInput, CombineLatestOptions, Gen, GenValueTypeObject } from \"./Types.js\";\nimport { resolveToGen } from \"./Util.js\";\nimport { Maps } from \"../../collections/index.js\"\nimport { isEqualValueIgnoreOrder } from \"../../IsEqual.js\";\n\n/**\n * Monitors sources, storing as they happen to an object.\n * Whenever a new value is emitted, the object is sent out, containing current\n * values from each source, or _undefined_ if not yet emitted.\n * \n * The tempo of this stream will be set by the fastest source stream.\n * See {@link syncToObject} to have pace determined by slowest source, and only\n * send when each source has produce a new value compared to last time.\n * \n * Set `onSourceDone` to choose behaviour if a source stops. By default it\n * is 'break', meaning the whole merged stream stops.\n * \n * If a source completes and onSourceDone = 'allow', the option\n * 'finalValue' sets the logic for what values get returned for the source.\n * By default the setting is 'undefined', thus _undefined_ results. 'last' will be the last (old) value\n * from that source.\n */\nexport async function* combineLatestToObject<const T extends Record<string, GenOrData<any> | GenFactoryNoInput<any>>>(sources: T, options: Partial<CombineLatestOptions> = {}): AsyncGenerator<GenValueTypeObject<T>> {\n  const onSourceDone = options.onSourceDone ?? `break`;\n  const finalValue = options.finalValue ?? `undefined`;\n  const afterEmit = options.afterEmit ?? `last`;\n  type InputState = {\n    waiting: Promise<any> | undefined\n    gen: Gen<any>\n    done: boolean\n    lastValue: any\n    key: string\n  }\n\n  const states = new Map<string, InputState>();\n  for (const [ key, value ] of Object.entries(sources)) {\n    states.set(key, {\n      gen: resolveToGen(value),\n      done: false,\n      lastValue: undefined,\n      waiting: undefined,\n      key\n    })\n  }\n\n  // eslint-disable-next-line unicorn/no-array-callback-reference, unicorn/no-array-method-this-argument\n  const isDone = () => !Maps.some(states, v => !v.done);\n  // eslint-disable-next-line unicorn/no-array-callback-reference, unicorn/no-array-method-this-argument\n  const isWaiting = () => Maps.some(states, v => v.waiting !== undefined);\n  const allEmpty = (d: object) => {\n    for (const v of Object.values(d)) {\n      if (v !== undefined) return false;\n    }\n    return true;\n  }\n\n  const getData = (): GenValueTypeObject<T> => {\n    const r = {};\n    for (const [ key, state ] of states) {\n      (r as any)[ key ] = state.lastValue;\n    }\n    return r as GenValueTypeObject<T>;\n  }\n  let lastEmitted: GenValueTypeObject<T> | undefined;\n\n  while (true) {\n    const promises = [];\n    for (const input of states.values()) {\n      //console.log(`  ${ input.key } done: ${ input.done } waiting: ${ input.waiting !== undefined } last: ${ input.lastValue }`);\n      if (input.done) continue;\n      if (input.waiting !== undefined) {\n        promises.push(input.waiting);\n        continue;\n      }\n      const p = Promise.resolve((async () => {\n        if (input.done) return input;\n        const v = await input.gen.next();\n        input.waiting = undefined;\n        if (v.done) {\n          input.done = true;\n          if (finalValue === `undefined`) input.lastValue = undefined;\n        } else {\n          //console.log(`   ${ input.key } value: ${ v.value }`);\n          input.lastValue = v.value;\n        }\n        return input;\n      })());\n      input.waiting = p;\n      promises.push(p);\n    }\n    const won = await Promise.race(promises);\n\n    if (won.done && onSourceDone === `break`) break;\n\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-return\n    const d = getData();\n    //console.log(`d`, d);\n    // if (isEqualValueIgnoreOrder(d, {} as any)) {\n    //   console.log(`keys is empty`);\n    //   return;\n    // }\n\n    const dataEmpty = allEmpty(d);\n    if (dataEmpty && !isWaiting()) {\n      //console.log(`dataEmpty and not waiting`);\n      return;\n    }\n\n    if (!isEqualValueIgnoreOrder(lastEmitted, d) && !dataEmpty) {\n      //console.log(` -- emitting!`);\n      lastEmitted = d;\n      yield d;\n    }\n    if (afterEmit === `undefined`) {\n      for (const input of states.values()) {\n        if (input.waiting !== undefined) continue;\n        input.lastValue = undefined;\n      }\n    }\n    if (isDone()) {\n      break;\n    }\n  }\n}\n","import type { LinksWithSource, Gen, GenOrData, GenFactoryNoInput, Link } from \"./Types.js\";\nimport { resolveToGen } from \"./Util.js\";\n\n/**\n * Chain functions together. First argument is the source.\n * `runN` takes any number of chain functions. Use {@link run} if\n * possible, because it has improved type hinting.\n * \n * @example Process an array of strings. Transforming into\n * integers, and then filtering only even numbers.\n * ```js\n * const ch = Chains.runN(\n *  [ `1`, `2`, `3`, `4`, `5`, `6`, `7`, `8`, `9`, `10` ],\n *  Chains.transform<string, number>(v => Number.parseInt(v)),\n *  Chains.filter(v => v % 2 === 0)\n *);\n * const output = await Async.toArray(ch2);\n * // [ 2, 4, 6, 8, 10 ]\n * ```\n * @param functions \n * @returns \n */\nexport async function* runN<In, Out>(...functions: LinksWithSource<In, Out>): AsyncGenerator<Out> {\n  let input: Gen<In> | undefined;\n  for (const fnOrData of functions) {\n    input = typeof fnOrData === `function` ? fnOrData(input ?? []) : resolveToGen(fnOrData);\n  }\n  if (input === undefined) return;\n  for await (const v of input) {\n    yield v as Out;\n  }\n}\n\nexport function run<T1>(gen: GenOrData<T1> | GenFactoryNoInput<T1>): AsyncGenerator<T1>;\nexport function run<T1, T2>(gen: GenOrData<T1> | GenFactoryNoInput<T1>, l0: Link<T1, T2>): AsyncGenerator<T2>;\nexport function run<T1, T2, T3>(gen: GenOrData<T1> | GenFactoryNoInput<T1>, l0: Link<T1, T2>, l1: Link<T2, T3>): AsyncGenerator<T3>;\nexport function run<T1, T2, T3, T4>(gen: GenOrData<T1> | GenFactoryNoInput<T1>, l0: Link<T1, T2>, l1: Link<T2, T3>, l2: Link<T3, T4>): AsyncGenerator<T4>;\nexport function run<T1, T2, T3, T4, T5>(gen: GenOrData<T1> | GenFactoryNoInput<T1>, l0: Link<T1, T2>, l1: Link<T2, T3>, l2: Link<T3, T4>, l3: Link<T4, T5>): AsyncGenerator<T5>;\nexport function run<T1, T2, T3, T4, T5, T6>(gen: GenOrData<T1> | GenFactoryNoInput<T1>, l0: Link<T1, T2>, l1: Link<T2, T3>, l2: Link<T3, T4>, l3: Link<T4, T5>, l4: Link<T5, T6>): AsyncGenerator<T6>;\nexport function run<T1, T2, T3, T4, T5, T6, T7>(gen: GenOrData<T1> | GenFactoryNoInput<T1>, l0: Link<T1, T2>, l1: Link<T2, T3>, l2: Link<T3, T4>, l3: Link<T4, T5>, l4: Link<T5, T6>, l5: Link<T6, T7>): AsyncGenerator<T7>;\n\n/**\n * Chain functions together. First argument is the source.\n * Use {@link runN} if you want to chain more links than is possible here,\n * at the cost of poorer type hinting.\n * \n * @example Process an array of strings. Transforming into\n * integers, and then filtering only even numbers.\n * ```js\n * const ch = Chains.run(\n *  [ `1`, `2`, `3`, `4`, `5`, `6`, `7`, `8`, `9`, `10` ],\n *  Chains.transform(v => Number.parseInt(v)),\n *  Chains.filter(v => v % 2 === 0)\n *);\n * const output = await Async.toArray(ch2);\n * // [ 2, 4, 6, 8, 10 ]\n * ```\n * @param gen \n * @param l0 \n * @param l1 \n * @param l2 \n * @param l3 \n * @returns \n */\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nexport async function* run<T1, T2, T3, T4, T5, T6, T7>(gen: GenOrData<T1> | GenFactoryNoInput<T1>, l0?: Link<T1, T2>, l1?: Link<T2, T3>, l2?: Link<T3, T4>, l3?: Link<T4, T5>, l4?: Link<T5, T6>, l5?: Link<T6, T7>): AsyncGenerator<T1> {\n  let input: Gen<any> | undefined;\n  // eslint-disable-next-line prefer-rest-params\n  const functions = arguments;\n  for (const fnOrData of functions) {\n    // eslint-disable-next-line unicorn/prefer-ternary\n    if (typeof fnOrData === `function`) {\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-call\n      input = fnOrData(input ?? []);\n    } else {\n      input = resolveToGen(fnOrData);\n    }\n  }\n  if (input === undefined) return;\n  for await (const v of input) {\n    yield v;\n  }\n}\n","import type { Link } from \"./Types.js\";\n\n/**\n * Input a single value to the chain, return a single result\n * @param f \n * @param input \n * @returns \n */\nexport async function single<In, Out>(f: Link<In, Out>, input: In): Promise<Out | undefined> {\n  const iterator = await f([ input ]).next();\n  return iterator.value as Out | undefined;\n}","import { intervalToMs } from \"../../flow/IntervalType.js\";\nimport type { SleepOpts } from \"../../flow/Sleep.js\";\nimport * as Async from \"../IterableAsync.js\";\nimport type { GenOrData, GenFactoryNoInput, SyncOptions } from \"./Types.js\";\nimport { resolveToGen } from \"./Util.js\";\n\n// export function syncToObject<const T extends Record<string, GenOrData<any>>>(reactiveSources: T, options: Partial<SyncOptions> = {}): AsyncGenerator<GenValueTypeObject<T>> {\n//   const keys = Object.keys(reactiveSources)\n//   const values = Object.values(reactiveSources);\n\n//   const s = syncToArray(values, options);\n//   const st = transform(s, (streamValues) => {\n//     return zipKeyValue(keys, streamValues);\n//   });\n//   return st as AsyncGenerator<GenValueTypeObject<T>>;\n// }\n\n/**\n * Waits for all sources to produce a value, sending the combined results as an array.\n * After sending, it waits again for each source to send at least one value.\n * \n * Use {@link syncToObject} to output objects based on labelled sources rather than an array of values.\n * \n * Pace will be set by the slowest source. Alternatively, use {@link combineLatestToArray} where the rate is determined by fastest source.\n * \n * Only complete results are sent. For example if source A & B finish and source C is still producing values,\n * synchronisation is not possible because A & B stopped producing values. Thus the stream will self-terminate\n * after `maximumWait` (2 seconds). The newer values from C are lost.\n */\nexport async function* syncToArray(sources: Array<GenOrData<any> | GenFactoryNoInput<any>>, options: Partial<SyncOptions> = {}): AsyncGenerator<Array<any>> {\n  const onSourceDone = options.onSourceDone ?? `break`;\n  //const ac = new AbortController();\n  const maximumWaitMs = intervalToMs(options.maximumWait, 2000);\n  const finalValue = options.finalValue ?? `undefined`;\n  const inputs = sources.map(source => ({ seq: 0, lastValue: undefined, gen: resolveToGen(source), done: false }));\n  const nextWithTimeoutOpts: SleepOpts<any> = {\n    millis: maximumWaitMs\n  };\n  let seq = 0;\n  const isAllDone = () => !inputs.some(v => !v.done);\n  let go = true;\n  while (go) {\n    seq++;\n    for (const input of inputs) {\n      if (input.done) {\n        input.seq = seq;\n        continue;\n      }\n      // Read source, with a timeout\n      const v = await Async.nextWithTimeout(input.gen, nextWithTimeoutOpts);\n\n      // Input has finished\n      if (v.done) {\n        input.done = true;\n        input.seq = seq;\n        if (finalValue === `undefined`) {\n          input.lastValue = undefined;\n        }\n        if (onSourceDone === `break`) {\n          return;\n        }\n      } else {\n        // Stash away value\n        input.lastValue = v.value;\n        input.seq = seq;\n      }\n    }\n    if (go) {\n      // Return the set of data\n      const d = inputs.filter(v => v.seq === seq).map(v => v.lastValue);\n      if (d.length === 0) return;\n      if (!d.some(v => v !== undefined)) return;\n      yield d;\n    }\n    if (isAllDone()) go = false;\n  }\n  // let somethingProduced = true;\n\n  // while (somethingProduced) {\n  //   let data = [];\n  //   for (let index = 0; index < sourcesInput.length; index++) {\n  //     // eslint-disable-next-line unicorn/no-null\n  //     data[ index ] = null;\n  //   }\n\n  //   somethingProduced = false;\n  //   // Request the next value from each source\n  //   for (const [ index, source ] of sourcesInput.entries()) {\n  //     const v = await source.next();\n  //     if (!v.done) {\n  //       data[ index ] = v.value;\n  //       somethingProduced = true;\n  //     }\n  //   }\n  //   if (somethingProduced) {\n  //     // Send data\n  //     yield data;\n  //     data = [];\n  //   }\n  // }\n}","import { intervalToMs } from \"../../flow/IntervalType.js\";\nimport { sleep } from \"../../flow/Sleep.js\";\nimport { Elapsed } from \"../../flow/index.js\";\nimport type { GenFactoryNoInput, TickOptions } from \"./Types.js\";\n\n/**\n * Generate timestamp values at `interval` rate. By default it runs forever. \n * Use `loops` or `elapsed` to set upper limit on how long it should run.\n * \n * Options:\n * - `asClockTime`: If _true_, yielded value will be clock time rather than elapsed milliseconds\n * @param options \n * @returns \n */\nexport function tick(options: TickOptions): GenFactoryNoInput<number> {\n  const intervalMs = intervalToMs(options.interval, 0);\n  const asClockTime = options.asClockTime ?? false;\n  const loops = options.loops ?? Number.MAX_SAFE_INTEGER;\n  let looped = 0;\n  const durationTime = intervalToMs(options.elapsed, Number.MAX_SAFE_INTEGER);\n\n  async function* ts(): AsyncGenerator<number> {\n    const elapsed = Elapsed.since();\n    while (looped < loops && elapsed() < durationTime) {\n      yield asClockTime ? Date.now() : elapsed();\n\n      // Adjust sleep period so timing errors don't accumulate\n      const expectedTimeDiff = (looped * intervalMs) - elapsed();\n      await sleep(Math.max(0, intervalMs + expectedTimeDiff));\n      looped++;\n    }\n  }\n  ts._name = `timestamp`;\n  /* eslint-disable-next-line @typescript-eslint/no-unnecessary-type-assertion */\n  ts._type = `GenFactoryNoInput` as const;\n  return ts;\n}"],"mappings":"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","names":["chunks","combineLatestToArray","concat","dropWhile","equals","every","fill","filter","find","flatten","forEach","fromArray","fromIterable","map","max","min","reduce","slice","some","toArray","unique","uniqueByValue","until","zip","fromArray","fromEvent","fromIterable","map","key","perValue","query","filter","flatten","max","min","transform","take","flatten","duration","elapsed","delay","debounce","tally","min","max","rank","rankArray","average","total","chunk","filter","drop","asPromise","asValue","fromArray","delay","fromEvent","fromFunction","fromIterable","flatten","filter","min","max","combineLatestToArray","min","max","dropWhile","until","chunks","filter","fill","concat","find","forEach","map","fromArray","flatten","some","reduce","slice","unique","uniqueByValue","toArray","every","equals","zip","fromIterable"]}