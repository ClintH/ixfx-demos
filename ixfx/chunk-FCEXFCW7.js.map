{"version":3,"sources":["../src/random/index.ts","../src/random/Chance.ts","../src/random/NonZero.ts","../src/random/Gaussian.ts","../src/random/Guid.ts","../src/numbers/Count.ts","../src/random/Integer.ts","../src/random/Time.ts","../src/modulation/Easing.ts","../src/random/Weighted.ts","../src/random/WeightedInteger.ts"],"sourcesContent":["export * from './Chance.js';\nexport * from './FloatSource.js';\nexport * from './Gaussian.js';\nexport * from './Guid.js';\nexport * from './Integer.js';\nexport * from './NonZero.js';\nexport * from './String.js';\nexport * from './Time.js';\nexport type * from './Types.js';\nexport * from './Weighted.js';\nexport * from './WeightedIndex.js';\nexport * from './WeightedInteger.js';\n\nexport { randomElement as arrayElement } from '../data/arrays/Random.js';\nexport { randomHue as hue } from '../visual/Colour.js';\nexport { randomIndex as arrayIndex } from '../data/arrays/Random.js';","import { throwNumberTest } from \"../util/GuardNumbers.js\";\nimport type { RandomSource } from \"./Types.js\";\n\n/**\n * Chance of returning `a` or `b`, based on probability `p`.\n * \n * `p` sets the weighting for picking `b`. The higher the value (up to 1),\n * the more likely `b` will be picked.\n * \n * ```js\n * // 50% of the time it will return 100, 50% 110\n * chance(0.5, 100, 110);\n * // 90% of the time it will yield 110, 10% it will yield 100\n * chance(0.9, 100, 110);\n * ```\n * \n * All parameters can be either a function returning a value, or a value.\n * @param p \n * @param initial \n * @param compute \n * @param randomSource \n * @returns \n */\nexport const chance = <T>(p: number | (() => number), a: T | (() => T), b: T | (() => T), randomSource?: RandomSource): T => {\n  const source = randomSource ?? Math.random;\n  const resolve = <V>(x: V | (() => V)): V => {\n    if (typeof x === `function`) return (x as () => V)();\n    return x;\n  }\n\n  const pp = resolve(p);\n  throwNumberTest(pp, `percentage`, `p`);\n\n  if (source() <= pp) {\n    return resolve(b);\n  } else {\n    return resolve(a);\n  }\n}","import type { RandomSource } from \"./Types.js\";\n\nexport const calculateNonZero = (source: RandomSource = Math.random) => {\n  let v = 0;\n  while (v === 0) {\n    //eslint-disable-next-line functional/no-expression-statements\n    v = source();\n  }\n  return v;\n}","import { calculateNonZero } from \"./NonZero.js\";\nimport type { RandomSource } from \"./Types.js\";\n\n/**\n * Returns a random number with gaussian (ie. bell-curved) distribution\n * \n * @example Random number between 0..1 with gaussian distribution\n * ```js\n * import * as Random from 'https://unpkg.com/ixfx/dist/random.js';\n * Random.gaussian();\n * ```\n * \n * @example Distribution can be skewed\n * ```js\n * Random.gaussian(10);\n * ```\n * \n\n * @param skew Skew factor. Defaults to 1, no skewing. Above 1 will skew to left, below 1 will skew to right\n * @returns \n */\nexport const gaussian = (skew = 1) => gaussianSource(skew)();\n\n/**\n * Returns a function that generates a gaussian-distributed random number\n *  * @example Random number between 0..1 with gaussian distribution\n * ```js\n * import * as Random from 'https://unpkg.com/ixfx/dist/random.js';\n *\n * // Create function\n * const r = Random.gaussianFn();\n *\n * // Generate random value\n * r();\n * ```\n *\n * @example Pass the random number generator elsewhere\n * ```js\n * import * as Random from 'https://unpkg.com/ixfx/dist/random.js';\n * import * as Arrays from 'https://unpkg.com/ixfx/dist/arrays.js';\n * const r = Random.gaussianFn(10);\n *\n * // Randomise array with gaussian distribution\n * Arrays.shuffle(r);\n * ```\n * @param skew\n * @returns\n */\nexport const gaussianSource = (skew = 1): RandomSource => {\n  const min = 0;\n  const max = 1;\n  // Source: https://stackoverflow.com/questions/25582882/javascript-math-random-normal-distribution-gaussian-bell-curve\n\n  const compute = (): number => {\n    const u = calculateNonZero();\n    const v = calculateNonZero();\n    //eslint-disable-next-line functional/no-let\n    let result = Math.sqrt(-2 * Math.log(u)) * Math.cos(2 * Math.PI * v);\n\n    result = result / 10 + 0.5; // Translate to 0 -> 1\n    if (result > 1 || result < 0) {\n      result = compute(); //;gaussian(skew); // resample between 0 and 1 if out of range\n    } else {\n      result = Math.pow(result, skew); // Skew\n      result *= max - min; // Stretch to fill range\n      result += min; // offset to min\n    }\n    return result;\n  };\n  return compute;\n};","import type { RandomSource } from \"./Types.js\";\n\n/**\n * Generates a short roughly unique id\n * ```js\n * const id = shortGuid();\n * ```\n * @param options Options.\n * @returns\n */\nexport const shortGuid = (options: Readonly<{ source?: RandomSource }> = {}) => {\n  const source = options.source ?? Math.random;\n  // Via Stackoverflow...\n  const firstPart = Math.trunc(source() * 46_656);\n  const secondPart = Math.trunc(source() * 46_656);\n  const firstPartString = `000${ firstPart.toString(36) }`.slice(-3);\n  const secondPartString = `000${ secondPart.toString(36) }`.slice(-3);\n  return firstPartString + secondPartString;\n};","import { throwIntegerTest } from \"../util/GuardNumbers.js\";\n\n/**\n * Yields `amount` integers, counting by one from zero. If a negative amount is used,\n * count decreases. If `offset` is provided, this is added to the return result.\n * @example\n * ```js\n * const a = [...count(5)]; // Yields five numbers: [0,1,2,3,4]\n * const b = [...count(-5)]; // Yields five numbers: [0,-1,-2,-3,-4]\n * for (const v of count(5, 5)) {\n *  // Yields: 5, 6, 7, 8, 9\n * }\n * const c = [...count(5,1)]; // Yields [1,2,3,4,5]\n * ```\n *\n * @example Used with forEach\n * ```js\n * // Prints `Hi` 5x\n * forEach(count(5), () => // do something);\n * ```\n *\n * If you want to accumulate return values, consider using Flow.repeat.\n *\n * @example Run some code every 100ms, 10 times:\n * ```js\n * import { interval } from 'https://unpkg.com/ixfx/dist/flow.js'\n * import { count } from 'https://unpkg.com/ixfx/dist/numbers.js'\n * const counter = count(10);\n * for await (const v of interval(counter, { fixedIntervalMs: 100 })) {\n *  // Do something\n * }\n * ```\n * @param amount Number of integers to yield\n * @param offset Added to result\n */\nexport function* count(amount: number, offset = 0): Generator<number, void, void> {\n  // Unit tested.\n  throwIntegerTest(amount, ``, `amount`);\n  throwIntegerTest(offset, ``, `offset`);\n\n  if (amount === 0) return;\n\n  let index = 0;\n  do {\n    yield (amount < 0 ? -index + offset : index + offset);\n  } while (index++ < Math.abs(amount) - 1);\n};","import type { GenerateRandomOptions, RandomOptions, RandomSource } from \"./Types.js\";\nimport { numberTest as guardNumberTest, integerTest as guardIntegerTest } from '../util/GuardNumbers.js';\nimport { throwFromResult } from '../util/GuardThrowFromResult.js';\nimport { count } from \"../numbers/Count.js\";\nimport { shuffle } from \"../data/arrays/Random.js\";\n\n/**\n * Returns a function that produces a random integer between `max` (exclusive) and 0 (inclusive)\n * Use {@link integer} if you want a random number directly.\n *\n * Invoke directly:\n * ```js\n * integerSource(10)();  // Random number 0-9\n * ```\n *\n * Or keep a reference to re-compute:\n * ```js\n * const r = integerSource(10);\n * r(); // Produce a random integer\n * ```\n *\n * If a negative value is given, this is assumed to be the\n * minimum (inclusive), with 0 as the max (inclusive)\n * ```js\n * integerSource(-5)();  // Random number from -5 to 0\n * ```\n *\n * Specify options for a custom minimum or source of random:\n * ```js\n * integerSource({ max: 5,  min: 10 })();  // Random number 4-10\n * integerSource({ max: -5, min: -10 })(); // Random number from -10 to -6\n * integerSource({ max: 10, source: Math.random })(); // Random number between 0-9, with custom source of random\n * ```\n *\n * Throws an error if max & min are equal\n * @param maxOrOptions Max value (exclusive), or set of options\n * @returns Random integer\n */\nexport const integerSource = (maxOrOptions: number | RandomOptions): RandomSource => {\n  if (typeof maxOrOptions === `undefined`) {\n    throw new TypeError(`maxOrOptions is undefined`);\n  }\n  const options = typeof maxOrOptions === `number` ? { max: maxOrOptions } : maxOrOptions;\n  //eslint-disable-next-line functional/no-let\n  let max = Math.floor(options.max);\n  //eslint-disable-next-line functional/no-let\n  let min = Math.floor(options.min ?? 0);\n\n  // If we just get -5 as the max, invert so\n  // max:1 and min: -5 instead for -5...0 range\n  if (!options.min && max < 0) {\n    max = 1;\n    min = options.max;\n  }\n  const randomSource = options.source ?? Math.random;\n  if (min > max) {\n    throw new Error(`Min value is greater than max (min: ${ min } max: ${ max })`);\n  }\n\n  throwFromResult(guardNumberTest(min, ``, `min`));\n  throwFromResult(guardNumberTest(max, ``, `max`));\n\n  if (max === min) {\n    throw new Error(`Max and min values cannot be the same (${ max })`);\n  }\n\n  // Distance\n  const amt = Math.abs(max - min);\n  return () => Math.floor(randomSource() * amt) + min;\n};\n\n/**\n * Returns a random integer between `max` (exclusive) and 0 (inclusive)\n * Use {@link integerSource} to return a function instead.\n *\n * ```js\n * integer(10);  // Random number 0-9\n * ```\n *\n * If a negative value is given, this is assumed to be the\n * minimum (inclusive), with 0 as the max (inclusive)\n * ```js\n * integer(-5);  // Random number from -5 to 0\n * ```\n *\n * Specify options for a custom minimum or source of random:\n * ```js\n * integer({ max: 5,  min: 10 });  // Random number 4-10\n * integer({ max: -5, min: -10 }); // Random number from -10 to -6\n * integer({ max: 10, source: Math.random }); // Random number between 0-9, with custom source of random\n * ```\n *\n * Throws an error if max & min are equal\n * @param maxOrOptions Max value (exclusive), or set of options\n * @returns Random integer\n */\nexport const integer = (maxOrOptions: number | RandomOptions): number =>\n  integerSource(maxOrOptions)();\n\n/**\n * Returns a generator over random unique integers, up to\n * but not including the given max value.\n *\n * @example 0..9 range\n * ```js\n * const rand = [ ...integerUniqueGen(10) ];\n * // eg: [2, 9, 6, 0, 8, 7, 3, 4, 5, 1]\n * ```\n *\n * @example Options can be provided:\n * ```js\n * // 5..9 range\n * const rand = [ ...integerUniqueGen({ min: 5, max: 10 })];\n * ```\n *\n * Range can be looped. Once the initial random walk through the number\n * range completes, it starts again in a new random way.\n *\n * ```js\n * for (const r of integerUniqueGen({ max: 10, loop: true })) {\n *  // Warning: loops forever\n * }\n * ```\n *\n * Behind the scenes, an array of numbers is created that captures the range, this is then\n * shuffled on the first run, and again whenever the iterator loops, if that's allowed.\n *\n * As a consequence, large ranges will consume larger amounts of memory.\n * @param maxOrOptions\n * @returns\n */\nexport function* integerUniqueGen(\n  maxOrOptions: number | GenerateRandomOptions\n): IterableIterator<number> {\n  const options = typeof maxOrOptions === `number` ? { max: maxOrOptions } : maxOrOptions;\n  const min = options.min ?? 0;\n  const max = options.max;\n  const source = options.source ?? Math.random;\n  const loop = options.loop ?? false;\n\n  throwFromResult(guardIntegerTest(min, ``, `min`));\n  throwFromResult(guardIntegerTest(max, ``, `max`));\n  if (min > max) {\n    throw new Error(`Min value is greater than max. Min: ${ min } Max: ${ max }`);\n  }\n\n  const origRange = [ ...count(max - min, min) ];\n  let numberRange = shuffle(origRange);\n  let index = 0;\n  while (true) {\n    if (index === numberRange.length) {\n      if (loop) numberRange = shuffle(origRange, source);\n      else return;\n    }\n    yield numberRange[ index++ ];\n  }\n}\n","import { integer, integerSource } from \"./Integer.js\";\nimport type { RandomOptions, RandomSource } from \"./Types.js\";\n\n/**\n * Returns a random number of minutes, with a unit of milliseconds.\n * Max value is exclusive.\n * Use {@link minutesMs} to get a value directly, or {@link minutesMsSource} to return a function.\n *\n * @example Random value from 0 to one milli less than 5 * 60 * 1000\n * ```js\n * // Create function that returns value\n * const f = minutesMsSource(5);\n *\n * f(); // Generate value\n * ```\n *\n * @example Specified options:\n * ```js\n * // Random time between one minute and 5 minutes\n * const f = minutesMsSource({ max: 5, min: 1 });\n * f();\n * ```\n *\n * @remarks\n * It's a very minor function, but can make\n * code a little more literate:\n * ```js\n * // Random timeout of up to 5 mins\n * setTimeout(() => { ... }, minutesMsSource(5));\n * ```\n * @param maxMinutesOrOptions\n * @see {@link minutesMs}\n * @returns Function that produces a random value\n */\nexport const minutesMsSource = (\n  maxMinutesOrOptions: number | RandomOptions\n): RandomSource => {\n  const options =\n    typeof maxMinutesOrOptions === `number`\n      ? { max: maxMinutesOrOptions }\n      : maxMinutesOrOptions;\n  const min = (options.min ?? 0) * 60 * 1000;\n  const max = options.max * 60 * 1000;\n  return integerSource({ ...options, max, min });\n};\n\n\n/**\n * @example Random value from 0 to one milli less than 5 * 60 * 1000\n * ```js\n * // Random value from 0 to one milli less than 5*60*1000\n * minuteMs(5);\n * ```\n *\n * @example Specified options:\n * ```js\n * // Random time between one minute and 5 minutes\n * minuteMs({ max: 5, min: 1 });\n * ```\n * @inheritDoc minutesMsSource\n *\n * @param maxMinutesOrOptions\n * @see {@link minutesMsSource}\n * @returns Milliseconds\n */\nexport const minutesMs = (maxMinutesOrOptions: number | RandomOptions): number =>\n  minutesMsSource(maxMinutesOrOptions)();\n\n\n/**\n * Returns function which produces a random number of seconds, with a unit of milliseconds.\n * Maximum value is exclusive.\n * Use {@link secondsMs} to return a random value directly, or {@link secondsMsSource} to return a function.\n *\n * @example Random milliseconds between 0..4999\n * ```js\n * // Create function\n * const f = secondsMsSource(5000);\n * // Produce a value\n * const value = f();\n * ```\n *\n * @example Options can be provided\n * ```js\n * // Random milliseconds between 1000-4999\n * const value = secondsMsSource({ max:5, min:1 })();\n * // Note the extra () at the end to execute the function\n * ```\n *\n * @remarks\n * It's a very minor function, but can make\n * code a little more literate:\n * ```js\n * // Random timeout of up to 5 seconds\n * setTimeout(() => { ...}, secondsMsSource(5));\n * ```\n * @param maxSecondsOrOptions Maximum seconds, or options.\n * @returns Milliseconds\n */\nexport const secondsMsSource = (\n  maxSecondsOrOptions: number | RandomOptions\n): RandomSource => {\n  const options =\n    typeof maxSecondsOrOptions === `number`\n      ? { max: maxSecondsOrOptions }\n      : maxSecondsOrOptions;\n  const min = (options.min ?? 0) * 1000;\n  const max = options.max * 1000;\n  return () => integer({ ...options, max, min });\n};\n\n/**\n * @example Random milliseconds between 0..4999\n * ```js\n * secondsMs(5000);\n * ```\n *\n * @example Options can be provided\n * ```js\n * // Random milliseconds between 1000-4999\n * secondsMs({ max:5, min:1 });\n * ```\n * @inheritDoc secondsMsSource\n * @param maxSecondsOrOptions\n * @returns\n */\nexport const secondsMs = (maxSecondsOrOptions: number | RandomOptions): number =>\n  secondsMsSource(maxSecondsOrOptions)();","// Easings from https://easings.net/\nimport { msElapsedTimer, relativeTimer, ticksElapsedTimer, type TimerSource } from '../flow/Timer.js';\nimport { interpolate } from '../data/Interpolate.js';\nimport type { HasCompletion } from '../flow/Types.js';\n\n\nconst sqrt = Math.sqrt;\nconst pow = Math.pow;\nconst cos = Math.cos;\n//eslint-disable-next-line @typescript-eslint/naming-convention\nconst pi = Math.PI;\nconst sin = Math.sin;\n\n// eslint-disable-next-line unicorn/prevent-abbreviations\nexport type EasingFn = (x: number) => number;\n\n/**\n * Creates an easing based on clock time. Time\n * starts being counted when easing function is created.\n * @example Time based easing\n * ```\n * import { Easings } from \"https://unpkg.com/ixfx/dist/modulation.js\";\n * const t = Easings.time(`quintIn`, 5*1000); // Will take 5 seconds to complete\n * ...\n * t.compute(); // Get current value of easing\n * t.reset();   // Reset to 0\n * t.isDone;    // _True_ if finished\n * ```\n * @param nameOrFunction Name of easing, or an easing function\n * @param durationMs Duration in milliseconds\n * @returns Easing\n */\nexport const time = function (\n  nameOrFunction: EasingName | EasingFn,\n  durationMs: number\n): Easing {\n  return create(nameOrFunction, durationMs, msElapsedTimer);\n};\n\n/**\n * Creates an easing based on ticks\n *\n * @example Tick-based easing\n * ```\n * import { Easings } from \"https://unpkg.com/ixfx/dist/modulation.js\";\n * const t = Easings.tick(`sineIn`, 1000);   // Will take 1000 ticks to complete\n * t.compute(); // Each call to `compute` progresses the tick count\n * t.reset();   // Reset to 0\n * t.isDone;    // _True_ if finished\n * ```\n * @param nameOrFunction Name of easing, or an easing function\n * @param durationTicks Duration in ticks\n * @returns Easing\n */\nexport const tick = function (\n  nameOrFunction: EasingName | EasingFn,\n  durationTicks: number\n): Easing {\n  return create(nameOrFunction, durationTicks, ticksElapsedTimer);\n};\n\n/**\n * 'Ease' from `0` to `1` over a delicious curve. Commonly used for animation\n * and basic modelling of phyical motion.\n *\n * Create via {@link tick} or {@link time}, call `compute` to calculate the next\n * value in the progression, until you reach `1` or `isDone` returns true.\n *\n */\nexport type Easing = HasCompletion & {\n  /**\n   * Computes the current value of the easing\n   *\n   * @returns {number}\n   */\n  compute(): number;\n\n  /**\n   * Reset the easing\n   */\n  reset(): void;\n  /**\n   * Returns true if the easing is complete\n   *\n   * @returns {boolean}\n   */\n  get isDone(): boolean;\n};\n\n/**\n * Creates a new easing by name\n *\n * ```js\n * import { Easings } from \"https://unpkg.com/ixfx/dist/modulation.js\";\n * const e = Easings.create(`circInOut`, 1000, msElapsedTimer);\n * ```\n * @param nameOrFunction Name of easing, or an easing function\n * @param duration Duration (meaning depends on timer source)\n * @param timerSource Timer source. Eg {@link tickRelativeTimer}, {@link msRelativeTimer}\n * @returns\n */\nconst create = function (\n  nameOrFunction: EasingName | EasingFn,\n  duration: number,\n  timerSource: TimerSource\n): Easing {\n  const fn = typeof nameOrFunction === `function` ? nameOrFunction : get(nameOrFunction);\n  if (fn === undefined) {\n    const error = typeof nameOrFunction === `string` ? new Error(`Easing function not found: '${ nameOrFunction }'`) : new Error(`Easing function not found`);\n    throw error;\n  }\n\n  // Get a relative version of timer\n  const timer = relativeTimer(duration, {\n    timer: timerSource(),\n    clampValue: true,\n  });\n  let startCount = 1;\n\n  return {\n    get isDone() {\n      return timer.isDone;\n    },\n    get runState() {\n      if (timer.isDone) return `idle`;\n      return `scheduled`;\n    },\n    /**\n     * Returns 1 if it has been created, returns +1 for each additional time the timer has been reset.\n     */\n    get startCount() {\n      return startCount;\n    },\n    get startCountTotal() {\n      return startCount;\n    },\n    compute: () => {\n      const relative = timer.elapsed;\n      return fn(relative);\n    },\n    reset: () => {\n      timer.reset();\n      startCount++;\n    },\n  };\n};\n\n/**\n * Creates an easing function using a simple cubic bezier defined by two points.\n *\n * Eg: https://cubic-bezier.com/#0,1.33,1,-1.25\n *  a:0, b: 1.33, c: 1, d: -1.25\n *\n * ```js\n * import { Easings } from \"https://unpkg.com/ixfx/dist/modulation.js\";\n * // Time-based easing using bezier\n * const e = Easings.time(fromCubicBezier(1.33, -1.25), 1000);\n * e.compute();\n * ```\n * @param b\n * @param d\n * @returns Value\n */\nexport const fromCubicBezier =\n  (b: number, d: number): EasingFn =>\n    (t: number) => {\n      const s = 1 - t;\n      const s2 = s * s;\n      const t2 = t * t;\n      const t3 = t2 * t;\n      return 3 * b * s2 * t + 3 * d * s * t2 + t3;\n    };\n\n/**\n * Returns a mix of two easing functions.\n *\n * ```js\n * import { Easings } from \"https://unpkg.com/ixfx/dist/modulation.js\";\n * // Get a 50/50 mix of two easing functions at t=0.25\n * Easings.mix(0.5, 0.25, Easings.functions.sineIn, Easings.functions.sineOut);\n *\n * // 10% of sineIn, 90% of sineOut\n * Easings.mix(0.90, 0.25, Easings.functions.sineIn, Easings.functions.sineOut);\n * ```\n * @param amt 'Progress' value passed to the easing functions\n * @param balance Mix between a and b\n * @param easingA\n * @param easingB\n * @returns Numeric value\n */\nexport const mix = (\n  amt: number,\n  balance: number,\n  easingA: EasingFn,\n  easingB: EasingFn\n) => interpolate(balance, easingA(amt), easingB(amt));\n\n/**\n * Returns a 'crossfade' of two easing functions, synchronised with the progress through the easing. That is:\n * * 0.0 will yield 100% of easingA at its `easing(0)` value.\n * * 0.2 will yield 80% of a, 20% of b, with both at their `easing(0.2)` values\n * * 0.5 will yield 50% of both functions both at their `easing(0.5)` values\n * * 0.8 will yield 20% of a, 80% of a, with both at their `easing(0.8)` values\n * * 1.0 will yield 100% of easingB at its `easing(1)` value.\n *\n * So easingB will only ever kick in at higher `amt` values and `easingA` will only be present in lower valus.\n *\n * ```js\n * import { Easings } from \"https://unpkg.com/ixfx/dist/modulation.js\";\n * Easings.crossFade(0.5, Easings.functions.sineIn, Easings.functions.sineOut);\n * ```\n * @param amt\n * @param easingA\n * @param easingB\n * @returns Numeric value\n */\nexport const crossfade = (amt: number, easingA: EasingFn, easingB: EasingFn) =>\n  mix(amt, amt, easingA, easingB);\n\n/**\n * Easing name\n */\nexport type EasingName = keyof typeof functions;\n\n/**\n * Returns an easing function by name, or _undefined_ if not found.\n *\n * ```js\n * const fn = Easings.get(`sineIn`);\n * // Returns 'eased' transformation of 0.5\n * fn(0.5);\n * ```\n *\n * If you know in advance what easing to use, you could also access it via\n * `Easings.functions.NAME`, eg `Easings.functions.sineIn`.\n * @param easingName eg `sineIn`\n * @returns Easing function\n */\nexport const get = function (easingName: EasingName): EasingFn {\n  if (easingName === null) throw new Error(`easingName is null`);\n  if (easingName === undefined) throw new Error(`easingName is undefined`);\n  const name = easingName.toLocaleLowerCase();\n  const found = Object.entries(functions).find(\n    ([ k, _v ]) => k.toLocaleLowerCase() === name\n  );\n  if (found === undefined) throw new Error(`easing not found ('${ easingName })`);\n\n  if (found === undefined) return found;\n  return found[ 1 ];\n};\n\n/**\n * Iterate over available easings.\n * @private\n * @returns Returns list of available easing names\n */\nexport function* getEasings(): Iterable<string> {\n  yield* Object.keys(functions);\n};\n\n/**\n * Returns a roughly gaussian easing function\n * ```js\n * import { Easings } from \"https://unpkg.com/ixfx/dist/modulation.js\";\n * const fn = Easings.gaussian();\n * ```\n *\n * Try different positive and negative values for `stdDev` to pinch\n * or flatten the bell shape.\n * @param standardDeviation\n * @returns\n */\nexport const gaussian = (standardDeviation = 0.4): EasingFn => {\n  const a = 1 / sqrt(2 * pi);\n  const mean = 0.5;\n\n  return (t: number) => {\n    const f = a / standardDeviation;\n    // p:-8 pinched\n    //eslint-disable-next-line functional/no-let\n    let p = -2.5; // -1/1.25;\n    //eslint-disable-next-line functional/no-let\n    let c = (t - mean) / standardDeviation;\n    c *= c;\n    p *= c;\n    const v = f * pow(Math.E, p); // * (2/pi);//0.62;\n    if (v > 1) return 1;\n    if (v < 0) return 0;\n    return v;\n  };\n};\n\nconst bounceOut = function (x: number): number {\n  const n1 = 7.5625;\n  const d1 = 2.75;\n\n  if (x < 1 / d1) {\n    return n1 * x * x;\n  } else if (x < 2 / d1) {\n    return n1 * (x -= 1.5 / d1) * x + 0.75;\n  } else if (x < 2.5 / d1) {\n    return n1 * (x -= 2.25 / d1) * x + 0.9375;\n  } else {\n    return n1 * (x -= 2.625 / d1) * x + 0.984_375;\n  }\n};\n\nconst quintIn = (x: number): number => x * x * x * x * x;\nconst quintOut = (x: number): number => 1 - pow(1 - x, 5);\nconst arch = (x: number): number => x * (1 - x) * 4;\n\n/**\n * Weighted average\n * \n * @param currentValue \n * @param targetValue \n * @param slowDownFactor \n * @returns \n */\nexport const weightedAverage = (currentValue: number, targetValue: number, slowDownFactor: number) => {\n  return ((currentValue * (slowDownFactor - 1)) + targetValue) / slowDownFactor\n}\n\nexport const functions = {\n  smoothstep: (x: number): number => x * x * (3 - 2 * x),\n  smootherstep: (x: number): number => (x * (x * 6 - 15) + 10) * x * x * x,\n  arch,\n  bell: gaussian(),\n  sineIn: (x: number): number => 1 - cos((x * pi) / 2),\n  sineOut: (x: number): number => sin((x * pi) / 2),\n  quadIn: (x: number): number => x * x,\n  quadOut: (x: number): number => 1 - (1 - x) * (1 - x),\n  sineInOut: (x: number): number => -(cos(pi * x) - 1) / 2,\n  quadInOut: (x: number): number =>\n    x < 0.5 ? 2 * x * x : 1 - pow(-2 * x + 2, 2) / 2,\n  cubicIn: (x: number): number => x * x * x,\n  cubicOut: (x: number): number => 1 - pow(1 - x, 3),\n  quartIn: (x: number): number => x * x * x * x,\n  quartOut: (x: number): number => 1 - pow(1 - x, 4),\n  quintIn,\n  quintOut, //: (x: number): number => 1 - pow(1 - x, 5),\n  expoIn: (x: number): number => (x === 0 ? 0 : pow(2, 10 * x - 10)),\n  expoOut: (x: number): number => (x === 1 ? 1 : 1 - pow(2, -10 * x)),\n  quintInOut: (x: number): number =>\n    x < 0.5 ? 16 * x * x * x * x * x : 1 - pow(-2 * x + 2, 5) / 2,\n  expoInOut: (x: number): number =>\n    x === 0\n      ? 0\n      : x === 1\n        ? 1\n        // eslint-disable-next-line unicorn/no-nested-ternary\n        : x < 0.5\n          ? pow(2, 20 * x - 10) / 2\n          : (2 - pow(2, -20 * x + 10)) / 2,\n  circIn: (x: number): number => 1 - sqrt(1 - pow(x, 2)),\n  circOut: (x: number): number => sqrt(1 - pow(x - 1, 2)),\n  backIn: (x: number): number => {\n    const c1 = 1.701_58;\n    const c3 = c1 + 1;\n\n    return c3 * x * x * x - c1 * x * x;\n  },\n  backOut: (x: number): number => {\n    const c1 = 1.701_58;\n    const c3 = c1 + 1;\n\n    return 1 + c3 * pow(x - 1, 3) + c1 * pow(x - 1, 2);\n  },\n  circInOut: (x: number): number =>\n    x < 0.5\n      ? (1 - sqrt(1 - pow(2 * x, 2))) / 2\n      : (sqrt(1 - pow(-2 * x + 2, 2)) + 1) / 2,\n  backInOut: (x: number): number => {\n    const c1 = 1.701_58;\n    const c2 = c1 * 1.525;\n\n    return x < 0.5\n      ? (pow(2 * x, 2) * ((c2 + 1) * 2 * x - c2)) / 2\n      : (pow(2 * x - 2, 2) * ((c2 + 1) * (x * 2 - 2) + c2) + 2) / 2;\n  },\n  elasticIn: (x: number): number => {\n    const c4 = (2 * pi) / 3;\n\n    return x === 0\n      ? 0\n      : (x === 1\n        ? 1\n        : -pow(2, 10 * x - 10) * sin((x * 10 - 10.75) * c4));\n  },\n  elasticOut: (x: number): number => {\n    const c4 = (2 * pi) / 3;\n\n    return x === 0\n      ? 0\n      : (x === 1\n        ? 1\n        : pow(2, -10 * x) * sin((x * 10 - 0.75) * c4) + 1);\n  },\n  bounceIn: (x: number): number => 1 - bounceOut(1 - x),\n  bounceOut: bounceOut,\n  elasticInOut: (x: number): number => {\n    const c5 = (2 * pi) / 4.5;\n\n    return x === 0\n      ? 0\n      : x === 1\n        ? 1\n        // eslint-disable-next-line unicorn/no-nested-ternary\n        : x < 0.5\n          ? -(pow(2, 20 * x - 10) * sin((20 * x - 11.125) * c5)) / 2\n          : (pow(2, -20 * x + 10) * sin((20 * x - 11.125) * c5)) / 2 + 1;\n  },\n  bounceInOut: (x: number): number =>\n    x < 0.5 ? (1 - bounceOut(1 - 2 * x)) / 2 : (1 + bounceOut(2 * x - 1)) / 2,\n};\n","import { defaultRandom, type RandomSource } from './Types.js';\nimport { type EasingName, get as EasingGet } from '../modulation/Easing.js';\n/**\n * Options for producing weighted distribution\n */\nexport type WeightedOptions = Readonly<{\n  /**\n   * Easing function to use (optional)\n   */\n  easing?: EasingName;\n  /**\n   * Random source (optional)\n   */\n  source?: RandomSource;\n}>\n/***\n * Returns a random number, 0..1, weighted by a given easing function.\n * Default easing is `quadIn`, which skews towards zero.\n *\n * Use {@link weightedSource} to return a function instead.\n *\n * ```js\n * import * as Random from 'https://unpkg.com/ixfx/dist/random.js';\n * Random.weighted();          // quadIn easing by default, which skews toward low values\n * Random.weighted(`quadOut`); // quadOut favours high values\n * ```\n * @param easingNameOrOptions Options. Uses 'quadIn' by default.\n * @see {@link weightedSource} Returns a function rather than value\n * @returns Random number (0-1)\n */\nexport const weighted = (\n  easingNameOrOptions: EasingName | WeightedOptions = `quadIn`\n): number => weightedSource(easingNameOrOptions)();\n\n/***\n * Returns a random number, 0..1, weighted by a given easing function.\n * Default easing is `quadIn`, which skews towards zero.\n * Use {@link weighted} to get a value directly.\n *\n * ```js\n * import * as Random from 'https://unpkg.com/ixfx/dist/random.js';\n * const r1 = Random.weightedSource();          // quadIn easing by default, which skews toward low values\n * r1(); // Produce a value\n *\n * const r2 = Random.weightedSource(`quadOut`); // quadOut favours high values\n * r2(); // Produce a value\n * ```\n * @param easingNameOrOptions Easing name or options `quadIn` by default.\n * @see {@link weighted} Returns value instead of function\n * @returns Function which returns a weighted random value\n */\nexport const weightedSource = (\n  easingNameOrOptions: EasingName | WeightedOptions = `quadIn`\n): RandomSource => {\n  const options =\n    typeof easingNameOrOptions === `string`\n      ? { easing: easingNameOrOptions }\n      : easingNameOrOptions;\n  const source = options.source ?? defaultRandom;\n  const easingName = options.easing ?? `quadIn`;\n  const easingFunction = EasingGet(easingName);\n  if (easingFunction === undefined) {\n    throw new Error(`Easing function '${ easingName }' not found.`);\n  }\n\n  const compute = (): number => {\n    const r = source();\n    return easingFunction(r);\n  };\n  return compute;\n};","import { clamp } from \"../data/Clamp.js\";\nimport { type RandomSource, defaultRandom } from \"./Types.js\";\nimport type { WeightedOptions } from \"./Weighted.js\";\nimport { throwNumberTest } from '../util/GuardNumbers.js';\nimport { get as EasingGet } from '../modulation/Easing.js';\nexport type WeightedIntegerOptions = WeightedOptions & Readonly<{\n  min?: number;\n  max: number;\n}>;\n/**\n * Random integer, weighted according to an easing function.\n * Number will be inclusive of `min` and below `max`.\n *\n * @example 0..99\n * ```js\n * import * as Random from 'https://unpkg.com/ixfx/dist/random.js';\n * const r = Random.weightedIntegerFn(100);\n * r(); // Produce value\n * ```\n *\n * @example 20..29\n * ```js\n * const r = Random.weightedIntegerFn({ min: 20, max: 30 });\n * r(); // Produce value\n * ```\n *\n * @example  0..99 with 'quadIn' easing\n * ```js\n * const r = Random.weightedInteger({ max: 100, easing: `quadIn` });\n * ```\n *\n * Note: result from easing function will be clamped to\n * the min/max (by default 0-1);\n *\n * @param maxOrOptions Maximum (exclusive)\n * @returns Function that produces a random weighted integer\n */\nexport const weightedIntegerSource = (\n  maxOrOptions: number | WeightedIntegerOptions\n): RandomSource => {\n  const options = typeof maxOrOptions === `number` ? { max: maxOrOptions } : maxOrOptions;\n  const source = options.source ?? defaultRandom;\n  const max = options.max;\n  const min = options.min ?? 0;\n  const easingName = options.easing ?? `quadIn`;\n  if (typeof max === `undefined`) throw new Error(`max field is undefined`);\n  if (typeof easingName !== `string`) {\n    throw new TypeError(`easing field expected to be string`);\n  }\n  throwNumberTest(max);\n\n  const easingFunction = EasingGet(easingName);\n  if (easingFunction === undefined) {\n    throw new Error(`Easing '${ easingName }' not found`);\n  }\n\n  throwNumberTest(min);\n  if (max <= min) throw new Error(`Max should be greater than min`);\n\n  const compute = (): number => {\n    const r = clamp(easingFunction(source()));\n    return Math.floor(r * (max - min)) + min;\n  };\n  return compute;\n};\n\n/**\n * @example 0..99\n * ```js\n * import * as Random from 'https://unpkg.com/ixfx/dist/random.js';\n * Random.weightedInteger(100);\n * ```\n *\n * @example 20..29\n * ```js\n * Random.weightedInteger({ min: 20, max: 30 });\n * ```\n *\n * @example  0..99 with 'quadIn' easing\n * ```js\n * Random.weightedInteger({ max: 100, easing: `quadIn` })\n * ```\n * @inheritDoc {@link weightedIntegerSource}\n * @param maxOrOptions\n * @returns Random weighted integer\n */\nexport const weightedInteger = (maxOrOptions: number | WeightedIntegerOptions): number =>\n  weightedIntegerSource(maxOrOptions)();"],"mappings":"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","names":["gaussian","gaussian"]}