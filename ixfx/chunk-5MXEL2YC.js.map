{"version":3,"sources":["../src/util/GuardString.ts"],"sourcesContent":["import type { GuardResult } from \"./GuardTypes.js\";\nimport { throwFromResult } from \"./GuardThrowFromResult.js\";\n\nexport type StringGuardRange = `` | `non-empty`\n\n/**\n * Throws an error if parameter is not an string\n * @param value\n * @param parameterName\n */\nexport const stringTest = (value: unknown, range: StringGuardRange = ``, parameterName = `?`): GuardResult => {\n  if (typeof value !== `string`) return [ false, `Param '${ parameterName } is not type string. Got: ${ typeof value }` ];\n  switch (range) {\n    case `non-empty`:\n      if (value.length === 0) return [ false, `Param '${ parameterName } is empty` ];\n      break;\n  }\n  return [ true ];\n};\n\nexport const throwStringTest = (value: unknown, range: StringGuardRange = ``, parameterName = `?`) => {\n  throwFromResult(stringTest(value, range, parameterName));\n}\n\n"],"mappings":";;;;;AAUO,IAAM,aAAa,CAAC,OAAgB,QAA0B,IAAI,gBAAgB,QAAqB;AAC5G,MAAI,OAAO,UAAU,SAAU,QAAO,CAAE,OAAO,UAAW,aAAc,6BAA8B,OAAO,KAAM,EAAG;AACtH,UAAQ,OAAO;AAAA,IACb,KAAK;AACH,UAAI,MAAM,WAAW,EAAG,QAAO,CAAE,OAAO,UAAW,aAAc,WAAY;AAC7E;AAAA,EACJ;AACA,SAAO,CAAE,IAAK;AAChB;AAEO,IAAM,kBAAkB,CAAC,OAAgB,QAA0B,IAAI,gBAAgB,QAAQ;AACpG,kBAAgB,WAAW,OAAO,OAAO,aAAa,CAAC;AACzD;","names":[]}