{"version":3,"sources":["../src/iterables/CompareValues.ts"],"sourcesContent":["import { isEqualDefault, type IsEqual } from \"../util/IsEqual.js\";\n\n/**\n * Returns the 'max' of some iterable using the provided scoring function.\n * It only yields a value when iterator finishes.\n * @param iterable\n * @param scorer \n * @returns \n */\nexport const maxScore = <V>(iterable: Iterable<V>, scorer: (v: V) => number): V | undefined => {\n  let highestValue: V | undefined;\n  let highestScore = Number.MIN_SAFE_INTEGER;\n  for (const value of iterable) {\n    const score = scorer(value);\n    if (score >= highestScore) {\n      highestScore = score;\n      highestValue = value;\n    }\n  }\n  return highestValue;\n}\n\n/**\n * Returns the 'min' of some iterable using the provided scoring function.\n * It only yields a value when iterator finishes.\n * @param iterable \n * @param scorer \n * @returns \n */\nexport const min = <V>(iterable: Iterable<V>, scorer: (v: V) => number): V | undefined => {\n  let lowestValue: V | undefined;\n  let lowestScore\n    = Number.MAX_SAFE_INTEGER;\n  for (const value of iterable) {\n    const score = scorer(value);\n    if (score <= lowestScore) {\n      lowestScore = score;\n      lowestValue = value;\n    }\n  }\n  return lowestValue;\n}\n\n\n/**\n * Returns _true_ if all values in iterables are equal, regardless\n * of their position. Uses === equality semantics by default.\n * \n * Is NOT recursive.\n * \n * @example Default equality checking\n * ```js\n * const a = ['apples','oranges','pears'];\n * const b = ['pears','oranges','apples'];\n * hasEqualValues(a, b); // True\n * ```\n *\n * @example Custom equality checking\n * ```js\n * const a = [ { name: 'John' }];\n * const b = [ { name: 'John' }];\n * // False, since object identies are different\n * hasEqualValues(a, b); \n * // True, since now we're comparing by value\n * hasEqualValues(a, b, (aa,bb) => aa.name === bb.name);\n * ```\n * @param arrays\n * @param eq\n */\nexport const hasEqualValuesShallow = <V>(\n  iterableA: Iterable<V>,\n  iterableB: Iterable<V>,\n  eq?: IsEqual<V>\n): boolean => {\n  const returnValue = compareValuesShallow(iterableA, iterableB, eq);\n  return returnValue.a.length === 0 && returnValue.b.length === 0;\n};\n\n/**\n * Compares the values of two iterables, returning a list\n * of items they have in common and those unique in `a` or `b`.\n * Ignores ordering of values, and is NOT recursive.\n *\n * ```js\n * const a = ['apples', 'oranges', 'pears' ]\n * const b = ['pears', 'kiwis', 'bananas' ];\n *\n * const r = compareValuesShallow(a, b);\n * r.shared;  // [ 'pears' ]\n * r.a;       // [ 'apples', 'oranges' ]\n * r.b;       // [ 'kiwis', 'bananas' ]\n * ```\n * \n * By default uses === semantics for comparison.\n * @param a\n * @param b\n * @param eq\n * @returns\n */\nexport const compareValuesShallow = <V>(\n  a: Iterable<V>,\n  b: Iterable<V>,\n  eq = isEqualDefault<V>\n) => {\n  const shared = [];\n  const aUnique = [];\n  const bUnique = [];\n\n  for (const elementOfA of a) {\n    let seenInB = false;\n    // Does B contain this thing from A?\n    for (const elementOfB of b) {\n      if (eq(elementOfA, elementOfB)) {\n        seenInB = true;\n        break;\n      }\n    }\n\n    if (seenInB) {\n      // Common in A & B\n      shared.push(elementOfA);\n    } else {\n      // No, it's only found in A\n      aUnique.push(elementOfA);\n    }\n  }\n\n  for (const elementOfB of b) {\n    let seenInA = false;\n    // Does A contain this thing from B?\n    for (const elementOfA of a) {\n      if (eq(elementOfB, elementOfA)) {\n        seenInA = true;\n      }\n    }\n    if (!seenInA) {\n      // No, something unique to B\n      bUnique.push(elementOfB);\n    }\n  }\n\n  // Are the two iterables the same?\n  const isSame = aUnique.length === 0 && bUnique.length === 0;\n\n  return {\n    shared,\n    isSame,\n    a: aUnique,\n    b: bUnique\n  };\n};\n"],"mappings":";;;;;AASO,IAAM,WAAW,CAAI,UAAuB,WAA4C;AAC7F,MAAI;AACJ,MAAI,eAAe,OAAO;AAC1B,aAAW,SAAS,UAAU;AAC5B,UAAM,QAAQ,OAAO,KAAK;AAC1B,QAAI,SAAS,cAAc;AACzB,qBAAe;AACf,qBAAe;AAAA,IACjB;AAAA,EACF;AACA,SAAO;AACT;AASO,IAAM,MAAM,CAAI,UAAuB,WAA4C;AACxF,MAAI;AACJ,MAAI,cACA,OAAO;AACX,aAAW,SAAS,UAAU;AAC5B,UAAM,QAAQ,OAAO,KAAK;AAC1B,QAAI,SAAS,aAAa;AACxB,oBAAc;AACd,oBAAc;AAAA,IAChB;AAAA,EACF;AACA,SAAO;AACT;AA0DO,IAAM,uBAAuB,CAClC,GACA,GACA,KAAK,mBACF;AACH,QAAM,SAAS,CAAC;AAChB,QAAM,UAAU,CAAC;AACjB,QAAM,UAAU,CAAC;AAEjB,aAAW,cAAc,GAAG;AAC1B,QAAI,UAAU;AAEd,eAAW,cAAc,GAAG;AAC1B,UAAI,GAAG,YAAY,UAAU,GAAG;AAC9B,kBAAU;AACV;AAAA,MACF;AAAA,IACF;AAEA,QAAI,SAAS;AAEX,aAAO,KAAK,UAAU;AAAA,IACxB,OAAO;AAEL,cAAQ,KAAK,UAAU;AAAA,IACzB;AAAA,EACF;AAEA,aAAW,cAAc,GAAG;AAC1B,QAAI,UAAU;AAEd,eAAW,cAAc,GAAG;AAC1B,UAAI,GAAG,YAAY,UAAU,GAAG;AAC9B,kBAAU;AAAA,MACZ;AAAA,IACF;AACA,QAAI,CAAC,SAAS;AAEZ,cAAQ,KAAK,UAAU;AAAA,IACzB;AAAA,EACF;AAGA,QAAM,SAAS,QAAQ,WAAW,KAAK,QAAQ,WAAW;AAE1D,SAAO;AAAA,IACL;AAAA,IACA;AAAA,IACA,GAAG;AAAA,IACH,GAAG;AAAA,EACL;AACF;","names":[]}