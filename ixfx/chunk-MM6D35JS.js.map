{"version":3,"sources":["../src/data/arrays/index.ts","../src/data/arrays/ArrayCycle.ts","../src/data/arrays/Chunks.ts","../src/data/arrays/Contains.ts","../src/data/arrays/EnsureLength.ts","../src/data/arrays/Flatten.ts","../src/data/arrays/GroupBy.ts","../src/data/arrays/Interleave.ts","../src/data/arrays/Intersection.ts","../src/data/arrays/MergeByKey.ts","../src/data/arrays/Sample.ts","../src/data/arrays/Until.ts"],"sourcesContent":["export * from './ArrayCycle.js';\nexport * from './Chunks.js';\nexport * from './Contains.js';\nexport * from './ContainsDuplicateInstances.js';\nexport * from './EnsureLength.js';\nexport * from './Equality.js';\nexport * from './Filter.js';\nexport * from './Flatten.js';\nexport * from './GroupBy.js';\nexport * from './GuardArray.js';\nexport * from './GuardIndex.js';\nexport * from './InsertAt.js';\nexport * from './Interleave.js';\nexport * from './Intersection.js';\nexport * from './MergeByKey.js';\nexport * from '../../numbers/MinMaxAvg.js';\nexport * from './Pairwise.js';\nexport * from './Random.js';\nexport * from './Remove.js';\nexport * from './Sample.js';\nexport * from './Sort.js';\nexport type * from './Types.js';\nexport * from './Unique.js';\nexport * from './Until.js';\nexport * from './Zip.js';\n// export { compareValues, compareValuesEqual } from '../Iterables.js';\n","\n/**\n * Cycle through the contents of an array. By default starts at index 0.\n * ```js\n * const c = arrayCycle([`apples`, `oranges`, `pears`]);\n * c.current; // `apples`\n * c.next();  // `oranges`\n * c.next();  // `pears`\n * c.next();  // `apples`\n * c.prev();  // `pears`\n * ```\n * \n * You can select an item by index or value:\n * ```\n * c.select(1); // `oranges`\n * c.select(`pears`); // `pears`\n * ```\n * \n * Other features:\n * ```js\n * c.current;   // Current value\n * c.toArray(); // Copy of array being cycled over\n * ```\n * \n * Additional info:\n * * Selecting by value uses === semantics.\n * * Works with a copy of input array\n * @param options Array to cycle over \n * @returns \n */\nexport const cycle = <T>(options: ReadonlyArray<T> | Array<T>) => {\n  const opts = [ ...options ];\n  let index = 0;\n  const next = () => {\n    index++;\n    if (index === opts.length) index = 0;\n    return value();\n  }\n\n  // eslint-disable-next-line unicorn/prevent-abbreviations\n  const prev = () => {\n    index--;\n    if (index === -1) index = opts.length - 1;\n    return value();\n  }\n\n  const value = (): typeof opts[ number ] => {\n    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n    return opts.at(index)!;\n  }\n\n  const select = (indexOrValue: number | typeof opts[ number ]) => {\n    if (typeof indexOrValue === `number`) {\n      index = indexOrValue;\n    } else {\n      const found = opts.indexOf(indexOrValue);\n      if (found === -1) throw new Error(`Could not find value`);\n      index = found;\n    }\n  }\n\n  const toArray = () => [ ...opts ];\n  return { toArray, next, prev, get current() { return value() }, select }\n}","\n/**\n * Return `arr` broken up into chunks of `size`\n *\n * ```js\n * chunks([1,2,3,4,5,6,7,8,9,10], 3);\n * // Yields: [[1, 2, 3], [4, 5, 6], [7, 8, 9], [10]]\n * ```\n * @param array\n * @param size\n * @returns\n */\n//eslint-disable-next-line func-style\nexport function chunks<V>(\n  array: ReadonlyArray<V>,\n  size: number\n) {\n  // https://surma.github.io/underdash/\n  const output = [];\n  //eslint-disable-next-line  functional/no-let\n  for (let index = 0; index < array.length; index += size) {\n    //eslint-disable-next-line functional/immutable-data\n    output.push(array.slice(index, index + size));\n  }\n  return output;\n}","import { toStringDefault } from \"../../util/ToString.js\";\nimport { isEqualDefault } from \"../../util/IsEqual.js\";\nimport { fromIterable as mapFromIterable } from '../../data/maps/MapFns.js';\n\n/**\n * Returns _true_ if contents of `needles` is contained by `haystack`.\n * ```js\n * const a = ['apples','oranges','pears','mandarins'];\n * const b = ['pears', 'apples'];\n * contains(a, b); // True\n *\n * const c = ['pears', 'bananas'];\n * contains(a, b); // False ('bananas' does not exist in a)\n * ```\n * @param haystack\n * @param needles\n * @param eq\n */\nexport const contains = <V>(\n  haystack: ArrayLike<V>,\n  needles: ArrayLike<V>,\n  eq = isEqualDefault<V>\n) => {\n  if (!Array.isArray(haystack)) {\n    throw new TypeError(`Expects haystack parameter to be an array`);\n  }\n  if (!Array.isArray(needles)) {\n    throw new TypeError(`Expects needles parameter to be an array`);\n  }\n\n  for (const needle of needles) {\n    //eslint-disable-next-line functional/no-let\n    let found = false;\n    for (const element of haystack) {\n      if (eq(needle, element)) {\n        found = true;\n        break;\n      }\n    }\n    if (!found) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/**\n * Returns _true_ if array contains duplicate values.\n *\n * ```js\n * containsDuplicateValues(['a','b','a']); // True\n * containsDuplicateValues([\n *  { name: 'Apple' },\n *  { name: 'Apple' }\n * ]); // True\n * ```\n * \n * Uses JSON.toString() by default to compare values.\n * \n * See also:\n * * {@link containsDuplicateInstances}: Compare based on reference, rather than value\n * * {@link unique} Get unique set of values in an array\n * @param array Array to examine\n * @param keyFunction Function to generate key string for object, uses JSON.stringify by default.\n * @returns\n */\nexport const containsDuplicateValues = <V>(\n  array: Array<V> | ReadonlyArray<V>,\n  keyFunction = toStringDefault<V>\n): boolean => {\n  if (!Array.isArray(array)) throw new Error(`Parameter needs to be an array`);\n  try {\n    const _ = mapFromIterable(array, keyFunction);\n  } catch {\n    return true;\n  }\n  return false;\n};\n","/**\n * Returns a copy of `data` with specified length.\n * If the input array is too long, it is truncated.\n *\n * If the input array is too short, it will be expanded based on the `expand` strategy:\n *  - 'undefined': fill with `undefined`\n *  - 'repeat': repeat array elements, starting from position 0\n *  - 'first': repeat with first element from `data`\n *  - 'last': repeat with last element from `data`\n *\n * ```js\n * import { Arrays } from 'https://unpkg.com/ixfx/dist/data.js';\n *\n * Arrays.ensureLength([1,2,3], 2); // [1,2]\n * Arrays.ensureLength([1,2,3], 5, `undefined`); // [1,2,3,undefined,undefined]\n * Arrays.ensureLength([1,2,3], 5, `repeat`);    // [1,2,3,1,2]\n * Arrays.ensureLength([1,2,3], 5, `first`);     // [1,2,3,1,1]\n * Arrays.ensureLength([1,2,3], 5, `last`);      // [1,2,3,3,3]\n * ```\n * @param data Input array to expand\n * @param length Desired length\n * @param expand Expand strategy\n * @typeParam V Type of array\n */\nexport const ensureLength = <V>(\n  data: ReadonlyArray<V> | Array<V>,\n  length: number,\n  expand: `undefined` | `repeat` | `first` | `last` = `undefined`\n): Array<V> => {\n  // Unit tested\n  if (data === undefined) throw new Error(`Data undefined`);\n  if (!Array.isArray(data)) throw new Error(`data is not an array`);\n  if (data.length === length) return [ ...data ];\n  if (data.length > length) {\n    return data.slice(0, length);\n  }\n  const d = [ ...data ];\n  const add = length - d.length;\n\n  //eslint-disable-next-line functional/no-let\n  for (let index = 0; index < add; index++) {\n    //eslint-disable-next-line functional/immutable-data\n    switch (expand) {\n      case `undefined`: {\n        // @ts-expect-error\n        d.push(undefined);\n        break;\n      }\n      case `repeat`: {\n        d.push(data[ index % data.length ]);\n        break;\n      }\n      case `first`: {\n        d.push(data[ 0 ]);\n        break;\n      }\n      case `last`: {\n        // @ts-expect-error\n        d.push(data.at(-1));\n        break;\n      }\n      // No default\n    }\n  }\n  return d;\n};\n","/**\n * Returns a 'flattened' copy of array, un-nesting arrays one level\n * ```js\n * flatten([1, [2, 3], [[4]] ]);\n * // Yields: [ 1, 2, 3, [4]];\n * ```\n * @param array\n * @returns\n */\nexport const flatten = (array: ReadonlyArray<any> | Array<any>): Array<any> =>\n  [ ...array ].flat();","\n/**\n * Groups data by a function `grouper`, returning data as a map with string\n * keys and array values. Multiple values can be assigned to the same group.\n *\n * `grouper` must yield a string designated group for a given item.\n *\n * @example\n * ```js\n * import { Arrays } from 'https://unpkg.com/ixfx/dist/data.js';\n *\n * const data = [\n *  { age: 39, city: `London` }\n *  { age: 14, city: `Copenhagen` }\n *  { age: 23, city: `Stockholm` }\n *  { age: 56, city: `London` }\n * ];\n *\n * // Whatever the function returns will be the designated group\n * // for an item\n * const map = Arrays.groupBy(data, item => data.city);\n * ```\n *\n * This yields a Map with keys London, Stockholm and Copenhagen, and the corresponding values.\n *\n * ```\n * London: [{ age: 39, city: `London` }, { age: 56, city: `London` }]\n * Stockhom: [{ age: 23, city: `Stockholm` }]\n * Copenhagen: [{ age: 14, city: `Copenhagen` }]\n * ```\n * @param array Array to group\n * @param grouper Function that returns a key for a given item\n * @typeParam K Type of key to group by. Typically string.\n * @typeParam V Type of values\n * @returns Map\n */\nexport const groupBy = <K, V>(\n  //eslint-disable-next-line functional/prefer-readonly-type\n  array: Iterable<V>,\n  grouper: (item: V) => K\n) => {\n  const map = new Map<K, Array<V>>();\n\n  for (const a of array) {\n    const key = grouper(a);\n    //eslint-disable-next-line functional/no-let\n    let existing = map.get(key);\n    if (!existing) {\n      existing = [];\n      map.set(key, existing);\n    }\n    //eslint-disable-next-line functional/immutable-data\n    existing.push(a);\n  }\n  return map;\n};","import { isContentsTheSame } from \"./Equality.js\";\n\n/**\n * Returns an interleaving of two or more arrays. All arrays must be the same length.\n *\n * ```js\n * import { Arrays } from 'https://unpkg.com/ixfx/dist/data.js';\n *\n * const a = [`a`, `b`, `c`];\n * const b = [`1`, `2`, `3`];\n * const c = Arrays.interleave(a, b);\n * // Yields:\n * // [`a`, `1`, `b`, `2`, `c`, `3`]\n * ```\n * @param arrays\n * @returns\n */\nexport const interleave = <V>(\n  ...arrays: ReadonlyArray<ReadonlyArray<V>> | Array<Array<V>>\n): Array<V> => {\n  if (arrays.some((a) => !Array.isArray(a))) {\n    throw new Error(`All parameters must be an array`);\n  }\n  const lengths = arrays.map((a) => a.length);\n  if (!isContentsTheSame(lengths)) {\n    throw new Error(`Arrays must be of same length`);\n  }\n\n  const returnValue = [];\n  const length = lengths[ 0 ];\n  for (let index = 0; index < length; index++) {\n    for (const array of arrays) {\n      returnValue.push(array[ index ]);\n    }\n  }\n  return returnValue;\n};\n","import { isEqualDefault, type IsEqual } from \"../../util/IsEqual.js\";\n\n/**\n * Returns the _intersection_ of two arrays: the elements that are in common.\n * \n * ```js\n * intersection([1, 2, 3], [2, 4, 6]);\n// returns [2]\n * ```\n * See also: \n * * {@link unique}: Unique set of items amongst one or more arrays\n * @param arrayA \n * @param arrayB \n * @param equality \n * @returns \n */\nexport const intersection = <V>(\n  arrayA: ReadonlyArray<V> | Array<V>,\n  arrayB: ReadonlyArray<V> | Array<V>,\n  equality: IsEqual<V> = isEqualDefault\n) => arrayA.filter((valueFromA) => arrayB.some((valueFromB) => equality(valueFromA, valueFromB)));\n","import type { MergeReconcile } from \"./Types.js\";\n\n/**\n * Merges arrays left to right, using the provided\n * `reconcile` function to choose a winner when keys overlap.\n *\n * There's also {@link Data.Maps.mergeByKey} if the input data is in Map form.\n *\n * For example, if we have the array A:\n * [`A-1`, `A-2`, `A-3`]\n *\n * And array B:\n * [`B-1`, `B-2`, `B-4`]\n *\n * And with the key function:\n * ```js\n * // Make a key for value based on last char\n * const keyFn = (v) => v.substr(-1, 1);\n * ```\n *\n * If they are merged with the reconile function:\n * ```js\n * const reconcile = (a, b) => b.replace(`-`, `!`);\n * const output = mergeByKey(keyFn, reconcile, arrayA, arrayB);\n * ```\n *\n * The final result will be:\n *\n * [`B!1`, `B!2`, `A-3`, `B-4`]\n *\n * In this toy example, it's obvious how the reconciler transforms\n * data where the keys overlap. For the keys that do not overlap -\n * 3 and 4 in this example - they are copied unaltered.\n *\n * A practical use for `mergeByKey` has been in smoothing keypoints\n * from a TensorFlow pose. In this case, we want to smooth new keypoints\n * with older keypoints. But if a keypoint is not present, for it to be\n * passed through.\n *\n * @param keyFunction Function to generate a unique key for data\n * @param reconcile Returns value to decide 'winner' when keys conflict.\n * @param arrays Arrays of data to merge\n */\nexport const mergeByKey = <V>(\n  keyFunction: (value: V) => string,\n  reconcile: MergeReconcile<V>,\n  ...arrays: ReadonlyArray<ReadonlyArray<V>>\n): Array<V> => {\n  const result = new Map<string, V>();\n  for (const m of arrays) {\n    for (const mv of m) {\n      if (mv === undefined) continue;\n      const mk = keyFunction(mv);\n      //eslint-disable-next-line functional/no-let\n      let v = result.get(mk);\n      v = v ? reconcile(v, mv) : mv;\n      result.set(mk, v);\n    }\n  }\n  return [ ...result.values() ];\n};\n","import { throwIntegerTest } from '../../util/GuardNumbers.js';\n/**\n * Samples array\n *\n * @example By percentage - get half of the items\n * ```\n * import { Arrays } from 'https://unpkg.com/ixfx/dist/data.js';\n *\n * const list = [1,2,3,4,5,6,7,8,9,10];\n * const sub = Arrays.sample(list, 0.5);\n * // Yields: [2, 4, 6, 8, 10]\n * ```\n *\n * @example By steps - every third\n * ```\n * import { Arrays } from 'https://unpkg.com/ixfx/dist/data.js';\n *\n * const list = [1,2,3,4,5,6,7,8,9,10];\n * const sub = Arrays.sample(list, 3);\n * // Yields:\n * // [3, 6, 9]\n * ```\n * @param array Array to sample\n * @param amount Amount, given as a percentage (0..1) or the number of interval (ie 3 for every third item)\n * @returns\n */\nexport const sample = <V>(array: ArrayLike<V>, amount: number): Array<V> => {\n  //eslint-disable-next-line functional/no-let\n  let subsampleSteps = 1;\n  if (amount <= 1) {\n    // Subsample based on a percentage\n    const numberOfItems = array.length * amount;\n    subsampleSteps = Math.round(array.length / numberOfItems);\n  } else {\n    subsampleSteps = amount;\n  }\n\n  throwIntegerTest(subsampleSteps, `positive`, `amount`);\n  if (subsampleSteps > array.length - 1) {\n    throw new Error(`Subsample steps exceeds array length`);\n  }\n  const r: Array<V> = [];\n\n  //eslint-disable-next-line functional/no-let\n  for (let index = subsampleSteps - 1; index < array.length; index += subsampleSteps) {\n    //eslint-disable-next-line functional/immutable-data\n    r.push(array[ index ]);\n  }\n  return r;\n};","/**\n * Yields all items in `data` for as long as `predicate` returns true.\n *\n * `predicate` yields arrays of `[stop:boolean, acc:A]`. The first value\n * is _true_ when the iteration should stop, and the `acc` is the accumulated value.\n * This allows `until` to be used to carry over some state from item to item.\n *\n * @example Stop when we hit an item with value of 3\n * ```js\n * const v = [...until([1,2,3,4,5], v => [v === 3, 0])];\n * // [ 1, 2 ]\n * ```\n *\n * @example Stop when we reach a total\n * ```js\n * // Stop when accumulated value reaches 6\n * const v = Arrays.until[1,2,3,4,5], (v, acc) => [acc >= 7, v+acc], 0);\n * // [1, 2, 3]\n * ```\n * @param data\n * @param predicate\n * @returns\n */\nexport function* until<V, A>(\n  //eslint-disable-next-line functional/prefer-readonly-type\n  data: ReadonlyArray<V> | Array<V>,\n  predicate: (v: V, accumulator: A) => readonly [ stop: boolean, acc: A ],\n  initial: A\n): Generator<V> {\n  //const returnValue = [];\n  //eslint-disable-next-line functional/no-let\n  let total = initial;\n  //eslint-disable-next-line functional/no-let\n  for (const datum of data) {\n    const [ stop, accumulator ] = predicate(datum, total);\n    if (stop) break;\n\n    total = accumulator;\n\n    //eslint-disable-next-line functional/immutable-data\n    //returnValue.push(datum);\n    yield datum;\n\n  }\n  //return returnValue;\n};"],"mappings":"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","names":[]}