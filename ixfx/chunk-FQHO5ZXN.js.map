{"version":3,"sources":["../node_modules/fp-ts/lib/function.js","../node_modules/fp-ts/lib/internal.js","../node_modules/fp-ts/lib/Apply.js","../node_modules/fp-ts/lib/Chain.js","../node_modules/fp-ts/lib/FromEither.js","../node_modules/fp-ts/lib/Functor.js","../node_modules/fp-ts/lib/Eq.js","../node_modules/fp-ts/lib/Ord.js","../node_modules/fp-ts/lib/Magma.js","../node_modules/fp-ts/lib/Semigroup.js","../node_modules/fp-ts/lib/ReadonlyNonEmptyArray.js","../node_modules/fp-ts/lib/NonEmptyArray.js","../node_modules/fp-ts/lib/number.js","../node_modules/fp-ts/lib/Separated.js","../node_modules/fp-ts/lib/Witherable.js","../node_modules/fp-ts/lib/Zero.js","../node_modules/fp-ts/lib/ReadonlyArray.js","../node_modules/fp-ts/lib/Array.js","../node_modules/fp-ts/lib/string.js","../src/KeyValue.ts"],"sourcesContent":["\"use strict\";\nvar __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {\n    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\n        if (ar || !(i in from)) {\n            if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n            ar[i] = from[i];\n        }\n    }\n    return to.concat(ar || Array.prototype.slice.call(from));\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.dual = exports.getEndomorphismMonoid = exports.not = exports.SK = exports.hole = exports.pipe = exports.untupled = exports.tupled = exports.absurd = exports.decrement = exports.increment = exports.tuple = exports.flow = exports.flip = exports.constVoid = exports.constUndefined = exports.constNull = exports.constFalse = exports.constTrue = exports.constant = exports.unsafeCoerce = exports.identity = exports.apply = exports.getRing = exports.getSemiring = exports.getMonoid = exports.getSemigroup = exports.getBooleanAlgebra = void 0;\n// -------------------------------------------------------------------------------------\n// instances\n// -------------------------------------------------------------------------------------\n/**\n * @category instances\n * @since 2.10.0\n */\nvar getBooleanAlgebra = function (B) {\n    return function () { return ({\n        meet: function (x, y) { return function (a) { return B.meet(x(a), y(a)); }; },\n        join: function (x, y) { return function (a) { return B.join(x(a), y(a)); }; },\n        zero: function () { return B.zero; },\n        one: function () { return B.one; },\n        implies: function (x, y) { return function (a) { return B.implies(x(a), y(a)); }; },\n        not: function (x) { return function (a) { return B.not(x(a)); }; }\n    }); };\n};\nexports.getBooleanAlgebra = getBooleanAlgebra;\n/**\n * Unary functions form a semigroup as long as you can provide a semigroup for the codomain.\n *\n * @example\n * import { Predicate, getSemigroup } from 'fp-ts/function'\n * import * as B from 'fp-ts/boolean'\n *\n * const f: Predicate<number> = (n) => n <= 2\n * const g: Predicate<number> = (n) => n >= 0\n *\n * const S1 = getSemigroup(B.SemigroupAll)<number>()\n *\n * assert.deepStrictEqual(S1.concat(f, g)(1), true)\n * assert.deepStrictEqual(S1.concat(f, g)(3), false)\n *\n * const S2 = getSemigroup(B.SemigroupAny)<number>()\n *\n * assert.deepStrictEqual(S2.concat(f, g)(1), true)\n * assert.deepStrictEqual(S2.concat(f, g)(3), true)\n *\n * @category instances\n * @since 2.10.0\n */\nvar getSemigroup = function (S) {\n    return function () { return ({\n        concat: function (f, g) { return function (a) { return S.concat(f(a), g(a)); }; }\n    }); };\n};\nexports.getSemigroup = getSemigroup;\n/**\n * Unary functions form a monoid as long as you can provide a monoid for the codomain.\n *\n * @example\n * import { Predicate } from 'fp-ts/Predicate'\n * import { getMonoid } from 'fp-ts/function'\n * import * as B from 'fp-ts/boolean'\n *\n * const f: Predicate<number> = (n) => n <= 2\n * const g: Predicate<number> = (n) => n >= 0\n *\n * const M1 = getMonoid(B.MonoidAll)<number>()\n *\n * assert.deepStrictEqual(M1.concat(f, g)(1), true)\n * assert.deepStrictEqual(M1.concat(f, g)(3), false)\n *\n * const M2 = getMonoid(B.MonoidAny)<number>()\n *\n * assert.deepStrictEqual(M2.concat(f, g)(1), true)\n * assert.deepStrictEqual(M2.concat(f, g)(3), true)\n *\n * @category instances\n * @since 2.10.0\n */\nvar getMonoid = function (M) {\n    var getSemigroupM = (0, exports.getSemigroup)(M);\n    return function () { return ({\n        concat: getSemigroupM().concat,\n        empty: function () { return M.empty; }\n    }); };\n};\nexports.getMonoid = getMonoid;\n/**\n * @category instances\n * @since 2.10.0\n */\nvar getSemiring = function (S) { return ({\n    add: function (f, g) { return function (x) { return S.add(f(x), g(x)); }; },\n    zero: function () { return S.zero; },\n    mul: function (f, g) { return function (x) { return S.mul(f(x), g(x)); }; },\n    one: function () { return S.one; }\n}); };\nexports.getSemiring = getSemiring;\n/**\n * @category instances\n * @since 2.10.0\n */\nvar getRing = function (R) {\n    var S = (0, exports.getSemiring)(R);\n    return {\n        add: S.add,\n        mul: S.mul,\n        one: S.one,\n        zero: S.zero,\n        sub: function (f, g) { return function (x) { return R.sub(f(x), g(x)); }; }\n    };\n};\nexports.getRing = getRing;\n// -------------------------------------------------------------------------------------\n// utils\n// -------------------------------------------------------------------------------------\n/**\n * @since 2.11.0\n */\nvar apply = function (a) {\n    return function (f) {\n        return f(a);\n    };\n};\nexports.apply = apply;\n/**\n * @since 2.0.0\n */\nfunction identity(a) {\n    return a;\n}\nexports.identity = identity;\n/**\n * @since 2.0.0\n */\nexports.unsafeCoerce = identity;\n/**\n * @since 2.0.0\n */\nfunction constant(a) {\n    return function () { return a; };\n}\nexports.constant = constant;\n/**\n * A thunk that returns always `true`.\n *\n * @since 2.0.0\n */\nexports.constTrue = constant(true);\n/**\n * A thunk that returns always `false`.\n *\n * @since 2.0.0\n */\nexports.constFalse = constant(false);\n/**\n * A thunk that returns always `null`.\n *\n * @since 2.0.0\n */\nexports.constNull = constant(null);\n/**\n * A thunk that returns always `undefined`.\n *\n * @since 2.0.0\n */\nexports.constUndefined = constant(undefined);\n/**\n * A thunk that returns always `void`.\n *\n * @since 2.0.0\n */\nexports.constVoid = exports.constUndefined;\nfunction flip(f) {\n    return function () {\n        var args = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            args[_i] = arguments[_i];\n        }\n        if (args.length > 1) {\n            return f(args[1], args[0]);\n        }\n        return function (a) { return f(a)(args[0]); };\n    };\n}\nexports.flip = flip;\nfunction flow(ab, bc, cd, de, ef, fg, gh, hi, ij) {\n    switch (arguments.length) {\n        case 1:\n            return ab;\n        case 2:\n            return function () {\n                return bc(ab.apply(this, arguments));\n            };\n        case 3:\n            return function () {\n                return cd(bc(ab.apply(this, arguments)));\n            };\n        case 4:\n            return function () {\n                return de(cd(bc(ab.apply(this, arguments))));\n            };\n        case 5:\n            return function () {\n                return ef(de(cd(bc(ab.apply(this, arguments)))));\n            };\n        case 6:\n            return function () {\n                return fg(ef(de(cd(bc(ab.apply(this, arguments))))));\n            };\n        case 7:\n            return function () {\n                return gh(fg(ef(de(cd(bc(ab.apply(this, arguments)))))));\n            };\n        case 8:\n            return function () {\n                return hi(gh(fg(ef(de(cd(bc(ab.apply(this, arguments))))))));\n            };\n        case 9:\n            return function () {\n                return ij(hi(gh(fg(ef(de(cd(bc(ab.apply(this, arguments)))))))));\n            };\n    }\n    return;\n}\nexports.flow = flow;\n/**\n * @since 2.0.0\n */\nfunction tuple() {\n    var t = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        t[_i] = arguments[_i];\n    }\n    return t;\n}\nexports.tuple = tuple;\n/**\n * @since 2.0.0\n */\nfunction increment(n) {\n    return n + 1;\n}\nexports.increment = increment;\n/**\n * @since 2.0.0\n */\nfunction decrement(n) {\n    return n - 1;\n}\nexports.decrement = decrement;\n/**\n * @since 2.0.0\n */\nfunction absurd(_) {\n    throw new Error('Called `absurd` function which should be uncallable');\n}\nexports.absurd = absurd;\n/**\n * Creates a tupled version of this function: instead of `n` arguments, it accepts a single tuple argument.\n *\n * @example\n * import { tupled } from 'fp-ts/function'\n *\n * const add = tupled((x: number, y: number): number => x + y)\n *\n * assert.strictEqual(add([1, 2]), 3)\n *\n * @since 2.4.0\n */\nfunction tupled(f) {\n    return function (a) { return f.apply(void 0, a); };\n}\nexports.tupled = tupled;\n/**\n * Inverse function of `tupled`\n *\n * @since 2.4.0\n */\nfunction untupled(f) {\n    return function () {\n        var a = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            a[_i] = arguments[_i];\n        }\n        return f(a);\n    };\n}\nexports.untupled = untupled;\nfunction pipe(a, ab, bc, cd, de, ef, fg, gh, hi) {\n    switch (arguments.length) {\n        case 1:\n            return a;\n        case 2:\n            return ab(a);\n        case 3:\n            return bc(ab(a));\n        case 4:\n            return cd(bc(ab(a)));\n        case 5:\n            return de(cd(bc(ab(a))));\n        case 6:\n            return ef(de(cd(bc(ab(a)))));\n        case 7:\n            return fg(ef(de(cd(bc(ab(a))))));\n        case 8:\n            return gh(fg(ef(de(cd(bc(ab(a)))))));\n        case 9:\n            return hi(gh(fg(ef(de(cd(bc(ab(a))))))));\n        default: {\n            var ret = arguments[0];\n            for (var i = 1; i < arguments.length; i++) {\n                ret = arguments[i](ret);\n            }\n            return ret;\n        }\n    }\n}\nexports.pipe = pipe;\n/**\n * Type hole simulation\n *\n * @since 2.7.0\n */\nexports.hole = absurd;\n/**\n * @since 2.11.0\n */\nvar SK = function (_, b) { return b; };\nexports.SK = SK;\n/**\n * Use `Predicate` module instead.\n *\n * @category zone of death\n * @since 2.0.0\n * @deprecated\n */\nfunction not(predicate) {\n    return function (a) { return !predicate(a); };\n}\nexports.not = not;\n/**\n * Use `Endomorphism` module instead.\n *\n * @category zone of death\n * @since 2.10.0\n * @deprecated\n */\nvar getEndomorphismMonoid = function () { return ({\n    concat: function (first, second) { return flow(first, second); },\n    empty: identity\n}); };\nexports.getEndomorphismMonoid = getEndomorphismMonoid;\n/** @internal */\nvar dual = function (arity, body) {\n    var isDataFirst = typeof arity === 'number' ? function (args) { return args.length >= arity; } : arity;\n    return function () {\n        var args = Array.from(arguments);\n        if (isDataFirst(arguments)) {\n            return body.apply(this, args);\n        }\n        return function (self) { return body.apply(void 0, __spreadArray([self], args, false)); };\n    };\n};\nexports.dual = dual;\n","\"use strict\";\nvar __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {\n    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\n        if (ar || !(i in from)) {\n            if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n            ar[i] = from[i];\n        }\n    }\n    return to.concat(ar || Array.prototype.slice.call(from));\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.flatMapReader = exports.flatMapTask = exports.flatMapIO = exports.flatMapEither = exports.flatMapOption = exports.flatMapNullable = exports.liftOption = exports.liftNullable = exports.fromReadonlyNonEmptyArray = exports.has = exports.emptyRecord = exports.emptyReadonlyArray = exports.tail = exports.head = exports.isNonEmpty = exports.singleton = exports.right = exports.left = exports.isRight = exports.isLeft = exports.some = exports.none = exports.isSome = exports.isNone = void 0;\nvar function_1 = require(\"./function\");\n// -------------------------------------------------------------------------------------\n// Option\n// -------------------------------------------------------------------------------------\n/** @internal */\nvar isNone = function (fa) { return fa._tag === 'None'; };\nexports.isNone = isNone;\n/** @internal */\nvar isSome = function (fa) { return fa._tag === 'Some'; };\nexports.isSome = isSome;\n/** @internal */\nexports.none = { _tag: 'None' };\n/** @internal */\nvar some = function (a) { return ({ _tag: 'Some', value: a }); };\nexports.some = some;\n// -------------------------------------------------------------------------------------\n// Either\n// -------------------------------------------------------------------------------------\n/** @internal */\nvar isLeft = function (ma) { return ma._tag === 'Left'; };\nexports.isLeft = isLeft;\n/** @internal */\nvar isRight = function (ma) { return ma._tag === 'Right'; };\nexports.isRight = isRight;\n/** @internal */\nvar left = function (e) { return ({ _tag: 'Left', left: e }); };\nexports.left = left;\n/** @internal */\nvar right = function (a) { return ({ _tag: 'Right', right: a }); };\nexports.right = right;\n// -------------------------------------------------------------------------------------\n// ReadonlyNonEmptyArray\n// -------------------------------------------------------------------------------------\n/** @internal */\nvar singleton = function (a) { return [a]; };\nexports.singleton = singleton;\n/** @internal */\nvar isNonEmpty = function (as) { return as.length > 0; };\nexports.isNonEmpty = isNonEmpty;\n/** @internal */\nvar head = function (as) { return as[0]; };\nexports.head = head;\n/** @internal */\nvar tail = function (as) { return as.slice(1); };\nexports.tail = tail;\n// -------------------------------------------------------------------------------------\n// empty\n// -------------------------------------------------------------------------------------\n/** @internal */\nexports.emptyReadonlyArray = [];\n/** @internal */\nexports.emptyRecord = {};\n// -------------------------------------------------------------------------------------\n// Record\n// -------------------------------------------------------------------------------------\n/** @internal */\nexports.has = Object.prototype.hasOwnProperty;\n// -------------------------------------------------------------------------------------\n// NonEmptyArray\n// -------------------------------------------------------------------------------------\n/** @internal */\nvar fromReadonlyNonEmptyArray = function (as) { return __spreadArray([as[0]], as.slice(1), true); };\nexports.fromReadonlyNonEmptyArray = fromReadonlyNonEmptyArray;\n/** @internal */\nvar liftNullable = function (F) {\n    return function (f, onNullable) {\n        return function () {\n            var a = [];\n            for (var _i = 0; _i < arguments.length; _i++) {\n                a[_i] = arguments[_i];\n            }\n            var o = f.apply(void 0, a);\n            return F.fromEither(o == null ? (0, exports.left)(onNullable.apply(void 0, a)) : (0, exports.right)(o));\n        };\n    };\n};\nexports.liftNullable = liftNullable;\n/** @internal */\nvar liftOption = function (F) {\n    return function (f, onNone) {\n        return function () {\n            var a = [];\n            for (var _i = 0; _i < arguments.length; _i++) {\n                a[_i] = arguments[_i];\n            }\n            var o = f.apply(void 0, a);\n            return F.fromEither((0, exports.isNone)(o) ? (0, exports.left)(onNone.apply(void 0, a)) : (0, exports.right)(o.value));\n        };\n    };\n};\nexports.liftOption = liftOption;\n/** @internal */\nvar flatMapNullable = function (F, M) {\n    /*#__PURE__*/ return (0, function_1.dual)(3, function (self, f, onNullable) {\n        return M.flatMap(self, (0, exports.liftNullable)(F)(f, onNullable));\n    });\n};\nexports.flatMapNullable = flatMapNullable;\n/** @internal */\nvar flatMapOption = function (F, M) {\n    /*#__PURE__*/ return (0, function_1.dual)(3, function (self, f, onNone) { return M.flatMap(self, (0, exports.liftOption)(F)(f, onNone)); });\n};\nexports.flatMapOption = flatMapOption;\n/** @internal */\nvar flatMapEither = function (F, M) {\n    /*#__PURE__*/ return (0, function_1.dual)(2, function (self, f) {\n        return M.flatMap(self, function (a) { return F.fromEither(f(a)); });\n    });\n};\nexports.flatMapEither = flatMapEither;\n/** @internal */\nvar flatMapIO = function (F, M) {\n    /*#__PURE__*/ return (0, function_1.dual)(2, function (self, f) {\n        return M.flatMap(self, function (a) { return F.fromIO(f(a)); });\n    });\n};\nexports.flatMapIO = flatMapIO;\n/** @internal */\nvar flatMapTask = function (F, M) {\n    /*#__PURE__*/ return (0, function_1.dual)(2, function (self, f) {\n        return M.flatMap(self, function (a) { return F.fromTask(f(a)); });\n    });\n};\nexports.flatMapTask = flatMapTask;\n/** @internal */\nvar flatMapReader = function (F, M) {\n    /*#__PURE__*/ return (0, function_1.dual)(2, function (self, f) {\n        return M.flatMap(self, function (a) { return F.fromReader(f(a)); });\n    });\n};\nexports.flatMapReader = flatMapReader;\n","\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.sequenceS = exports.sequenceT = exports.getApplySemigroup = exports.apS = exports.apSecond = exports.apFirst = exports.ap = void 0;\n/**\n * The `Apply` class provides the `ap` which is used to apply a function to an argument under a type constructor.\n *\n * `Apply` can be used to lift functions of two or more arguments to work on values wrapped with the type constructor\n * `f`.\n *\n * Instances must satisfy the following law in addition to the `Functor` laws:\n *\n * 1. Associative composition: `F.ap(F.ap(F.map(fbc, bc => ab => a => bc(ab(a))), fab), fa) <-> F.ap(fbc, F.ap(fab, fa))`\n *\n * Formally, `Apply` represents a strong lax semi-monoidal endofunctor.\n *\n * @example\n * import * as O from 'fp-ts/Option'\n * import { pipe } from 'fp-ts/function'\n *\n * const f = (a: string) => (b: number) => (c: boolean) => a + String(b) + String(c)\n * const fa: O.Option<string> = O.some('s')\n * const fb: O.Option<number> = O.some(1)\n * const fc: O.Option<boolean> = O.some(true)\n *\n * assert.deepStrictEqual(\n *   pipe(\n *     // lift a function\n *     O.some(f),\n *     // apply the first argument\n *     O.ap(fa),\n *     // apply the second argument\n *     O.ap(fb),\n *     // apply the third argument\n *     O.ap(fc)\n *   ),\n *   O.some('s1true')\n * )\n *\n * @since 2.0.0\n */\nvar function_1 = require(\"./function\");\nvar _ = __importStar(require(\"./internal\"));\nfunction ap(F, G) {\n    return function (fa) {\n        return function (fab) {\n            return F.ap(F.map(fab, function (gab) { return function (ga) { return G.ap(gab, ga); }; }), fa);\n        };\n    };\n}\nexports.ap = ap;\nfunction apFirst(A) {\n    return function (second) { return function (first) {\n        return A.ap(A.map(first, function (a) { return function () { return a; }; }), second);\n    }; };\n}\nexports.apFirst = apFirst;\nfunction apSecond(A) {\n    return function (second) {\n        return function (first) {\n            return A.ap(A.map(first, function () { return function (b) { return b; }; }), second);\n        };\n    };\n}\nexports.apSecond = apSecond;\nfunction apS(F) {\n    return function (name, fb) {\n        return function (fa) {\n            return F.ap(F.map(fa, function (a) { return function (b) {\n                var _a;\n                return Object.assign({}, a, (_a = {}, _a[name] = b, _a));\n            }; }), fb);\n        };\n    };\n}\nexports.apS = apS;\nfunction getApplySemigroup(F) {\n    return function (S) { return ({\n        concat: function (first, second) {\n            return F.ap(F.map(first, function (x) { return function (y) { return S.concat(x, y); }; }), second);\n        }\n    }); };\n}\nexports.getApplySemigroup = getApplySemigroup;\nfunction curried(f, n, acc) {\n    return function (x) {\n        var combined = Array(acc.length + 1);\n        for (var i = 0; i < acc.length; i++) {\n            combined[i] = acc[i];\n        }\n        combined[acc.length] = x;\n        return n === 0 ? f.apply(null, combined) : curried(f, n - 1, combined);\n    };\n}\nvar tupleConstructors = {\n    1: function (a) { return [a]; },\n    2: function (a) { return function (b) { return [a, b]; }; },\n    3: function (a) { return function (b) { return function (c) { return [a, b, c]; }; }; },\n    4: function (a) { return function (b) { return function (c) { return function (d) { return [a, b, c, d]; }; }; }; },\n    5: function (a) { return function (b) { return function (c) { return function (d) { return function (e) { return [a, b, c, d, e]; }; }; }; }; }\n};\nfunction getTupleConstructor(len) {\n    if (!_.has.call(tupleConstructors, len)) {\n        tupleConstructors[len] = curried(function_1.tuple, len - 1, []);\n    }\n    return tupleConstructors[len];\n}\nfunction sequenceT(F) {\n    return function () {\n        var args = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            args[_i] = arguments[_i];\n        }\n        var len = args.length;\n        var f = getTupleConstructor(len);\n        var fas = F.map(args[0], f);\n        for (var i = 1; i < len; i++) {\n            fas = F.ap(fas, args[i]);\n        }\n        return fas;\n    };\n}\nexports.sequenceT = sequenceT;\nfunction getRecordConstructor(keys) {\n    var len = keys.length;\n    switch (len) {\n        case 1:\n            return function (a) {\n                var _a;\n                return (_a = {}, _a[keys[0]] = a, _a);\n            };\n        case 2:\n            return function (a) { return function (b) {\n                var _a;\n                return (_a = {}, _a[keys[0]] = a, _a[keys[1]] = b, _a);\n            }; };\n        case 3:\n            return function (a) { return function (b) { return function (c) {\n                var _a;\n                return (_a = {}, _a[keys[0]] = a, _a[keys[1]] = b, _a[keys[2]] = c, _a);\n            }; }; };\n        case 4:\n            return function (a) { return function (b) { return function (c) { return function (d) {\n                var _a;\n                return (_a = {},\n                    _a[keys[0]] = a,\n                    _a[keys[1]] = b,\n                    _a[keys[2]] = c,\n                    _a[keys[3]] = d,\n                    _a);\n            }; }; }; };\n        case 5:\n            return function (a) { return function (b) { return function (c) { return function (d) { return function (e) {\n                var _a;\n                return (_a = {},\n                    _a[keys[0]] = a,\n                    _a[keys[1]] = b,\n                    _a[keys[2]] = c,\n                    _a[keys[3]] = d,\n                    _a[keys[4]] = e,\n                    _a);\n            }; }; }; }; };\n        default:\n            return curried(function () {\n                var args = [];\n                for (var _i = 0; _i < arguments.length; _i++) {\n                    args[_i] = arguments[_i];\n                }\n                var r = {};\n                for (var i = 0; i < len; i++) {\n                    r[keys[i]] = args[i];\n                }\n                return r;\n            }, len - 1, []);\n    }\n}\nfunction sequenceS(F) {\n    return function (r) {\n        var keys = Object.keys(r);\n        var len = keys.length;\n        var f = getRecordConstructor(keys);\n        var fr = F.map(r[keys[0]], f);\n        for (var i = 1; i < len; i++) {\n            fr = F.ap(fr, r[keys[i]]);\n        }\n        return fr;\n    };\n}\nexports.sequenceS = sequenceS;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.bind = exports.tap = exports.chainFirst = void 0;\nfunction chainFirst(M) {\n    var tapM = tap(M);\n    return function (f) { return function (first) { return tapM(first, f); }; };\n}\nexports.chainFirst = chainFirst;\n/** @internal */\nfunction tap(M) {\n    return function (first, f) { return M.chain(first, function (a) { return M.map(f(a), function () { return a; }); }); };\n}\nexports.tap = tap;\nfunction bind(M) {\n    return function (name, f) { return function (ma) { return M.chain(ma, function (a) { return M.map(f(a), function (b) {\n        var _a;\n        return Object.assign({}, a, (_a = {}, _a[name] = b, _a));\n    }); }); }; };\n}\nexports.bind = bind;\n","\"use strict\";\n/**\n * The `FromEither` type class represents those data types which support errors.\n *\n * @since 2.10.0\n */\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.tapEither = exports.filterOrElse = exports.chainFirstEitherK = exports.chainEitherK = exports.fromEitherK = exports.chainOptionK = exports.fromOptionK = exports.fromPredicate = exports.fromOption = void 0;\nvar Chain_1 = require(\"./Chain\");\nvar function_1 = require(\"./function\");\nvar _ = __importStar(require(\"./internal\"));\nfunction fromOption(F) {\n    return function (onNone) { return function (ma) { return F.fromEither(_.isNone(ma) ? _.left(onNone()) : _.right(ma.value)); }; };\n}\nexports.fromOption = fromOption;\nfunction fromPredicate(F) {\n    return function (predicate, onFalse) {\n        return function (a) {\n            return F.fromEither(predicate(a) ? _.right(a) : _.left(onFalse(a)));\n        };\n    };\n}\nexports.fromPredicate = fromPredicate;\nfunction fromOptionK(F) {\n    var fromOptionF = fromOption(F);\n    return function (onNone) {\n        var from = fromOptionF(onNone);\n        return function (f) { return (0, function_1.flow)(f, from); };\n    };\n}\nexports.fromOptionK = fromOptionK;\nfunction chainOptionK(F, M) {\n    var fromOptionKF = fromOptionK(F);\n    return function (onNone) {\n        var from = fromOptionKF(onNone);\n        return function (f) { return function (ma) { return M.chain(ma, from(f)); }; };\n    };\n}\nexports.chainOptionK = chainOptionK;\nfunction fromEitherK(F) {\n    return function (f) { return (0, function_1.flow)(f, F.fromEither); };\n}\nexports.fromEitherK = fromEitherK;\nfunction chainEitherK(F, M) {\n    var fromEitherKF = fromEitherK(F);\n    return function (f) { return function (ma) { return M.chain(ma, fromEitherKF(f)); }; };\n}\nexports.chainEitherK = chainEitherK;\nfunction chainFirstEitherK(F, M) {\n    var tapEitherM = tapEither(F, M);\n    return function (f) { return function (ma) { return tapEitherM(ma, f); }; };\n}\nexports.chainFirstEitherK = chainFirstEitherK;\nfunction filterOrElse(F, M) {\n    return function (predicate, onFalse) {\n        return function (ma) {\n            return M.chain(ma, function (a) { return F.fromEither(predicate(a) ? _.right(a) : _.left(onFalse(a))); });\n        };\n    };\n}\nexports.filterOrElse = filterOrElse;\n/** @internal */\nfunction tapEither(F, M) {\n    var fromEither = fromEitherK(F);\n    var tapM = (0, Chain_1.tap)(M);\n    return function (self, f) { return tapM(self, fromEither(f)); };\n}\nexports.tapEither = tapEither;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.asUnit = exports.as = exports.getFunctorComposition = exports.let = exports.bindTo = exports.flap = exports.map = void 0;\n/**\n * A `Functor` is a type constructor which supports a mapping operation `map`.\n *\n * `map` can be used to turn functions `a -> b` into functions `f a -> f b` whose argument and return types use the type\n * constructor `f` to represent some computational context.\n *\n * Instances must satisfy the following laws:\n *\n * 1. Identity: `F.map(fa, a => a) <-> fa`\n * 2. Composition: `F.map(fa, a => bc(ab(a))) <-> F.map(F.map(fa, ab), bc)`\n *\n * @since 2.0.0\n */\nvar function_1 = require(\"./function\");\nfunction map(F, G) {\n    return function (f) { return function (fa) { return F.map(fa, function (ga) { return G.map(ga, f); }); }; };\n}\nexports.map = map;\nfunction flap(F) {\n    return function (a) { return function (fab) { return F.map(fab, function (f) { return f(a); }); }; };\n}\nexports.flap = flap;\nfunction bindTo(F) {\n    return function (name) { return function (fa) { return F.map(fa, function (a) {\n        var _a;\n        return (_a = {}, _a[name] = a, _a);\n    }); }; };\n}\nexports.bindTo = bindTo;\nfunction let_(F) {\n    return function (name, f) { return function (fa) { return F.map(fa, function (a) {\n        var _a;\n        return Object.assign({}, a, (_a = {}, _a[name] = f(a), _a));\n    }); }; };\n}\nexports.let = let_;\n/** @deprecated */\nfunction getFunctorComposition(F, G) {\n    var _map = map(F, G);\n    return {\n        map: function (fga, f) { return (0, function_1.pipe)(fga, _map(f)); }\n    };\n}\nexports.getFunctorComposition = getFunctorComposition;\n/** @internal */\nfunction as(F) {\n    return function (self, b) { return F.map(self, function () { return b; }); };\n}\nexports.as = as;\n/** @internal */\nfunction asUnit(F) {\n    var asM = as(F);\n    return function (self) { return asM(self, undefined); };\n}\nexports.asUnit = asUnit;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.eqDate = exports.eqNumber = exports.eqString = exports.eqBoolean = exports.eq = exports.strictEqual = exports.getStructEq = exports.getTupleEq = exports.Contravariant = exports.getMonoid = exports.getSemigroup = exports.eqStrict = exports.URI = exports.contramap = exports.tuple = exports.struct = exports.fromEquals = void 0;\nvar function_1 = require(\"./function\");\n// -------------------------------------------------------------------------------------\n// constructors\n// -------------------------------------------------------------------------------------\n/**\n * @category constructors\n * @since 2.0.0\n */\nvar fromEquals = function (equals) { return ({\n    equals: function (x, y) { return x === y || equals(x, y); }\n}); };\nexports.fromEquals = fromEquals;\n// -------------------------------------------------------------------------------------\n// combinators\n// -------------------------------------------------------------------------------------\n/**\n * @since 2.10.0\n */\nvar struct = function (eqs) {\n    return (0, exports.fromEquals)(function (first, second) {\n        for (var key in eqs) {\n            if (!eqs[key].equals(first[key], second[key])) {\n                return false;\n            }\n        }\n        return true;\n    });\n};\nexports.struct = struct;\n/**\n * Given a tuple of `Eq`s returns a `Eq` for the tuple\n *\n * @example\n * import { tuple } from 'fp-ts/Eq'\n * import * as S from 'fp-ts/string'\n * import * as N from 'fp-ts/number'\n * import * as B from 'fp-ts/boolean'\n *\n * const E = tuple(S.Eq, N.Eq, B.Eq)\n * assert.strictEqual(E.equals(['a', 1, true], ['a', 1, true]), true)\n * assert.strictEqual(E.equals(['a', 1, true], ['b', 1, true]), false)\n * assert.strictEqual(E.equals(['a', 1, true], ['a', 2, true]), false)\n * assert.strictEqual(E.equals(['a', 1, true], ['a', 1, false]), false)\n *\n * @since 2.10.0\n */\nvar tuple = function () {\n    var eqs = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        eqs[_i] = arguments[_i];\n    }\n    return (0, exports.fromEquals)(function (first, second) { return eqs.every(function (E, i) { return E.equals(first[i], second[i]); }); });\n};\nexports.tuple = tuple;\n/* istanbul ignore next */\nvar contramap_ = function (fa, f) { return (0, function_1.pipe)(fa, (0, exports.contramap)(f)); };\n/**\n * A typical use case for `contramap` would be like, given some `User` type, to construct an `Eq<User>`.\n *\n * We can do so with a function from `User -> X` where `X` is some value that we know how to compare\n * for equality (meaning we have an `Eq<X>`)\n *\n * For example, given the following `User` type, we want to construct an `Eq<User>` that just looks at the `key` field\n * for each user (since it's known to be unique).\n *\n * If we have a way of comparing `UUID`s for equality (`eqUUID: Eq<UUID>`) and we know how to go from `User -> UUID`,\n * using `contramap` we can do this\n *\n * @example\n * import { contramap, Eq } from 'fp-ts/Eq'\n * import { pipe } from 'fp-ts/function'\n * import * as S from 'fp-ts/string'\n *\n * type UUID = string\n *\n * interface User {\n *   readonly key: UUID\n *   readonly firstName: string\n *   readonly lastName: string\n * }\n *\n * const eqUUID: Eq<UUID> = S.Eq\n *\n * const eqUserByKey: Eq<User> = pipe(\n *   eqUUID,\n *   contramap((user) => user.key)\n * )\n *\n * assert.deepStrictEqual(\n *   eqUserByKey.equals(\n *     { key: 'k1', firstName: 'a1', lastName: 'b1' },\n *     { key: 'k2', firstName: 'a1', lastName: 'b1' }\n *   ),\n *   false\n * )\n * assert.deepStrictEqual(\n *   eqUserByKey.equals(\n *     { key: 'k1', firstName: 'a1', lastName: 'b1' },\n *     { key: 'k1', firstName: 'a2', lastName: 'b1' }\n *   ),\n *   true\n * )\n *\n * @since 2.0.0\n */\nvar contramap = function (f) { return function (fa) {\n    return (0, exports.fromEquals)(function (x, y) { return fa.equals(f(x), f(y)); });\n}; };\nexports.contramap = contramap;\n/**\n * @category type lambdas\n * @since 2.0.0\n */\nexports.URI = 'Eq';\n/**\n * @category instances\n * @since 2.5.0\n */\nexports.eqStrict = {\n    equals: function (a, b) { return a === b; }\n};\nvar empty = {\n    equals: function () { return true; }\n};\n/**\n * @category instances\n * @since 2.10.0\n */\nvar getSemigroup = function () { return ({\n    concat: function (x, y) { return (0, exports.fromEquals)(function (a, b) { return x.equals(a, b) && y.equals(a, b); }); }\n}); };\nexports.getSemigroup = getSemigroup;\n/**\n * @category instances\n * @since 2.6.0\n */\nvar getMonoid = function () { return ({\n    concat: (0, exports.getSemigroup)().concat,\n    empty: empty\n}); };\nexports.getMonoid = getMonoid;\n/**\n * @category instances\n * @since 2.7.0\n */\nexports.Contravariant = {\n    URI: exports.URI,\n    contramap: contramap_\n};\n// -------------------------------------------------------------------------------------\n// deprecated\n// -------------------------------------------------------------------------------------\n/**\n * Use [`tuple`](#tuple) instead.\n *\n * @category zone of death\n * @since 2.0.0\n * @deprecated\n */\nexports.getTupleEq = exports.tuple;\n/**\n * Use [`struct`](#struct) instead.\n *\n * @category zone of death\n * @since 2.0.0\n * @deprecated\n */\nexports.getStructEq = exports.struct;\n/**\n * Use [`eqStrict`](#eqstrict) instead\n *\n * @category zone of death\n * @since 2.0.0\n * @deprecated\n */\nexports.strictEqual = exports.eqStrict.equals;\n/**\n * This instance is deprecated, use small, specific instances instead.\n * For example if a function needs a `Contravariant` instance, pass `E.Contravariant` instead of `E.eq`\n * (where `E` is from `import E from 'fp-ts/Eq'`)\n *\n * @category zone of death\n * @since 2.0.0\n * @deprecated\n */\nexports.eq = exports.Contravariant;\n/**\n * Use [`Eq`](./boolean.ts.html#eq) instead.\n *\n * @category zone of death\n * @since 2.0.0\n * @deprecated\n */\nexports.eqBoolean = exports.eqStrict;\n/**\n * Use [`Eq`](./string.ts.html#eq) instead.\n *\n * @category zone of death\n * @since 2.0.0\n * @deprecated\n */\nexports.eqString = exports.eqStrict;\n/**\n * Use [`Eq`](./number.ts.html#eq) instead.\n *\n * @category zone of death\n * @since 2.0.0\n * @deprecated\n */\nexports.eqNumber = exports.eqStrict;\n/**\n * Use [`Eq`](./Date.ts.html#eq) instead.\n *\n * @category zone of death\n * @since 2.0.0\n * @deprecated\n */\nexports.eqDate = {\n    equals: function (first, second) { return first.valueOf() === second.valueOf(); }\n};\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ordDate = exports.ordNumber = exports.ordString = exports.ordBoolean = exports.ord = exports.getDualOrd = exports.getTupleOrd = exports.between = exports.clamp = exports.max = exports.min = exports.geq = exports.leq = exports.gt = exports.lt = exports.equals = exports.trivial = exports.Contravariant = exports.getMonoid = exports.getSemigroup = exports.URI = exports.contramap = exports.reverse = exports.tuple = exports.fromCompare = exports.equalsDefault = void 0;\nvar Eq_1 = require(\"./Eq\");\nvar function_1 = require(\"./function\");\n// -------------------------------------------------------------------------------------\n// defaults\n// -------------------------------------------------------------------------------------\n/**\n * @category defaults\n * @since 2.10.0\n */\nvar equalsDefault = function (compare) {\n    return function (first, second) {\n        return first === second || compare(first, second) === 0;\n    };\n};\nexports.equalsDefault = equalsDefault;\n// -------------------------------------------------------------------------------------\n// constructors\n// -------------------------------------------------------------------------------------\n/**\n * @category constructors\n * @since 2.0.0\n */\nvar fromCompare = function (compare) { return ({\n    equals: (0, exports.equalsDefault)(compare),\n    compare: function (first, second) { return (first === second ? 0 : compare(first, second)); }\n}); };\nexports.fromCompare = fromCompare;\n// -------------------------------------------------------------------------------------\n// combinators\n// -------------------------------------------------------------------------------------\n/**\n * Given a tuple of `Ord`s returns an `Ord` for the tuple.\n *\n * @example\n * import { tuple } from 'fp-ts/Ord'\n * import * as B from 'fp-ts/boolean'\n * import * as S from 'fp-ts/string'\n * import * as N from 'fp-ts/number'\n *\n * const O = tuple(S.Ord, N.Ord, B.Ord)\n * assert.strictEqual(O.compare(['a', 1, true], ['b', 2, true]), -1)\n * assert.strictEqual(O.compare(['a', 1, true], ['a', 2, true]), -1)\n * assert.strictEqual(O.compare(['a', 1, true], ['a', 1, false]), 1)\n *\n * @since 2.10.0\n */\nvar tuple = function () {\n    var ords = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        ords[_i] = arguments[_i];\n    }\n    return (0, exports.fromCompare)(function (first, second) {\n        var i = 0;\n        for (; i < ords.length - 1; i++) {\n            var r = ords[i].compare(first[i], second[i]);\n            if (r !== 0) {\n                return r;\n            }\n        }\n        return ords[i].compare(first[i], second[i]);\n    });\n};\nexports.tuple = tuple;\n/**\n * @since 2.10.0\n */\nvar reverse = function (O) { return (0, exports.fromCompare)(function (first, second) { return O.compare(second, first); }); };\nexports.reverse = reverse;\n/* istanbul ignore next */\nvar contramap_ = function (fa, f) { return (0, function_1.pipe)(fa, (0, exports.contramap)(f)); };\n/**\n * A typical use case for `contramap` would be like, given some `User` type, to construct an `Ord<User>`.\n *\n * We can do so with a function from `User -> X` where `X` is some value that we know how to compare\n * for ordering (meaning we have an `Ord<X>`)\n *\n * For example, given the following `User` type, there are lots of possible choices for `X`,\n * but let's say we want to sort a list of users by `lastName`.\n *\n * If we have a way of comparing `lastName`s for ordering (`ordLastName: Ord<string>`) and we know how to go from `User -> string`,\n * using `contramap` we can do this\n *\n * @example\n * import { pipe } from 'fp-ts/function'\n * import { contramap, Ord } from 'fp-ts/Ord'\n * import * as RA from 'fp-ts/ReadonlyArray'\n * import * as S from 'fp-ts/string'\n *\n * interface User {\n *   readonly firstName: string\n *   readonly lastName: string\n * }\n *\n * const ordLastName: Ord<string> = S.Ord\n *\n * const ordByLastName: Ord<User> = pipe(\n *   ordLastName,\n *   contramap((user) => user.lastName)\n * )\n *\n * assert.deepStrictEqual(\n *   RA.sort(ordByLastName)([\n *     { firstName: 'a', lastName: 'd' },\n *     { firstName: 'c', lastName: 'b' }\n *   ]),\n *   [\n *     { firstName: 'c', lastName: 'b' },\n *     { firstName: 'a', lastName: 'd' }\n *   ]\n * )\n *\n * @since 2.0.0\n */\nvar contramap = function (f) { return function (fa) {\n    return (0, exports.fromCompare)(function (first, second) { return fa.compare(f(first), f(second)); });\n}; };\nexports.contramap = contramap;\n/**\n * @category type lambdas\n * @since 2.0.0\n */\nexports.URI = 'Ord';\n/**\n * A typical use case for the `Semigroup` instance of `Ord` is merging two or more orderings.\n *\n * For example the following snippet builds an `Ord` for a type `User` which\n * sorts by `created` date descending, and **then** `lastName`\n *\n * @example\n * import * as D from 'fp-ts/Date'\n * import { pipe } from 'fp-ts/function'\n * import { contramap, getSemigroup, Ord, reverse } from 'fp-ts/Ord'\n * import * as RA from 'fp-ts/ReadonlyArray'\n * import * as S from 'fp-ts/string'\n *\n * interface User {\n *   readonly id: string\n *   readonly lastName: string\n *   readonly created: Date\n * }\n *\n * const ordByLastName: Ord<User> = pipe(\n *   S.Ord,\n *   contramap((user) => user.lastName)\n * )\n *\n * const ordByCreated: Ord<User> = pipe(\n *   D.Ord,\n *   contramap((user) => user.created)\n * )\n *\n * const ordUserByCreatedDescThenLastName = getSemigroup<User>().concat(\n *   reverse(ordByCreated),\n *   ordByLastName\n * )\n *\n * assert.deepStrictEqual(\n *   RA.sort(ordUserByCreatedDescThenLastName)([\n *     { id: 'c', lastName: 'd', created: new Date(1973, 10, 30) },\n *     { id: 'a', lastName: 'b', created: new Date(1973, 10, 30) },\n *     { id: 'e', lastName: 'f', created: new Date(1980, 10, 30) }\n *   ]),\n *   [\n *     { id: 'e', lastName: 'f', created: new Date(1980, 10, 30) },\n *     { id: 'a', lastName: 'b', created: new Date(1973, 10, 30) },\n *     { id: 'c', lastName: 'd', created: new Date(1973, 10, 30) }\n *   ]\n * )\n *\n * @category instances\n * @since 2.0.0\n */\nvar getSemigroup = function () { return ({\n    concat: function (first, second) {\n        return (0, exports.fromCompare)(function (a, b) {\n            var ox = first.compare(a, b);\n            return ox !== 0 ? ox : second.compare(a, b);\n        });\n    }\n}); };\nexports.getSemigroup = getSemigroup;\n/**\n * Returns a `Monoid` such that:\n *\n * - its `concat(ord1, ord2)` operation will order first by `ord1`, and then by `ord2`\n * - its `empty` value is an `Ord` that always considers compared elements equal\n *\n * @example\n * import { sort } from 'fp-ts/Array'\n * import { contramap, reverse, getMonoid } from 'fp-ts/Ord'\n * import * as S from 'fp-ts/string'\n * import * as B from 'fp-ts/boolean'\n * import { pipe } from 'fp-ts/function'\n * import { concatAll } from 'fp-ts/Monoid'\n * import * as N from 'fp-ts/number'\n *\n * interface User {\n *   readonly id: number\n *   readonly name: string\n *   readonly age: number\n *   readonly rememberMe: boolean\n * }\n *\n * const byName = pipe(\n *   S.Ord,\n *   contramap((p: User) => p.name)\n * )\n *\n * const byAge = pipe(\n *   N.Ord,\n *   contramap((p: User) => p.age)\n * )\n *\n * const byRememberMe = pipe(\n *   B.Ord,\n *   contramap((p: User) => p.rememberMe)\n * )\n *\n * const M = getMonoid<User>()\n *\n * const users: Array<User> = [\n *   { id: 1, name: 'Guido', age: 47, rememberMe: false },\n *   { id: 2, name: 'Guido', age: 46, rememberMe: true },\n *   { id: 3, name: 'Giulio', age: 44, rememberMe: false },\n *   { id: 4, name: 'Giulio', age: 44, rememberMe: true }\n * ]\n *\n * // sort by name, then by age, then by `rememberMe`\n * const O1 = concatAll(M)([byName, byAge, byRememberMe])\n * assert.deepStrictEqual(sort(O1)(users), [\n *   { id: 3, name: 'Giulio', age: 44, rememberMe: false },\n *   { id: 4, name: 'Giulio', age: 44, rememberMe: true },\n *   { id: 2, name: 'Guido', age: 46, rememberMe: true },\n *   { id: 1, name: 'Guido', age: 47, rememberMe: false }\n * ])\n *\n * // now `rememberMe = true` first, then by name, then by age\n * const O2 = concatAll(M)([reverse(byRememberMe), byName, byAge])\n * assert.deepStrictEqual(sort(O2)(users), [\n *   { id: 4, name: 'Giulio', age: 44, rememberMe: true },\n *   { id: 2, name: 'Guido', age: 46, rememberMe: true },\n *   { id: 3, name: 'Giulio', age: 44, rememberMe: false },\n *   { id: 1, name: 'Guido', age: 47, rememberMe: false }\n * ])\n *\n * @category instances\n * @since 2.4.0\n */\nvar getMonoid = function () { return ({\n    concat: (0, exports.getSemigroup)().concat,\n    empty: (0, exports.fromCompare)(function () { return 0; })\n}); };\nexports.getMonoid = getMonoid;\n/**\n * @category instances\n * @since 2.7.0\n */\nexports.Contravariant = {\n    URI: exports.URI,\n    contramap: contramap_\n};\n// -------------------------------------------------------------------------------------\n// utils\n// -------------------------------------------------------------------------------------\n/**\n * @since 2.11.0\n */\nexports.trivial = {\n    equals: function_1.constTrue,\n    compare: /*#__PURE__*/ (0, function_1.constant)(0)\n};\n/**\n * @since 2.11.0\n */\nvar equals = function (O) {\n    return function (second) {\n        return function (first) {\n            return first === second || O.compare(first, second) === 0;\n        };\n    };\n};\nexports.equals = equals;\n// TODO: curry in v3\n/**\n * Test whether one value is _strictly less than_ another\n *\n * @since 2.0.0\n */\nvar lt = function (O) {\n    return function (first, second) {\n        return O.compare(first, second) === -1;\n    };\n};\nexports.lt = lt;\n// TODO: curry in v3\n/**\n * Test whether one value is _strictly greater than_ another\n *\n * @since 2.0.0\n */\nvar gt = function (O) {\n    return function (first, second) {\n        return O.compare(first, second) === 1;\n    };\n};\nexports.gt = gt;\n// TODO: curry in v3\n/**\n * Test whether one value is _non-strictly less than_ another\n *\n * @since 2.0.0\n */\nvar leq = function (O) {\n    return function (first, second) {\n        return O.compare(first, second) !== 1;\n    };\n};\nexports.leq = leq;\n// TODO: curry in v3\n/**\n * Test whether one value is _non-strictly greater than_ another\n *\n * @since 2.0.0\n */\nvar geq = function (O) {\n    return function (first, second) {\n        return O.compare(first, second) !== -1;\n    };\n};\nexports.geq = geq;\n// TODO: curry in v3\n/**\n * Take the minimum of two values. If they are considered equal, the first argument is chosen\n *\n * @since 2.0.0\n */\nvar min = function (O) {\n    return function (first, second) {\n        return first === second || O.compare(first, second) < 1 ? first : second;\n    };\n};\nexports.min = min;\n// TODO: curry in v3\n/**\n * Take the maximum of two values. If they are considered equal, the first argument is chosen\n *\n * @since 2.0.0\n */\nvar max = function (O) {\n    return function (first, second) {\n        return first === second || O.compare(first, second) > -1 ? first : second;\n    };\n};\nexports.max = max;\n/**\n * Clamp a value between a minimum and a maximum\n *\n * @since 2.0.0\n */\nvar clamp = function (O) {\n    var minO = (0, exports.min)(O);\n    var maxO = (0, exports.max)(O);\n    return function (low, hi) { return function (a) { return maxO(minO(a, hi), low); }; };\n};\nexports.clamp = clamp;\n/**\n * Test whether a value is between a minimum and a maximum (inclusive)\n *\n * @since 2.0.0\n */\nvar between = function (O) {\n    var ltO = (0, exports.lt)(O);\n    var gtO = (0, exports.gt)(O);\n    return function (low, hi) { return function (a) { return ltO(a, low) || gtO(a, hi) ? false : true; }; };\n};\nexports.between = between;\n// -------------------------------------------------------------------------------------\n// deprecated\n// -------------------------------------------------------------------------------------\n/**\n * Use [`tuple`](#tuple) instead.\n *\n * @category zone of death\n * @since 2.0.0\n * @deprecated\n */\nexports.getTupleOrd = exports.tuple;\n/**\n * Use [`reverse`](#reverse) instead.\n *\n * @category zone of death\n * @since 2.0.0\n * @deprecated\n */\nexports.getDualOrd = exports.reverse;\n/**\n * Use [`Contravariant`](#contravariant) instead.\n *\n * @category zone of death\n * @since 2.0.0\n * @deprecated\n */\nexports.ord = exports.Contravariant;\n// default compare for primitive types\nfunction compare(first, second) {\n    return first < second ? -1 : first > second ? 1 : 0;\n}\nvar strictOrd = {\n    equals: Eq_1.eqStrict.equals,\n    compare: compare\n};\n/**\n * Use [`Ord`](./boolean.ts.html#ord) instead.\n *\n * @category zone of death\n * @since 2.0.0\n * @deprecated\n */\nexports.ordBoolean = strictOrd;\n/**\n * Use [`Ord`](./string.ts.html#ord) instead.\n *\n * @category zone of death\n * @since 2.0.0\n * @deprecated\n */\nexports.ordString = strictOrd;\n/**\n * Use [`Ord`](./number.ts.html#ord) instead.\n *\n * @category zone of death\n * @since 2.0.0\n * @deprecated\n */\nexports.ordNumber = strictOrd;\n/**\n * Use [`Ord`](./Date.ts.html#ord) instead.\n *\n * @category zone of death\n * @since 2.0.0\n * @deprecated\n */\nexports.ordDate = (0, function_1.pipe)(exports.ordNumber, \n/*#__PURE__*/\n(0, exports.contramap)(function (date) { return date.valueOf(); }));\n","\"use strict\";\n/**\n * A `Magma` is a pair `(A, concat)` in which `A` is a non-empty set and `concat` is a binary operation on `A`\n *\n * See [Semigroup](https://gcanti.github.io/fp-ts/modules/Semigroup.ts.html) for some instances.\n *\n * @since 2.0.0\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.concatAll = exports.endo = exports.filterSecond = exports.filterFirst = exports.reverse = void 0;\n// -------------------------------------------------------------------------------------\n// combinators\n// -------------------------------------------------------------------------------------\n/**\n * The dual of a `Magma`, obtained by swapping the arguments of `concat`.\n *\n * @example\n * import { reverse, concatAll } from 'fp-ts/Magma'\n * import * as N from 'fp-ts/number'\n *\n * const subAll = concatAll(reverse(N.MagmaSub))(0)\n *\n * assert.deepStrictEqual(subAll([1, 2, 3]), 2)\n *\n * @since 2.11.0\n */\nvar reverse = function (M) { return ({\n    concat: function (first, second) { return M.concat(second, first); }\n}); };\nexports.reverse = reverse;\n/**\n * @since 2.11.0\n */\nvar filterFirst = function (predicate) {\n    return function (M) { return ({\n        concat: function (first, second) { return (predicate(first) ? M.concat(first, second) : second); }\n    }); };\n};\nexports.filterFirst = filterFirst;\n/**\n * @since 2.11.0\n */\nvar filterSecond = function (predicate) {\n    return function (M) { return ({\n        concat: function (first, second) { return (predicate(second) ? M.concat(first, second) : first); }\n    }); };\n};\nexports.filterSecond = filterSecond;\n/**\n * @since 2.11.0\n */\nvar endo = function (f) {\n    return function (M) { return ({\n        concat: function (first, second) { return M.concat(f(first), f(second)); }\n    }); };\n};\nexports.endo = endo;\n// -------------------------------------------------------------------------------------\n// utils\n// -------------------------------------------------------------------------------------\n/**\n * Given a sequence of `as`, concat them and return the total.\n *\n * If `as` is empty, return the provided `startWith` value.\n *\n * @example\n * import { concatAll } from 'fp-ts/Magma'\n * import * as N from 'fp-ts/number'\n *\n * const subAll = concatAll(N.MagmaSub)(0)\n *\n * assert.deepStrictEqual(subAll([1, 2, 3]), -6)\n *\n * @since 2.11.0\n */\nvar concatAll = function (M) {\n    return function (startWith) {\n        return function (as) {\n            return as.reduce(function (a, acc) { return M.concat(a, acc); }, startWith);\n        };\n    };\n};\nexports.concatAll = concatAll;\n","\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.semigroupProduct = exports.semigroupSum = exports.semigroupString = exports.getFunctionSemigroup = exports.semigroupAny = exports.semigroupAll = exports.fold = exports.getIntercalateSemigroup = exports.getMeetSemigroup = exports.getJoinSemigroup = exports.getDualSemigroup = exports.getStructSemigroup = exports.getTupleSemigroup = exports.getFirstSemigroup = exports.getLastSemigroup = exports.getObjectSemigroup = exports.semigroupVoid = exports.concatAll = exports.last = exports.first = exports.intercalate = exports.tuple = exports.struct = exports.reverse = exports.constant = exports.max = exports.min = void 0;\n/**\n * If a type `A` can form a `Semigroup` it has an **associative** binary operation.\n *\n * ```ts\n * interface Semigroup<A> {\n *   readonly concat: (x: A, y: A) => A\n * }\n * ```\n *\n * Associativity means the following equality must hold for any choice of `x`, `y`, and `z`.\n *\n * ```ts\n * concat(x, concat(y, z)) = concat(concat(x, y), z)\n * ```\n *\n * A common example of a semigroup is the type `string` with the operation `+`.\n *\n * ```ts\n * import { Semigroup } from 'fp-ts/Semigroup'\n *\n * const semigroupString: Semigroup<string> = {\n *   concat: (x, y) => x + y\n * }\n *\n * const x = 'x'\n * const y = 'y'\n * const z = 'z'\n *\n * semigroupString.concat(x, y) // 'xy'\n *\n * semigroupString.concat(x, semigroupString.concat(y, z)) // 'xyz'\n *\n * semigroupString.concat(semigroupString.concat(x, y), z) // 'xyz'\n * ```\n *\n * *Adapted from https://typelevel.org/cats*\n *\n * @since 2.0.0\n */\nvar function_1 = require(\"./function\");\nvar _ = __importStar(require(\"./internal\"));\nvar M = __importStar(require(\"./Magma\"));\nvar Or = __importStar(require(\"./Ord\"));\n// -------------------------------------------------------------------------------------\n// constructors\n// -------------------------------------------------------------------------------------\n/**\n * Get a semigroup where `concat` will return the minimum, based on the provided order.\n *\n * @example\n * import * as N from 'fp-ts/number'\n * import * as S from 'fp-ts/Semigroup'\n *\n * const S1 = S.min(N.Ord)\n *\n * assert.deepStrictEqual(S1.concat(1, 2), 1)\n *\n * @category constructors\n * @since 2.10.0\n */\nvar min = function (O) { return ({\n    concat: Or.min(O)\n}); };\nexports.min = min;\n/**\n * Get a semigroup where `concat` will return the maximum, based on the provided order.\n *\n * @example\n * import * as N from 'fp-ts/number'\n * import * as S from 'fp-ts/Semigroup'\n *\n * const S1 = S.max(N.Ord)\n *\n * assert.deepStrictEqual(S1.concat(1, 2), 2)\n *\n * @category constructors\n * @since 2.10.0\n */\nvar max = function (O) { return ({\n    concat: Or.max(O)\n}); };\nexports.max = max;\n/**\n * @category constructors\n * @since 2.10.0\n */\nvar constant = function (a) { return ({\n    concat: function () { return a; }\n}); };\nexports.constant = constant;\n// -------------------------------------------------------------------------------------\n// combinators\n// -------------------------------------------------------------------------------------\n/**\n * The dual of a `Semigroup`, obtained by swapping the arguments of `concat`.\n *\n * @example\n * import { reverse } from 'fp-ts/Semigroup'\n * import * as S from 'fp-ts/string'\n *\n * assert.deepStrictEqual(reverse(S.Semigroup).concat('a', 'b'), 'ba')\n *\n * @since 2.10.0\n */\nexports.reverse = M.reverse;\n/**\n * Given a struct of semigroups returns a semigroup for the struct.\n *\n * @example\n * import { struct } from 'fp-ts/Semigroup'\n * import * as N from 'fp-ts/number'\n *\n * interface Point {\n *   readonly x: number\n *   readonly y: number\n * }\n *\n * const S = struct<Point>({\n *   x: N.SemigroupSum,\n *   y: N.SemigroupSum\n * })\n *\n * assert.deepStrictEqual(S.concat({ x: 1, y: 2 }, { x: 3, y: 4 }), { x: 4, y: 6 })\n *\n * @since 2.10.0\n */\nvar struct = function (semigroups) { return ({\n    concat: function (first, second) {\n        var r = {};\n        for (var k in semigroups) {\n            if (_.has.call(semigroups, k)) {\n                r[k] = semigroups[k].concat(first[k], second[k]);\n            }\n        }\n        return r;\n    }\n}); };\nexports.struct = struct;\n/**\n * Given a tuple of semigroups returns a semigroup for the tuple.\n *\n * @example\n * import { tuple } from 'fp-ts/Semigroup'\n * import * as B from 'fp-ts/boolean'\n * import * as N from 'fp-ts/number'\n * import * as S from 'fp-ts/string'\n *\n * const S1 = tuple(S.Semigroup, N.SemigroupSum)\n * assert.deepStrictEqual(S1.concat(['a', 1], ['b', 2]), ['ab', 3])\n *\n * const S2 = tuple(S.Semigroup, N.SemigroupSum, B.SemigroupAll)\n * assert.deepStrictEqual(S2.concat(['a', 1, true], ['b', 2, false]), ['ab', 3, false])\n *\n * @since 2.10.0\n */\nvar tuple = function () {\n    var semigroups = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        semigroups[_i] = arguments[_i];\n    }\n    return ({\n        concat: function (first, second) { return semigroups.map(function (s, i) { return s.concat(first[i], second[i]); }); }\n    });\n};\nexports.tuple = tuple;\n/**\n * Between each pair of elements insert `middle`.\n *\n * @example\n * import { intercalate } from 'fp-ts/Semigroup'\n * import * as S from 'fp-ts/string'\n * import { pipe } from 'fp-ts/function'\n *\n * const S1 = pipe(S.Semigroup, intercalate(' + '))\n *\n * assert.strictEqual(S1.concat('a', 'b'), 'a + b')\n *\n * @since 2.10.0\n */\nvar intercalate = function (middle) {\n    return function (S) { return ({\n        concat: function (x, y) { return S.concat(x, S.concat(middle, y)); }\n    }); };\n};\nexports.intercalate = intercalate;\n// -------------------------------------------------------------------------------------\n// instances\n// -------------------------------------------------------------------------------------\n/**\n * Always return the first argument.\n *\n * @example\n * import * as S from 'fp-ts/Semigroup'\n *\n * assert.deepStrictEqual(S.first<number>().concat(1, 2), 1)\n *\n * @category instances\n * @since 2.10.0\n */\nvar first = function () { return ({ concat: function_1.identity }); };\nexports.first = first;\n/**\n * Always return the last argument.\n *\n * @example\n * import * as S from 'fp-ts/Semigroup'\n *\n * assert.deepStrictEqual(S.last<number>().concat(1, 2), 2)\n *\n * @category instances\n * @since 2.10.0\n */\nvar last = function () { return ({ concat: function (_, y) { return y; } }); };\nexports.last = last;\n// -------------------------------------------------------------------------------------\n// utils\n// -------------------------------------------------------------------------------------\n/**\n * Given a sequence of `as`, concat them and return the total.\n *\n * If `as` is empty, return the provided `startWith` value.\n *\n * @example\n * import { concatAll } from 'fp-ts/Semigroup'\n * import * as N from 'fp-ts/number'\n *\n * const sum = concatAll(N.SemigroupSum)(0)\n *\n * assert.deepStrictEqual(sum([1, 2, 3]), 6)\n * assert.deepStrictEqual(sum([]), 0)\n *\n * @since 2.10.0\n */\nexports.concatAll = M.concatAll;\n// -------------------------------------------------------------------------------------\n// deprecated\n// -------------------------------------------------------------------------------------\n/**\n * Use `void` module instead.\n *\n * @category zone of death\n * @since 2.0.0\n * @deprecated\n */\nexports.semigroupVoid = (0, exports.constant)(undefined);\n/**\n * Use [`getAssignSemigroup`](./struct.ts.html#getAssignSemigroup) instead.\n *\n * @category zone of death\n * @since 2.0.0\n * @deprecated\n */\nvar getObjectSemigroup = function () { return ({\n    concat: function (first, second) { return Object.assign({}, first, second); }\n}); };\nexports.getObjectSemigroup = getObjectSemigroup;\n/**\n * Use [`last`](#last) instead.\n *\n * @category zone of death\n * @since 2.0.0\n * @deprecated\n */\nexports.getLastSemigroup = exports.last;\n/**\n * Use [`first`](#first) instead.\n *\n * @category zone of death\n * @since 2.0.0\n * @deprecated\n */\nexports.getFirstSemigroup = exports.first;\n/**\n * Use [`tuple`](#tuple) instead.\n *\n * @category zone of death\n * @since 2.0.0\n * @deprecated\n */\nexports.getTupleSemigroup = exports.tuple;\n/**\n * Use [`struct`](#struct) instead.\n *\n * @category zone of death\n * @since 2.0.0\n * @deprecated\n */\nexports.getStructSemigroup = exports.struct;\n/**\n * Use [`reverse`](#reverse) instead.\n *\n * @category zone of death\n * @since 2.0.0\n * @deprecated\n */\nexports.getDualSemigroup = exports.reverse;\n/**\n * Use [`max`](#max) instead.\n *\n * @category zone of death\n * @since 2.0.0\n * @deprecated\n */\nexports.getJoinSemigroup = exports.max;\n/**\n * Use [`min`](#min) instead.\n *\n * @category zone of death\n * @since 2.0.0\n * @deprecated\n */\nexports.getMeetSemigroup = exports.min;\n/**\n * Use [`intercalate`](#intercalate) instead.\n *\n * @category zone of death\n * @since 2.5.0\n * @deprecated\n */\nexports.getIntercalateSemigroup = exports.intercalate;\nfunction fold(S) {\n    var concatAllS = (0, exports.concatAll)(S);\n    return function (startWith, as) { return (as === undefined ? concatAllS(startWith) : concatAllS(startWith)(as)); };\n}\nexports.fold = fold;\n/**\n * Use [`SemigroupAll`](./boolean.ts.html#SemigroupAll) instead.\n *\n * @category zone of death\n * @since 2.0.0\n * @deprecated\n */\nexports.semigroupAll = {\n    concat: function (x, y) { return x && y; }\n};\n/**\n * Use [`SemigroupAny`](./boolean.ts.html#SemigroupAny) instead.\n *\n * @category zone of death\n * @since 2.0.0\n * @deprecated\n */\nexports.semigroupAny = {\n    concat: function (x, y) { return x || y; }\n};\n/**\n * Use [`getSemigroup`](./function.ts.html#getSemigroup) instead.\n *\n * @category zone of death\n * @since 2.0.0\n * @deprecated\n */\nexports.getFunctionSemigroup = function_1.getSemigroup;\n/**\n * Use [`Semigroup`](./string.ts.html#Semigroup) instead.\n *\n * @category zone of death\n * @since 2.0.0\n * @deprecated\n */\nexports.semigroupString = {\n    concat: function (x, y) { return x + y; }\n};\n/**\n * Use [`SemigroupSum`](./number.ts.html#SemigroupSum) instead.\n *\n * @category zone of death\n * @since 2.0.0\n * @deprecated\n */\nexports.semigroupSum = {\n    concat: function (x, y) { return x + y; }\n};\n/**\n * Use [`SemigroupProduct`](./number.ts.html#SemigroupProduct) instead.\n *\n * @category zone of death\n * @since 2.0.0\n * @deprecated\n */\nexports.semigroupProduct = {\n    concat: function (x, y) { return x * y; }\n};\n","\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nvar __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {\n    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\n        if (ar || !(i in from)) {\n            if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n            ar[i] = from[i];\n        }\n    }\n    return to.concat(ar || Array.prototype.slice.call(from));\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.reduceRight = exports.foldMap = exports.reduce = exports.mapWithIndex = exports.map = exports.flatten = exports.duplicate = exports.extend = exports.flatMap = exports.ap = exports.alt = exports.altW = exports.of = exports.chunksOf = exports.splitAt = exports.chop = exports.chainWithIndex = exports.intersperse = exports.prependAll = exports.unzip = exports.zip = exports.zipWith = exports.modifyAt = exports.updateAt = exports.sort = exports.groupBy = exports.group = exports.reverse = exports.concat = exports.concatW = exports.fromArray = exports.unappend = exports.unprepend = exports.range = exports.replicate = exports.makeBy = exports.fromReadonlyArray = exports.rotate = exports.union = exports.sortBy = exports.uniq = exports.unsafeUpdateAt = exports.unsafeInsertAt = exports.append = exports.appendW = exports.prepend = exports.prependW = exports.isOutOfBound = exports.isNonEmpty = exports.empty = void 0;\nexports.groupSort = exports.chain = exports.intercalate = exports.updateLast = exports.modifyLast = exports.updateHead = exports.modifyHead = exports.matchRight = exports.matchLeft = exports.concatAll = exports.max = exports.min = exports.init = exports.last = exports.tail = exports.head = exports.apS = exports.bind = exports.let = exports.bindTo = exports.Do = exports.Comonad = exports.Alt = exports.TraversableWithIndex = exports.Traversable = exports.FoldableWithIndex = exports.Foldable = exports.Monad = exports.chainFirst = exports.Chain = exports.Applicative = exports.apSecond = exports.apFirst = exports.Apply = exports.FunctorWithIndex = exports.Pointed = exports.flap = exports.Functor = exports.getUnionSemigroup = exports.getEq = exports.getSemigroup = exports.getShow = exports.URI = exports.extract = exports.traverseWithIndex = exports.sequence = exports.traverse = exports.reduceRightWithIndex = exports.foldMapWithIndex = exports.reduceWithIndex = void 0;\nexports.readonlyNonEmptyArray = exports.fold = exports.prependToAll = exports.insertAt = exports.snoc = exports.cons = exports.unsnoc = exports.uncons = exports.filterWithIndex = exports.filter = void 0;\nvar Apply_1 = require(\"./Apply\");\nvar Chain_1 = require(\"./Chain\");\nvar Eq_1 = require(\"./Eq\");\nvar function_1 = require(\"./function\");\nvar Functor_1 = require(\"./Functor\");\nvar _ = __importStar(require(\"./internal\"));\nvar Ord_1 = require(\"./Ord\");\nvar Se = __importStar(require(\"./Semigroup\"));\n// -------------------------------------------------------------------------------------\n// internal\n// -------------------------------------------------------------------------------------\n/**\n * @internal\n */\nexports.empty = _.emptyReadonlyArray;\n/**\n * @internal\n */\nexports.isNonEmpty = _.isNonEmpty;\n/**\n * @internal\n */\nvar isOutOfBound = function (i, as) { return i < 0 || i >= as.length; };\nexports.isOutOfBound = isOutOfBound;\n/**\n * @internal\n */\nvar prependW = function (head) {\n    return function (tail) {\n        return __spreadArray([head], tail, true);\n    };\n};\nexports.prependW = prependW;\n/**\n * @internal\n */\nexports.prepend = exports.prependW;\n/**\n * @internal\n */\nvar appendW = function (end) {\n    return function (init) {\n        return __spreadArray(__spreadArray([], init, true), [end], false);\n    };\n};\nexports.appendW = appendW;\n/**\n * @internal\n */\nexports.append = exports.appendW;\n/**\n * @internal\n */\nvar unsafeInsertAt = function (i, a, as) {\n    if ((0, exports.isNonEmpty)(as)) {\n        var xs = _.fromReadonlyNonEmptyArray(as);\n        xs.splice(i, 0, a);\n        return xs;\n    }\n    return [a];\n};\nexports.unsafeInsertAt = unsafeInsertAt;\n/**\n * @internal\n */\nvar unsafeUpdateAt = function (i, a, as) {\n    if (as[i] === a) {\n        return as;\n    }\n    else {\n        var xs = _.fromReadonlyNonEmptyArray(as);\n        xs[i] = a;\n        return xs;\n    }\n};\nexports.unsafeUpdateAt = unsafeUpdateAt;\n/**\n * Remove duplicates from a `ReadonlyNonEmptyArray`, keeping the first occurrence of an element.\n *\n * @example\n * import { uniq } from 'fp-ts/ReadonlyNonEmptyArray'\n * import * as N from 'fp-ts/number'\n *\n * assert.deepStrictEqual(uniq(N.Eq)([1, 2, 1]), [1, 2])\n *\n * @since 2.11.0\n */\nvar uniq = function (E) {\n    return function (as) {\n        if (as.length === 1) {\n            return as;\n        }\n        var out = [(0, exports.head)(as)];\n        var rest = (0, exports.tail)(as);\n        var _loop_1 = function (a) {\n            if (out.every(function (o) { return !E.equals(o, a); })) {\n                out.push(a);\n            }\n        };\n        for (var _i = 0, rest_1 = rest; _i < rest_1.length; _i++) {\n            var a = rest_1[_i];\n            _loop_1(a);\n        }\n        return out;\n    };\n};\nexports.uniq = uniq;\n/**\n * Sort the elements of a `ReadonlyNonEmptyArray` in increasing order, where elements are compared using first `ords[0]`, then `ords[1]`,\n * etc...\n *\n * @example\n * import * as RNEA from 'fp-ts/ReadonlyNonEmptyArray'\n * import { contramap } from 'fp-ts/Ord'\n * import * as S from 'fp-ts/string'\n * import * as N from 'fp-ts/number'\n * import { pipe } from 'fp-ts/function'\n *\n * interface Person {\n *   name: string\n *   age: number\n * }\n *\n * const byName = pipe(S.Ord, contramap((p: Person) => p.name))\n *\n * const byAge = pipe(N.Ord, contramap((p: Person) => p.age))\n *\n * const sortByNameByAge = RNEA.sortBy([byName, byAge])\n *\n * const persons: RNEA.ReadonlyNonEmptyArray<Person> = [\n *   { name: 'a', age: 1 },\n *   { name: 'b', age: 3 },\n *   { name: 'c', age: 2 },\n *   { name: 'b', age: 2 }\n * ]\n *\n * assert.deepStrictEqual(sortByNameByAge(persons), [\n *   { name: 'a', age: 1 },\n *   { name: 'b', age: 2 },\n *   { name: 'b', age: 3 },\n *   { name: 'c', age: 2 }\n * ])\n *\n * @since 2.11.0\n */\nvar sortBy = function (ords) {\n    if ((0, exports.isNonEmpty)(ords)) {\n        var M = (0, Ord_1.getMonoid)();\n        return (0, exports.sort)(ords.reduce(M.concat, M.empty));\n    }\n    return function_1.identity;\n};\nexports.sortBy = sortBy;\n/**\n * @since 2.11.0\n */\nvar union = function (E) {\n    var uniqE = (0, exports.uniq)(E);\n    return function (second) { return function (first) { return uniqE((0, function_1.pipe)(first, concat(second))); }; };\n};\nexports.union = union;\n/**\n * Rotate a `ReadonlyNonEmptyArray` by `n` steps.\n *\n * @example\n * import { rotate } from 'fp-ts/ReadonlyNonEmptyArray'\n *\n * assert.deepStrictEqual(rotate(2)([1, 2, 3, 4, 5]), [4, 5, 1, 2, 3])\n * assert.deepStrictEqual(rotate(-2)([1, 2, 3, 4, 5]), [3, 4, 5, 1, 2])\n *\n * @since 2.11.0\n */\nvar rotate = function (n) {\n    return function (as) {\n        var len = as.length;\n        var m = Math.round(n) % len;\n        if ((0, exports.isOutOfBound)(Math.abs(m), as) || m === 0) {\n            return as;\n        }\n        if (m < 0) {\n            var _a = (0, exports.splitAt)(-m)(as), f = _a[0], s = _a[1];\n            return (0, function_1.pipe)(s, concat(f));\n        }\n        else {\n            return (0, exports.rotate)(m - len)(as);\n        }\n    };\n};\nexports.rotate = rotate;\n// -------------------------------------------------------------------------------------\n// constructors\n// -------------------------------------------------------------------------------------\n/**\n * Return a `ReadonlyNonEmptyArray` from a `ReadonlyArray` returning `none` if the input is empty.\n *\n * @category conversions\n * @since 2.5.0\n */\nvar fromReadonlyArray = function (as) {\n    return (0, exports.isNonEmpty)(as) ? _.some(as) : _.none;\n};\nexports.fromReadonlyArray = fromReadonlyArray;\n/**\n * Return a `ReadonlyNonEmptyArray` of length `n` with element `i` initialized with `f(i)`.\n *\n * **Note**. `n` is normalized to a natural number.\n *\n * @example\n * import { makeBy } from 'fp-ts/ReadonlyNonEmptyArray'\n * import { pipe } from 'fp-ts/function'\n *\n * const double = (n: number): number => n * 2\n * assert.deepStrictEqual(pipe(5, makeBy(double)), [0, 2, 4, 6, 8])\n *\n * @category constructors\n * @since 2.11.0\n */\nvar makeBy = function (f) {\n    return function (n) {\n        var j = Math.max(0, Math.floor(n));\n        var out = [f(0)];\n        for (var i = 1; i < j; i++) {\n            out.push(f(i));\n        }\n        return out;\n    };\n};\nexports.makeBy = makeBy;\n/**\n * Create a `ReadonlyNonEmptyArray` containing a value repeated the specified number of times.\n *\n * **Note**. `n` is normalized to a natural number.\n *\n * @example\n * import { replicate } from 'fp-ts/ReadonlyNonEmptyArray'\n * import { pipe } from 'fp-ts/function'\n *\n * assert.deepStrictEqual(pipe(3, replicate('a')), ['a', 'a', 'a'])\n *\n * @category constructors\n * @since 2.11.0\n */\nvar replicate = function (a) { return (0, exports.makeBy)(function () { return a; }); };\nexports.replicate = replicate;\n/**\n * Create a `ReadonlyNonEmptyArray` containing a range of integers, including both endpoints.\n *\n * @example\n * import { range } from 'fp-ts/ReadonlyNonEmptyArray'\n *\n * assert.deepStrictEqual(range(1, 5), [1, 2, 3, 4, 5])\n *\n * @category constructors\n * @since 2.11.0\n */\nvar range = function (start, end) {\n    return start <= end ? (0, exports.makeBy)(function (i) { return start + i; })(end - start + 1) : [start];\n};\nexports.range = range;\n/**\n * Return the tuple of the `head` and the `tail`.\n *\n * @example\n * import { unprepend } from 'fp-ts/ReadonlyNonEmptyArray'\n *\n * assert.deepStrictEqual(unprepend([1, 2, 3, 4]), [1, [2, 3, 4]])\n *\n * @since 2.9.0\n */\nvar unprepend = function (as) { return [(0, exports.head)(as), (0, exports.tail)(as)]; };\nexports.unprepend = unprepend;\n/**\n * Return the tuple of the `init` and the `last`.\n *\n * @example\n * import { unappend } from 'fp-ts/ReadonlyNonEmptyArray'\n *\n * assert.deepStrictEqual(unappend([1, 2, 3, 4]), [[1, 2, 3], 4])\n *\n * @since 2.9.0\n */\nvar unappend = function (as) { return [(0, exports.init)(as), (0, exports.last)(as)]; };\nexports.unappend = unappend;\n/**\n * @category conversions\n * @since 2.5.0\n */\nvar fromArray = function (as) { return (0, exports.fromReadonlyArray)(as.slice()); };\nexports.fromArray = fromArray;\nfunction concatW(second) {\n    return function (first) { return first.concat(second); };\n}\nexports.concatW = concatW;\nfunction concat(x, y) {\n    return y ? x.concat(y) : function (y) { return y.concat(x); };\n}\nexports.concat = concat;\n/**\n * @since 2.5.0\n */\nvar reverse = function (as) {\n    return as.length === 1 ? as : __spreadArray([(0, exports.last)(as)], as.slice(0, -1).reverse(), true);\n};\nexports.reverse = reverse;\nfunction group(E) {\n    return function (as) {\n        var len = as.length;\n        if (len === 0) {\n            return exports.empty;\n        }\n        var out = [];\n        var head = as[0];\n        var nea = [head];\n        for (var i = 1; i < len; i++) {\n            var a = as[i];\n            if (E.equals(a, head)) {\n                nea.push(a);\n            }\n            else {\n                out.push(nea);\n                head = a;\n                nea = [head];\n            }\n        }\n        out.push(nea);\n        return out;\n    };\n}\nexports.group = group;\n/**\n * Splits an array into sub-non-empty-arrays stored in an object, based on the result of calling a `string`-returning\n * function on each element, and grouping the results according to values returned\n *\n * @example\n * import { groupBy } from 'fp-ts/ReadonlyNonEmptyArray'\n *\n * assert.deepStrictEqual(groupBy((s: string) => String(s.length))(['a', 'b', 'ab']), {\n *   '1': ['a', 'b'],\n *   '2': ['ab']\n * })\n *\n * @since 2.5.0\n */\nvar groupBy = function (f) {\n    return function (as) {\n        var out = {};\n        for (var _i = 0, as_1 = as; _i < as_1.length; _i++) {\n            var a = as_1[_i];\n            var k = f(a);\n            if (_.has.call(out, k)) {\n                out[k].push(a);\n            }\n            else {\n                out[k] = [a];\n            }\n        }\n        return out;\n    };\n};\nexports.groupBy = groupBy;\n/**\n * @since 2.5.0\n */\nvar sort = function (O) {\n    return function (as) {\n        return as.length === 1 ? as : as.slice().sort(O.compare);\n    };\n};\nexports.sort = sort;\n/**\n * @since 2.5.0\n */\nvar updateAt = function (i, a) {\n    return (0, exports.modifyAt)(i, function () { return a; });\n};\nexports.updateAt = updateAt;\n/**\n * @since 2.5.0\n */\nvar modifyAt = function (i, f) {\n    return function (as) {\n        return (0, exports.isOutOfBound)(i, as) ? _.none : _.some((0, exports.unsafeUpdateAt)(i, f(as[i]), as));\n    };\n};\nexports.modifyAt = modifyAt;\n/**\n * @since 2.5.1\n */\nvar zipWith = function (as, bs, f) {\n    var cs = [f(as[0], bs[0])];\n    var len = Math.min(as.length, bs.length);\n    for (var i = 1; i < len; i++) {\n        cs[i] = f(as[i], bs[i]);\n    }\n    return cs;\n};\nexports.zipWith = zipWith;\nfunction zip(as, bs) {\n    if (bs === undefined) {\n        return function (bs) { return zip(bs, as); };\n    }\n    return (0, exports.zipWith)(as, bs, function (a, b) { return [a, b]; });\n}\nexports.zip = zip;\n/**\n * @since 2.5.1\n */\nvar unzip = function (abs) {\n    var fa = [abs[0][0]];\n    var fb = [abs[0][1]];\n    for (var i = 1; i < abs.length; i++) {\n        fa[i] = abs[i][0];\n        fb[i] = abs[i][1];\n    }\n    return [fa, fb];\n};\nexports.unzip = unzip;\n/**\n * Prepend an element to every member of a `ReadonlyNonEmptyArray`.\n *\n * @example\n * import { prependAll } from 'fp-ts/ReadonlyNonEmptyArray'\n *\n * assert.deepStrictEqual(prependAll(9)([1, 2, 3, 4]), [9, 1, 9, 2, 9, 3, 9, 4])\n *\n * @since 2.10.0\n */\nvar prependAll = function (middle) {\n    return function (as) {\n        var out = [middle, as[0]];\n        for (var i = 1; i < as.length; i++) {\n            out.push(middle, as[i]);\n        }\n        return out;\n    };\n};\nexports.prependAll = prependAll;\n/**\n * Places an element in between members of a `ReadonlyNonEmptyArray`.\n *\n * @example\n * import { intersperse } from 'fp-ts/ReadonlyNonEmptyArray'\n *\n * assert.deepStrictEqual(intersperse(9)([1, 2, 3, 4]), [1, 9, 2, 9, 3, 9, 4])\n *\n * @since 2.9.0\n */\nvar intersperse = function (middle) {\n    return function (as) {\n        var rest = (0, exports.tail)(as);\n        return (0, exports.isNonEmpty)(rest) ? (0, function_1.pipe)(rest, (0, exports.prependAll)(middle), (0, exports.prepend)((0, exports.head)(as))) : as;\n    };\n};\nexports.intersperse = intersperse;\n/**\n * @category sequencing\n * @since 2.10.0\n */\nvar chainWithIndex = function (f) {\n    return function (as) {\n        var out = _.fromReadonlyNonEmptyArray(f(0, (0, exports.head)(as)));\n        for (var i = 1; i < as.length; i++) {\n            out.push.apply(out, f(i, as[i]));\n        }\n        return out;\n    };\n};\nexports.chainWithIndex = chainWithIndex;\n/**\n * A useful recursion pattern for processing a `ReadonlyNonEmptyArray` to produce a new `ReadonlyNonEmptyArray`, often used for \"chopping\" up the input\n * `ReadonlyNonEmptyArray`. Typically `chop` is called with some function that will consume an initial prefix of the `ReadonlyNonEmptyArray` and produce a\n * value and the tail of the `ReadonlyNonEmptyArray`.\n *\n * @since 2.10.0\n */\nvar chop = function (f) {\n    return function (as) {\n        var _a = f(as), b = _a[0], rest = _a[1];\n        var out = [b];\n        var next = rest;\n        while ((0, exports.isNonEmpty)(next)) {\n            var _b = f(next), b_1 = _b[0], rest_2 = _b[1];\n            out.push(b_1);\n            next = rest_2;\n        }\n        return out;\n    };\n};\nexports.chop = chop;\n/**\n * Splits a `ReadonlyNonEmptyArray` into two pieces, the first piece has max `n` elements.\n *\n * @since 2.10.0\n */\nvar splitAt = function (n) {\n    return function (as) {\n        var m = Math.max(1, n);\n        return m >= as.length ? [as, exports.empty] : [(0, function_1.pipe)(as.slice(1, m), (0, exports.prepend)((0, exports.head)(as))), as.slice(m)];\n    };\n};\nexports.splitAt = splitAt;\n/**\n * Splits a `ReadonlyNonEmptyArray` into length-`n` pieces. The last piece will be shorter if `n` does not evenly divide the length of\n * the `ReadonlyNonEmptyArray`.\n *\n * @since 2.10.0\n */\nvar chunksOf = function (n) { return (0, exports.chop)((0, exports.splitAt)(n)); };\nexports.chunksOf = chunksOf;\nvar _map = function (fa, f) { return (0, function_1.pipe)(fa, (0, exports.map)(f)); };\n/* istanbul ignore next */\nvar _mapWithIndex = function (fa, f) { return (0, function_1.pipe)(fa, (0, exports.mapWithIndex)(f)); };\nvar _ap = function (fab, fa) { return (0, function_1.pipe)(fab, (0, exports.ap)(fa)); };\n/* istanbul ignore next */\nvar _extend = function (wa, f) { return (0, function_1.pipe)(wa, (0, exports.extend)(f)); };\n/* istanbul ignore next */\nvar _reduce = function (fa, b, f) { return (0, function_1.pipe)(fa, (0, exports.reduce)(b, f)); };\n/* istanbul ignore next */\nvar _foldMap = function (M) {\n    var foldMapM = (0, exports.foldMap)(M);\n    return function (fa, f) { return (0, function_1.pipe)(fa, foldMapM(f)); };\n};\n/* istanbul ignore next */\nvar _reduceRight = function (fa, b, f) { return (0, function_1.pipe)(fa, (0, exports.reduceRight)(b, f)); };\n/* istanbul ignore next */\nvar _traverse = function (F) {\n    var traverseF = (0, exports.traverse)(F);\n    return function (ta, f) { return (0, function_1.pipe)(ta, traverseF(f)); };\n};\n/* istanbul ignore next */\nvar _alt = function (fa, that) { return (0, function_1.pipe)(fa, (0, exports.alt)(that)); };\n/* istanbul ignore next */\nvar _reduceWithIndex = function (fa, b, f) {\n    return (0, function_1.pipe)(fa, (0, exports.reduceWithIndex)(b, f));\n};\n/* istanbul ignore next */\nvar _foldMapWithIndex = function (M) {\n    var foldMapWithIndexM = (0, exports.foldMapWithIndex)(M);\n    return function (fa, f) { return (0, function_1.pipe)(fa, foldMapWithIndexM(f)); };\n};\n/* istanbul ignore next */\nvar _reduceRightWithIndex = function (fa, b, f) {\n    return (0, function_1.pipe)(fa, (0, exports.reduceRightWithIndex)(b, f));\n};\n/* istanbul ignore next */\nvar _traverseWithIndex = function (F) {\n    var traverseWithIndexF = (0, exports.traverseWithIndex)(F);\n    return function (ta, f) { return (0, function_1.pipe)(ta, traverseWithIndexF(f)); };\n};\n/**\n * @category constructors\n * @since 2.5.0\n */\nexports.of = _.singleton;\n/**\n * Less strict version of [`alt`](#alt).\n *\n * The `W` suffix (short for **W**idening) means that the return types will be merged.\n *\n * @example\n * import * as RNEA from 'fp-ts/ReadonlyNonEmptyArray'\n * import { pipe } from 'fp-ts/function'\n *\n * assert.deepStrictEqual(\n *   pipe(\n *     [1, 2, 3] as RNEA.ReadonlyNonEmptyArray<number>,\n *     RNEA.altW(() => ['a', 'b'])\n *   ),\n *   [1, 2, 3, 'a', 'b']\n * )\n *\n * @category error handling\n * @since 2.9.0\n */\nvar altW = function (that) {\n    return function (as) {\n        return (0, function_1.pipe)(as, concatW(that()));\n    };\n};\nexports.altW = altW;\n/**\n * Identifies an associative operation on a type constructor. It is similar to `Semigroup`, except that it applies to\n * types of kind `* -> *`.\n *\n * In case of `ReadonlyNonEmptyArray` concatenates the inputs into a single array.\n *\n * @example\n * import * as RNEA from 'fp-ts/ReadonlyNonEmptyArray'\n * import { pipe } from 'fp-ts/function'\n *\n * assert.deepStrictEqual(\n *   pipe(\n *     [1, 2, 3],\n *     RNEA.alt(() => [4, 5])\n *   ),\n *   [1, 2, 3, 4, 5]\n * )\n *\n * @category error handling\n * @since 2.6.2\n */\nexports.alt = exports.altW;\n/**\n * @since 2.5.0\n */\nvar ap = function (as) { return (0, exports.flatMap)(function (f) { return (0, function_1.pipe)(as, (0, exports.map)(f)); }); };\nexports.ap = ap;\n/**\n * @example\n * import * as RNEA from 'fp-ts/ReadonlyNonEmptyArray'\n * import { pipe } from 'fp-ts/function'\n *\n * assert.deepStrictEqual(\n *   pipe(\n *     [1, 2, 3],\n *     RNEA.flatMap((n) => [`a${n}`, `b${n}`])\n *   ),\n *   ['a1', 'b1', 'a2', 'b2', 'a3', 'b3']\n * )\n *\n * @category sequencing\n * @since 2.14.0\n */\nexports.flatMap = (0, function_1.dual)(2, function (ma, f) {\n    return (0, function_1.pipe)(ma, (0, exports.chainWithIndex)(function (i, a) { return f(a, i); }));\n});\n/**\n * @since 2.5.0\n */\nvar extend = function (f) {\n    return function (as) {\n        var next = (0, exports.tail)(as);\n        var out = [f(as)];\n        while ((0, exports.isNonEmpty)(next)) {\n            out.push(f(next));\n            next = (0, exports.tail)(next);\n        }\n        return out;\n    };\n};\nexports.extend = extend;\n/**\n * @since 2.5.0\n */\nexports.duplicate = \n/*#__PURE__*/ (0, exports.extend)(function_1.identity);\n/**\n * @category sequencing\n * @since 2.5.0\n */\nexports.flatten = \n/*#__PURE__*/ (0, exports.flatMap)(function_1.identity);\n/**\n * `map` can be used to turn functions `(a: A) => B` into functions `(fa: F<A>) => F<B>` whose argument and return types\n * use the type constructor `F` to represent some computational context.\n *\n * @category mapping\n * @since 2.5.0\n */\nvar map = function (f) {\n    return (0, exports.mapWithIndex)(function (_, a) { return f(a); });\n};\nexports.map = map;\n/**\n * @category mapping\n * @since 2.5.0\n */\nvar mapWithIndex = function (f) {\n    return function (as) {\n        var out = [f(0, (0, exports.head)(as))];\n        for (var i = 1; i < as.length; i++) {\n            out.push(f(i, as[i]));\n        }\n        return out;\n    };\n};\nexports.mapWithIndex = mapWithIndex;\n/**\n * @category folding\n * @since 2.5.0\n */\nvar reduce = function (b, f) {\n    return (0, exports.reduceWithIndex)(b, function (_, b, a) { return f(b, a); });\n};\nexports.reduce = reduce;\n/**\n * **Note**. The constraint is relaxed: a `Semigroup` instead of a `Monoid`.\n *\n * @category folding\n * @since 2.5.0\n */\nvar foldMap = function (S) {\n    return function (f) {\n        return function (as) {\n            return as.slice(1).reduce(function (s, a) { return S.concat(s, f(a)); }, f(as[0]));\n        };\n    };\n};\nexports.foldMap = foldMap;\n/**\n * @category folding\n * @since 2.5.0\n */\nvar reduceRight = function (b, f) {\n    return (0, exports.reduceRightWithIndex)(b, function (_, b, a) { return f(b, a); });\n};\nexports.reduceRight = reduceRight;\n/**\n * @category folding\n * @since 2.5.0\n */\nvar reduceWithIndex = function (b, f) {\n    return function (as) {\n        return as.reduce(function (b, a, i) { return f(i, b, a); }, b);\n    };\n};\nexports.reduceWithIndex = reduceWithIndex;\n/**\n * **Note**. The constraint is relaxed: a `Semigroup` instead of a `Monoid`.\n *\n * @category folding\n * @since 2.5.0\n */\nvar foldMapWithIndex = function (S) {\n    return function (f) {\n        return function (as) {\n            return as.slice(1).reduce(function (s, a, i) { return S.concat(s, f(i + 1, a)); }, f(0, as[0]));\n        };\n    };\n};\nexports.foldMapWithIndex = foldMapWithIndex;\n/**\n * @category folding\n * @since 2.5.0\n */\nvar reduceRightWithIndex = function (b, f) {\n    return function (as) {\n        return as.reduceRight(function (b, a, i) { return f(i, a, b); }, b);\n    };\n};\nexports.reduceRightWithIndex = reduceRightWithIndex;\n/**\n * @category traversing\n * @since 2.6.3\n */\nvar traverse = function (F) {\n    var traverseWithIndexF = (0, exports.traverseWithIndex)(F);\n    return function (f) { return traverseWithIndexF(function (_, a) { return f(a); }); };\n};\nexports.traverse = traverse;\n/**\n * @category traversing\n * @since 2.6.3\n */\nvar sequence = function (F) { return (0, exports.traverseWithIndex)(F)(function_1.SK); };\nexports.sequence = sequence;\n/**\n * @category sequencing\n * @since 2.6.3\n */\nvar traverseWithIndex = function (F) {\n    return function (f) {\n        return function (as) {\n            var out = F.map(f(0, (0, exports.head)(as)), exports.of);\n            for (var i = 1; i < as.length; i++) {\n                out = F.ap(F.map(out, function (bs) { return function (b) { return (0, function_1.pipe)(bs, (0, exports.append)(b)); }; }), f(i, as[i]));\n            }\n            return out;\n        };\n    };\n};\nexports.traverseWithIndex = traverseWithIndex;\n/**\n * @category Comonad\n * @since 2.6.3\n */\nexports.extract = _.head;\n/**\n * @category type lambdas\n * @since 2.5.0\n */\nexports.URI = 'ReadonlyNonEmptyArray';\n/**\n * @category instances\n * @since 2.5.0\n */\nvar getShow = function (S) { return ({\n    show: function (as) { return \"[\".concat(as.map(S.show).join(', '), \"]\"); }\n}); };\nexports.getShow = getShow;\n/**\n * Builds a `Semigroup` instance for `ReadonlyNonEmptyArray`\n *\n * @category instances\n * @since 2.5.0\n */\nvar getSemigroup = function () { return ({\n    concat: concat\n}); };\nexports.getSemigroup = getSemigroup;\n/**\n * @example\n * import { getEq } from 'fp-ts/ReadonlyNonEmptyArray'\n * import * as N from 'fp-ts/number'\n *\n * const E = getEq(N.Eq)\n * assert.strictEqual(E.equals([1, 2], [1, 2]), true)\n * assert.strictEqual(E.equals([1, 2], [1, 3]), false)\n *\n * @category instances\n * @since 2.5.0\n */\nvar getEq = function (E) {\n    return (0, Eq_1.fromEquals)(function (xs, ys) { return xs.length === ys.length && xs.every(function (x, i) { return E.equals(x, ys[i]); }); });\n};\nexports.getEq = getEq;\n/**\n * @since 2.11.0\n */\nvar getUnionSemigroup = function (E) {\n    var unionE = (0, exports.union)(E);\n    return {\n        concat: function (first, second) { return unionE(second)(first); }\n    };\n};\nexports.getUnionSemigroup = getUnionSemigroup;\n/**\n * @category instances\n * @since 2.7.0\n */\nexports.Functor = {\n    URI: exports.URI,\n    map: _map\n};\n/**\n * @category mapping\n * @since 2.10.0\n */\nexports.flap = (0, Functor_1.flap)(exports.Functor);\n/**\n * @category instances\n * @since 2.10.0\n */\nexports.Pointed = {\n    URI: exports.URI,\n    of: exports.of\n};\n/**\n * @category instances\n * @since 2.7.0\n */\nexports.FunctorWithIndex = {\n    URI: exports.URI,\n    map: _map,\n    mapWithIndex: _mapWithIndex\n};\n/**\n * @category instances\n * @since 2.10.0\n */\nexports.Apply = {\n    URI: exports.URI,\n    map: _map,\n    ap: _ap\n};\n/**\n * Combine two effectful actions, keeping only the result of the first.\n *\n * @since 2.5.0\n */\nexports.apFirst = (0, Apply_1.apFirst)(exports.Apply);\n/**\n * Combine two effectful actions, keeping only the result of the second.\n *\n * @since 2.5.0\n */\nexports.apSecond = (0, Apply_1.apSecond)(exports.Apply);\n/**\n * @category instances\n * @since 2.7.0\n */\nexports.Applicative = {\n    URI: exports.URI,\n    map: _map,\n    ap: _ap,\n    of: exports.of\n};\n/**\n * @category instances\n * @since 2.10.0\n */\nexports.Chain = {\n    URI: exports.URI,\n    map: _map,\n    ap: _ap,\n    chain: exports.flatMap\n};\n/**\n * Composes computations in sequence, using the return value of one computation to determine the next computation and\n * keeping only the result of the first.\n *\n * @example\n * import * as RA from 'fp-ts/ReadonlyArray'\n * import { pipe } from 'fp-ts/function'\n *\n * assert.deepStrictEqual(\n *   pipe(\n *     [1, 2, 3],\n *     RA.chainFirst(() => ['a', 'b'])\n *   ),\n *   [1, 1, 2, 2, 3, 3]\n * )\n *\n * @category sequencing\n * @since 2.5.0\n */\nexports.chainFirst = (0, Chain_1.chainFirst)(exports.Chain);\n/**\n * @category instances\n * @since 2.7.0\n */\nexports.Monad = {\n    URI: exports.URI,\n    map: _map,\n    ap: _ap,\n    of: exports.of,\n    chain: exports.flatMap\n};\n/**\n * @category instances\n * @since 2.7.0\n */\nexports.Foldable = {\n    URI: exports.URI,\n    reduce: _reduce,\n    foldMap: _foldMap,\n    reduceRight: _reduceRight\n};\n/**\n * @category instances\n * @since 2.7.0\n */\nexports.FoldableWithIndex = {\n    URI: exports.URI,\n    reduce: _reduce,\n    foldMap: _foldMap,\n    reduceRight: _reduceRight,\n    reduceWithIndex: _reduceWithIndex,\n    foldMapWithIndex: _foldMapWithIndex,\n    reduceRightWithIndex: _reduceRightWithIndex\n};\n/**\n * @category instances\n * @since 2.7.0\n */\nexports.Traversable = {\n    URI: exports.URI,\n    map: _map,\n    reduce: _reduce,\n    foldMap: _foldMap,\n    reduceRight: _reduceRight,\n    traverse: _traverse,\n    sequence: exports.sequence\n};\n/**\n * @category instances\n * @since 2.7.0\n */\nexports.TraversableWithIndex = {\n    URI: exports.URI,\n    map: _map,\n    mapWithIndex: _mapWithIndex,\n    reduce: _reduce,\n    foldMap: _foldMap,\n    reduceRight: _reduceRight,\n    traverse: _traverse,\n    sequence: exports.sequence,\n    reduceWithIndex: _reduceWithIndex,\n    foldMapWithIndex: _foldMapWithIndex,\n    reduceRightWithIndex: _reduceRightWithIndex,\n    traverseWithIndex: _traverseWithIndex\n};\n/**\n * @category instances\n * @since 2.7.0\n */\nexports.Alt = {\n    URI: exports.URI,\n    map: _map,\n    alt: _alt\n};\n/**\n * @category instances\n * @since 2.7.0\n */\nexports.Comonad = {\n    URI: exports.URI,\n    map: _map,\n    extend: _extend,\n    extract: exports.extract\n};\n// -------------------------------------------------------------------------------------\n// do notation\n// -------------------------------------------------------------------------------------\n/**\n * @category do notation\n * @since 2.9.0\n */\nexports.Do = (0, exports.of)(_.emptyRecord);\n/**\n * @category do notation\n * @since 2.8.0\n */\nexports.bindTo = (0, Functor_1.bindTo)(exports.Functor);\nvar let_ = /*#__PURE__*/ (0, Functor_1.let)(exports.Functor);\nexports.let = let_;\n/**\n * @category do notation\n * @since 2.8.0\n */\nexports.bind = (0, Chain_1.bind)(exports.Chain);\n/**\n * @category do notation\n * @since 2.8.0\n */\nexports.apS = (0, Apply_1.apS)(exports.Apply);\n// -------------------------------------------------------------------------------------\n// utils\n// -------------------------------------------------------------------------------------\n/**\n * @since 2.5.0\n */\nexports.head = exports.extract;\n/**\n * @since 2.5.0\n */\nexports.tail = _.tail;\n/**\n * @since 2.5.0\n */\nvar last = function (as) { return as[as.length - 1]; };\nexports.last = last;\n/**\n * Get all but the last element of a non empty array, creating a new array.\n *\n * @example\n * import { init } from 'fp-ts/ReadonlyNonEmptyArray'\n *\n * assert.deepStrictEqual(init([1, 2, 3]), [1, 2])\n * assert.deepStrictEqual(init([1]), [])\n *\n * @since 2.5.0\n */\nvar init = function (as) { return as.slice(0, -1); };\nexports.init = init;\n/**\n * @since 2.5.0\n */\nvar min = function (O) {\n    var S = Se.min(O);\n    return function (as) { return as.reduce(S.concat); };\n};\nexports.min = min;\n/**\n * @since 2.5.0\n */\nvar max = function (O) {\n    var S = Se.max(O);\n    return function (as) { return as.reduce(S.concat); };\n};\nexports.max = max;\n/**\n * @since 2.10.0\n */\nvar concatAll = function (S) {\n    return function (as) {\n        return as.reduce(S.concat);\n    };\n};\nexports.concatAll = concatAll;\n/**\n * Break a `ReadonlyArray` into its first element and remaining elements.\n *\n * @category pattern matching\n * @since 2.11.0\n */\nvar matchLeft = function (f) {\n    return function (as) {\n        return f((0, exports.head)(as), (0, exports.tail)(as));\n    };\n};\nexports.matchLeft = matchLeft;\n/**\n * Break a `ReadonlyArray` into its initial elements and the last element.\n *\n * @category pattern matching\n * @since 2.11.0\n */\nvar matchRight = function (f) {\n    return function (as) {\n        return f((0, exports.init)(as), (0, exports.last)(as));\n    };\n};\nexports.matchRight = matchRight;\n/**\n * Apply a function to the head, creating a new `ReadonlyNonEmptyArray`.\n *\n * @since 2.11.0\n */\nvar modifyHead = function (f) {\n    return function (as) {\n        return __spreadArray([f((0, exports.head)(as))], (0, exports.tail)(as), true);\n    };\n};\nexports.modifyHead = modifyHead;\n/**\n * Change the head, creating a new `ReadonlyNonEmptyArray`.\n *\n * @since 2.11.0\n */\nvar updateHead = function (a) { return (0, exports.modifyHead)(function () { return a; }); };\nexports.updateHead = updateHead;\n/**\n * Apply a function to the last element, creating a new `ReadonlyNonEmptyArray`.\n *\n * @since 2.11.0\n */\nvar modifyLast = function (f) {\n    return function (as) {\n        return (0, function_1.pipe)((0, exports.init)(as), (0, exports.append)(f((0, exports.last)(as))));\n    };\n};\nexports.modifyLast = modifyLast;\n/**\n * Change the last element, creating a new `ReadonlyNonEmptyArray`.\n *\n * @since 2.11.0\n */\nvar updateLast = function (a) { return (0, exports.modifyLast)(function () { return a; }); };\nexports.updateLast = updateLast;\n/**\n * Places an element in between members of a `ReadonlyNonEmptyArray`, then folds the results using the provided `Semigroup`.\n *\n * @example\n * import * as S from 'fp-ts/string'\n * import { intercalate } from 'fp-ts/ReadonlyNonEmptyArray'\n *\n * assert.deepStrictEqual(intercalate(S.Semigroup)('-')(['a', 'b', 'c']), 'a-b-c')\n *\n * @since 2.12.0\n */\nvar intercalate = function (S) {\n    var concatAllS = (0, exports.concatAll)(S);\n    return function (middle) { return (0, function_1.flow)((0, exports.intersperse)(middle), concatAllS); };\n};\nexports.intercalate = intercalate;\n// -------------------------------------------------------------------------------------\n// legacy\n// -------------------------------------------------------------------------------------\n/**\n * Alias of `flatMap`.\n *\n * @category legacy\n * @since 2.5.0\n */\nexports.chain = exports.flatMap;\nfunction groupSort(O) {\n    var sortO = (0, exports.sort)(O);\n    var groupO = group(O);\n    return function (as) { return ((0, exports.isNonEmpty)(as) ? groupO(sortO(as)) : exports.empty); };\n}\nexports.groupSort = groupSort;\nfunction filter(predicate) {\n    return (0, exports.filterWithIndex)(function (_, a) { return predicate(a); });\n}\nexports.filter = filter;\n/**\n * Use [`filterWithIndex`](./ReadonlyArray.ts.html#filterwithindex) instead.\n *\n * @category zone of death\n * @since 2.5.0\n * @deprecated\n */\nvar filterWithIndex = function (predicate) {\n    return function (as) {\n        return (0, exports.fromReadonlyArray)(as.filter(function (a, i) { return predicate(i, a); }));\n    };\n};\nexports.filterWithIndex = filterWithIndex;\n/**\n * Use [`unprepend`](#unprepend) instead.\n *\n * @category zone of death\n * @since 2.10.0\n * @deprecated\n */\nexports.uncons = exports.unprepend;\n/**\n * Use [`unappend`](#unappend) instead.\n *\n * @category zone of death\n * @since 2.10.0\n * @deprecated\n */\nexports.unsnoc = exports.unappend;\nfunction cons(head, tail) {\n    return tail === undefined ? (0, exports.prepend)(head) : (0, function_1.pipe)(tail, (0, exports.prepend)(head));\n}\nexports.cons = cons;\n/**\n * Use [`append`](./ReadonlyArray.ts.html#append) instead.\n *\n * @category zone of death\n * @since 2.5.0\n * @deprecated\n */\nvar snoc = function (init, end) { return (0, function_1.pipe)(init, concat([end])); };\nexports.snoc = snoc;\n/**\n * Use [`insertAt`](./ReadonlyArray.ts.html#insertat) instead.\n *\n * @category zone of death\n * @since 2.5.0\n * @deprecated\n */\nvar insertAt = function (i, a) {\n    return function (as) {\n        return i < 0 || i > as.length ? _.none : _.some((0, exports.unsafeInsertAt)(i, a, as));\n    };\n};\nexports.insertAt = insertAt;\n/**\n * Use [`prependAll`](#prependall) instead.\n *\n * @category zone of death\n * @since 2.9.0\n * @deprecated\n */\nexports.prependToAll = exports.prependAll;\n/**\n * Use [`concatAll`](#concatall) instead.\n *\n * @category zone of death\n * @since 2.5.0\n * @deprecated\n */\nexports.fold = exports.concatAll;\n/**\n * This instance is deprecated, use small, specific instances instead.\n * For example if a function needs a `Functor` instance, pass `RNEA.Functor` instead of `RNEA.readonlyNonEmptyArray`\n * (where `RNEA` is from `import RNEA from 'fp-ts/ReadonlyNonEmptyArray'`)\n *\n * @category zone of death\n * @since 2.5.0\n * @deprecated\n */\nexports.readonlyNonEmptyArray = {\n    URI: exports.URI,\n    of: exports.of,\n    map: _map,\n    mapWithIndex: _mapWithIndex,\n    ap: _ap,\n    chain: exports.flatMap,\n    extend: _extend,\n    extract: exports.extract,\n    reduce: _reduce,\n    foldMap: _foldMap,\n    reduceRight: _reduceRight,\n    traverse: _traverse,\n    sequence: exports.sequence,\n    reduceWithIndex: _reduceWithIndex,\n    foldMapWithIndex: _foldMapWithIndex,\n    reduceRightWithIndex: _reduceRightWithIndex,\n    traverseWithIndex: _traverseWithIndex,\n    alt: _alt\n};\n","\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nvar __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {\n    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\n        if (ar || !(i in from)) {\n            if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n            ar[i] = from[i];\n        }\n    }\n    return to.concat(ar || Array.prototype.slice.call(from));\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.mapWithIndex = exports.map = exports.flatten = exports.duplicate = exports.extend = exports.flatMap = exports.ap = exports.alt = exports.altW = exports.chunksOf = exports.splitAt = exports.chop = exports.chainWithIndex = exports.foldMap = exports.foldMapWithIndex = exports.intersperse = exports.prependAll = exports.unzip = exports.zip = exports.zipWith = exports.of = exports.copy = exports.modifyAt = exports.updateAt = exports.insertAt = exports.sort = exports.groupBy = exports.group = exports.reverse = exports.concat = exports.concatW = exports.unappend = exports.unprepend = exports.range = exports.replicate = exports.makeBy = exports.fromArray = exports.fromReadonlyNonEmptyArray = exports.rotate = exports.union = exports.sortBy = exports.uniq = exports.unsafeUpdateAt = exports.unsafeInsertAt = exports.append = exports.appendW = exports.prepend = exports.prependW = exports.isOutOfBound = exports.isNonEmpty = void 0;\nexports.chain = exports.intercalate = exports.updateLast = exports.modifyLast = exports.updateHead = exports.modifyHead = exports.matchRight = exports.matchLeft = exports.concatAll = exports.max = exports.min = exports.init = exports.last = exports.tail = exports.head = exports.apS = exports.bind = exports.let = exports.bindTo = exports.Do = exports.Comonad = exports.Alt = exports.TraversableWithIndex = exports.Traversable = exports.FoldableWithIndex = exports.Foldable = exports.Monad = exports.chainFirst = exports.Chain = exports.Applicative = exports.apSecond = exports.apFirst = exports.Apply = exports.FunctorWithIndex = exports.Pointed = exports.flap = exports.Functor = exports.getUnionSemigroup = exports.getEq = exports.getSemigroup = exports.getShow = exports.URI = exports.extract = exports.traverseWithIndex = exports.sequence = exports.traverse = exports.reduceRightWithIndex = exports.reduceRight = exports.reduceWithIndex = exports.reduce = void 0;\nexports.nonEmptyArray = exports.fold = exports.prependToAll = exports.snoc = exports.cons = exports.unsnoc = exports.uncons = exports.filterWithIndex = exports.filter = exports.groupSort = void 0;\nvar Apply_1 = require(\"./Apply\");\nvar Chain_1 = require(\"./Chain\");\nvar function_1 = require(\"./function\");\nvar Functor_1 = require(\"./Functor\");\nvar _ = __importStar(require(\"./internal\"));\nvar Ord_1 = require(\"./Ord\");\nvar RNEA = __importStar(require(\"./ReadonlyNonEmptyArray\"));\n// -------------------------------------------------------------------------------------\n// internal\n// -------------------------------------------------------------------------------------\n/**\n * @internal\n */\nvar isNonEmpty = function (as) { return as.length > 0; };\nexports.isNonEmpty = isNonEmpty;\n/**\n * @internal\n */\nvar isOutOfBound = function (i, as) { return i < 0 || i >= as.length; };\nexports.isOutOfBound = isOutOfBound;\n/**\n * @internal\n */\nvar prependW = function (head) {\n    return function (tail) {\n        return __spreadArray([head], tail, true);\n    };\n};\nexports.prependW = prependW;\n/**\n * @internal\n */\nexports.prepend = exports.prependW;\n/**\n * @internal\n */\nvar appendW = function (end) {\n    return function (init) {\n        return __spreadArray(__spreadArray([], init, true), [end], false);\n    };\n};\nexports.appendW = appendW;\n/**\n * @internal\n */\nexports.append = exports.appendW;\n/**\n * @internal\n */\nvar unsafeInsertAt = function (i, a, as) {\n    if ((0, exports.isNonEmpty)(as)) {\n        var xs = (0, exports.fromReadonlyNonEmptyArray)(as);\n        xs.splice(i, 0, a);\n        return xs;\n    }\n    return [a];\n};\nexports.unsafeInsertAt = unsafeInsertAt;\n/**\n * @internal\n */\nvar unsafeUpdateAt = function (i, a, as) {\n    var xs = (0, exports.fromReadonlyNonEmptyArray)(as);\n    xs[i] = a;\n    return xs;\n};\nexports.unsafeUpdateAt = unsafeUpdateAt;\n/**\n * Remove duplicates from a `NonEmptyArray`, keeping the first occurrence of an element.\n *\n * @example\n * import { uniq } from 'fp-ts/NonEmptyArray'\n * import * as N from 'fp-ts/number'\n *\n * assert.deepStrictEqual(uniq(N.Eq)([1, 2, 1]), [1, 2])\n *\n * @since 2.11.0\n */\nvar uniq = function (E) {\n    return function (as) {\n        if (as.length === 1) {\n            return (0, exports.copy)(as);\n        }\n        var out = [(0, exports.head)(as)];\n        var rest = (0, exports.tail)(as);\n        var _loop_1 = function (a) {\n            if (out.every(function (o) { return !E.equals(o, a); })) {\n                out.push(a);\n            }\n        };\n        for (var _i = 0, rest_1 = rest; _i < rest_1.length; _i++) {\n            var a = rest_1[_i];\n            _loop_1(a);\n        }\n        return out;\n    };\n};\nexports.uniq = uniq;\n/**\n * Sort the elements of a `NonEmptyArray` in increasing order, where elements are compared using first `ords[0]`, then `ords[1]`,\n * etc...\n *\n * @example\n * import * as NEA from 'fp-ts/NonEmptyArray'\n * import { contramap } from 'fp-ts/Ord'\n * import * as S from 'fp-ts/string'\n * import * as N from 'fp-ts/number'\n * import { pipe } from 'fp-ts/function'\n *\n * interface Person {\n *   name: string\n *   age: number\n * }\n *\n * const byName = pipe(S.Ord, contramap((p: Person) => p.name))\n *\n * const byAge = pipe(N.Ord, contramap((p: Person) => p.age))\n *\n * const sortByNameByAge = NEA.sortBy([byName, byAge])\n *\n * const persons: NEA.NonEmptyArray<Person> = [\n *   { name: 'a', age: 1 },\n *   { name: 'b', age: 3 },\n *   { name: 'c', age: 2 },\n *   { name: 'b', age: 2 }\n * ]\n *\n * assert.deepStrictEqual(sortByNameByAge(persons), [\n *   { name: 'a', age: 1 },\n *   { name: 'b', age: 2 },\n *   { name: 'b', age: 3 },\n *   { name: 'c', age: 2 }\n * ])\n *\n * @since 2.11.0\n */\nvar sortBy = function (ords) {\n    if ((0, exports.isNonEmpty)(ords)) {\n        var M = (0, Ord_1.getMonoid)();\n        return (0, exports.sort)(ords.reduce(M.concat, M.empty));\n    }\n    return exports.copy;\n};\nexports.sortBy = sortBy;\n/**\n * @since 2.11.0\n */\nvar union = function (E) {\n    var uniqE = (0, exports.uniq)(E);\n    return function (second) { return function (first) { return uniqE((0, function_1.pipe)(first, concat(second))); }; };\n};\nexports.union = union;\n/**\n * Rotate a `NonEmptyArray` by `n` steps.\n *\n * @example\n * import { rotate } from 'fp-ts/NonEmptyArray'\n *\n * assert.deepStrictEqual(rotate(2)([1, 2, 3, 4, 5]), [4, 5, 1, 2, 3])\n * assert.deepStrictEqual(rotate(-2)([1, 2, 3, 4, 5]), [3, 4, 5, 1, 2])\n *\n * @since 2.11.0\n */\nvar rotate = function (n) {\n    return function (as) {\n        var len = as.length;\n        var m = Math.round(n) % len;\n        if ((0, exports.isOutOfBound)(Math.abs(m), as) || m === 0) {\n            return (0, exports.copy)(as);\n        }\n        if (m < 0) {\n            var _a = (0, exports.splitAt)(-m)(as), f = _a[0], s = _a[1];\n            return (0, function_1.pipe)(s, concat(f));\n        }\n        else {\n            return (0, exports.rotate)(m - len)(as);\n        }\n    };\n};\nexports.rotate = rotate;\n// -------------------------------------------------------------------------------------\n// constructors\n// -------------------------------------------------------------------------------------\n/**\n * @category conversions\n * @since 2.10.0\n */\nexports.fromReadonlyNonEmptyArray = _.fromReadonlyNonEmptyArray;\n/**\n * Builds a `NonEmptyArray` from an `Array` returning `none` if `as` is an empty array\n *\n * @category conversions\n * @since 2.0.0\n */\nvar fromArray = function (as) { return ((0, exports.isNonEmpty)(as) ? _.some(as) : _.none); };\nexports.fromArray = fromArray;\n/**\n * Return a `NonEmptyArray` of length `n` with element `i` initialized with `f(i)`.\n *\n * **Note**. `n` is normalized to a natural number.\n *\n * @example\n * import { makeBy } from 'fp-ts/NonEmptyArray'\n * import { pipe } from 'fp-ts/function'\n *\n * const double = (n: number): number => n * 2\n * assert.deepStrictEqual(pipe(5, makeBy(double)), [0, 2, 4, 6, 8])\n *\n * @category constructors\n * @since 2.11.0\n */\nvar makeBy = function (f) {\n    return function (n) {\n        var j = Math.max(0, Math.floor(n));\n        var out = [f(0)];\n        for (var i = 1; i < j; i++) {\n            out.push(f(i));\n        }\n        return out;\n    };\n};\nexports.makeBy = makeBy;\n/**\n * Create a `NonEmptyArray` containing a value repeated the specified number of times.\n *\n * **Note**. `n` is normalized to a natural number.\n *\n * @example\n * import { replicate } from 'fp-ts/NonEmptyArray'\n * import { pipe } from 'fp-ts/function'\n *\n * assert.deepStrictEqual(pipe(3, replicate('a')), ['a', 'a', 'a'])\n *\n * @category constructors\n * @since 2.11.0\n */\nvar replicate = function (a) { return (0, exports.makeBy)(function () { return a; }); };\nexports.replicate = replicate;\n/**\n * Create a `NonEmptyArray` containing a range of integers, including both endpoints.\n *\n * @example\n * import { range } from 'fp-ts/NonEmptyArray'\n *\n * assert.deepStrictEqual(range(1, 5), [1, 2, 3, 4, 5])\n *\n * @category constructors\n * @since 2.11.0\n */\nvar range = function (start, end) {\n    return start <= end ? (0, exports.makeBy)(function (i) { return start + i; })(end - start + 1) : [start];\n};\nexports.range = range;\n/**\n * Return the tuple of the `head` and the `tail`.\n *\n * @example\n * import { unprepend } from 'fp-ts/NonEmptyArray'\n *\n * assert.deepStrictEqual(unprepend([1, 2, 3]), [1, [2, 3]])\n *\n * @since 2.9.0\n */\nvar unprepend = function (as) { return [(0, exports.head)(as), (0, exports.tail)(as)]; };\nexports.unprepend = unprepend;\n/**\n * Return the tuple of the `init` and the `last`.\n *\n * @example\n * import { unappend } from 'fp-ts/NonEmptyArray'\n *\n * assert.deepStrictEqual(unappend([1, 2, 3, 4]), [[1, 2, 3], 4])\n *\n * @since 2.9.0\n */\nvar unappend = function (as) { return [(0, exports.init)(as), (0, exports.last)(as)]; };\nexports.unappend = unappend;\nfunction concatW(second) {\n    return function (first) { return first.concat(second); };\n}\nexports.concatW = concatW;\nfunction concat(x, y) {\n    return y ? x.concat(y) : function (y) { return y.concat(x); };\n}\nexports.concat = concat;\n/**\n * @since 2.0.0\n */\nvar reverse = function (as) { return __spreadArray([(0, exports.last)(as)], as.slice(0, -1).reverse(), true); };\nexports.reverse = reverse;\nfunction group(E) {\n    return function (as) {\n        var len = as.length;\n        if (len === 0) {\n            return [];\n        }\n        var out = [];\n        var head = as[0];\n        var nea = [head];\n        for (var i = 1; i < len; i++) {\n            var a = as[i];\n            if (E.equals(a, head)) {\n                nea.push(a);\n            }\n            else {\n                out.push(nea);\n                head = a;\n                nea = [head];\n            }\n        }\n        out.push(nea);\n        return out;\n    };\n}\nexports.group = group;\n/**\n * Splits an array into sub-non-empty-arrays stored in an object, based on the result of calling a `string`-returning\n * function on each element, and grouping the results according to values returned\n *\n * @example\n * import { groupBy } from 'fp-ts/NonEmptyArray'\n *\n * assert.deepStrictEqual(groupBy((s: string) => String(s.length))(['a', 'b', 'ab']), {\n *   '1': ['a', 'b'],\n *   '2': ['ab']\n * })\n *\n * @since 2.0.0\n */\nvar groupBy = function (f) {\n    return function (as) {\n        var out = {};\n        for (var _i = 0, as_1 = as; _i < as_1.length; _i++) {\n            var a = as_1[_i];\n            var k = f(a);\n            if (_.has.call(out, k)) {\n                out[k].push(a);\n            }\n            else {\n                out[k] = [a];\n            }\n        }\n        return out;\n    };\n};\nexports.groupBy = groupBy;\n/**\n * @since 2.0.0\n */\nvar sort = function (O) {\n    return function (as) {\n        return as.slice().sort(O.compare);\n    };\n};\nexports.sort = sort;\n/**\n * @since 2.0.0\n */\nvar insertAt = function (i, a) {\n    return function (as) {\n        return i < 0 || i > as.length ? _.none : _.some((0, exports.unsafeInsertAt)(i, a, as));\n    };\n};\nexports.insertAt = insertAt;\n/**\n * @since 2.0.0\n */\nvar updateAt = function (i, a) {\n    return (0, exports.modifyAt)(i, function () { return a; });\n};\nexports.updateAt = updateAt;\n/**\n * @since 2.0.0\n */\nvar modifyAt = function (i, f) {\n    return function (as) {\n        return (0, exports.isOutOfBound)(i, as) ? _.none : _.some((0, exports.unsafeUpdateAt)(i, f(as[i]), as));\n    };\n};\nexports.modifyAt = modifyAt;\n/**\n * @since 2.0.0\n */\nexports.copy = exports.fromReadonlyNonEmptyArray;\n/**\n * @category constructors\n * @since 2.0.0\n */\nvar of = function (a) { return [a]; };\nexports.of = of;\n/**\n * @since 2.5.1\n */\nvar zipWith = function (as, bs, f) {\n    var cs = [f(as[0], bs[0])];\n    var len = Math.min(as.length, bs.length);\n    for (var i = 1; i < len; i++) {\n        cs[i] = f(as[i], bs[i]);\n    }\n    return cs;\n};\nexports.zipWith = zipWith;\nfunction zip(as, bs) {\n    if (bs === undefined) {\n        return function (bs) { return zip(bs, as); };\n    }\n    return (0, exports.zipWith)(as, bs, function (a, b) { return [a, b]; });\n}\nexports.zip = zip;\n/**\n * @since 2.5.1\n */\nvar unzip = function (abs) {\n    var fa = [abs[0][0]];\n    var fb = [abs[0][1]];\n    for (var i = 1; i < abs.length; i++) {\n        fa[i] = abs[i][0];\n        fb[i] = abs[i][1];\n    }\n    return [fa, fb];\n};\nexports.unzip = unzip;\n/**\n * Prepend an element to every member of an array\n *\n * @example\n * import { prependAll } from 'fp-ts/NonEmptyArray'\n *\n * assert.deepStrictEqual(prependAll(9)([1, 2, 3, 4]), [9, 1, 9, 2, 9, 3, 9, 4])\n *\n * @since 2.10.0\n */\nvar prependAll = function (middle) {\n    return function (as) {\n        var out = [middle, as[0]];\n        for (var i = 1; i < as.length; i++) {\n            out.push(middle, as[i]);\n        }\n        return out;\n    };\n};\nexports.prependAll = prependAll;\n/**\n * Places an element in between members of an array\n *\n * @example\n * import { intersperse } from 'fp-ts/NonEmptyArray'\n *\n * assert.deepStrictEqual(intersperse(9)([1, 2, 3, 4]), [1, 9, 2, 9, 3, 9, 4])\n *\n * @since 2.9.0\n */\nvar intersperse = function (middle) {\n    return function (as) {\n        var rest = (0, exports.tail)(as);\n        return (0, exports.isNonEmpty)(rest) ? (0, function_1.pipe)(rest, (0, exports.prependAll)(middle), (0, exports.prepend)((0, exports.head)(as))) : (0, exports.copy)(as);\n    };\n};\nexports.intersperse = intersperse;\n/**\n * @category folding\n * @since 2.0.0\n */\nexports.foldMapWithIndex = RNEA.foldMapWithIndex;\n/**\n * @category folding\n * @since 2.0.0\n */\nexports.foldMap = RNEA.foldMap;\n/**\n * @category sequencing\n * @since 2.10.0\n */\nvar chainWithIndex = function (f) {\n    return function (as) {\n        var out = (0, exports.fromReadonlyNonEmptyArray)(f(0, (0, exports.head)(as)));\n        for (var i = 1; i < as.length; i++) {\n            out.push.apply(out, f(i, as[i]));\n        }\n        return out;\n    };\n};\nexports.chainWithIndex = chainWithIndex;\n/**\n * @since 2.10.0\n */\nvar chop = function (f) {\n    return function (as) {\n        var _a = f(as), b = _a[0], rest = _a[1];\n        var out = [b];\n        var next = rest;\n        while ((0, exports.isNonEmpty)(next)) {\n            var _b = f(next), b_1 = _b[0], rest_2 = _b[1];\n            out.push(b_1);\n            next = rest_2;\n        }\n        return out;\n    };\n};\nexports.chop = chop;\n/**\n * Splits a `NonEmptyArray` into two pieces, the first piece has max `n` elements.\n *\n * @since 2.10.0\n */\nvar splitAt = function (n) {\n    return function (as) {\n        var m = Math.max(1, n);\n        return m >= as.length ? [(0, exports.copy)(as), []] : [(0, function_1.pipe)(as.slice(1, m), (0, exports.prepend)((0, exports.head)(as))), as.slice(m)];\n    };\n};\nexports.splitAt = splitAt;\n/**\n * @since 2.10.0\n */\nvar chunksOf = function (n) { return (0, exports.chop)((0, exports.splitAt)(n)); };\nexports.chunksOf = chunksOf;\n/* istanbul ignore next */\nvar _map = function (fa, f) { return (0, function_1.pipe)(fa, (0, exports.map)(f)); };\n/* istanbul ignore next */\nvar _mapWithIndex = function (fa, f) { return (0, function_1.pipe)(fa, (0, exports.mapWithIndex)(f)); };\n/* istanbul ignore next */\nvar _ap = function (fab, fa) { return (0, function_1.pipe)(fab, (0, exports.ap)(fa)); };\n/* istanbul ignore next */\nvar _extend = function (wa, f) { return (0, function_1.pipe)(wa, (0, exports.extend)(f)); };\n/* istanbul ignore next */\nvar _reduce = function (fa, b, f) { return (0, function_1.pipe)(fa, (0, exports.reduce)(b, f)); };\n/* istanbul ignore next */\nvar _foldMap = function (M) {\n    var foldMapM = (0, exports.foldMap)(M);\n    return function (fa, f) { return (0, function_1.pipe)(fa, foldMapM(f)); };\n};\n/* istanbul ignore next */\nvar _reduceRight = function (fa, b, f) { return (0, function_1.pipe)(fa, (0, exports.reduceRight)(b, f)); };\n/* istanbul ignore next */\nvar _traverse = function (F) {\n    var traverseF = (0, exports.traverse)(F);\n    return function (ta, f) { return (0, function_1.pipe)(ta, traverseF(f)); };\n};\n/* istanbul ignore next */\nvar _alt = function (fa, that) { return (0, function_1.pipe)(fa, (0, exports.alt)(that)); };\n/* istanbul ignore next */\nvar _reduceWithIndex = function (fa, b, f) {\n    return (0, function_1.pipe)(fa, (0, exports.reduceWithIndex)(b, f));\n};\n/* istanbul ignore next */\nvar _foldMapWithIndex = function (M) {\n    var foldMapWithIndexM = (0, exports.foldMapWithIndex)(M);\n    return function (fa, f) { return (0, function_1.pipe)(fa, foldMapWithIndexM(f)); };\n};\n/* istanbul ignore next */\nvar _reduceRightWithIndex = function (fa, b, f) {\n    return (0, function_1.pipe)(fa, (0, exports.reduceRightWithIndex)(b, f));\n};\n/* istanbul ignore next */\nvar _traverseWithIndex = function (F) {\n    var traverseWithIndexF = (0, exports.traverseWithIndex)(F);\n    return function (ta, f) { return (0, function_1.pipe)(ta, traverseWithIndexF(f)); };\n};\n/**\n * Less strict version of [`alt`](#alt).\n *\n * The `W` suffix (short for **W**idening) means that the return types will be merged.\n *\n * @example\n * import * as NEA from 'fp-ts/NonEmptyArray'\n * import { pipe } from 'fp-ts/function'\n *\n * assert.deepStrictEqual(\n *   pipe(\n *     [1, 2, 3] as NEA.NonEmptyArray<number>,\n *     NEA.altW(() => ['a', 'b'])\n *   ),\n *   [1, 2, 3, 'a', 'b']\n * )\n *\n * @category error handling\n * @since 2.9.0\n */\nvar altW = function (that) {\n    return function (as) {\n        return (0, function_1.pipe)(as, concatW(that()));\n    };\n};\nexports.altW = altW;\n/**\n * Identifies an associative operation on a type constructor. It is similar to `Semigroup`, except that it applies to\n * types of kind `* -> *`.\n *\n * In case of `NonEmptyArray` concatenates the inputs into a single array.\n *\n * @example\n * import * as NEA from 'fp-ts/NonEmptyArray'\n * import { pipe } from 'fp-ts/function'\n *\n * assert.deepStrictEqual(\n *   pipe(\n *     [1, 2, 3],\n *     NEA.alt(() => [4, 5])\n *   ),\n *   [1, 2, 3, 4, 5]\n * )\n *\n * @category error handling\n * @since 2.6.2\n */\nexports.alt = exports.altW;\n/**\n * Apply a function to an argument under a type constructor.\n *\n * @since 2.0.0\n */\nvar ap = function (as) {\n    return (0, exports.flatMap)(function (f) { return (0, function_1.pipe)(as, (0, exports.map)(f)); });\n};\nexports.ap = ap;\n/**\n * @example\n * import * as NEA from 'fp-ts/NonEmptyArray'\n * import { pipe } from 'fp-ts/function'\n *\n * assert.deepStrictEqual(\n *   pipe(\n *     [1, 2, 3],\n *     NEA.flatMap((n) => [`a${n}`, `b${n}`])\n *   ),\n *   ['a1', 'b1', 'a2', 'b2', 'a3', 'b3']\n * )\n *\n * @category sequencing\n * @since 2.14.0\n */\nexports.flatMap = (0, function_1.dual)(2, function (ma, f) {\n    return (0, function_1.pipe)(ma, (0, exports.chainWithIndex)(function (i, a) { return f(a, i); }));\n});\n/**\n * @since 2.0.0\n */\nvar extend = function (f) {\n    return function (as) {\n        var next = (0, exports.tail)(as);\n        var out = [f(as)];\n        while ((0, exports.isNonEmpty)(next)) {\n            out.push(f(next));\n            next = (0, exports.tail)(next);\n        }\n        return out;\n    };\n};\nexports.extend = extend;\n/**\n * @since 2.5.0\n */\nexports.duplicate = (0, exports.extend)(function_1.identity);\n/**\n * @category sequencing\n * @since 2.5.0\n */\nexports.flatten = (0, exports.flatMap)(function_1.identity);\n/**\n * `map` can be used to turn functions `(a: A) => B` into functions `(fa: F<A>) => F<B>` whose argument and return types\n * use the type constructor `F` to represent some computational context.\n *\n * @category mapping\n * @since 2.0.0\n */\nvar map = function (f) { return (0, exports.mapWithIndex)(function (_, a) { return f(a); }); };\nexports.map = map;\n/**\n * @category mapping\n * @since 2.0.0\n */\nvar mapWithIndex = function (f) {\n    return function (as) {\n        var out = [f(0, (0, exports.head)(as))];\n        for (var i = 1; i < as.length; i++) {\n            out.push(f(i, as[i]));\n        }\n        return out;\n    };\n};\nexports.mapWithIndex = mapWithIndex;\n/**\n * @category folding\n * @since 2.0.0\n */\nexports.reduce = RNEA.reduce;\n/**\n * @category folding\n * @since 2.0.0\n */\nexports.reduceWithIndex = RNEA.reduceWithIndex;\n/**\n * @category folding\n * @since 2.0.0\n */\nexports.reduceRight = RNEA.reduceRight;\n/**\n * @category folding\n * @since 2.0.0\n */\nexports.reduceRightWithIndex = RNEA.reduceRightWithIndex;\n/**\n * @category traversing\n * @since 2.6.3\n */\nvar traverse = function (F) {\n    var traverseWithIndexF = (0, exports.traverseWithIndex)(F);\n    return function (f) { return traverseWithIndexF(function (_, a) { return f(a); }); };\n};\nexports.traverse = traverse;\n/**\n * @category traversing\n * @since 2.6.3\n */\nvar sequence = function (F) { return (0, exports.traverseWithIndex)(F)(function (_, a) { return a; }); };\nexports.sequence = sequence;\n/**\n * @category sequencing\n * @since 2.6.3\n */\nvar traverseWithIndex = function (F) {\n    return function (f) {\n        return function (as) {\n            var out = F.map(f(0, (0, exports.head)(as)), exports.of);\n            for (var i = 1; i < as.length; i++) {\n                out = F.ap(F.map(out, function (bs) { return function (b) { return (0, function_1.pipe)(bs, (0, exports.append)(b)); }; }), f(i, as[i]));\n            }\n            return out;\n        };\n    };\n};\nexports.traverseWithIndex = traverseWithIndex;\n/**\n * @since 2.7.0\n */\nexports.extract = RNEA.head;\n/**\n * @category type lambdas\n * @since 2.0.0\n */\nexports.URI = 'NonEmptyArray';\n/**\n * @category instances\n * @since 2.0.0\n */\nexports.getShow = RNEA.getShow;\n/**\n * Builds a `Semigroup` instance for `NonEmptyArray`\n *\n * @category instances\n * @since 2.0.0\n */\nvar getSemigroup = function () { return ({\n    concat: concat\n}); };\nexports.getSemigroup = getSemigroup;\n/**\n * @example\n * import { getEq } from 'fp-ts/NonEmptyArray'\n * import * as N from 'fp-ts/number'\n *\n * const E = getEq(N.Eq)\n * assert.strictEqual(E.equals([1, 2], [1, 2]), true)\n * assert.strictEqual(E.equals([1, 2], [1, 3]), false)\n *\n * @category instances\n * @since 2.0.0\n */\nexports.getEq = RNEA.getEq;\n/**\n * @since 2.11.0\n */\nvar getUnionSemigroup = function (E) {\n    var unionE = (0, exports.union)(E);\n    return {\n        concat: function (first, second) { return unionE(second)(first); }\n    };\n};\nexports.getUnionSemigroup = getUnionSemigroup;\n/**\n * @category instances\n * @since 2.7.0\n */\nexports.Functor = {\n    URI: exports.URI,\n    map: _map\n};\n/**\n * @category mapping\n * @since 2.10.0\n */\nexports.flap = (0, Functor_1.flap)(exports.Functor);\n/**\n * @category instances\n * @since 2.10.0\n */\nexports.Pointed = {\n    URI: exports.URI,\n    of: exports.of\n};\n/**\n * @category instances\n * @since 2.7.0\n */\nexports.FunctorWithIndex = {\n    URI: exports.URI,\n    map: _map,\n    mapWithIndex: _mapWithIndex\n};\n/**\n * @category instances\n * @since 2.10.0\n */\nexports.Apply = {\n    URI: exports.URI,\n    map: _map,\n    ap: _ap\n};\n/**\n * Combine two effectful actions, keeping only the result of the first.\n *\n * @since 2.5.0\n */\nexports.apFirst = (0, Apply_1.apFirst)(exports.Apply);\n/**\n * Combine two effectful actions, keeping only the result of the second.\n *\n * @since 2.5.0\n */\nexports.apSecond = (0, Apply_1.apSecond)(exports.Apply);\n/**\n * @category instances\n * @since 2.7.0\n */\nexports.Applicative = {\n    URI: exports.URI,\n    map: _map,\n    ap: _ap,\n    of: exports.of\n};\n/**\n * @category instances\n * @since 2.10.0\n */\nexports.Chain = {\n    URI: exports.URI,\n    map: _map,\n    ap: _ap,\n    chain: exports.flatMap\n};\n/**\n * Composes computations in sequence, using the return value of one computation to determine the next computation and\n * keeping only the result of the first.\n *\n * @category sequencing\n * @since 2.5.0\n */\nexports.chainFirst = \n/*#__PURE__*/ (0, Chain_1.chainFirst)(exports.Chain);\n/**\n * @category instances\n * @since 2.7.0\n */\nexports.Monad = {\n    URI: exports.URI,\n    map: _map,\n    ap: _ap,\n    of: exports.of,\n    chain: exports.flatMap\n};\n/**\n * @category instances\n * @since 2.7.0\n */\nexports.Foldable = {\n    URI: exports.URI,\n    reduce: _reduce,\n    foldMap: _foldMap,\n    reduceRight: _reduceRight\n};\n/**\n * @category instances\n * @since 2.7.0\n */\nexports.FoldableWithIndex = {\n    URI: exports.URI,\n    reduce: _reduce,\n    foldMap: _foldMap,\n    reduceRight: _reduceRight,\n    reduceWithIndex: _reduceWithIndex,\n    foldMapWithIndex: _foldMapWithIndex,\n    reduceRightWithIndex: _reduceRightWithIndex\n};\n/**\n * @category instances\n * @since 2.7.0\n */\nexports.Traversable = {\n    URI: exports.URI,\n    map: _map,\n    reduce: _reduce,\n    foldMap: _foldMap,\n    reduceRight: _reduceRight,\n    traverse: _traverse,\n    sequence: exports.sequence\n};\n/**\n * @category instances\n * @since 2.7.0\n */\nexports.TraversableWithIndex = {\n    URI: exports.URI,\n    map: _map,\n    mapWithIndex: _mapWithIndex,\n    reduce: _reduce,\n    foldMap: _foldMap,\n    reduceRight: _reduceRight,\n    traverse: _traverse,\n    sequence: exports.sequence,\n    reduceWithIndex: _reduceWithIndex,\n    foldMapWithIndex: _foldMapWithIndex,\n    reduceRightWithIndex: _reduceRightWithIndex,\n    traverseWithIndex: _traverseWithIndex\n};\n/**\n * @category instances\n * @since 2.7.0\n */\nexports.Alt = {\n    URI: exports.URI,\n    map: _map,\n    alt: _alt\n};\n/**\n * @category instances\n * @since 2.7.0\n */\nexports.Comonad = {\n    URI: exports.URI,\n    map: _map,\n    extend: _extend,\n    extract: exports.extract\n};\n// -------------------------------------------------------------------------------------\n// do notation\n// -------------------------------------------------------------------------------------\n/**\n * @category do notation\n * @since 2.9.0\n */\nexports.Do = (0, exports.of)(_.emptyRecord);\n/**\n * @category do notation\n * @since 2.8.0\n */\nexports.bindTo = (0, Functor_1.bindTo)(exports.Functor);\nvar let_ = /*#__PURE__*/ (0, Functor_1.let)(exports.Functor);\nexports.let = let_;\n/**\n * @category do notation\n * @since 2.8.0\n */\nexports.bind = (0, Chain_1.bind)(exports.Chain);\n/**\n * @category do notation\n * @since 2.8.0\n */\nexports.apS = (0, Apply_1.apS)(exports.Apply);\n// -------------------------------------------------------------------------------------\n// utils\n// -------------------------------------------------------------------------------------\n/**\n * @since 2.0.0\n */\nexports.head = RNEA.head;\n/**\n * @since 2.0.0\n */\nvar tail = function (as) { return as.slice(1); };\nexports.tail = tail;\n/**\n * @since 2.0.0\n */\nexports.last = RNEA.last;\n/**\n * Get all but the last element of a non empty array, creating a new array.\n *\n * @example\n * import { init } from 'fp-ts/NonEmptyArray'\n *\n * assert.deepStrictEqual(init([1, 2, 3]), [1, 2])\n * assert.deepStrictEqual(init([1]), [])\n *\n * @since 2.2.0\n */\nvar init = function (as) { return as.slice(0, -1); };\nexports.init = init;\n/**\n * @since 2.0.0\n */\nexports.min = RNEA.min;\n/**\n * @since 2.0.0\n */\nexports.max = RNEA.max;\n/**\n * @since 2.10.0\n */\nvar concatAll = function (S) {\n    return function (as) {\n        return as.reduce(S.concat);\n    };\n};\nexports.concatAll = concatAll;\n/**\n * Break an `Array` into its first element and remaining elements.\n *\n * @category pattern matching\n * @since 2.11.0\n */\nvar matchLeft = function (f) {\n    return function (as) {\n        return f((0, exports.head)(as), (0, exports.tail)(as));\n    };\n};\nexports.matchLeft = matchLeft;\n/**\n * Break an `Array` into its initial elements and the last element.\n *\n * @category pattern matching\n * @since 2.11.0\n */\nvar matchRight = function (f) {\n    return function (as) {\n        return f((0, exports.init)(as), (0, exports.last)(as));\n    };\n};\nexports.matchRight = matchRight;\n/**\n * Apply a function to the head, creating a new `NonEmptyArray`.\n *\n * @since 2.11.0\n */\nvar modifyHead = function (f) {\n    return function (as) {\n        return __spreadArray([f((0, exports.head)(as))], (0, exports.tail)(as), true);\n    };\n};\nexports.modifyHead = modifyHead;\n/**\n * Change the head, creating a new `NonEmptyArray`.\n *\n * @since 2.11.0\n */\nvar updateHead = function (a) { return (0, exports.modifyHead)(function () { return a; }); };\nexports.updateHead = updateHead;\n/**\n * Apply a function to the last element, creating a new `NonEmptyArray`.\n *\n * @since 2.11.0\n */\nvar modifyLast = function (f) {\n    return function (as) {\n        return (0, function_1.pipe)((0, exports.init)(as), (0, exports.append)(f((0, exports.last)(as))));\n    };\n};\nexports.modifyLast = modifyLast;\n/**\n * Change the last element, creating a new `NonEmptyArray`.\n *\n * @since 2.11.0\n */\nvar updateLast = function (a) { return (0, exports.modifyLast)(function () { return a; }); };\nexports.updateLast = updateLast;\n/**\n * Places an element in between members of a `NonEmptyArray`, then folds the results using the provided `Semigroup`.\n *\n * @example\n * import * as S from 'fp-ts/string'\n * import { intercalate } from 'fp-ts/NonEmptyArray'\n *\n * assert.deepStrictEqual(intercalate(S.Semigroup)('-')(['a', 'b', 'c']), 'a-b-c')\n *\n * @since 2.12.0\n */\nexports.intercalate = RNEA.intercalate;\n// -------------------------------------------------------------------------------------\n// legacy\n// -------------------------------------------------------------------------------------\n/**\n * Alias of `flatMap`.\n *\n * @category legacy\n * @since 2.0.0\n */\nexports.chain = exports.flatMap;\nfunction groupSort(O) {\n    var sortO = (0, exports.sort)(O);\n    var groupO = group(O);\n    return function (as) { return ((0, exports.isNonEmpty)(as) ? groupO(sortO(as)) : []); };\n}\nexports.groupSort = groupSort;\nfunction filter(predicate) {\n    return (0, exports.filterWithIndex)(function (_, a) { return predicate(a); });\n}\nexports.filter = filter;\n/**\n * Use [`filterWithIndex`](./Array.ts.html#filterwithindex) instead.\n *\n * @category zone of death\n * @since 2.0.0\n * @deprecated\n */\nvar filterWithIndex = function (predicate) {\n    return function (as) {\n        return (0, exports.fromArray)(as.filter(function (a, i) { return predicate(i, a); }));\n    };\n};\nexports.filterWithIndex = filterWithIndex;\n/**\n * Use [`unprepend`](#unprepend) instead.\n *\n * @category zone of death\n * @since 2.9.0\n * @deprecated\n */\nexports.uncons = exports.unprepend;\n/**\n * Use [`unappend`](#unappend) instead.\n *\n * @category zone of death\n * @since 2.9.0\n * @deprecated\n */\nexports.unsnoc = exports.unappend;\nfunction cons(head, tail) {\n    return tail === undefined ? (0, exports.prepend)(head) : (0, function_1.pipe)(tail, (0, exports.prepend)(head));\n}\nexports.cons = cons;\n/**\n * Use [`append`](./Array.ts.html#append) instead.\n *\n * @category zone of death\n * @since 2.0.0\n * @deprecated\n */\nvar snoc = function (init, end) { return (0, function_1.pipe)(init, (0, exports.append)(end)); };\nexports.snoc = snoc;\n/**\n * Use [`prependAll`](#prependall) instead.\n *\n * @category zone of death\n * @since 2.9.0\n * @deprecated\n */\nexports.prependToAll = exports.prependAll;\n/**\n * Use [`concatAll`](#concatall) instead.\n *\n * @category zone of death\n * @since 2.5.0\n * @deprecated\n */\nexports.fold = RNEA.concatAll;\n/**\n * This instance is deprecated, use small, specific instances instead.\n * For example if a function needs a `Functor` instance, pass `NEA.Functor` instead of `NEA.nonEmptyArray`\n * (where `NEA` is from `import NEA from 'fp-ts/NonEmptyArray'`)\n *\n * @category zone of death\n * @since 2.0.0\n * @deprecated\n */\nexports.nonEmptyArray = {\n    URI: exports.URI,\n    of: exports.of,\n    map: _map,\n    mapWithIndex: _mapWithIndex,\n    ap: _ap,\n    chain: exports.flatMap,\n    extend: _extend,\n    extract: exports.extract,\n    reduce: _reduce,\n    foldMap: _foldMap,\n    reduceRight: _reduceRight,\n    traverse: _traverse,\n    sequence: exports.sequence,\n    reduceWithIndex: _reduceWithIndex,\n    foldMapWithIndex: _foldMapWithIndex,\n    reduceRightWithIndex: _reduceRightWithIndex,\n    traverseWithIndex: _traverseWithIndex,\n    alt: _alt\n};\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Field = exports.MonoidProduct = exports.MonoidSum = exports.SemigroupProduct = exports.SemigroupSum = exports.MagmaSub = exports.Show = exports.Bounded = exports.Ord = exports.Eq = exports.isNumber = void 0;\n// -------------------------------------------------------------------------------------\n// refinements\n// -------------------------------------------------------------------------------------\n/**\n * @category refinements\n * @since 2.11.0\n */\nvar isNumber = function (u) { return typeof u === 'number'; };\nexports.isNumber = isNumber;\n// -------------------------------------------------------------------------------------\n// instances\n// -------------------------------------------------------------------------------------\n/**\n * @category instances\n * @since 2.10.0\n */\nexports.Eq = {\n    equals: function (first, second) { return first === second; }\n};\n/**\n * @category instances\n * @since 2.10.0\n */\nexports.Ord = {\n    equals: exports.Eq.equals,\n    compare: function (first, second) { return (first < second ? -1 : first > second ? 1 : 0); }\n};\n/**\n * @category instances\n * @since 2.10.0\n */\nexports.Bounded = {\n    equals: exports.Eq.equals,\n    compare: exports.Ord.compare,\n    top: Infinity,\n    bottom: -Infinity\n};\n/**\n * @category instances\n * @since 2.10.0\n */\nexports.Show = {\n    show: function (n) { return JSON.stringify(n); }\n};\n/**\n * @category instances\n * @since 2.11.0\n */\nexports.MagmaSub = {\n    concat: function (first, second) { return first - second; }\n};\n/**\n * `number` semigroup under addition.\n *\n * @example\n * import { SemigroupSum } from 'fp-ts/number'\n *\n * assert.deepStrictEqual(SemigroupSum.concat(2, 3), 5)\n *\n * @category instances\n * @since 2.10.0\n */\nexports.SemigroupSum = {\n    concat: function (first, second) { return first + second; }\n};\n/**\n * `number` semigroup under multiplication.\n *\n * @example\n * import { SemigroupProduct } from 'fp-ts/number'\n *\n * assert.deepStrictEqual(SemigroupProduct.concat(2, 3), 6)\n *\n * @category instances\n * @since 2.10.0\n */\nexports.SemigroupProduct = {\n    concat: function (first, second) { return first * second; }\n};\n/**\n * `number` monoid under addition.\n *\n * The `empty` value is `0`.\n *\n * @example\n * import { MonoidSum } from 'fp-ts/number'\n *\n * assert.deepStrictEqual(MonoidSum.concat(2, MonoidSum.empty), 2)\n *\n * @category instances\n * @since 2.10.0\n */\nexports.MonoidSum = {\n    concat: exports.SemigroupSum.concat,\n    empty: 0\n};\n/**\n * `number` monoid under multiplication.\n *\n * The `empty` value is `1`.\n *\n * @example\n * import { MonoidProduct } from 'fp-ts/number'\n *\n * assert.deepStrictEqual(MonoidProduct.concat(2, MonoidProduct.empty), 2)\n *\n * @category instances\n * @since 2.10.0\n */\nexports.MonoidProduct = {\n    concat: exports.SemigroupProduct.concat,\n    empty: 1\n};\n/**\n * @category instances\n * @since 2.10.0\n */\nexports.Field = {\n    add: exports.SemigroupSum.concat,\n    zero: 0,\n    mul: exports.SemigroupProduct.concat,\n    one: 1,\n    sub: exports.MagmaSub.concat,\n    degree: function (_) { return 1; },\n    div: function (first, second) { return first / second; },\n    mod: function (first, second) { return first % second; }\n};\n","\"use strict\";\n/**\n * ```ts\n * interface Separated<E, A> {\n *    readonly left: E\n *    readonly right: A\n * }\n * ```\n *\n * Represents a result of separating a whole into two parts.\n *\n * @since 2.10.0\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.right = exports.left = exports.flap = exports.Functor = exports.Bifunctor = exports.URI = exports.bimap = exports.mapLeft = exports.map = exports.separated = void 0;\nvar function_1 = require(\"./function\");\nvar Functor_1 = require(\"./Functor\");\n// -------------------------------------------------------------------------------------\n// constructors\n// -------------------------------------------------------------------------------------\n/**\n * @category constructors\n * @since 2.10.0\n */\nvar separated = function (left, right) { return ({ left: left, right: right }); };\nexports.separated = separated;\nvar _map = function (fa, f) { return (0, function_1.pipe)(fa, (0, exports.map)(f)); };\nvar _mapLeft = function (fa, f) { return (0, function_1.pipe)(fa, (0, exports.mapLeft)(f)); };\nvar _bimap = function (fa, g, f) { return (0, function_1.pipe)(fa, (0, exports.bimap)(g, f)); };\n/**\n * `map` can be used to turn functions `(a: A) => B` into functions `(fa: F<A>) => F<B>` whose argument and return types\n * use the type constructor `F` to represent some computational context.\n *\n * @category mapping\n * @since 2.10.0\n */\nvar map = function (f) {\n    return function (fa) {\n        return (0, exports.separated)((0, exports.left)(fa), f((0, exports.right)(fa)));\n    };\n};\nexports.map = map;\n/**\n * Map a function over the first type argument of a bifunctor.\n *\n * @category error handling\n * @since 2.10.0\n */\nvar mapLeft = function (f) {\n    return function (fa) {\n        return (0, exports.separated)(f((0, exports.left)(fa)), (0, exports.right)(fa));\n    };\n};\nexports.mapLeft = mapLeft;\n/**\n * Map a pair of functions over the two type arguments of the bifunctor.\n *\n * @category mapping\n * @since 2.10.0\n */\nvar bimap = function (f, g) {\n    return function (fa) {\n        return (0, exports.separated)(f((0, exports.left)(fa)), g((0, exports.right)(fa)));\n    };\n};\nexports.bimap = bimap;\n/**\n * @category type lambdas\n * @since 2.10.0\n */\nexports.URI = 'Separated';\n/**\n * @category instances\n * @since 2.10.0\n */\nexports.Bifunctor = {\n    URI: exports.URI,\n    mapLeft: _mapLeft,\n    bimap: _bimap\n};\n/**\n * @category instances\n * @since 2.10.0\n */\nexports.Functor = {\n    URI: exports.URI,\n    map: _map\n};\n/**\n * @category mapping\n * @since 2.10.0\n */\nexports.flap = (0, Functor_1.flap)(exports.Functor);\n// -------------------------------------------------------------------------------------\n// utils\n// -------------------------------------------------------------------------------------\n/**\n * @since 2.10.0\n */\nvar left = function (s) { return s.left; };\nexports.left = left;\n/**\n * @since 2.10.0\n */\nvar right = function (s) { return s.right; };\nexports.right = right;\n","\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.filterE = exports.witherDefault = exports.wiltDefault = void 0;\nvar _ = __importStar(require(\"./internal\"));\nfunction wiltDefault(T, C) {\n    return function (F) {\n        var traverseF = T.traverse(F);\n        return function (wa, f) { return F.map(traverseF(wa, f), C.separate); };\n    };\n}\nexports.wiltDefault = wiltDefault;\nfunction witherDefault(T, C) {\n    return function (F) {\n        var traverseF = T.traverse(F);\n        return function (wa, f) { return F.map(traverseF(wa, f), C.compact); };\n    };\n}\nexports.witherDefault = witherDefault;\nfunction filterE(W) {\n    return function (F) {\n        var witherF = W.wither(F);\n        return function (predicate) { return function (ga) { return witherF(ga, function (a) { return F.map(predicate(a), function (b) { return (b ? _.some(a) : _.none); }); }); }; };\n    };\n}\nexports.filterE = filterE;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.guard = void 0;\nfunction guard(F, P) {\n    return function (b) { return (b ? P.of(undefined) : F.zero()); };\n}\nexports.guard = guard;\n","\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nvar __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {\n    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\n        if (ar || !(i in from)) {\n            if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n            ar[i] = from[i];\n        }\n    }\n    return to.concat(ar || Array.prototype.slice.call(from));\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.sort = exports.lefts = exports.rights = exports.reverse = exports.modifyAt = exports.deleteAt = exports.updateAt = exports.insertAt = exports.findLastIndex = exports.findLastMap = exports.findLast = exports.findFirstMap = exports.findFirst = exports.findIndex = exports.dropLeftWhile = exports.dropRight = exports.dropLeft = exports.spanLeft = exports.takeLeftWhile = exports.takeRight = exports.takeLeft = exports.init = exports.tail = exports.last = exports.head = exports.lookup = exports.isOutOfBound = exports.size = exports.scanRight = exports.scanLeft = exports.chainWithIndex = exports.foldRight = exports.matchRight = exports.matchRightW = exports.foldLeft = exports.matchLeft = exports.matchLeftW = exports.match = exports.matchW = exports.fromEither = exports.fromOption = exports.fromPredicate = exports.replicate = exports.makeBy = exports.appendW = exports.append = exports.prependW = exports.prepend = exports.isNonEmpty = exports.isEmpty = void 0;\nexports.sequence = exports.traverse = exports.reduceRightWithIndex = exports.reduceRight = exports.reduceWithIndex = exports.foldMap = exports.reduce = exports.foldMapWithIndex = exports.duplicate = exports.extend = exports.filterWithIndex = exports.partitionMapWithIndex = exports.partitionMap = exports.partitionWithIndex = exports.partition = exports.compact = exports.filterMap = exports.filterMapWithIndex = exports.filter = exports.separate = exports.mapWithIndex = exports.map = exports.flatten = exports.flatMap = exports.ap = exports.alt = exports.altW = exports.zero = exports.of = exports._chainRecBreadthFirst = exports._chainRecDepthFirst = exports.difference = exports.intersection = exports.union = exports.concat = exports.concatW = exports.comprehension = exports.fromOptionK = exports.chunksOf = exports.splitAt = exports.chop = exports.sortBy = exports.uniq = exports.elem = exports.rotate = exports.intersperse = exports.prependAll = exports.unzip = exports.zip = exports.zipWith = void 0;\nexports.toArray = exports.unsafeDeleteAt = exports.unsafeUpdateAt = exports.unsafeInsertAt = exports.fromEitherK = exports.FromEither = exports.filterE = exports.Witherable = exports.ChainRecBreadthFirst = exports.chainRecBreadthFirst = exports.ChainRecDepthFirst = exports.chainRecDepthFirst = exports.TraversableWithIndex = exports.Traversable = exports.FoldableWithIndex = exports.Foldable = exports.FilterableWithIndex = exports.Filterable = exports.Compactable = exports.Extend = exports.Alternative = exports.guard = exports.Zero = exports.Alt = exports.Unfoldable = exports.chainFirst = exports.Monad = exports.Chain = exports.Applicative = exports.apSecond = exports.apFirst = exports.Apply = exports.FunctorWithIndex = exports.Pointed = exports.flap = exports.Functor = exports.getDifferenceMagma = exports.getIntersectionSemigroup = exports.getUnionMonoid = exports.getUnionSemigroup = exports.getOrd = exports.getEq = exports.getMonoid = exports.getSemigroup = exports.getShow = exports.URI = exports.unfold = exports.wilt = exports.wither = exports.traverseWithIndex = void 0;\nexports.readonlyArray = exports.prependToAll = exports.snoc = exports.cons = exports.range = exports.chain = exports.apS = exports.bind = exports.let = exports.bindTo = exports.Do = exports.intercalate = exports.exists = exports.some = exports.every = exports.empty = exports.fromArray = void 0;\nvar Apply_1 = require(\"./Apply\");\nvar Chain_1 = require(\"./Chain\");\nvar Eq_1 = require(\"./Eq\");\nvar FromEither_1 = require(\"./FromEither\");\nvar function_1 = require(\"./function\");\nvar Functor_1 = require(\"./Functor\");\nvar _ = __importStar(require(\"./internal\"));\nvar N = __importStar(require(\"./number\"));\nvar Ord_1 = require(\"./Ord\");\nvar RNEA = __importStar(require(\"./ReadonlyNonEmptyArray\"));\nvar Separated_1 = require(\"./Separated\");\nvar Witherable_1 = require(\"./Witherable\");\nvar Zero_1 = require(\"./Zero\");\n// -------------------------------------------------------------------------------------\n// refinements\n// -------------------------------------------------------------------------------------\n/**\n * Test whether a `ReadonlyArray` is empty.\n *\n * @example\n * import { isEmpty } from 'fp-ts/ReadonlyArray'\n *\n * assert.strictEqual(isEmpty([]), true)\n *\n * @category refinements\n * @since 2.5.0\n */\nvar isEmpty = function (as) { return as.length === 0; };\nexports.isEmpty = isEmpty;\n/**\n * Test whether a `ReadonlyArray` is non empty.\n *\n * @category refinements\n * @since 2.5.0\n */\nexports.isNonEmpty = RNEA.isNonEmpty;\n// -------------------------------------------------------------------------------------\n// constructors\n// -------------------------------------------------------------------------------------\n/**\n * Prepend an element to the front of a `ReadonlyArray`, creating a new `ReadonlyNonEmptyArray`.\n *\n * @example\n * import { prepend } from 'fp-ts/ReadonlyArray'\n * import { pipe } from 'fp-ts/function'\n *\n * assert.deepStrictEqual(pipe([2, 3, 4], prepend(1)), [1, 2, 3, 4])\n *\n * @since 2.10.0\n */\nexports.prepend = RNEA.prepend;\n/**\n * Less strict version of [`prepend`](#prepend).\n *\n * @since 2.11.0\n */\nexports.prependW = RNEA.prependW;\n/**\n * Append an element to the end of a `ReadonlyArray`, creating a new `ReadonlyNonEmptyArray`.\n *\n * @example\n * import { append } from 'fp-ts/ReadonlyArray'\n * import { pipe } from 'fp-ts/function'\n *\n * assert.deepStrictEqual(pipe([1, 2, 3], append(4)), [1, 2, 3, 4])\n *\n * @since 2.10.0\n */\nexports.append = RNEA.append;\n/**\n * Less strict version of [`append`](#append).\n *\n * @since 2.11.0\n */\nexports.appendW = RNEA.appendW;\n/**\n * Return a `ReadonlyArray` of length `n` with element `i` initialized with `f(i)`.\n *\n * **Note**. `n` is normalized to a non negative integer.\n *\n * @example\n * import { makeBy } from 'fp-ts/ReadonlyArray'\n *\n * const double = (n: number): number => n * 2\n * assert.deepStrictEqual(makeBy(5, double), [0, 2, 4, 6, 8])\n *\n * @category constructors\n * @since 2.5.0\n */\nvar makeBy = function (n, f) { return (n <= 0 ? exports.empty : RNEA.makeBy(f)(n)); };\nexports.makeBy = makeBy;\n/**\n * Create a `ReadonlyArray` containing a value repeated the specified number of times.\n *\n * **Note**. `n` is normalized to a non negative integer.\n *\n * @example\n * import { replicate } from 'fp-ts/ReadonlyArray'\n *\n * assert.deepStrictEqual(replicate(3, 'a'), ['a', 'a', 'a'])\n *\n * @category constructors\n * @since 2.5.0\n */\nvar replicate = function (n, a) { return (0, exports.makeBy)(n, function () { return a; }); };\nexports.replicate = replicate;\nfunction fromPredicate(predicate) {\n    return function (a) { return (predicate(a) ? [a] : exports.empty); };\n}\nexports.fromPredicate = fromPredicate;\n// -------------------------------------------------------------------------------------\n// conversions\n// -------------------------------------------------------------------------------------\n/**\n * @category conversions\n * @since 2.11.0\n */\nvar fromOption = function (ma) { return (_.isNone(ma) ? exports.empty : [ma.value]); };\nexports.fromOption = fromOption;\n/**\n * Transforms an `Either` to a `ReadonlyArray`.\n *\n * @category conversions\n * @since 2.11.0\n */\nvar fromEither = function (e) { return (_.isLeft(e) ? exports.empty : [e.right]); };\nexports.fromEither = fromEither;\n/**\n * Less strict version of [`match`](#match).\n *\n * The `W` suffix (short for **W**idening) means that the handler return types will be merged.\n *\n * @category pattern matching\n * @since 2.11.0\n */\nvar matchW = function (onEmpty, onNonEmpty) {\n    return function (as) {\n        return (0, exports.isNonEmpty)(as) ? onNonEmpty(as) : onEmpty();\n    };\n};\nexports.matchW = matchW;\n/**\n * @category pattern matching\n * @since 2.11.0\n */\nexports.match = exports.matchW;\n/**\n * Less strict version of [`matchLeft`](#matchleft).\n *\n * @category pattern matching\n * @since 2.11.0\n */\nvar matchLeftW = function (onEmpty, onNonEmpty) {\n    return function (as) {\n        return (0, exports.isNonEmpty)(as) ? onNonEmpty(RNEA.head(as), RNEA.tail(as)) : onEmpty();\n    };\n};\nexports.matchLeftW = matchLeftW;\n/**\n * Break a `ReadonlyArray` into its first element and remaining elements.\n *\n * @example\n * import { matchLeft } from 'fp-ts/ReadonlyArray'\n *\n * const len: <A>(as: ReadonlyArray<A>) => number = matchLeft(() => 0, (_, tail) => 1 + len(tail))\n * assert.strictEqual(len([1, 2, 3]), 3)\n *\n * @category pattern matching\n * @since 2.10.0\n */\nexports.matchLeft = exports.matchLeftW;\n/**\n * Alias of [`matchLeft`](#matchleft).\n *\n * @category pattern matching\n * @since 2.5.0\n */\nexports.foldLeft = exports.matchLeft;\n/**\n * Less strict version of [`matchRight`](#matchright).\n *\n * @category pattern matching\n * @since 2.11.0\n */\nvar matchRightW = function (onEmpty, onNonEmpty) {\n    return function (as) {\n        return (0, exports.isNonEmpty)(as) ? onNonEmpty(RNEA.init(as), RNEA.last(as)) : onEmpty();\n    };\n};\nexports.matchRightW = matchRightW;\n/**\n * Break a `ReadonlyArray` into its initial elements and the last element.\n *\n * @category pattern matching\n * @since 2.10.0\n */\nexports.matchRight = exports.matchRightW;\n/**\n * Alias of [`matchRight`](#matchright).\n *\n * @category pattern matching\n * @since 2.5.0\n */\nexports.foldRight = exports.matchRight;\n// -------------------------------------------------------------------------------------\n// combinators\n// -------------------------------------------------------------------------------------\n/**\n * @category sequencing\n * @since 2.7.0\n */\nvar chainWithIndex = function (f) {\n    return function (as) {\n        if ((0, exports.isEmpty)(as)) {\n            return exports.empty;\n        }\n        var out = [];\n        for (var i = 0; i < as.length; i++) {\n            out.push.apply(out, f(i, as[i]));\n        }\n        return out;\n    };\n};\nexports.chainWithIndex = chainWithIndex;\n/**\n * Same as `reduce` but it carries over the intermediate steps.\n *\n * @example\n * import { scanLeft } from 'fp-ts/ReadonlyArray'\n *\n * assert.deepStrictEqual(scanLeft(10, (b, a: number) => b - a)([1, 2, 3]), [10, 9, 7, 4])\n *\n * @since 2.5.0\n */\nvar scanLeft = function (b, f) {\n    return function (as) {\n        var len = as.length;\n        var out = new Array(len + 1);\n        out[0] = b;\n        for (var i = 0; i < len; i++) {\n            out[i + 1] = f(out[i], as[i]);\n        }\n        return out;\n    };\n};\nexports.scanLeft = scanLeft;\n/**\n * Fold an array from the right, keeping all intermediate results instead of only the final result\n *\n * @example\n * import { scanRight } from 'fp-ts/ReadonlyArray'\n *\n * assert.deepStrictEqual(scanRight(10, (a: number, b) => b - a)([1, 2, 3]), [4, 5, 7, 10])\n *\n * @since 2.5.0\n */\nvar scanRight = function (b, f) {\n    return function (as) {\n        var len = as.length;\n        var out = new Array(len + 1);\n        out[len] = b;\n        for (var i = len - 1; i >= 0; i--) {\n            out[i] = f(as[i], out[i + 1]);\n        }\n        return out;\n    };\n};\nexports.scanRight = scanRight;\n/**\n * Calculate the number of elements in a `ReadonlyArray`.\n *\n * @since 2.10.0\n */\nvar size = function (as) { return as.length; };\nexports.size = size;\n/**\n * Test whether an array contains a particular index\n *\n * @since 2.5.0\n */\nexports.isOutOfBound = RNEA.isOutOfBound;\nfunction lookup(i, as) {\n    return as === undefined ? function (as) { return lookup(i, as); } : (0, exports.isOutOfBound)(i, as) ? _.none : _.some(as[i]);\n}\nexports.lookup = lookup;\n/**\n * Get the first element in an array, or `None` if the array is empty\n *\n * @example\n * import { head } from 'fp-ts/ReadonlyArray'\n * import { some, none } from 'fp-ts/Option'\n *\n * assert.deepStrictEqual(head([1, 2, 3]), some(1))\n * assert.deepStrictEqual(head([]), none)\n *\n * @since 2.5.0\n */\nvar head = function (as) { return ((0, exports.isNonEmpty)(as) ? _.some(RNEA.head(as)) : _.none); };\nexports.head = head;\n/**\n * Get the last element in an array, or `None` if the array is empty\n *\n * @example\n * import { last } from 'fp-ts/ReadonlyArray'\n * import { some, none } from 'fp-ts/Option'\n *\n * assert.deepStrictEqual(last([1, 2, 3]), some(3))\n * assert.deepStrictEqual(last([]), none)\n *\n * @since 2.5.0\n */\nvar last = function (as) { return ((0, exports.isNonEmpty)(as) ? _.some(RNEA.last(as)) : _.none); };\nexports.last = last;\n/**\n * Get all but the first element of an array, creating a new array, or `None` if the array is empty\n *\n * @example\n * import { tail } from 'fp-ts/ReadonlyArray'\n * import { some, none } from 'fp-ts/Option'\n *\n * assert.deepStrictEqual(tail([1, 2, 3]), some([2, 3]))\n * assert.deepStrictEqual(tail([]), none)\n *\n * @since 2.5.0\n */\nvar tail = function (as) {\n    return (0, exports.isNonEmpty)(as) ? _.some(RNEA.tail(as)) : _.none;\n};\nexports.tail = tail;\n/**\n * Get all but the last element of an array, creating a new array, or `None` if the array is empty\n *\n * @example\n * import { init } from 'fp-ts/ReadonlyArray'\n * import { some, none } from 'fp-ts/Option'\n *\n * assert.deepStrictEqual(init([1, 2, 3]), some([1, 2]))\n * assert.deepStrictEqual(init([]), none)\n *\n * @since 2.5.0\n */\nvar init = function (as) {\n    return (0, exports.isNonEmpty)(as) ? _.some(RNEA.init(as)) : _.none;\n};\nexports.init = init;\n/**\n * Keep only a max number of elements from the start of an `ReadonlyArray`, creating a new `ReadonlyArray`.\n *\n * **Note**. `n` is normalized to a non negative integer.\n *\n * @example\n * import * as RA from 'fp-ts/ReadonlyArray'\n * import { pipe } from 'fp-ts/function'\n *\n * const input: ReadonlyArray<number> = [1, 2, 3]\n * assert.deepStrictEqual(pipe(input, RA.takeLeft(2)), [1, 2])\n *\n * // out of bounds\n * assert.strictEqual(pipe(input, RA.takeLeft(4)), input)\n * assert.strictEqual(pipe(input, RA.takeLeft(-1)), input)\n *\n * @since 2.5.0\n */\nvar takeLeft = function (n) {\n    return function (as) {\n        return (0, exports.isOutOfBound)(n, as) ? as : n === 0 ? exports.empty : as.slice(0, n);\n    };\n};\nexports.takeLeft = takeLeft;\n/**\n * Keep only a max number of elements from the end of an `ReadonlyArray`, creating a new `ReadonlyArray`.\n *\n * **Note**. `n` is normalized to a non negative integer.\n *\n * @example\n * import * as RA from 'fp-ts/ReadonlyArray'\n * import { pipe } from 'fp-ts/function'\n *\n * const input: ReadonlyArray<number> = [1, 2, 3]\n * assert.deepStrictEqual(pipe(input, RA.takeRight(2)), [2, 3])\n *\n * // out of bounds\n * assert.strictEqual(pipe(input, RA.takeRight(4)), input)\n * assert.strictEqual(pipe(input, RA.takeRight(-1)), input)\n *\n * @since 2.5.0\n */\nvar takeRight = function (n) {\n    return function (as) {\n        return (0, exports.isOutOfBound)(n, as) ? as : n === 0 ? exports.empty : as.slice(-n);\n    };\n};\nexports.takeRight = takeRight;\nfunction takeLeftWhile(predicate) {\n    return function (as) {\n        var out = [];\n        for (var _i = 0, as_1 = as; _i < as_1.length; _i++) {\n            var a = as_1[_i];\n            if (!predicate(a)) {\n                break;\n            }\n            out.push(a);\n        }\n        var len = out.length;\n        return len === as.length ? as : len === 0 ? exports.empty : out;\n    };\n}\nexports.takeLeftWhile = takeLeftWhile;\nvar spanLeftIndex = function (as, predicate) {\n    var l = as.length;\n    var i = 0;\n    for (; i < l; i++) {\n        if (!predicate(as[i])) {\n            break;\n        }\n    }\n    return i;\n};\nfunction spanLeft(predicate) {\n    return function (as) {\n        var _a = (0, exports.splitAt)(spanLeftIndex(as, predicate))(as), init = _a[0], rest = _a[1];\n        return { init: init, rest: rest };\n    };\n}\nexports.spanLeft = spanLeft;\n/**\n * Drop a max number of elements from the start of an `ReadonlyArray`, creating a new `ReadonlyArray`.\n *\n * **Note**. `n` is normalized to a non negative integer.\n *\n * @example\n * import * as RA from 'fp-ts/ReadonlyArray'\n * import { pipe } from 'fp-ts/function'\n *\n * const input: ReadonlyArray<number> = [1, 2, 3]\n * assert.deepStrictEqual(pipe(input, RA.dropLeft(2)), [3])\n * assert.strictEqual(pipe(input, RA.dropLeft(0)), input)\n * assert.strictEqual(pipe(input, RA.dropLeft(-1)), input)\n *\n * @since 2.5.0\n */\nvar dropLeft = function (n) {\n    return function (as) {\n        return n <= 0 || (0, exports.isEmpty)(as) ? as : n >= as.length ? exports.empty : as.slice(n, as.length);\n    };\n};\nexports.dropLeft = dropLeft;\n/**\n * Drop a max number of elements from the end of an `ReadonlyArray`, creating a new `ReadonlyArray`.\n *\n * **Note**. `n` is normalized to a non negative integer.\n *\n * @example\n * import * as RA from 'fp-ts/ReadonlyArray'\n * import { pipe } from 'fp-ts/function'\n *\n * const input: ReadonlyArray<number> = [1, 2, 3]\n * assert.deepStrictEqual(pipe(input, RA.dropRight(2)), [1])\n * assert.strictEqual(pipe(input, RA.dropRight(0)), input)\n * assert.strictEqual(pipe(input, RA.dropRight(-1)), input)\n *\n * @since 2.5.0\n */\nvar dropRight = function (n) {\n    return function (as) {\n        return n <= 0 || (0, exports.isEmpty)(as) ? as : n >= as.length ? exports.empty : as.slice(0, as.length - n);\n    };\n};\nexports.dropRight = dropRight;\nfunction dropLeftWhile(predicate) {\n    return function (as) {\n        var i = spanLeftIndex(as, predicate);\n        return i === 0 ? as : i === as.length ? exports.empty : as.slice(i);\n    };\n}\nexports.dropLeftWhile = dropLeftWhile;\n/**\n * Find the first index for which a predicate holds\n *\n * @example\n * import { findIndex } from 'fp-ts/ReadonlyArray'\n * import { some, none } from 'fp-ts/Option'\n *\n * assert.deepStrictEqual(findIndex((n: number) => n === 2)([1, 2, 3]), some(1))\n * assert.deepStrictEqual(findIndex((n: number) => n === 2)([]), none)\n *\n * @since 2.5.0\n */\nvar findIndex = function (predicate) {\n    return function (as) {\n        for (var i = 0; i < as.length; i++) {\n            if (predicate(as[i])) {\n                return _.some(i);\n            }\n        }\n        return _.none;\n    };\n};\nexports.findIndex = findIndex;\nfunction findFirst(predicate) {\n    return function (as) {\n        for (var i = 0; i < as.length; i++) {\n            if (predicate(as[i])) {\n                return _.some(as[i]);\n            }\n        }\n        return _.none;\n    };\n}\nexports.findFirst = findFirst;\n/**\n * Find the first element returned by an option based selector function\n *\n * @example\n * import { findFirstMap } from 'fp-ts/ReadonlyArray'\n * import { some, none } from 'fp-ts/Option'\n *\n * interface Person {\n *   readonly name: string\n *   readonly age?: number\n * }\n *\n * const persons: ReadonlyArray<Person> = [{ name: 'John' }, { name: 'Mary', age: 45 }, { name: 'Joey', age: 28 }]\n *\n * // returns the name of the first person that has an age\n * assert.deepStrictEqual(findFirstMap((p: Person) => (p.age === undefined ? none : some(p.name)))(persons), some('Mary'))\n *\n * @since 2.5.0\n */\nvar findFirstMap = function (f) {\n    return function (as) {\n        for (var i = 0; i < as.length; i++) {\n            var out = f(as[i]);\n            if (_.isSome(out)) {\n                return out;\n            }\n        }\n        return _.none;\n    };\n};\nexports.findFirstMap = findFirstMap;\nfunction findLast(predicate) {\n    return function (as) {\n        for (var i = as.length - 1; i >= 0; i--) {\n            if (predicate(as[i])) {\n                return _.some(as[i]);\n            }\n        }\n        return _.none;\n    };\n}\nexports.findLast = findLast;\n/**\n * Find the last element returned by an option based selector function\n *\n * @example\n * import { findLastMap } from 'fp-ts/ReadonlyArray'\n * import { some, none } from 'fp-ts/Option'\n *\n * interface Person {\n *   readonly name: string\n *   readonly age?: number\n * }\n *\n * const persons: ReadonlyArray<Person> = [{ name: 'John' }, { name: 'Mary', age: 45 }, { name: 'Joey', age: 28 }]\n *\n * // returns the name of the last person that has an age\n * assert.deepStrictEqual(findLastMap((p: Person) => (p.age === undefined ? none : some(p.name)))(persons), some('Joey'))\n *\n * @since 2.5.0\n */\nvar findLastMap = function (f) {\n    return function (as) {\n        for (var i = as.length - 1; i >= 0; i--) {\n            var out = f(as[i]);\n            if (_.isSome(out)) {\n                return out;\n            }\n        }\n        return _.none;\n    };\n};\nexports.findLastMap = findLastMap;\n/**\n * Returns the index of the last element of the list which matches the predicate\n *\n * @example\n * import { findLastIndex } from 'fp-ts/ReadonlyArray'\n * import { some, none } from 'fp-ts/Option'\n *\n * interface X {\n *   readonly a: number\n *   readonly b: number\n * }\n * const xs: ReadonlyArray<X> = [{ a: 1, b: 0 }, { a: 1, b: 1 }]\n * assert.deepStrictEqual(findLastIndex((x: { readonly a: number }) => x.a === 1)(xs), some(1))\n * assert.deepStrictEqual(findLastIndex((x: { readonly a: number }) => x.a === 4)(xs), none)\n *\n *\n * @since 2.5.0\n */\nvar findLastIndex = function (predicate) {\n    return function (as) {\n        for (var i = as.length - 1; i >= 0; i--) {\n            if (predicate(as[i])) {\n                return _.some(i);\n            }\n        }\n        return _.none;\n    };\n};\nexports.findLastIndex = findLastIndex;\n/**\n * Insert an element at the specified index, creating a new array, or returning `None` if the index is out of bounds\n *\n * @example\n * import { insertAt } from 'fp-ts/ReadonlyArray'\n * import { some } from 'fp-ts/Option'\n *\n * assert.deepStrictEqual(insertAt(2, 5)([1, 2, 3, 4]), some([1, 2, 5, 3, 4]))\n *\n * @since 2.5.0\n */\nvar insertAt = function (i, a) {\n    return function (as) {\n        return i < 0 || i > as.length ? _.none : _.some(RNEA.unsafeInsertAt(i, a, as));\n    };\n};\nexports.insertAt = insertAt;\n/**\n * Change the element at the specified index, creating a new array, or returning `None` if the index is out of bounds\n *\n * @example\n * import { updateAt } from 'fp-ts/ReadonlyArray'\n * import { some, none } from 'fp-ts/Option'\n *\n * assert.deepStrictEqual(updateAt(1, 1)([1, 2, 3]), some([1, 1, 3]))\n * assert.deepStrictEqual(updateAt(1, 1)([]), none)\n *\n * @since 2.5.0\n */\nvar updateAt = function (i, a) {\n    return (0, exports.modifyAt)(i, function () { return a; });\n};\nexports.updateAt = updateAt;\n/**\n * Delete the element at the specified index, creating a new array, or returning `None` if the index is out of bounds\n *\n * @example\n * import { deleteAt } from 'fp-ts/ReadonlyArray'\n * import { some, none } from 'fp-ts/Option'\n *\n * assert.deepStrictEqual(deleteAt(0)([1, 2, 3]), some([2, 3]))\n * assert.deepStrictEqual(deleteAt(1)([]), none)\n *\n * @since 2.5.0\n */\nvar deleteAt = function (i) {\n    return function (as) {\n        return (0, exports.isOutOfBound)(i, as) ? _.none : _.some((0, exports.unsafeDeleteAt)(i, as));\n    };\n};\nexports.deleteAt = deleteAt;\n/**\n * Apply a function to the element at the specified index, creating a new array, or returning `None` if the index is out\n * of bounds\n *\n * @example\n * import { modifyAt } from 'fp-ts/ReadonlyArray'\n * import { some, none } from 'fp-ts/Option'\n *\n * const double = (x: number): number => x * 2\n * assert.deepStrictEqual(modifyAt(1, double)([1, 2, 3]), some([1, 4, 3]))\n * assert.deepStrictEqual(modifyAt(1, double)([]), none)\n *\n * @since 2.5.0\n */\nvar modifyAt = function (i, f) {\n    return function (as) {\n        return (0, exports.isOutOfBound)(i, as) ? _.none : _.some((0, exports.unsafeUpdateAt)(i, f(as[i]), as));\n    };\n};\nexports.modifyAt = modifyAt;\n/**\n * Reverse an array, creating a new array\n *\n * @example\n * import { reverse } from 'fp-ts/ReadonlyArray'\n *\n * assert.deepStrictEqual(reverse([1, 2, 3]), [3, 2, 1])\n *\n * @since 2.5.0\n */\nvar reverse = function (as) { return (as.length <= 1 ? as : as.slice().reverse()); };\nexports.reverse = reverse;\n/**\n * Extracts from an array of `Either` all the `Right` elements. All the `Right` elements are extracted in order\n *\n * @example\n * import { rights } from 'fp-ts/ReadonlyArray'\n * import { right, left } from 'fp-ts/Either'\n *\n * assert.deepStrictEqual(rights([right(1), left('foo'), right(2)]), [1, 2])\n *\n * @since 2.5.0\n */\nvar rights = function (as) {\n    var r = [];\n    for (var i = 0; i < as.length; i++) {\n        var a = as[i];\n        if (a._tag === 'Right') {\n            r.push(a.right);\n        }\n    }\n    return r;\n};\nexports.rights = rights;\n/**\n * Extracts from an array of `Either` all the `Left` elements. All the `Left` elements are extracted in order\n *\n * @example\n * import { lefts } from 'fp-ts/ReadonlyArray'\n * import { left, right } from 'fp-ts/Either'\n *\n * assert.deepStrictEqual(lefts([right(1), left('foo'), right(2)]), ['foo'])\n *\n * @since 2.5.0\n */\nvar lefts = function (as) {\n    var r = [];\n    for (var i = 0; i < as.length; i++) {\n        var a = as[i];\n        if (a._tag === 'Left') {\n            r.push(a.left);\n        }\n    }\n    return r;\n};\nexports.lefts = lefts;\n/**\n * Sort the elements of an array in increasing order, creating a new array\n *\n * @example\n * import { sort } from 'fp-ts/ReadonlyArray'\n * import * as N from 'fp-ts/number'\n *\n * assert.deepStrictEqual(sort(N.Ord)([3, 2, 1]), [1, 2, 3])\n *\n * @since 2.5.0\n */\nvar sort = function (O) {\n    return function (as) {\n        return as.length <= 1 ? as : as.slice().sort(O.compare);\n    };\n};\nexports.sort = sort;\n// TODO: curry and make data-last in v3\n/**\n * Apply a function to pairs of elements at the same index in two arrays, collecting the results in a new array. If one\n * input array is short, excess elements of the longer array are discarded.\n *\n * @example\n * import { zipWith } from 'fp-ts/ReadonlyArray'\n *\n * assert.deepStrictEqual(zipWith([1, 2, 3], ['a', 'b', 'c', 'd'], (n, s) => s + n), ['a1', 'b2', 'c3'])\n *\n * @since 2.5.0\n */\nvar zipWith = function (fa, fb, f) {\n    var fc = [];\n    var len = Math.min(fa.length, fb.length);\n    for (var i = 0; i < len; i++) {\n        fc[i] = f(fa[i], fb[i]);\n    }\n    return fc;\n};\nexports.zipWith = zipWith;\nfunction zip(as, bs) {\n    if (bs === undefined) {\n        return function (bs) { return zip(bs, as); };\n    }\n    return (0, exports.zipWith)(as, bs, function (a, b) { return [a, b]; });\n}\nexports.zip = zip;\n/**\n * The function is reverse of `zip`. Takes an array of pairs and return two corresponding arrays\n *\n * @example\n * import { unzip } from 'fp-ts/ReadonlyArray'\n *\n * assert.deepStrictEqual(unzip([[1, 'a'], [2, 'b'], [3, 'c']]), [[1, 2, 3], ['a', 'b', 'c']])\n *\n * @since 2.5.0\n */\nvar unzip = function (as) {\n    var fa = [];\n    var fb = [];\n    for (var i = 0; i < as.length; i++) {\n        fa[i] = as[i][0];\n        fb[i] = as[i][1];\n    }\n    return [fa, fb];\n};\nexports.unzip = unzip;\n/**\n * Prepend an element to every member of an array\n *\n * @example\n * import { prependAll } from 'fp-ts/ReadonlyArray'\n *\n * assert.deepStrictEqual(prependAll(9)([1, 2, 3, 4]), [9, 1, 9, 2, 9, 3, 9, 4])\n *\n * @since 2.10.0\n */\nvar prependAll = function (middle) {\n    var f = RNEA.prependAll(middle);\n    return function (as) { return ((0, exports.isNonEmpty)(as) ? f(as) : as); };\n};\nexports.prependAll = prependAll;\n/**\n * Places an element in between members of an array\n *\n * @example\n * import { intersperse } from 'fp-ts/ReadonlyArray'\n *\n * assert.deepStrictEqual(intersperse(9)([1, 2, 3, 4]), [1, 9, 2, 9, 3, 9, 4])\n *\n * @since 2.9.0\n */\nvar intersperse = function (middle) {\n    var f = RNEA.intersperse(middle);\n    return function (as) { return ((0, exports.isNonEmpty)(as) ? f(as) : as); };\n};\nexports.intersperse = intersperse;\n/**\n * Rotate a `ReadonlyArray` by `n` steps.\n *\n * @example\n * import { rotate } from 'fp-ts/ReadonlyArray'\n *\n * assert.deepStrictEqual(rotate(2)([1, 2, 3, 4, 5]), [4, 5, 1, 2, 3])\n *\n * @since 2.5.0\n */\nvar rotate = function (n) {\n    var f = RNEA.rotate(n);\n    return function (as) { return ((0, exports.isNonEmpty)(as) ? f(as) : as); };\n};\nexports.rotate = rotate;\nfunction elem(E) {\n    return function (a, as) {\n        if (as === undefined) {\n            var elemE_1 = elem(E);\n            return function (as) { return elemE_1(a, as); };\n        }\n        var predicate = function (element) { return E.equals(element, a); };\n        var i = 0;\n        for (; i < as.length; i++) {\n            if (predicate(as[i])) {\n                return true;\n            }\n        }\n        return false;\n    };\n}\nexports.elem = elem;\n/**\n * Remove duplicates from an array, keeping the first occurrence of an element.\n *\n * @example\n * import { uniq } from 'fp-ts/ReadonlyArray'\n * import * as N from 'fp-ts/number'\n *\n * assert.deepStrictEqual(uniq(N.Eq)([1, 2, 1]), [1, 2])\n *\n * @since 2.5.0\n */\nvar uniq = function (E) {\n    var f = RNEA.uniq(E);\n    return function (as) { return ((0, exports.isNonEmpty)(as) ? f(as) : as); };\n};\nexports.uniq = uniq;\n/**\n * Sort the elements of an array in increasing order, where elements are compared using first `ords[0]`, then `ords[1]`,\n * etc...\n *\n * @example\n * import { sortBy } from 'fp-ts/ReadonlyArray'\n * import { contramap } from 'fp-ts/Ord'\n * import * as S from 'fp-ts/string'\n * import * as N from 'fp-ts/number'\n * import { pipe } from 'fp-ts/function'\n *\n * interface Person {\n *   readonly name: string\n *   readonly age: number\n * }\n * const byName = pipe(S.Ord, contramap((p: Person) => p.name))\n * const byAge = pipe(N.Ord, contramap((p: Person) => p.age))\n *\n * const sortByNameByAge = sortBy([byName, byAge])\n *\n * const persons = [{ name: 'a', age: 1 }, { name: 'b', age: 3 }, { name: 'c', age: 2 }, { name: 'b', age: 2 }]\n * assert.deepStrictEqual(sortByNameByAge(persons), [\n *   { name: 'a', age: 1 },\n *   { name: 'b', age: 2 },\n *   { name: 'b', age: 3 },\n *   { name: 'c', age: 2 }\n * ])\n *\n * @since 2.5.0\n */\nvar sortBy = function (ords) {\n    var f = RNEA.sortBy(ords);\n    return function (as) { return ((0, exports.isNonEmpty)(as) ? f(as) : as); };\n};\nexports.sortBy = sortBy;\n/**\n * A useful recursion pattern for processing a `ReadonlyArray` to produce a new `ReadonlyArray`, often used for \"chopping\" up the input\n * `ReadonlyArray`. Typically `chop` is called with some function that will consume an initial prefix of the `ReadonlyArray` and produce a\n * value and the tail of the `ReadonlyArray`.\n *\n * @example\n * import { Eq } from 'fp-ts/Eq'\n * import * as RA from 'fp-ts/ReadonlyArray'\n * import * as N from 'fp-ts/number'\n * import { pipe } from 'fp-ts/function'\n *\n * const group = <A>(S: Eq<A>): ((as: ReadonlyArray<A>) => ReadonlyArray<ReadonlyArray<A>>) => {\n *   return RA.chop(as => {\n *     const { init, rest } = pipe(as, RA.spanLeft((a: A) => S.equals(a, as[0])))\n *     return [init, rest]\n *   })\n * }\n * assert.deepStrictEqual(group(N.Eq)([1, 1, 2, 3, 3, 4]), [[1, 1], [2], [3, 3], [4]])\n *\n * @since 2.5.0\n */\nvar chop = function (f) {\n    var g = RNEA.chop(f);\n    return function (as) { return ((0, exports.isNonEmpty)(as) ? g(as) : exports.empty); };\n};\nexports.chop = chop;\n/**\n * Splits a `ReadonlyArray` into two pieces, the first piece has max `n` elements.\n *\n * @example\n * import { splitAt } from 'fp-ts/ReadonlyArray'\n *\n * assert.deepStrictEqual(splitAt(2)([1, 2, 3, 4, 5]), [[1, 2], [3, 4, 5]])\n *\n * @since 2.5.0\n */\nvar splitAt = function (n) {\n    return function (as) {\n        return n >= 1 && (0, exports.isNonEmpty)(as) ? RNEA.splitAt(n)(as) : (0, exports.isEmpty)(as) ? [as, exports.empty] : [exports.empty, as];\n    };\n};\nexports.splitAt = splitAt;\n/**\n * Splits a `ReadonlyArray` into length-`n` pieces. The last piece will be shorter if `n` does not evenly divide the length of\n * the `ReadonlyArray`. Note that `chunksOf(n)([])` is `[]`, not `[[]]`. This is intentional, and is consistent with a recursive\n * definition of `chunksOf`; it satisfies the property that:\n *\n * ```ts\n * chunksOf(n)(xs).concat(chunksOf(n)(ys)) == chunksOf(n)(xs.concat(ys)))\n * ```\n *\n * whenever `n` evenly divides the length of `as`.\n *\n * @example\n * import { chunksOf } from 'fp-ts/ReadonlyArray'\n *\n * assert.deepStrictEqual(chunksOf(2)([1, 2, 3, 4, 5]), [[1, 2], [3, 4], [5]])\n *\n * @since 2.5.0\n */\nvar chunksOf = function (n) {\n    var f = RNEA.chunksOf(n);\n    return function (as) { return ((0, exports.isNonEmpty)(as) ? f(as) : exports.empty); };\n};\nexports.chunksOf = chunksOf;\n/**\n * @category lifting\n * @since 2.11.0\n */\nvar fromOptionK = function (f) {\n    return function () {\n        var a = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            a[_i] = arguments[_i];\n        }\n        return (0, exports.fromOption)(f.apply(void 0, a));\n    };\n};\nexports.fromOptionK = fromOptionK;\nfunction comprehension(input, f, g) {\n    if (g === void 0) { g = function () { return true; }; }\n    var go = function (scope, input) {\n        return (0, exports.isNonEmpty)(input)\n            ? (0, exports.flatMap)(RNEA.head(input), function (a) { return go((0, function_1.pipe)(scope, (0, exports.append)(a)), RNEA.tail(input)); })\n            : g.apply(void 0, scope) ? [f.apply(void 0, scope)]\n                : exports.empty;\n    };\n    return go(exports.empty, input);\n}\nexports.comprehension = comprehension;\n/**\n * @since 2.11.0\n */\nvar concatW = function (second) {\n    return function (first) {\n        return (0, exports.isEmpty)(first) ? second : (0, exports.isEmpty)(second) ? first : first.concat(second);\n    };\n};\nexports.concatW = concatW;\n/**\n * @since 2.11.0\n */\nexports.concat = exports.concatW;\nfunction union(E) {\n    var unionE = RNEA.union(E);\n    return function (first, second) {\n        if (second === undefined) {\n            var unionE_1 = union(E);\n            return function (second) { return unionE_1(second, first); };\n        }\n        return (0, exports.isNonEmpty)(first) && (0, exports.isNonEmpty)(second) ? unionE(second)(first) : (0, exports.isNonEmpty)(first) ? first : second;\n    };\n}\nexports.union = union;\nfunction intersection(E) {\n    var elemE = elem(E);\n    return function (xs, ys) {\n        if (ys === undefined) {\n            var intersectionE_1 = intersection(E);\n            return function (ys) { return intersectionE_1(ys, xs); };\n        }\n        return xs.filter(function (a) { return elemE(a, ys); });\n    };\n}\nexports.intersection = intersection;\nfunction difference(E) {\n    var elemE = elem(E);\n    return function (xs, ys) {\n        if (ys === undefined) {\n            var differenceE_1 = difference(E);\n            return function (ys) { return differenceE_1(ys, xs); };\n        }\n        return xs.filter(function (a) { return !elemE(a, ys); });\n    };\n}\nexports.difference = difference;\nvar _map = function (fa, f) { return (0, function_1.pipe)(fa, (0, exports.map)(f)); };\nvar _mapWithIndex = function (fa, f) { return (0, function_1.pipe)(fa, (0, exports.mapWithIndex)(f)); };\nvar _ap = function (fab, fa) { return (0, function_1.pipe)(fab, (0, exports.ap)(fa)); };\nvar _filter = function (fa, predicate) {\n    return (0, function_1.pipe)(fa, (0, exports.filter)(predicate));\n};\nvar _filterMap = function (fa, f) { return (0, function_1.pipe)(fa, (0, exports.filterMap)(f)); };\nvar _partition = function (fa, predicate) {\n    return (0, function_1.pipe)(fa, (0, exports.partition)(predicate));\n};\nvar _partitionMap = function (fa, f) { return (0, function_1.pipe)(fa, (0, exports.partitionMap)(f)); };\nvar _partitionWithIndex = function (fa, predicateWithIndex) { return (0, function_1.pipe)(fa, (0, exports.partitionWithIndex)(predicateWithIndex)); };\nvar _partitionMapWithIndex = function (fa, f) { return (0, function_1.pipe)(fa, (0, exports.partitionMapWithIndex)(f)); };\nvar _alt = function (fa, that) { return (0, function_1.pipe)(fa, (0, exports.alt)(that)); };\nvar _reduce = function (fa, b, f) { return (0, function_1.pipe)(fa, (0, exports.reduce)(b, f)); };\nvar _foldMap = function (M) {\n    var foldMapM = (0, exports.foldMap)(M);\n    return function (fa, f) { return (0, function_1.pipe)(fa, foldMapM(f)); };\n};\nvar _reduceRight = function (fa, b, f) { return (0, function_1.pipe)(fa, (0, exports.reduceRight)(b, f)); };\nvar _reduceWithIndex = function (fa, b, f) {\n    return (0, function_1.pipe)(fa, (0, exports.reduceWithIndex)(b, f));\n};\nvar _foldMapWithIndex = function (M) {\n    var foldMapWithIndexM = (0, exports.foldMapWithIndex)(M);\n    return function (fa, f) { return (0, function_1.pipe)(fa, foldMapWithIndexM(f)); };\n};\nvar _reduceRightWithIndex = function (fa, b, f) {\n    return (0, function_1.pipe)(fa, (0, exports.reduceRightWithIndex)(b, f));\n};\nvar _filterMapWithIndex = function (fa, f) { return (0, function_1.pipe)(fa, (0, exports.filterMapWithIndex)(f)); };\nvar _filterWithIndex = function (fa, predicateWithIndex) { return (0, function_1.pipe)(fa, (0, exports.filterWithIndex)(predicateWithIndex)); };\nvar _extend = function (fa, f) { return (0, function_1.pipe)(fa, (0, exports.extend)(f)); };\nvar _traverse = function (F) {\n    var traverseF = (0, exports.traverse)(F);\n    return function (ta, f) { return (0, function_1.pipe)(ta, traverseF(f)); };\n};\n/* istanbul ignore next */\nvar _traverseWithIndex = function (F) {\n    var traverseWithIndexF = (0, exports.traverseWithIndex)(F);\n    return function (ta, f) { return (0, function_1.pipe)(ta, traverseWithIndexF(f)); };\n};\n/** @internal */\nvar _chainRecDepthFirst = function (a, f) { return (0, function_1.pipe)(a, (0, exports.chainRecDepthFirst)(f)); };\nexports._chainRecDepthFirst = _chainRecDepthFirst;\n/** @internal */\nvar _chainRecBreadthFirst = function (a, f) { return (0, function_1.pipe)(a, (0, exports.chainRecBreadthFirst)(f)); };\nexports._chainRecBreadthFirst = _chainRecBreadthFirst;\n/**\n * @category constructors\n * @since 2.5.0\n */\nexports.of = RNEA.of;\n/**\n * @since 2.7.0\n */\nvar zero = function () { return exports.empty; };\nexports.zero = zero;\n/**\n * Less strict version of [`alt`](#alt).\n *\n * The `W` suffix (short for **W**idening) means that the return types will be merged.\n *\n * @example\n * import * as RA from 'fp-ts/ReadonlyArray'\n * import { pipe } from 'fp-ts/function'\n *\n * assert.deepStrictEqual(\n *   pipe(\n *     [1, 2, 3],\n *     RA.altW(() => ['a', 'b'])\n *   ),\n *   [1, 2, 3, 'a', 'b']\n * )\n *\n * @category error handling\n * @since 2.9.0\n */\nvar altW = function (that) {\n    return function (fa) {\n        return fa.concat(that());\n    };\n};\nexports.altW = altW;\n/**\n * Identifies an associative operation on a type constructor. It is similar to `Semigroup`, except that it applies to\n * types of kind `* -> *`.\n *\n * In case of `ReadonlyArray` concatenates the inputs into a single array.\n *\n * @example\n * import * as RA from 'fp-ts/ReadonlyArray'\n * import { pipe } from 'fp-ts/function'\n *\n * assert.deepStrictEqual(\n *   pipe(\n *     [1, 2, 3],\n *     RA.alt(() => [4, 5])\n *   ),\n *   [1, 2, 3, 4, 5]\n * )\n *\n * @category error handling\n * @since 2.5.0\n */\nexports.alt = exports.altW;\n/**\n * @since 2.5.0\n */\nvar ap = function (fa) {\n    return (0, exports.flatMap)(function (f) { return (0, function_1.pipe)(fa, (0, exports.map)(f)); });\n};\nexports.ap = ap;\n/**\n * Composes computations in sequence, using the return value of one computation to determine the next computation.\n *\n * @example\n * import * as RA from 'fp-ts/ReadonlyArray'\n * import { pipe } from 'fp-ts/function'\n *\n * assert.deepStrictEqual(\n *   pipe(\n *     [1, 2, 3],\n *     RA.flatMap((n) => [`a${n}`, `b${n}`])\n *   ),\n *   ['a1', 'b1', 'a2', 'b2', 'a3', 'b3']\n * )\n * assert.deepStrictEqual(\n *   pipe(\n *     [1, 2, 3],\n *     RA.flatMap(() => [])\n *   ),\n *   []\n * )\n *\n * @category sequencing\n * @since 2.14.0\n */\nexports.flatMap = (0, function_1.dual)(2, function (ma, f) {\n    return (0, function_1.pipe)(ma, (0, exports.chainWithIndex)(function (i, a) { return f(a, i); }));\n});\n/**\n * @category sequencing\n * @since 2.5.0\n */\nexports.flatten = (0, exports.flatMap)(function_1.identity);\n/**\n * `map` can be used to turn functions `(a: A) => B` into functions `(fa: F<A>) => F<B>` whose argument and return types\n * use the type constructor `F` to represent some computational context.\n *\n * @category mapping\n * @since 2.5.0\n */\nvar map = function (f) { return function (fa) {\n    return fa.map(function (a) { return f(a); });\n}; };\nexports.map = map;\n/**\n * @category mapping\n * @since 2.5.0\n */\nvar mapWithIndex = function (f) { return function (fa) {\n    return fa.map(function (a, i) { return f(i, a); });\n}; };\nexports.mapWithIndex = mapWithIndex;\n/**\n * @category filtering\n * @since 2.5.0\n */\nvar separate = function (fa) {\n    var left = [];\n    var right = [];\n    for (var _i = 0, fa_1 = fa; _i < fa_1.length; _i++) {\n        var e = fa_1[_i];\n        if (e._tag === 'Left') {\n            left.push(e.left);\n        }\n        else {\n            right.push(e.right);\n        }\n    }\n    return (0, Separated_1.separated)(left, right);\n};\nexports.separate = separate;\n/**\n * @category filtering\n * @since 2.5.0\n */\nvar filter = function (predicate) {\n    return function (as) {\n        return as.filter(predicate);\n    };\n};\nexports.filter = filter;\n/**\n * @category filtering\n * @since 2.5.0\n */\nvar filterMapWithIndex = function (f) {\n    return function (fa) {\n        var out = [];\n        for (var i = 0; i < fa.length; i++) {\n            var optionB = f(i, fa[i]);\n            if (_.isSome(optionB)) {\n                out.push(optionB.value);\n            }\n        }\n        return out;\n    };\n};\nexports.filterMapWithIndex = filterMapWithIndex;\n/**\n * @category filtering\n * @since 2.5.0\n */\nvar filterMap = function (f) {\n    return (0, exports.filterMapWithIndex)(function (_, a) { return f(a); });\n};\nexports.filterMap = filterMap;\n/**\n * @category filtering\n * @since 2.5.0\n */\nexports.compact = (0, exports.filterMap)(function_1.identity);\n/**\n * @category filtering\n * @since 2.5.0\n */\nvar partition = function (predicate) {\n    return (0, exports.partitionWithIndex)(function (_, a) { return predicate(a); });\n};\nexports.partition = partition;\n/**\n * @category filtering\n * @since 2.5.0\n */\nvar partitionWithIndex = function (predicateWithIndex) {\n    return function (as) {\n        var left = [];\n        var right = [];\n        for (var i = 0; i < as.length; i++) {\n            var a = as[i];\n            if (predicateWithIndex(i, a)) {\n                right.push(a);\n            }\n            else {\n                left.push(a);\n            }\n        }\n        return (0, Separated_1.separated)(left, right);\n    };\n};\nexports.partitionWithIndex = partitionWithIndex;\n/**\n * @category filtering\n * @since 2.5.0\n */\nvar partitionMap = function (f) {\n    return (0, exports.partitionMapWithIndex)(function (_, a) { return f(a); });\n};\nexports.partitionMap = partitionMap;\n/**\n * @category filtering\n * @since 2.5.0\n */\nvar partitionMapWithIndex = function (f) {\n    return function (fa) {\n        var left = [];\n        var right = [];\n        for (var i = 0; i < fa.length; i++) {\n            var e = f(i, fa[i]);\n            if (e._tag === 'Left') {\n                left.push(e.left);\n            }\n            else {\n                right.push(e.right);\n            }\n        }\n        return (0, Separated_1.separated)(left, right);\n    };\n};\nexports.partitionMapWithIndex = partitionMapWithIndex;\n/**\n * @category filtering\n * @since 2.5.0\n */\nvar filterWithIndex = function (predicateWithIndex) {\n    return function (as) {\n        return as.filter(function (a, i) { return predicateWithIndex(i, a); });\n    };\n};\nexports.filterWithIndex = filterWithIndex;\n/**\n * @since 2.5.0\n */\nvar extend = function (f) { return function (wa) {\n    return wa.map(function (_, i) { return f(wa.slice(i)); });\n}; };\nexports.extend = extend;\n/**\n * @since 2.5.0\n */\nexports.duplicate = (0, exports.extend)(function_1.identity);\n/**\n * @category folding\n * @since 2.5.0\n */\nvar foldMapWithIndex = function (M) {\n    return function (f) {\n        return function (fa) {\n            return fa.reduce(function (b, a, i) { return M.concat(b, f(i, a)); }, M.empty);\n        };\n    };\n};\nexports.foldMapWithIndex = foldMapWithIndex;\n/**\n * @category folding\n * @since 2.5.0\n */\nvar reduce = function (b, f) {\n    return (0, exports.reduceWithIndex)(b, function (_, b, a) { return f(b, a); });\n};\nexports.reduce = reduce;\n/**\n * @category folding\n * @since 2.5.0\n */\nvar foldMap = function (M) {\n    var foldMapWithIndexM = (0, exports.foldMapWithIndex)(M);\n    return function (f) { return foldMapWithIndexM(function (_, a) { return f(a); }); };\n};\nexports.foldMap = foldMap;\n/**\n * @category folding\n * @since 2.5.0\n */\nvar reduceWithIndex = function (b, f) { return function (fa) {\n    var len = fa.length;\n    var out = b;\n    for (var i = 0; i < len; i++) {\n        out = f(i, out, fa[i]);\n    }\n    return out;\n}; };\nexports.reduceWithIndex = reduceWithIndex;\n/**\n * @category folding\n * @since 2.5.0\n */\nvar reduceRight = function (b, f) {\n    return (0, exports.reduceRightWithIndex)(b, function (_, a, b) { return f(a, b); });\n};\nexports.reduceRight = reduceRight;\n/**\n * @category folding\n * @since 2.5.0\n */\nvar reduceRightWithIndex = function (b, f) { return function (fa) {\n    return fa.reduceRight(function (b, a, i) { return f(i, a, b); }, b);\n}; };\nexports.reduceRightWithIndex = reduceRightWithIndex;\n/**\n * @category traversing\n * @since 2.6.3\n */\nvar traverse = function (F) {\n    var traverseWithIndexF = (0, exports.traverseWithIndex)(F);\n    return function (f) { return traverseWithIndexF(function (_, a) { return f(a); }); };\n};\nexports.traverse = traverse;\n/**\n * @category traversing\n * @since 2.6.3\n */\nvar sequence = function (F) {\n    return function (ta) {\n        return _reduce(ta, F.of((0, exports.zero)()), function (fas, fa) {\n            return F.ap(F.map(fas, function (as) { return function (a) { return (0, function_1.pipe)(as, (0, exports.append)(a)); }; }), fa);\n        });\n    };\n};\nexports.sequence = sequence;\n/**\n * @category sequencing\n * @since 2.6.3\n */\nvar traverseWithIndex = function (F) {\n    return function (f) {\n        return (0, exports.reduceWithIndex)(F.of((0, exports.zero)()), function (i, fbs, a) {\n            return F.ap(F.map(fbs, function (bs) { return function (b) { return (0, function_1.pipe)(bs, (0, exports.append)(b)); }; }), f(i, a));\n        });\n    };\n};\nexports.traverseWithIndex = traverseWithIndex;\n/**\n * @category filtering\n * @since 2.6.5\n */\nvar wither = function (F) {\n    var _witherF = _wither(F);\n    return function (f) { return function (fa) { return _witherF(fa, f); }; };\n};\nexports.wither = wither;\n/**\n * @category filtering\n * @since 2.6.5\n */\nvar wilt = function (F) {\n    var _wiltF = _wilt(F);\n    return function (f) { return function (fa) { return _wiltF(fa, f); }; };\n};\nexports.wilt = wilt;\n/**\n * @since 2.6.6\n */\nvar unfold = function (b, f) {\n    var out = [];\n    var bb = b;\n    // eslint-disable-next-line no-constant-condition\n    while (true) {\n        var mt = f(bb);\n        if (_.isSome(mt)) {\n            var _a = mt.value, a = _a[0], b_1 = _a[1];\n            out.push(a);\n            bb = b_1;\n        }\n        else {\n            break;\n        }\n    }\n    return out;\n};\nexports.unfold = unfold;\n/**\n * @category type lambdas\n * @since 2.5.0\n */\nexports.URI = 'ReadonlyArray';\n/**\n * @category instances\n * @since 2.5.0\n */\nvar getShow = function (S) { return ({\n    show: function (as) { return \"[\".concat(as.map(S.show).join(', '), \"]\"); }\n}); };\nexports.getShow = getShow;\n/**\n * @category instances\n * @since 2.5.0\n */\nvar getSemigroup = function () { return ({\n    concat: function (first, second) { return ((0, exports.isEmpty)(first) ? second : (0, exports.isEmpty)(second) ? first : first.concat(second)); }\n}); };\nexports.getSemigroup = getSemigroup;\n/**\n * Returns a `Monoid` for `ReadonlyArray<A>`.\n *\n * @example\n * import { getMonoid } from 'fp-ts/ReadonlyArray'\n *\n * const M = getMonoid<number>()\n * assert.deepStrictEqual(M.concat([1, 2], [3, 4]), [1, 2, 3, 4])\n *\n * @category instances\n * @since 2.5.0\n */\nvar getMonoid = function () { return ({\n    concat: (0, exports.getSemigroup)().concat,\n    empty: exports.empty\n}); };\nexports.getMonoid = getMonoid;\n/**\n * Derives an `Eq` over the `ReadonlyArray` of a given element type from the `Eq` of that type. The derived `Eq` defines two\n * arrays as equal if all elements of both arrays are compared equal pairwise with the given `E`. In case of arrays of\n * different lengths, the result is non equality.\n *\n * @example\n * import * as S from 'fp-ts/string'\n * import { getEq } from 'fp-ts/ReadonlyArray'\n *\n * const E = getEq(S.Eq)\n * assert.strictEqual(E.equals(['a', 'b'], ['a', 'b']), true)\n * assert.strictEqual(E.equals(['a'], []), false)\n *\n * @category instances\n * @since 2.5.0\n */\nvar getEq = function (E) {\n    return (0, Eq_1.fromEquals)(function (xs, ys) { return xs.length === ys.length && xs.every(function (x, i) { return E.equals(x, ys[i]); }); });\n};\nexports.getEq = getEq;\n/**\n * Derives an `Ord` over the `ReadonlyArray` of a given element type from the `Ord` of that type. The ordering between two such\n * arrays is equal to: the first non equal comparison of each arrays elements taken pairwise in increasing order, in\n * case of equality over all the pairwise elements; the longest array is considered the greatest, if both arrays have\n * the same length, the result is equality.\n *\n * @example\n * import { getOrd } from 'fp-ts/ReadonlyArray'\n * import * as S from 'fp-ts/string'\n *\n * const O = getOrd(S.Ord)\n * assert.strictEqual(O.compare(['b'], ['a']), 1)\n * assert.strictEqual(O.compare(['a'], ['a']), 0)\n * assert.strictEqual(O.compare(['a'], ['b']), -1)\n *\n *\n * @category instances\n * @since 2.5.0\n */\nvar getOrd = function (O) {\n    return (0, Ord_1.fromCompare)(function (a, b) {\n        var aLen = a.length;\n        var bLen = b.length;\n        var len = Math.min(aLen, bLen);\n        for (var i = 0; i < len; i++) {\n            var ordering = O.compare(a[i], b[i]);\n            if (ordering !== 0) {\n                return ordering;\n            }\n        }\n        return N.Ord.compare(aLen, bLen);\n    });\n};\nexports.getOrd = getOrd;\n/**\n * @category instances\n * @since 2.11.0\n */\nvar getUnionSemigroup = function (E) {\n    var unionE = union(E);\n    return {\n        concat: function (first, second) { return unionE(second)(first); }\n    };\n};\nexports.getUnionSemigroup = getUnionSemigroup;\n/**\n * @category instances\n * @since 2.11.0\n */\nvar getUnionMonoid = function (E) { return ({\n    concat: (0, exports.getUnionSemigroup)(E).concat,\n    empty: exports.empty\n}); };\nexports.getUnionMonoid = getUnionMonoid;\n/**\n * @category instances\n * @since 2.11.0\n */\nvar getIntersectionSemigroup = function (E) {\n    var intersectionE = intersection(E);\n    return {\n        concat: function (first, second) { return intersectionE(second)(first); }\n    };\n};\nexports.getIntersectionSemigroup = getIntersectionSemigroup;\n/**\n * @category instances\n * @since 2.11.0\n */\nvar getDifferenceMagma = function (E) {\n    var differenceE = difference(E);\n    return {\n        concat: function (first, second) { return differenceE(second)(first); }\n    };\n};\nexports.getDifferenceMagma = getDifferenceMagma;\n/**\n * @category instances\n * @since 2.7.0\n */\nexports.Functor = {\n    URI: exports.URI,\n    map: _map\n};\n/**\n * @category mapping\n * @since 2.10.0\n */\nexports.flap = (0, Functor_1.flap)(exports.Functor);\n/**\n * @category instances\n * @since 2.10.0\n */\nexports.Pointed = {\n    URI: exports.URI,\n    of: exports.of\n};\n/**\n * @category instances\n * @since 2.7.0\n */\nexports.FunctorWithIndex = {\n    URI: exports.URI,\n    map: _map,\n    mapWithIndex: _mapWithIndex\n};\n/**\n * @category instances\n * @since 2.10.0\n */\nexports.Apply = {\n    URI: exports.URI,\n    map: _map,\n    ap: _ap\n};\n/**\n * Combine two effectful actions, keeping only the result of the first.\n *\n * @since 2.5.0\n */\nexports.apFirst = (0, Apply_1.apFirst)(exports.Apply);\n/**\n * Combine two effectful actions, keeping only the result of the second.\n *\n * @since 2.5.0\n */\nexports.apSecond = (0, Apply_1.apSecond)(exports.Apply);\n/**\n * @category instances\n * @since 2.7.0\n */\nexports.Applicative = {\n    URI: exports.URI,\n    map: _map,\n    ap: _ap,\n    of: exports.of\n};\n/**\n * @category instances\n * @since 2.10.0\n */\nexports.Chain = {\n    URI: exports.URI,\n    map: _map,\n    ap: _ap,\n    chain: exports.flatMap\n};\n/**\n * @category instances\n * @since 2.7.0\n */\nexports.Monad = {\n    URI: exports.URI,\n    map: _map,\n    ap: _ap,\n    of: exports.of,\n    chain: exports.flatMap\n};\n/**\n * Composes computations in sequence, using the return value of one computation to determine the next computation and\n * keeping only the result of the first.\n *\n * @example\n * import * as RA from 'fp-ts/ReadonlyArray'\n * import { pipe } from 'fp-ts/function'\n *\n * assert.deepStrictEqual(\n *   pipe(\n *     [1, 2, 3],\n *     RA.chainFirst(() => ['a', 'b'])\n *   ),\n *   [1, 1, 2, 2, 3, 3]\n * )\n * assert.deepStrictEqual(\n *   pipe(\n *     [1, 2, 3],\n *     RA.chainFirst(() => [])\n *   ),\n *   []\n * )\n *\n * @category sequencing\n * @since 2.5.0\n */\nexports.chainFirst = \n/*#__PURE__*/ (0, Chain_1.chainFirst)(exports.Chain);\n/**\n * @category instances\n * @since 2.7.0\n */\nexports.Unfoldable = {\n    URI: exports.URI,\n    unfold: exports.unfold\n};\n/**\n * @category instances\n * @since 2.7.0\n */\nexports.Alt = {\n    URI: exports.URI,\n    map: _map,\n    alt: _alt\n};\n/**\n * @category instances\n * @since 2.11.0\n */\nexports.Zero = {\n    URI: exports.URI,\n    zero: exports.zero\n};\n/**\n * @category do notation\n * @since 2.11.0\n */\nexports.guard = (0, Zero_1.guard)(exports.Zero, exports.Pointed);\n/**\n * @category instances\n * @since 2.7.0\n */\nexports.Alternative = {\n    URI: exports.URI,\n    map: _map,\n    ap: _ap,\n    of: exports.of,\n    alt: _alt,\n    zero: exports.zero\n};\n/**\n * @category instances\n * @since 2.7.0\n */\nexports.Extend = {\n    URI: exports.URI,\n    map: _map,\n    extend: _extend\n};\n/**\n * @category instances\n * @since 2.7.0\n */\nexports.Compactable = {\n    URI: exports.URI,\n    compact: exports.compact,\n    separate: exports.separate\n};\n/**\n * @category instances\n * @since 2.7.0\n */\nexports.Filterable = {\n    URI: exports.URI,\n    map: _map,\n    compact: exports.compact,\n    separate: exports.separate,\n    filter: _filter,\n    filterMap: _filterMap,\n    partition: _partition,\n    partitionMap: _partitionMap\n};\n/**\n * @category instances\n * @since 2.7.0\n */\nexports.FilterableWithIndex = {\n    URI: exports.URI,\n    map: _map,\n    mapWithIndex: _mapWithIndex,\n    compact: exports.compact,\n    separate: exports.separate,\n    filter: _filter,\n    filterMap: _filterMap,\n    partition: _partition,\n    partitionMap: _partitionMap,\n    partitionMapWithIndex: _partitionMapWithIndex,\n    partitionWithIndex: _partitionWithIndex,\n    filterMapWithIndex: _filterMapWithIndex,\n    filterWithIndex: _filterWithIndex\n};\n/**\n * @category instances\n * @since 2.7.0\n */\nexports.Foldable = {\n    URI: exports.URI,\n    reduce: _reduce,\n    foldMap: _foldMap,\n    reduceRight: _reduceRight\n};\n/**\n * @category instances\n * @since 2.7.0\n */\nexports.FoldableWithIndex = {\n    URI: exports.URI,\n    reduce: _reduce,\n    foldMap: _foldMap,\n    reduceRight: _reduceRight,\n    reduceWithIndex: _reduceWithIndex,\n    foldMapWithIndex: _foldMapWithIndex,\n    reduceRightWithIndex: _reduceRightWithIndex\n};\n/**\n * @category instances\n * @since 2.7.0\n */\nexports.Traversable = {\n    URI: exports.URI,\n    map: _map,\n    reduce: _reduce,\n    foldMap: _foldMap,\n    reduceRight: _reduceRight,\n    traverse: _traverse,\n    sequence: exports.sequence\n};\n/**\n * @category instances\n * @since 2.7.0\n */\nexports.TraversableWithIndex = {\n    URI: exports.URI,\n    map: _map,\n    mapWithIndex: _mapWithIndex,\n    reduce: _reduce,\n    foldMap: _foldMap,\n    reduceRight: _reduceRight,\n    reduceWithIndex: _reduceWithIndex,\n    foldMapWithIndex: _foldMapWithIndex,\n    reduceRightWithIndex: _reduceRightWithIndex,\n    traverse: _traverse,\n    sequence: exports.sequence,\n    traverseWithIndex: _traverseWithIndex\n};\n/**\n * @category sequencing\n * @since 2.11.0\n */\nvar chainRecDepthFirst = function (f) {\n    return function (a) {\n        var todo = __spreadArray([], f(a), true);\n        var out = [];\n        while (todo.length > 0) {\n            var e = todo.shift();\n            if (_.isLeft(e)) {\n                todo.unshift.apply(todo, f(e.left));\n            }\n            else {\n                out.push(e.right);\n            }\n        }\n        return out;\n    };\n};\nexports.chainRecDepthFirst = chainRecDepthFirst;\n/**\n * @category instances\n * @since 2.11.0\n */\nexports.ChainRecDepthFirst = {\n    URI: exports.URI,\n    map: _map,\n    ap: _ap,\n    chain: exports.flatMap,\n    chainRec: exports._chainRecDepthFirst\n};\n/**\n * @category sequencing\n * @since 2.11.0\n */\nvar chainRecBreadthFirst = function (f) {\n    return function (a) {\n        var initial = f(a);\n        var todo = [];\n        var out = [];\n        function go(e) {\n            if (_.isLeft(e)) {\n                f(e.left).forEach(function (v) { return todo.push(v); });\n            }\n            else {\n                out.push(e.right);\n            }\n        }\n        for (var _i = 0, initial_1 = initial; _i < initial_1.length; _i++) {\n            var e = initial_1[_i];\n            go(e);\n        }\n        while (todo.length > 0) {\n            go(todo.shift());\n        }\n        return out;\n    };\n};\nexports.chainRecBreadthFirst = chainRecBreadthFirst;\n/**\n * @category instances\n * @since 2.11.0\n */\nexports.ChainRecBreadthFirst = {\n    URI: exports.URI,\n    map: _map,\n    ap: _ap,\n    chain: exports.flatMap,\n    chainRec: exports._chainRecBreadthFirst\n};\nvar _wither = /*#__PURE__*/ (0, Witherable_1.witherDefault)(exports.Traversable, exports.Compactable);\nvar _wilt = /*#__PURE__*/ (0, Witherable_1.wiltDefault)(exports.Traversable, exports.Compactable);\n/**\n * @category instances\n * @since 2.7.0\n */\nexports.Witherable = {\n    URI: exports.URI,\n    map: _map,\n    compact: exports.compact,\n    separate: exports.separate,\n    filter: _filter,\n    filterMap: _filterMap,\n    partition: _partition,\n    partitionMap: _partitionMap,\n    reduce: _reduce,\n    foldMap: _foldMap,\n    reduceRight: _reduceRight,\n    traverse: _traverse,\n    sequence: exports.sequence,\n    wither: _wither,\n    wilt: _wilt\n};\n/**\n * Filter values inside a context.\n *\n * @example\n * import { pipe } from 'fp-ts/function'\n * import * as RA from 'fp-ts/ReadonlyArray'\n * import * as T from 'fp-ts/Task'\n *\n * const filterE = RA.filterE(T.ApplicativePar)\n * async function test() {\n *   assert.deepStrictEqual(\n *     await pipe(\n *       [-1, 2, 3],\n *       filterE((n) => T.of(n > 0))\n *     )(),\n *     [2, 3]\n *   )\n * }\n * test()\n *\n * @since 2.11.0\n */\nexports.filterE = (0, Witherable_1.filterE)(exports.Witherable);\n/**\n * @category instances\n * @since 2.11.0\n */\nexports.FromEither = {\n    URI: exports.URI,\n    fromEither: exports.fromEither\n};\n/**\n * @category lifting\n * @since 2.11.0\n */\nexports.fromEitherK = (0, FromEither_1.fromEitherK)(exports.FromEither);\n// -------------------------------------------------------------------------------------\n// unsafe\n// -------------------------------------------------------------------------------------\n/**\n * @category unsafe\n * @since 2.5.0\n */\nexports.unsafeInsertAt = RNEA.unsafeInsertAt;\n/**\n * @category unsafe\n * @since 2.5.0\n */\nvar unsafeUpdateAt = function (i, a, as) {\n    return (0, exports.isNonEmpty)(as) ? RNEA.unsafeUpdateAt(i, a, as) : as;\n};\nexports.unsafeUpdateAt = unsafeUpdateAt;\n/**\n * @category unsafe\n * @since 2.5.0\n */\nvar unsafeDeleteAt = function (i, as) {\n    var xs = as.slice();\n    xs.splice(i, 1);\n    return xs;\n};\nexports.unsafeDeleteAt = unsafeDeleteAt;\n/**\n * @category conversions\n * @since 2.5.0\n */\nvar toArray = function (as) { return as.slice(); };\nexports.toArray = toArray;\n/**\n * @category conversions\n * @since 2.5.0\n */\nvar fromArray = function (as) { return ((0, exports.isEmpty)(as) ? exports.empty : as.slice()); };\nexports.fromArray = fromArray;\n// -------------------------------------------------------------------------------------\n// utils\n// -------------------------------------------------------------------------------------\n/**\n * An empty array\n *\n * @since 2.5.0\n */\nexports.empty = RNEA.empty;\nfunction every(predicate) {\n    return function (as) { return as.every(predicate); };\n}\nexports.every = every;\n/**\n * Check if a predicate holds true for any array member.\n *\n * @example\n * import { some } from 'fp-ts/ReadonlyArray'\n * import { pipe } from 'fp-ts/function'\n *\n * const isPositive = (n: number): boolean => n > 0\n *\n * assert.deepStrictEqual(pipe([-1, -2, 3], some(isPositive)), true)\n * assert.deepStrictEqual(pipe([-1, -2, -3], some(isPositive)), false)\n *\n * @since 2.9.0\n */\nvar some = function (predicate) {\n    return function (as) {\n        return as.some(predicate);\n    };\n};\nexports.some = some;\n/**\n * Alias of [`some`](#some)\n *\n * @since 2.11.0\n */\nexports.exists = exports.some;\n/**\n * Places an element in between members of a `ReadonlyArray`, then folds the results using the provided `Monoid`.\n *\n * @example\n * import * as S from 'fp-ts/string'\n * import { intercalate } from 'fp-ts/ReadonlyArray'\n *\n * assert.deepStrictEqual(intercalate(S.Monoid)('-')(['a', 'b', 'c']), 'a-b-c')\n *\n * @since 2.12.0\n */\nvar intercalate = function (M) {\n    var intercalateM = RNEA.intercalate(M);\n    return function (middle) { return (0, exports.match)(function () { return M.empty; }, intercalateM(middle)); };\n};\nexports.intercalate = intercalate;\n// -------------------------------------------------------------------------------------\n// do notation\n// -------------------------------------------------------------------------------------\n/**\n * @category do notation\n * @since 2.9.0\n */\nexports.Do = (0, exports.of)(_.emptyRecord);\n/**\n * @category do notation\n * @since 2.8.0\n */\nexports.bindTo = (0, Functor_1.bindTo)(exports.Functor);\nvar let_ = /*#__PURE__*/ (0, Functor_1.let)(exports.Functor);\nexports.let = let_;\n/**\n * @category do notation\n * @since 2.8.0\n */\nexports.bind = (0, Chain_1.bind)(exports.Chain);\n/**\n * @category do notation\n * @since 2.8.0\n */\nexports.apS = (0, Apply_1.apS)(exports.Apply);\n// -------------------------------------------------------------------------------------\n// legacy\n// -------------------------------------------------------------------------------------\n/**\n * Alias of `flatMap`.\n *\n * @category legacy\n * @since 2.5.0\n */\nexports.chain = exports.flatMap;\n// -------------------------------------------------------------------------------------\n// deprecated\n// -------------------------------------------------------------------------------------\n/**\n * Use `ReadonlyNonEmptyArray` module instead.\n *\n * @category zone of death\n * @since 2.5.0\n * @deprecated\n */\nexports.range = RNEA.range;\n/**\n * Use [`prepend`](#prepend) instead.\n *\n * @category zone of death\n * @since 2.5.0\n * @deprecated\n */\nexports.cons = RNEA.cons;\n/**\n * Use [`append`](#append) instead.\n *\n * @category zone of death\n * @since 2.5.0\n * @deprecated\n */\nexports.snoc = RNEA.snoc;\n/**\n * Use [`prependAll`](#prependall) instead.\n *\n * @category zone of death\n * @since 2.9.0\n * @deprecated\n */\nexports.prependToAll = exports.prependAll;\n/**\n * This instance is deprecated, use small, specific instances instead.\n * For example if a function needs a `Functor` instance, pass `RA.Functor` instead of `RA.readonlyArray`\n * (where `RA` is from `import RA from 'fp-ts/ReadonlyArray'`)\n *\n * @category zone of death\n * @since 2.5.0\n * @deprecated\n */\nexports.readonlyArray = {\n    URI: exports.URI,\n    compact: exports.compact,\n    separate: exports.separate,\n    map: _map,\n    ap: _ap,\n    of: exports.of,\n    chain: exports.flatMap,\n    filter: _filter,\n    filterMap: _filterMap,\n    partition: _partition,\n    partitionMap: _partitionMap,\n    mapWithIndex: _mapWithIndex,\n    partitionMapWithIndex: _partitionMapWithIndex,\n    partitionWithIndex: _partitionWithIndex,\n    filterMapWithIndex: _filterMapWithIndex,\n    filterWithIndex: _filterWithIndex,\n    alt: _alt,\n    zero: exports.zero,\n    unfold: exports.unfold,\n    reduce: _reduce,\n    foldMap: _foldMap,\n    reduceRight: _reduceRight,\n    traverse: _traverse,\n    sequence: exports.sequence,\n    reduceWithIndex: _reduceWithIndex,\n    foldMapWithIndex: _foldMapWithIndex,\n    reduceRightWithIndex: _reduceRightWithIndex,\n    traverseWithIndex: _traverseWithIndex,\n    extend: _extend,\n    wither: _wither,\n    wilt: _wilt\n};\n","\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.lefts = exports.rights = exports.reverse = exports.modifyAt = exports.deleteAt = exports.updateAt = exports.insertAt = exports.copy = exports.findLastIndex = exports.findLastMap = exports.findLast = exports.findFirstMap = exports.findFirst = exports.findIndex = exports.dropLeftWhile = exports.dropRight = exports.dropLeft = exports.spanLeft = exports.takeLeftWhile = exports.takeRight = exports.takeLeft = exports.init = exports.tail = exports.last = exports.head = exports.lookup = exports.isOutOfBound = exports.size = exports.scanRight = exports.scanLeft = exports.chainWithIndex = exports.foldRight = exports.matchRight = exports.matchRightW = exports.foldLeft = exports.matchLeft = exports.matchLeftW = exports.match = exports.matchW = exports.fromEither = exports.fromOption = exports.fromPredicate = exports.replicate = exports.makeBy = exports.appendW = exports.append = exports.prependW = exports.prepend = exports.isNonEmpty = exports.isEmpty = void 0;\nexports.traverseWithIndex = exports.sequence = exports.traverse = exports.reduceRightWithIndex = exports.reduceRight = exports.reduceWithIndex = exports.reduce = exports.foldMapWithIndex = exports.foldMap = exports.duplicate = exports.extend = exports.filterWithIndex = exports.alt = exports.altW = exports.partitionMapWithIndex = exports.partitionMap = exports.partitionWithIndex = exports.partition = exports.filter = exports.separate = exports.compact = exports.filterMap = exports.filterMapWithIndex = exports.mapWithIndex = exports.flatten = exports.flatMap = exports.ap = exports.map = exports.zero = exports.of = exports.difference = exports.intersection = exports.union = exports.concat = exports.concatW = exports.comprehension = exports.fromOptionK = exports.chunksOf = exports.splitAt = exports.chop = exports.sortBy = exports.uniq = exports.elem = exports.rotate = exports.intersperse = exports.prependAll = exports.unzip = exports.zip = exports.zipWith = exports.sort = void 0;\nexports.some = exports.every = exports.unsafeDeleteAt = exports.unsafeUpdateAt = exports.unsafeInsertAt = exports.fromEitherK = exports.FromEither = exports.filterE = exports.ChainRecBreadthFirst = exports.chainRecBreadthFirst = exports.ChainRecDepthFirst = exports.chainRecDepthFirst = exports.Witherable = exports.TraversableWithIndex = exports.Traversable = exports.FoldableWithIndex = exports.Foldable = exports.FilterableWithIndex = exports.Filterable = exports.Compactable = exports.Extend = exports.Alternative = exports.guard = exports.Zero = exports.Alt = exports.Unfoldable = exports.Monad = exports.chainFirst = exports.Chain = exports.Applicative = exports.apSecond = exports.apFirst = exports.Apply = exports.FunctorWithIndex = exports.Pointed = exports.flap = exports.Functor = exports.getDifferenceMagma = exports.getIntersectionSemigroup = exports.getUnionMonoid = exports.getUnionSemigroup = exports.getOrd = exports.getEq = exports.getMonoid = exports.getSemigroup = exports.getShow = exports.URI = exports.unfold = exports.wilt = exports.wither = void 0;\nexports.array = exports.prependToAll = exports.snoc = exports.cons = exports.empty = exports.range = exports.chain = exports.apS = exports.bind = exports.let = exports.bindTo = exports.Do = exports.intercalate = exports.exists = void 0;\nvar Apply_1 = require(\"./Apply\");\nvar Chain_1 = require(\"./Chain\");\nvar FromEither_1 = require(\"./FromEither\");\nvar function_1 = require(\"./function\");\nvar Functor_1 = require(\"./Functor\");\nvar _ = __importStar(require(\"./internal\"));\nvar NEA = __importStar(require(\"./NonEmptyArray\"));\nvar RA = __importStar(require(\"./ReadonlyArray\"));\nvar Separated_1 = require(\"./Separated\");\nvar Witherable_1 = require(\"./Witherable\");\nvar Zero_1 = require(\"./Zero\");\n// -------------------------------------------------------------------------------------\n// refinements\n// -------------------------------------------------------------------------------------\n/**\n * Test whether an array is empty\n *\n * @example\n * import { isEmpty } from 'fp-ts/Array'\n *\n * assert.strictEqual(isEmpty([]), true)\n * assert.strictEqual(isEmpty(['a']), false)\n *\n * @category refinements\n * @since 2.0.0\n */\nvar isEmpty = function (as) { return as.length === 0; };\nexports.isEmpty = isEmpty;\n/**\n * Test whether an array is non empty narrowing down the type to `NonEmptyArray<A>`\n *\n * @example\n * import { isNonEmpty } from 'fp-ts/Array'\n *\n * assert.strictEqual(isNonEmpty([]), false)\n * assert.strictEqual(isNonEmpty(['a']), true)\n *\n * @category refinements\n * @since 2.0.0\n */\nexports.isNonEmpty = NEA.isNonEmpty;\n// -------------------------------------------------------------------------------------\n// constructors\n// -------------------------------------------------------------------------------------\n/**\n * Prepend an element to the front of a `Array`, creating a new `NonEmptyArray`.\n *\n * @example\n * import { prepend } from 'fp-ts/Array'\n * import { pipe } from 'fp-ts/function'\n *\n * assert.deepStrictEqual(pipe([2, 3, 4], prepend(1)), [1, 2, 3, 4])\n *\n * @since 2.10.0\n */\nexports.prepend = NEA.prepend;\n/**\n * Less strict version of [`prepend`](#prepend).\n *\n * @example\n * import { prependW } from 'fp-ts/Array'\n * import { pipe } from 'fp-ts/function'\n *\n * assert.deepStrictEqual(pipe([2, 3, 4], prependW(\"a\")), [\"a\", 2, 3, 4]);\n *\n * @since 2.11.0\n */\nexports.prependW = NEA.prependW;\n/**\n * Append an element to the end of a `Array`, creating a new `NonEmptyArray`.\n *\n * @example\n * import { append } from 'fp-ts/Array'\n * import { pipe } from 'fp-ts/function'\n *\n * assert.deepStrictEqual(pipe([1, 2, 3], append(4)), [1, 2, 3, 4])\n *\n * @since 2.10.0\n */\nexports.append = NEA.append;\n/**\n * Less strict version of [`append`](#append).\n *\n * @example\n * import { appendW } from 'fp-ts/Array'\n * import { pipe } from 'fp-ts/function'\n *\n * assert.deepStrictEqual(pipe([1, 2, 3], appendW(\"d\")), [1, 2, 3, \"d\"]);\n *\n * @since 2.11.0\n */\nexports.appendW = NEA.appendW;\n/**\n * Return a `Array` of length `n` with element `i` initialized with `f(i)`.\n *\n * **Note**. `n` is normalized to a non negative integer.\n *\n * @example\n * import { makeBy } from 'fp-ts/Array'\n *\n * const double = (i: number): number => i * 2\n * assert.deepStrictEqual(makeBy(5, double), [0, 2, 4, 6, 8])\n * assert.deepStrictEqual(makeBy(-3, double), [])\n * assert.deepStrictEqual(makeBy(4.32164, double), [0, 2, 4, 6])\n *\n * @category constructors\n * @since 2.0.0\n */\nvar makeBy = function (n, f) { return (n <= 0 ? [] : NEA.makeBy(f)(n)); };\nexports.makeBy = makeBy;\n/**\n * Create a `Array` containing a value repeated the specified number of times.\n *\n * **Note**. `n` is normalized to a non negative integer.\n *\n * @example\n * import { replicate } from 'fp-ts/Array'\n *\n * assert.deepStrictEqual(replicate(3, 'a'), ['a', 'a', 'a'])\n * assert.deepStrictEqual(replicate(-3, 'a'), [])\n * assert.deepStrictEqual(replicate(2.985647, 'a'), ['a', 'a'])\n *\n * @category constructors\n * @since 2.0.0\n */\nvar replicate = function (n, a) { return (0, exports.makeBy)(n, function () { return a; }); };\nexports.replicate = replicate;\nfunction fromPredicate(predicate) {\n    return function (a) { return (predicate(a) ? [a] : []); };\n}\nexports.fromPredicate = fromPredicate;\n// -------------------------------------------------------------------------------------\n// conversions\n// -------------------------------------------------------------------------------------\n/**\n * Create an array from an `Option`. The resulting array will contain the content of the\n * `Option` if it is `Some` and it will be empty if the `Option` is `None`.\n *\n * @example\n * import { fromOption } from 'fp-ts/Array'\n * import { option } from \"fp-ts\";\n * import { pipe } from 'fp-ts/function'\n *\n * assert.deepStrictEqual(pipe(option.some(\"a\"), fromOption),[\"a\"])\n * assert.deepStrictEqual(pipe(option.none, fromOption),[])\n *\n * @category conversions\n * @since 2.11.0\n */\nvar fromOption = function (ma) { return (_.isNone(ma) ? [] : [ma.value]); };\nexports.fromOption = fromOption;\n/**\n * Create an array from an `Either`. The resulting array will contain the content of the\n * `Either` if it is `Right` and it will be empty if the `Either` is `Left`.\n *\n * @example\n * import { fromEither } from 'fp-ts/Array'\n * import { either } from \"fp-ts\";\n * import { pipe } from 'fp-ts/function'\n *\n * assert.deepStrictEqual(pipe(either.right(\"r\"), fromEither), [\"r\"]);\n * assert.deepStrictEqual(pipe(either.left(\"l\"), fromEither), []);\n *\n * @category conversions\n * @since 2.11.0\n */\nvar fromEither = function (e) { return (_.isLeft(e) ? [] : [e.right]); };\nexports.fromEither = fromEither;\n/**\n * Less strict version of [`match`](#match).\n *\n * The `W` suffix (short for **W**idening) means that the handler return types will be merged.\n *\n * @example\n * import { matchW } from 'fp-ts/Array'\n * import { pipe } from 'fp-ts/function'\n *\n * const matcherW = matchW(\n *   () => \"No elements\",\n *   (as) => as.length\n * );\n * assert.deepStrictEqual(pipe([1, 2, 3, 4], matcherW), 4);\n * assert.deepStrictEqual(pipe([], matcherW), \"No elements\");\n *\n * @category pattern matching\n * @since 2.11.0\n */\nvar matchW = function (onEmpty, onNonEmpty) {\n    return function (as) {\n        return (0, exports.isNonEmpty)(as) ? onNonEmpty(as) : onEmpty();\n    };\n};\nexports.matchW = matchW;\n/**\n * Takes an array, if the array is empty it returns the result of `onEmpty`, otherwise\n * it passes the array to `onNonEmpty` and returns the result.\n *\n * @example\n * import { match } from 'fp-ts/Array'\n * import { pipe } from 'fp-ts/function'\n *\n * const matcher = match(\n *   () => \"No elements\",\n *   (as) => `Found ${as.length} element(s)`\n * );\n * assert.deepStrictEqual(pipe([1, 2, 3, 4], matcher), \"Found 4 element(s)\");\n * assert.deepStrictEqual(pipe([], matcher), \"No elements\");\n *\n * @category pattern matching\n * @since 2.11.0\n */\nexports.match = exports.matchW;\n/**\n * Less strict version of [`matchLeft`](#matchleft). It will work when `onEmpty` and\n * `onNonEmpty` have different return types.\n *\n * @example\n * import { matchLeftW } from 'fp-ts/Array'\n *\n * const f = matchLeftW(\n *   () => 0,\n *   (head: string, tail: string[]) => `Found \"${head}\" followed by ${tail.length} elements`\n * );\n * assert.strictEqual(f([\"a\", \"b\", \"c\"]), 'Found \"a\" followed by 2 elements');\n * assert.strictEqual(f([]), 0);\n *\n * @category pattern matching\n * @since 2.11.0\n */\nvar matchLeftW = function (onEmpty, onNonEmpty) {\n    return function (as) {\n        return (0, exports.isNonEmpty)(as) ? onNonEmpty(NEA.head(as), NEA.tail(as)) : onEmpty();\n    };\n};\nexports.matchLeftW = matchLeftW;\n/**\n * Takes an array, if the array is empty it returns the result of `onEmpty`, otherwise\n * it passes the array to `onNonEmpty` broken into its first element and remaining elements.\n *\n * @example\n * import { matchLeft } from 'fp-ts/Array'\n *\n * const len: <A>(as: Array<A>) => number = matchLeft(() => 0, (_, tail) => 1 + len(tail))\n * assert.strictEqual(len([1, 2, 3]), 3)\n *\n * @category pattern matching\n * @since 2.10.0\n */\nexports.matchLeft = exports.matchLeftW;\n/**\n * Alias of [`matchLeft`](#matchleft).\n *\n * @category pattern matching\n * @since 2.0.0\n */\nexports.foldLeft = exports.matchLeft;\n/**\n * Less strict version of [`matchRight`](#matchright). It will work when `onEmpty` and\n * `onNonEmpty` have different return types.\n *\n * @example\n * import { matchRightW } from 'fp-ts/Array'\n *\n * const f = matchRightW(\n *   () => 0,\n *   (head: string[], tail: string) => `Found ${head.length} elements folllowed by \"${tail}\"`\n * );\n * assert.strictEqual(f([\"a\", \"b\", \"c\"]), 'Found 2 elements folllowed by \"c\"');\n * assert.strictEqual(f([]), 0);\n *\n * @category pattern matching\n * @since 2.11.0\n */\nvar matchRightW = function (onEmpty, onNonEmpty) {\n    return function (as) {\n        return (0, exports.isNonEmpty)(as) ? onNonEmpty(NEA.init(as), NEA.last(as)) : onEmpty();\n    };\n};\nexports.matchRightW = matchRightW;\n/**\n * Takes an array, if the array is empty it returns the result of `onEmpty`, otherwise\n * it passes the array to `onNonEmpty` broken  into its initial elements and the last element.\n *\n * @example\n * import { matchRight } from 'fp-ts/Array'\n *\n * const len: <A>(as: Array<A>) => number = matchRight(\n *   () => 0,\n *   (head, _) => 1 + len(head)\n * );\n * assert.strictEqual(len([1, 2, 3]), 3);\n *\n * @category pattern matching\n * @since 2.10.0\n */\nexports.matchRight = exports.matchRightW;\n/**\n * Alias of [`matchRight`](#matchright).\n *\n * @category pattern matching\n * @since 2.0.0\n */\nexports.foldRight = exports.matchRight;\n// -------------------------------------------------------------------------------------\n// combinators\n// -------------------------------------------------------------------------------------\n/**\n * Same as [`chain`](#chain), but passing also the index to the iterating function.\n *\n * @example\n * import { chainWithIndex, replicate } from 'fp-ts/Array'\n * import { pipe } from 'fp-ts/function'\n *\n * const f = (index: number, x: string) => replicate(2, `${x}${index}`);\n * assert.deepStrictEqual(pipe([\"a\", \"b\", \"c\"], chainWithIndex(f)), [\"a0\", \"a0\", \"b1\", \"b1\", \"c2\", \"c2\"]);\n *\n * @category sequencing\n * @since 2.7.0\n */\nvar chainWithIndex = function (f) {\n    return function (as) {\n        var out = [];\n        for (var i = 0; i < as.length; i++) {\n            out.push.apply(out, f(i, as[i]));\n        }\n        return out;\n    };\n};\nexports.chainWithIndex = chainWithIndex;\n/**\n * Same as `reduce` but it carries over the intermediate steps\n *\n * @example\n * import { scanLeft } from 'fp-ts/Array'\n *\n * assert.deepStrictEqual(scanLeft(10, (b, a: number) => b - a)([1, 2, 3]), [10, 9, 7, 4])\n *\n * @since 2.0.0\n */\nvar scanLeft = function (b, f) {\n    return function (as) {\n        var len = as.length;\n        var out = new Array(len + 1);\n        out[0] = b;\n        for (var i = 0; i < len; i++) {\n            out[i + 1] = f(out[i], as[i]);\n        }\n        return out;\n    };\n};\nexports.scanLeft = scanLeft;\n/**\n * Fold an array from the right, keeping all intermediate results instead of only the final result\n *\n * @example\n * import { scanRight } from 'fp-ts/Array'\n *\n * assert.deepStrictEqual(scanRight(10, (a: number, b) => b - a)([1, 2, 3]), [4, 5, 7, 10])\n *\n * @since 2.0.0\n */\nvar scanRight = function (b, f) {\n    return function (as) {\n        var len = as.length;\n        var out = new Array(len + 1);\n        out[len] = b;\n        for (var i = len - 1; i >= 0; i--) {\n            out[i] = f(as[i], out[i + 1]);\n        }\n        return out;\n    };\n};\nexports.scanRight = scanRight;\n/**\n * Calculate the number of elements in a `Array`.\n *\n * @example\n * import { size } from 'fp-ts/Array'\n *\n * assert.strictEqual(size([\"a\",\"b\",\"c\"]),3)\n *\n * @since 2.10.0\n */\nvar size = function (as) { return as.length; };\nexports.size = size;\n/**\n * Test whether an array contains a particular index\n *\n * @example\n * import { isOutOfBound } from 'fp-ts/Array'\n *\n * assert.strictEqual(isOutOfBound(1,[\"a\",\"b\",\"c\"]),false)\n * assert.strictEqual(isOutOfBound(-1,[\"a\",\"b\",\"c\"]),true)\n * assert.strictEqual(isOutOfBound(3,[\"a\",\"b\",\"c\"]),true)\n *\n * @since 2.0.0\n */\nexports.isOutOfBound = NEA.isOutOfBound;\n// TODO: remove non-curried overloading in v3\n/**\n * This function provides a safe way to read a value at a particular index from an array.\n * It returns a `none` if the index is out of bounds, and a `some` of the element if the\n * index is valid.\n *\n * @example\n * import { lookup } from 'fp-ts/Array'\n * import { some, none } from 'fp-ts/Option'\n * import { pipe } from 'fp-ts/function'\n *\n * assert.deepStrictEqual(pipe([1, 2, 3], lookup(1)), some(2))\n * assert.deepStrictEqual(pipe([1, 2, 3], lookup(3)), none)\n *\n * @since 2.0.0\n */\nexports.lookup = RA.lookup;\n/**\n * Get the first element in an array, or `None` if the array is empty\n *\n * @example\n * import { head } from 'fp-ts/Array'\n * import { some, none } from 'fp-ts/Option'\n *\n * assert.deepStrictEqual(head([1, 2, 3]), some(1))\n * assert.deepStrictEqual(head([]), none)\n *\n * @since 2.0.0\n */\nexports.head = RA.head;\n/**\n * Get the last element in an array, or `None` if the array is empty\n *\n * @example\n * import { last } from 'fp-ts/Array'\n * import { some, none } from 'fp-ts/Option'\n *\n * assert.deepStrictEqual(last([1, 2, 3]), some(3))\n * assert.deepStrictEqual(last([]), none)\n *\n * @since 2.0.0\n */\nexports.last = RA.last;\n/**\n * Get all but the first element of an array, creating a new array, or `None` if the array is empty\n *\n * @example\n * import { tail } from 'fp-ts/Array'\n * import { some, none } from 'fp-ts/Option'\n *\n * assert.deepStrictEqual(tail([1, 2, 3]), some([2, 3]))\n * assert.deepStrictEqual(tail([]), none)\n *\n * @since 2.0.0\n */\nvar tail = function (as) { return ((0, exports.isNonEmpty)(as) ? _.some(NEA.tail(as)) : _.none); };\nexports.tail = tail;\n/**\n * Get all but the last element of an array, creating a new array, or `None` if the array is empty\n *\n * @example\n * import { init } from 'fp-ts/Array'\n * import { some, none } from 'fp-ts/Option'\n *\n * assert.deepStrictEqual(init([1, 2, 3]), some([1, 2]))\n * assert.deepStrictEqual(init([]), none)\n *\n * @since 2.0.0\n */\nvar init = function (as) { return ((0, exports.isNonEmpty)(as) ? _.some(NEA.init(as)) : _.none); };\nexports.init = init;\n/**\n * Keep only a max number of elements from the start of an `Array`, creating a new `Array`.\n *\n * **Note**. `n` is normalized to a non negative integer.\n *\n * @example\n * import { takeLeft } from 'fp-ts/Array'\n *\n * assert.deepStrictEqual(takeLeft(2)([1, 2, 3, 4, 5]), [1, 2]);\n * assert.deepStrictEqual(takeLeft(7)([1, 2, 3, 4, 5]), [1, 2, 3, 4, 5]);\n * assert.deepStrictEqual(takeLeft(0)([1, 2, 3, 4, 5]), []);\n * assert.deepStrictEqual(takeLeft(-1)([1, 2, 3, 4, 5]), [1, 2, 3, 4, 5]);\n *\n * @since 2.0.0\n */\nvar takeLeft = function (n) {\n    return function (as) {\n        return (0, exports.isOutOfBound)(n, as) ? (0, exports.copy)(as) : as.slice(0, n);\n    };\n};\nexports.takeLeft = takeLeft;\n/**\n * Keep only a max number of elements from the end of an `Array`, creating a new `Array`.\n *\n * **Note**. `n` is normalized to a non negative integer.\n *\n * @example\n * import { takeRight } from 'fp-ts/Array'\n *\n * assert.deepStrictEqual(takeRight(2)([1, 2, 3, 4, 5]), [4, 5]);\n * assert.deepStrictEqual(takeRight(7)([1, 2, 3, 4, 5]), [1, 2, 3, 4, 5]);\n * assert.deepStrictEqual(takeRight(0)([1, 2, 3, 4, 5]), []);\n * assert.deepStrictEqual(takeRight(-1)([1, 2, 3, 4, 5]), [1, 2, 3, 4, 5]);\n *\n * @since 2.0.0\n */\nvar takeRight = function (n) {\n    return function (as) {\n        return (0, exports.isOutOfBound)(n, as) ? (0, exports.copy)(as) : n === 0 ? [] : as.slice(-n);\n    };\n};\nexports.takeRight = takeRight;\nfunction takeLeftWhile(predicate) {\n    return function (as) {\n        var out = [];\n        for (var _i = 0, as_1 = as; _i < as_1.length; _i++) {\n            var a = as_1[_i];\n            if (!predicate(a)) {\n                break;\n            }\n            out.push(a);\n        }\n        return out;\n    };\n}\nexports.takeLeftWhile = takeLeftWhile;\nvar spanLeftIndex = function (as, predicate) {\n    var l = as.length;\n    var i = 0;\n    for (; i < l; i++) {\n        if (!predicate(as[i])) {\n            break;\n        }\n    }\n    return i;\n};\nfunction spanLeft(predicate) {\n    return function (as) {\n        var _a = (0, exports.splitAt)(spanLeftIndex(as, predicate))(as), init = _a[0], rest = _a[1];\n        return { init: init, rest: rest };\n    };\n}\nexports.spanLeft = spanLeft;\n/**\n * Creates a new `Array` which is a copy of the input dropping a max number of elements from the start.\n *\n * **Note**. `n` is normalized to a non negative integer.\n *\n * @example\n * import { dropLeft } from 'fp-ts/Array'\n *\n * assert.deepStrictEqual(dropLeft(2)([1, 2, 3]), [3]);\n * assert.deepStrictEqual(dropLeft(5)([1, 2, 3]), []);\n * assert.deepStrictEqual(dropLeft(0)([1, 2, 3]), [1, 2, 3]);\n * assert.deepStrictEqual(dropLeft(-2)([1, 2, 3]), [1, 2, 3]);\n *\n * @since 2.0.0\n */\nvar dropLeft = function (n) {\n    return function (as) {\n        return n <= 0 || (0, exports.isEmpty)(as) ? (0, exports.copy)(as) : n >= as.length ? [] : as.slice(n, as.length);\n    };\n};\nexports.dropLeft = dropLeft;\n/**\n * Creates a new `Array` which is a copy of the input dropping a max number of elements from the end.\n *\n * **Note**. `n` is normalized to a non negative integer.\n *\n * @example\n * import { dropRight } from 'fp-ts/Array'\n *\n * assert.deepStrictEqual(dropRight(2)([1, 2, 3]), [1]);\n * assert.deepStrictEqual(dropRight(5)([1, 2, 3]), []);\n * assert.deepStrictEqual(dropRight(0)([1, 2, 3]), [1, 2, 3]);\n * assert.deepStrictEqual(dropRight(-2)([1, 2, 3]), [1, 2, 3]);\n *\n * @since 2.0.0\n */\nvar dropRight = function (n) {\n    return function (as) {\n        return n <= 0 || (0, exports.isEmpty)(as) ? (0, exports.copy)(as) : n >= as.length ? [] : as.slice(0, as.length - n);\n    };\n};\nexports.dropRight = dropRight;\nfunction dropLeftWhile(predicate) {\n    return function (as) { return as.slice(spanLeftIndex(as, predicate)); };\n}\nexports.dropLeftWhile = dropLeftWhile;\n/**\n * `findIndex` returns an `Option` containing the first index for which a predicate holds.\n * It returns `None` if no element satisfies the predicate.\n * Similar to [`findFirst`](#findFirst) but returning the index instead of the element.\n *\n * @example\n * import { findIndex } from 'fp-ts/Array'\n * import { some, none } from 'fp-ts/Option'\n *\n * assert.deepStrictEqual(findIndex((n: number) => n === 2)([1, 2, 3]), some(1))\n * assert.deepStrictEqual(findIndex((n: number) => n === 2)([]), none)\n *\n * @since 2.0.0\n */\nexports.findIndex = RA.findIndex;\nfunction findFirst(predicate) {\n    return RA.findFirst(predicate);\n}\nexports.findFirst = findFirst;\n/**\n * Given a selector function which takes an element and returns an option,\n * this function applies the selector to each element of the array and\n * returns the first `Some` result. Otherwise it returns `None`.\n *\n * @example\n * import { findFirstMap } from 'fp-ts/Array'\n * import { some, none } from 'fp-ts/Option'\n *\n * interface Person {\n *   readonly name: string;\n *   readonly age: number;\n * }\n *\n * const persons: Array<Person> = [\n *   { name: \"John\", age: 16 },\n *   { name: \"Mary\", age: 45 },\n *   { name: \"Joey\", age: 28 },\n * ];\n *\n * const nameOfPersonAbove18 = (p: Person) => (p.age <= 18 ? none : some(p.name));\n * const nameOfPersonAbove70 = (p: Person) => (p.age <= 70 ? none : some(p.name));\n * assert.deepStrictEqual(findFirstMap(nameOfPersonAbove18)(persons), some(\"Mary\"));\n * assert.deepStrictEqual(findFirstMap(nameOfPersonAbove70)(persons), none);\n *\n * @since 2.0.0\n */\nexports.findFirstMap = RA.findFirstMap;\nfunction findLast(predicate) {\n    return RA.findLast(predicate);\n}\nexports.findLast = findLast;\n/**\n * Given a selector function which takes an element and returns an option,\n * this function applies the selector to each element of the array starting from the\n * end and returns the last `Some` result. Otherwise it returns `None`.\n *\n * @example\n * import { findLastMap } from 'fp-ts/Array'\n * import { some, none } from 'fp-ts/Option'\n *\n * interface Person {\n *   readonly name: string;\n *   readonly age: number;\n * }\n *\n * const persons: Array<Person> = [\n *   { name: \"John\", age: 16 },\n *   { name: \"Mary\", age: 45 },\n *   { name: \"Joey\", age: 28 },\n * ];\n *\n * const nameOfPersonAbove18 = (p: Person) => (p.age <= 18 ? none : some(p.name));\n * const nameOfPersonAbove70 = (p: Person) => (p.age <= 70 ? none : some(p.name));\n * assert.deepStrictEqual(findLastMap(nameOfPersonAbove18)(persons), some(\"Joey\"));\n * assert.deepStrictEqual(findLastMap(nameOfPersonAbove70)(persons), none);\n *\n * @since 2.0.0\n */\nexports.findLastMap = RA.findLastMap;\n/**\n * Returns the index of the last element of the list which matches the predicate.\n * It returns an `Option` containing the index or `None` if not found.\n *\n * @example\n * import { findLastIndex } from 'fp-ts/Array'\n * import { some, none } from 'fp-ts/Option'\n *\n * interface X {\n *   readonly a: number\n *   readonly b: number\n * }\n * const xs: Array<X> = [{ a: 1, b: 0 }, { a: 1, b: 1 }]\n * assert.deepStrictEqual(findLastIndex((x: { readonly a: number }) => x.a === 1)(xs), some(1))\n * assert.deepStrictEqual(findLastIndex((x: { readonly a: number }) => x.a === 4)(xs), none)\n *\n * @since 2.0.0\n */\nexports.findLastIndex = RA.findLastIndex;\n/**\n * This function takes an array and makes a new array containing the same elements.\n *\n * @since 2.0.0\n */\nvar copy = function (as) { return as.slice(); };\nexports.copy = copy;\n/**\n * Insert an element at the specified index, creating a new array,\n * or returning `None` if the index is out of bounds.\n *\n * @example\n * import { insertAt } from 'fp-ts/Array'\n * import { some } from 'fp-ts/Option'\n *\n * assert.deepStrictEqual(insertAt(2, 5)([1, 2, 3, 4]), some([1, 2, 5, 3, 4]))\n *\n * @since 2.0.0\n */\nvar insertAt = function (i, a) {\n    return function (as) {\n        return i < 0 || i > as.length ? _.none : _.some((0, exports.unsafeInsertAt)(i, a, as));\n    };\n};\nexports.insertAt = insertAt;\n/**\n * Change the element at the specified index, creating a new array,\n * or returning `None` if the index is out of bounds.\n *\n * @example\n * import { updateAt } from 'fp-ts/Array'\n * import { some, none } from 'fp-ts/Option'\n *\n * assert.deepStrictEqual(updateAt(1, 1)([1, 2, 3]), some([1, 1, 3]))\n * assert.deepStrictEqual(updateAt(1, 1)([]), none)\n *\n * @since 2.0.0\n */\nvar updateAt = function (i, a) { return (0, exports.modifyAt)(i, function () { return a; }); };\nexports.updateAt = updateAt;\n/**\n * Delete the element at the specified index, creating a new array, or returning `None` if the index is out of bounds.\n *\n * @example\n * import { deleteAt } from 'fp-ts/Array'\n * import { some, none } from 'fp-ts/Option'\n *\n * assert.deepStrictEqual(deleteAt(0)([1, 2, 3]), some([2, 3]))\n * assert.deepStrictEqual(deleteAt(1)([]), none)\n *\n * @since 2.0.0\n */\nvar deleteAt = function (i) {\n    return function (as) {\n        return (0, exports.isOutOfBound)(i, as) ? _.none : _.some((0, exports.unsafeDeleteAt)(i, as));\n    };\n};\nexports.deleteAt = deleteAt;\n/**\n * Apply a function to the element at the specified index, creating a new array, or returning `None` if the index is out\n * of bounds.\n *\n * @example\n * import { modifyAt } from 'fp-ts/Array'\n * import { some, none } from 'fp-ts/Option'\n *\n * const double = (x: number): number => x * 2\n * assert.deepStrictEqual(modifyAt(1, double)([1, 2, 3]), some([1, 4, 3]))\n * assert.deepStrictEqual(modifyAt(1, double)([]), none)\n *\n * @since 2.0.0\n */\nvar modifyAt = function (i, f) {\n    return function (as) {\n        return (0, exports.isOutOfBound)(i, as) ? _.none : _.some((0, exports.unsafeUpdateAt)(i, f(as[i]), as));\n    };\n};\nexports.modifyAt = modifyAt;\n/**\n * Reverse an array, creating a new array\n *\n * @example\n * import { reverse } from 'fp-ts/Array'\n *\n * assert.deepStrictEqual(reverse([1, 2, 3]), [3, 2, 1])\n *\n * @since 2.0.0\n */\nvar reverse = function (as) { return ((0, exports.isEmpty)(as) ? [] : as.slice().reverse()); };\nexports.reverse = reverse;\n/**\n * Takes an `Array` of `Either` and produces a new `Array` containing\n * the values of all the `Right` elements in the same order.\n *\n * @example\n * import { rights } from 'fp-ts/Array'\n * import { right, left } from 'fp-ts/Either'\n *\n * assert.deepStrictEqual(rights([right(1), left('foo'), right(2)]), [1, 2])\n *\n * @since 2.0.0\n */\nvar rights = function (as) {\n    var r = [];\n    for (var i = 0; i < as.length; i++) {\n        var a = as[i];\n        if (a._tag === 'Right') {\n            r.push(a.right);\n        }\n    }\n    return r;\n};\nexports.rights = rights;\n/**\n * Takes an `Array` of `Either` and produces a new `Array` containing\n * the values of all the `Left` elements in the same order.\n *\n * @example\n * import { lefts } from 'fp-ts/Array'\n * import { left, right } from 'fp-ts/Either'\n *\n * assert.deepStrictEqual(lefts([right(1), left('foo'), right(2)]), ['foo'])\n *\n * @since 2.0.0\n */\nvar lefts = function (as) {\n    var r = [];\n    for (var i = 0; i < as.length; i++) {\n        var a = as[i];\n        if (a._tag === 'Left') {\n            r.push(a.left);\n        }\n    }\n    return r;\n};\nexports.lefts = lefts;\n/**\n * Sort the elements of an array in increasing order, creating a new array\n *\n * @example\n * import { sort } from 'fp-ts/Array'\n * import * as N from 'fp-ts/number'\n *\n * assert.deepStrictEqual(sort(N.Ord)([3, 2, 1]), [1, 2, 3])\n *\n * @since 2.0.0\n */\nvar sort = function (O) {\n    return function (as) {\n        return as.length <= 1 ? (0, exports.copy)(as) : as.slice().sort(O.compare);\n    };\n};\nexports.sort = sort;\n/**\n * Apply a function to pairs of elements at the same index in two arrays, collecting the results in a new array. If one\n * input array is short, excess elements of the longer array are discarded.\n *\n * @example\n * import { zipWith } from 'fp-ts/Array'\n *\n * assert.deepStrictEqual(zipWith([1, 2, 3], ['a', 'b', 'c', 'd'], (n, s) => s + n), ['a1', 'b2', 'c3'])\n *\n * @since 2.0.0\n */\nvar zipWith = function (fa, fb, f) {\n    var fc = [];\n    var len = Math.min(fa.length, fb.length);\n    for (var i = 0; i < len; i++) {\n        fc[i] = f(fa[i], fb[i]);\n    }\n    return fc;\n};\nexports.zipWith = zipWith;\nfunction zip(as, bs) {\n    if (bs === undefined) {\n        return function (bs) { return zip(bs, as); };\n    }\n    return (0, exports.zipWith)(as, bs, function (a, b) { return [a, b]; });\n}\nexports.zip = zip;\n/**\n * The function is reverse of `zip`. Takes an array of pairs and return two corresponding arrays\n *\n * @example\n * import { unzip } from 'fp-ts/Array'\n *\n * assert.deepStrictEqual(unzip([[1, 'a'], [2, 'b'], [3, 'c']]), [[1, 2, 3], ['a', 'b', 'c']])\n *\n * @since 2.0.0\n */\nvar unzip = function (as) {\n    var fa = [];\n    var fb = [];\n    for (var i = 0; i < as.length; i++) {\n        fa[i] = as[i][0];\n        fb[i] = as[i][1];\n    }\n    return [fa, fb];\n};\nexports.unzip = unzip;\n/**\n * Creates a new `Array`, prepending an element to every member of the input `Array`.\n *\n * @example\n * import { prependAll } from 'fp-ts/Array'\n *\n * assert.deepStrictEqual(prependAll(9)([1, 2, 3, 4]), [9, 1, 9, 2, 9, 3, 9, 4])\n *\n * @since 2.10.0\n */\nvar prependAll = function (middle) {\n    var f = NEA.prependAll(middle);\n    return function (as) { return ((0, exports.isNonEmpty)(as) ? f(as) : []); };\n};\nexports.prependAll = prependAll;\n/**\n * Creates a new `Array` placing an element in between members of the input `Array`.\n *\n * @example\n * import { intersperse } from 'fp-ts/Array'\n *\n * assert.deepStrictEqual(intersperse(9)([1, 2, 3, 4]), [1, 9, 2, 9, 3, 9, 4])\n *\n * @since 2.9.0\n */\nvar intersperse = function (middle) {\n    var f = NEA.intersperse(middle);\n    return function (as) { return ((0, exports.isNonEmpty)(as) ? f(as) : (0, exports.copy)(as)); };\n};\nexports.intersperse = intersperse;\n/**\n * Creates a new `Array` rotating the input `Array` by `n` steps.\n *\n * @example\n * import { rotate } from 'fp-ts/Array'\n *\n * assert.deepStrictEqual(rotate(2)([1, 2, 3, 4, 5]), [4, 5, 1, 2, 3])\n *\n * @since 2.0.0\n */\nvar rotate = function (n) {\n    var f = NEA.rotate(n);\n    return function (as) { return ((0, exports.isNonEmpty)(as) ? f(as) : (0, exports.copy)(as)); };\n};\nexports.rotate = rotate;\n// TODO: remove non-curried overloading in v3\n/**\n * Test if a value is a member of an `Array`. Takes a `Eq<A>` as a single\n * argument which returns the function to use to search for a value of type `A` in\n * an `Array<A>`.\n *\n * @example\n * import { elem } from 'fp-ts/Array'\n * import * as N from 'fp-ts/number'\n * import { pipe } from 'fp-ts/function'\n *\n * assert.strictEqual(pipe([1, 2, 3], elem(N.Eq)(2)), true)\n * assert.strictEqual(pipe([1, 2, 3], elem(N.Eq)(0)), false)\n *\n * @since 2.0.0\n */\nexports.elem = RA.elem;\n/**\n * Creates a new `Array` removing duplicate elements, keeping the first occurrence of an element,\n * based on a `Eq<A>`.\n *\n * @example\n * import { uniq } from 'fp-ts/Array'\n * import * as N from 'fp-ts/number'\n *\n * assert.deepStrictEqual(uniq(N.Eq)([1, 2, 1]), [1, 2])\n *\n * @since 2.0.0\n */\nvar uniq = function (E) {\n    var f = NEA.uniq(E);\n    return function (as) { return ((0, exports.isNonEmpty)(as) ? f(as) : (0, exports.copy)(as)); };\n};\nexports.uniq = uniq;\n/**\n * Sort the elements of an array in increasing order, where elements are compared using first `ords[0]`, then `ords[1]`,\n * etc...\n *\n * @example\n * import { sortBy } from 'fp-ts/Array'\n * import { contramap } from 'fp-ts/Ord'\n * import * as S from 'fp-ts/string'\n * import * as N from 'fp-ts/number'\n * import { pipe } from 'fp-ts/function'\n *\n * interface Person {\n *   readonly name: string\n *   readonly age: number\n * }\n * const byName = pipe(S.Ord, contramap((p: Person) => p.name))\n * const byAge = pipe(N.Ord, contramap((p: Person) => p.age))\n *\n * const sortByNameByAge = sortBy([byName, byAge])\n *\n * const persons = [{ name: 'a', age: 1 }, { name: 'b', age: 3 }, { name: 'c', age: 2 }, { name: 'b', age: 2 }]\n * assert.deepStrictEqual(sortByNameByAge(persons), [\n *   { name: 'a', age: 1 },\n *   { name: 'b', age: 2 },\n *   { name: 'b', age: 3 },\n *   { name: 'c', age: 2 }\n * ])\n *\n * @since 2.0.0\n */\nvar sortBy = function (ords) {\n    var f = NEA.sortBy(ords);\n    return function (as) { return ((0, exports.isNonEmpty)(as) ? f(as) : (0, exports.copy)(as)); };\n};\nexports.sortBy = sortBy;\n/**\n * A useful recursion pattern for processing an array to produce a new array, often used for \"chopping\" up the input\n * array. Typically chop is called with some function that will consume an initial prefix of the array and produce a\n * value and the rest of the array.\n *\n * @example\n * import { Eq } from 'fp-ts/Eq'\n * import * as A from 'fp-ts/Array'\n * import * as N from 'fp-ts/number'\n * import { pipe } from 'fp-ts/function'\n *\n * const group = <A>(S: Eq<A>): ((as: Array<A>) => Array<Array<A>>) => {\n *   return A.chop(as => {\n *     const { init, rest } = pipe(as, A.spanLeft((a: A) => S.equals(a, as[0])))\n *     return [init, rest]\n *   })\n * }\n * assert.deepStrictEqual(group(N.Eq)([1, 1, 2, 3, 3, 4]), [[1, 1], [2], [3, 3], [4]])\n *\n * @since 2.0.0\n */\nvar chop = function (f) {\n    var g = NEA.chop(f);\n    return function (as) { return ((0, exports.isNonEmpty)(as) ? g(as) : []); };\n};\nexports.chop = chop;\n/**\n * Splits an `Array` into two pieces, the first piece has max `n` elements.\n *\n * @example\n * import { splitAt } from 'fp-ts/Array'\n *\n * assert.deepStrictEqual(splitAt(2)([1, 2, 3, 4, 5]), [[1, 2], [3, 4, 5]])\n *\n * @since 2.0.0\n */\nvar splitAt = function (n) {\n    return function (as) {\n        return n >= 1 && (0, exports.isNonEmpty)(as) ? NEA.splitAt(n)(as) : (0, exports.isEmpty)(as) ? [(0, exports.copy)(as), []] : [[], (0, exports.copy)(as)];\n    };\n};\nexports.splitAt = splitAt;\n/**\n * Splits an array into length-`n` pieces. The last piece will be shorter if `n` does not evenly divide the length of\n * the array. Note that `chunksOf(n)([])` is `[]`, not `[[]]`. This is intentional, and is consistent with a recursive\n * definition of `chunksOf`; it satisfies the property that\n *\n * ```ts\n * chunksOf(n)(xs).concat(chunksOf(n)(ys)) == chunksOf(n)(xs.concat(ys)))\n * ```\n *\n * whenever `n` evenly divides the length of `xs`.\n *\n * @example\n * import { chunksOf } from 'fp-ts/Array'\n *\n * assert.deepStrictEqual(chunksOf(2)([1, 2, 3, 4, 5]), [[1, 2], [3, 4], [5]])\n *\n * @since 2.0.0\n */\nvar chunksOf = function (n) {\n    var f = NEA.chunksOf(n);\n    return function (as) { return ((0, exports.isNonEmpty)(as) ? f(as) : []); };\n};\nexports.chunksOf = chunksOf;\n/**\n * @category lifting\n * @since 2.11.0\n */\nvar fromOptionK = function (f) {\n    return function () {\n        var a = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            a[_i] = arguments[_i];\n        }\n        return (0, exports.fromOption)(f.apply(void 0, a));\n    };\n};\nexports.fromOptionK = fromOptionK;\nfunction comprehension(input, f, g) {\n    if (g === void 0) { g = function () { return true; }; }\n    var go = function (scope, input) {\n        return (0, exports.isNonEmpty)(input)\n            ? (0, exports.flatMap)(NEA.head(input), function (a) { return go((0, function_1.pipe)(scope, (0, exports.append)(a)), NEA.tail(input)); })\n            : g.apply(void 0, scope) ? [f.apply(void 0, scope)]\n                : [];\n    };\n    return go([], input);\n}\nexports.comprehension = comprehension;\n/**\n * @since 2.11.0\n */\nvar concatW = function (second) {\n    return function (first) {\n        return (0, exports.isEmpty)(first) ? (0, exports.copy)(second) : (0, exports.isEmpty)(second) ? (0, exports.copy)(first) : first.concat(second);\n    };\n};\nexports.concatW = concatW;\n/**\n * @since 2.11.0\n */\nexports.concat = exports.concatW;\nfunction union(E) {\n    var unionE = NEA.union(E);\n    return function (first, second) {\n        if (second === undefined) {\n            var unionE_1 = union(E);\n            return function (second) { return unionE_1(second, first); };\n        }\n        return (0, exports.isNonEmpty)(first) && (0, exports.isNonEmpty)(second)\n            ? unionE(second)(first)\n            : (0, exports.isNonEmpty)(first)\n                ? (0, exports.copy)(first)\n                : (0, exports.copy)(second);\n    };\n}\nexports.union = union;\nfunction intersection(E) {\n    var elemE = (0, exports.elem)(E);\n    return function (xs, ys) {\n        if (ys === undefined) {\n            var intersectionE_1 = intersection(E);\n            return function (ys) { return intersectionE_1(ys, xs); };\n        }\n        return xs.filter(function (a) { return elemE(a, ys); });\n    };\n}\nexports.intersection = intersection;\nfunction difference(E) {\n    var elemE = (0, exports.elem)(E);\n    return function (xs, ys) {\n        if (ys === undefined) {\n            var differenceE_1 = difference(E);\n            return function (ys) { return differenceE_1(ys, xs); };\n        }\n        return xs.filter(function (a) { return !elemE(a, ys); });\n    };\n}\nexports.difference = difference;\nvar _map = function (fa, f) { return (0, function_1.pipe)(fa, (0, exports.map)(f)); };\n/* istanbul ignore next */\nvar _mapWithIndex = function (fa, f) { return (0, function_1.pipe)(fa, (0, exports.mapWithIndex)(f)); };\nvar _ap = function (fab, fa) { return (0, function_1.pipe)(fab, (0, exports.ap)(fa)); };\n/* istanbul ignore next */\nvar _filter = function (fa, predicate) { return (0, function_1.pipe)(fa, (0, exports.filter)(predicate)); };\n/* istanbul ignore next */\nvar _filterMap = function (fa, f) { return (0, function_1.pipe)(fa, (0, exports.filterMap)(f)); };\n/* istanbul ignore next */\nvar _partition = function (fa, predicate) {\n    return (0, function_1.pipe)(fa, (0, exports.partition)(predicate));\n};\n/* istanbul ignore next */\nvar _partitionMap = function (fa, f) { return (0, function_1.pipe)(fa, (0, exports.partitionMap)(f)); };\n/* istanbul ignore next */\nvar _partitionWithIndex = function (fa, predicateWithIndex) { return (0, function_1.pipe)(fa, (0, exports.partitionWithIndex)(predicateWithIndex)); };\n/* istanbul ignore next */\nvar _partitionMapWithIndex = function (fa, f) { return (0, function_1.pipe)(fa, (0, exports.partitionMapWithIndex)(f)); };\n/* istanbul ignore next */\nvar _alt = function (fa, that) { return (0, function_1.pipe)(fa, (0, exports.alt)(that)); };\nvar _reduce = function (fa, b, f) { return (0, function_1.pipe)(fa, (0, exports.reduce)(b, f)); };\n/* istanbul ignore next */\nvar _foldMap = function (M) {\n    var foldMapM = (0, exports.foldMap)(M);\n    return function (fa, f) { return (0, function_1.pipe)(fa, foldMapM(f)); };\n};\n/* istanbul ignore next */\nvar _reduceRight = function (fa, b, f) { return (0, function_1.pipe)(fa, (0, exports.reduceRight)(b, f)); };\n/* istanbul ignore next */\nvar _reduceWithIndex = function (fa, b, f) {\n    return (0, function_1.pipe)(fa, (0, exports.reduceWithIndex)(b, f));\n};\n/* istanbul ignore next */\nvar _foldMapWithIndex = function (M) {\n    var foldMapWithIndexM = (0, exports.foldMapWithIndex)(M);\n    return function (fa, f) { return (0, function_1.pipe)(fa, foldMapWithIndexM(f)); };\n};\n/* istanbul ignore next */\nvar _reduceRightWithIndex = function (fa, b, f) {\n    return (0, function_1.pipe)(fa, (0, exports.reduceRightWithIndex)(b, f));\n};\n/* istanbul ignore next */\nvar _filterMapWithIndex = function (fa, f) { return (0, function_1.pipe)(fa, (0, exports.filterMapWithIndex)(f)); };\n/* istanbul ignore next */\nvar _filterWithIndex = function (fa, predicateWithIndex) { return (0, function_1.pipe)(fa, (0, exports.filterWithIndex)(predicateWithIndex)); };\n/* istanbul ignore next */\nvar _extend = function (fa, f) { return (0, function_1.pipe)(fa, (0, exports.extend)(f)); };\n/* istanbul ignore next */\nvar _traverse = function (F) {\n    var traverseF = (0, exports.traverse)(F);\n    return function (ta, f) { return (0, function_1.pipe)(ta, traverseF(f)); };\n};\n/* istanbul ignore next */\nvar _traverseWithIndex = function (F) {\n    var traverseWithIndexF = (0, exports.traverseWithIndex)(F);\n    return function (ta, f) { return (0, function_1.pipe)(ta, traverseWithIndexF(f)); };\n};\nvar _chainRecDepthFirst = RA._chainRecDepthFirst;\nvar _chainRecBreadthFirst = RA._chainRecBreadthFirst;\n/**\n * Given an element of the base type, `of` builds an `Array` containing just that\n * element of the base type (this is useful for building a `Monad`).\n *\n * @example\n * import { of } from 'fp-ts/Array'\n *\n * assert.deepStrictEqual(of(\"a\"), [\"a\"]);\n *\n * @category constructors\n * @since 2.0.0\n */\nexports.of = NEA.of;\n/**\n * Makes an empty `Array`, useful for building a [`Monoid`](#Monoid)\n *\n * @since 2.7.0\n */\nvar zero = function () { return []; };\nexports.zero = zero;\n/**\n * `map` can be used to turn functions `(a: A) => B` into functions `(fa: Array<A>) => Array<B>`.\n * In practice it applies the base function to each element of the array and collects the\n * results in a new array.\n *\n * @example\n * import { map } from 'fp-ts/Array'\n * import { pipe } from 'fp-ts/function'\n *\n * const f = (n: number) => n * 2;\n * assert.deepStrictEqual(pipe([1, 2, 3], map(f)), [2, 4, 6]);\n *\n * @category mapping\n * @since 2.0.0\n */\nvar map = function (f) { return function (fa) { return fa.map(function (a) { return f(a); }); }; };\nexports.map = map;\n/**\n * @example\n * import { ap, map, of } from 'fp-ts/Array'\n * import { pipe } from 'fp-ts/function'\n *\n * // a curried function with 3 input parameteres\n * const f = (s1: string) => (n: number) => (s2: string) => s1 + n + s2;\n *\n * // let's use `ap` to iterate `f` over an array for each input parameter\n * assert.deepStrictEqual(pipe([\"a\", \"b\"], map(f), ap([1, 2]), ap([\"😀\", \"😫\", \"😎\"])), [\n *   \"a1😀\", \"a1😫\", \"a1😎\",\n *   \"a2😀\", \"a2😫\", \"a2😎\",\n *   \"b1😀\", \"b1😫\", \"b1😎\",\n *   \"b2😀\", \"b2😫\", \"b2😎\",\n * ]);\n *\n * // given Array implements the Applicative interface with the `of` method,\n * // we can write exactly the same thing in a more symmetric way\n * // using `of` on `f` and `ap` on each array in input\n * assert.deepStrictEqual(\n *   pipe(of(f), ap([\"a\", \"b\"]), ap([1, 2]), ap([\"😀\", \"😫\", \"😎\"])),\n *   pipe([\"a\", \"b\"], map(f), ap([1, 2]), ap([\"😀\", \"😫\", \"😎\"]))\n * );\n *\n * @since 2.0.0\n */\nvar ap = function (fa) {\n    return (0, exports.flatMap)(function (f) { return (0, function_1.pipe)(fa, (0, exports.map)(f)); });\n};\nexports.ap = ap;\n/**\n * Composes computations in sequence, using the return value of one computation to\n * determine the next computation.\n *\n * In other words it takes a function `f` that produces an array from a single element of\n * the base type `A` and returns a new function which applies `f` to each element of the\n * input array (like [`map`](#map)) and, instead of returning an array of arrays, concatenates the\n * results into a single array (like [`flatten`](#flatten)).\n *\n * @example\n * import { flatMap, map, replicate } from 'fp-ts/Array'\n * import { pipe } from 'fp-ts/function'\n *\n * const f = (n: number) => replicate(n, `${n}`);\n * assert.deepStrictEqual(pipe([1, 2, 3], map(f)), [[\"1\"], [\"2\", \"2\"], [\"3\", \"3\", \"3\"]]);\n * assert.deepStrictEqual(pipe([1, 2, 3], flatMap(f)), [\"1\", \"2\", \"2\", \"3\", \"3\", \"3\"]);\n *\n * @category sequencing\n * @since 2.14.0\n */\nexports.flatMap = (0, function_1.dual)(2, function (ma, f) {\n    return (0, function_1.pipe)(ma, (0, exports.chainWithIndex)(function (i, a) { return f(a, i); }));\n});\n/**\n * Takes an array of arrays of `A` and flattens them into an array of `A`\n * by concatenating the elements of each array in order.\n *\n * @example\n * import { flatten } from 'fp-ts/Array'\n *\n * assert.deepStrictEqual(flatten([[\"a\"], [\"b\", \"c\"], [\"d\", \"e\", \"f\"]]), [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\"]);\n *\n * @category sequencing\n * @since 2.5.0\n */\nexports.flatten = (0, exports.flatMap)(function_1.identity);\n/**\n * Same as [`map`](#map), but the iterating function takes both the index and the value\n * of the element.\n *\n * @example\n * import { mapWithIndex } from 'fp-ts/Array'\n * import { pipe } from 'fp-ts/function'\n *\n * const f = (i: number, s: string) => `${s} - ${i}`;\n * assert.deepStrictEqual(pipe([\"a\", \"b\", \"c\"], mapWithIndex(f)), [\"a - 0\", \"b - 1\", \"c - 2\"]);\n *\n * @category mapping\n * @since 2.0.0\n */\nvar mapWithIndex = function (f) { return function (fa) {\n    return fa.map(function (a, i) { return f(i, a); });\n}; };\nexports.mapWithIndex = mapWithIndex;\n/**\n * Maps an array with an iterating function that takes the index and the value of\n * each element and returns an `Option`. It keeps only the `Some` values discarding\n * the `None`s.\n *\n * Same as [`filterMap`](#filterMap), but with an iterating function which takes also\n * the index as input.\n *\n * @example\n * import { filterMapWithIndex } from 'fp-ts/Array'\n * import { pipe } from 'fp-ts/function'\n * import { option } from \"fp-ts\";\n *\n * const f = (i: number, s: string) => (i % 2 === 1 ? option.some(s.toUpperCase()) : option.none);\n * assert.deepStrictEqual(pipe([\"a\", \"no\", \"neither\", \"b\"], filterMapWithIndex(f)), [\"NO\", \"B\"]);\n *\n * @category filtering\n * @since 2.0.0\n */\nvar filterMapWithIndex = function (f) {\n    return function (fa) {\n        var out = [];\n        for (var i = 0; i < fa.length; i++) {\n            var optionB = f(i, fa[i]);\n            if (_.isSome(optionB)) {\n                out.push(optionB.value);\n            }\n        }\n        return out;\n    };\n};\nexports.filterMapWithIndex = filterMapWithIndex;\n/**\n * Maps an array with an iterating function that returns an `Option`\n * and it keeps only the `Some` values discarding the `None`s.\n *\n * @example\n * import { filterMap } from 'fp-ts/Array'\n * import { pipe } from 'fp-ts/function'\n * import { option } from \"fp-ts\";\n *\n * const f = (s: string) => s.length === 1 ? option.some(s.toUpperCase()) : option.none;\n * assert.deepStrictEqual(pipe([\"a\", \"no\", \"neither\", \"b\"], filterMap(f)), [\"A\", \"B\"]);\n *\n * @category filtering\n * @since 2.0.0\n */\nvar filterMap = function (f) {\n    return (0, exports.filterMapWithIndex)(function (_, a) { return f(a); });\n};\nexports.filterMap = filterMap;\n/**\n * Compact an array of `Option`s discarding the `None` values and\n * keeping the `Some` values. It returns a new array containing the values of\n * the `Some` options.\n *\n * @example\n * import { compact } from 'fp-ts/Array'\n * import { option } from \"fp-ts\";\n *\n * assert.deepStrictEqual(compact([option.some(\"a\"), option.none, option.some(\"b\")]), [\"a\", \"b\"]);\n *\n * @category filtering\n * @since 2.0.0\n */\nexports.compact = (0, exports.filterMap)(function_1.identity);\n/**\n * Separate an array of `Either`s into `Left`s and `Right`s, creating two new arrays:\n * one containing all the left values and one containing all the right values.\n *\n * @example\n * import { separate } from 'fp-ts/Array'\n * import { either } from \"fp-ts\";\n *\n * assert.deepStrictEqual(separate([either.right(\"r1\"), either.left(\"l1\"), either.right(\"r2\")]), {\n *   left: [\"l1\"],\n *   right: [\"r1\", \"r2\"],\n * });\n *\n * @category filtering\n * @since 2.0.0\n */\nvar separate = function (fa) {\n    var left = [];\n    var right = [];\n    for (var _i = 0, fa_1 = fa; _i < fa_1.length; _i++) {\n        var e = fa_1[_i];\n        if (e._tag === 'Left') {\n            left.push(e.left);\n        }\n        else {\n            right.push(e.right);\n        }\n    }\n    return (0, Separated_1.separated)(left, right);\n};\nexports.separate = separate;\n/**\n * Given an iterating function that is a `Predicate` or a `Refinement`,\n * `filter` creates a new `Array` containing the elements of the original\n * `Array` for which the iterating function is `true`.\n *\n * @example\n * import { filter } from 'fp-ts/Array'\n * import { isString } from \"fp-ts/lib/string\";\n *\n * assert.deepStrictEqual(filter(isString)([\"a\", 1, {}, \"b\", 5]), [\"a\", \"b\"]);\n * assert.deepStrictEqual(filter((x:number) => x > 0)([-3, 1, -2, 5]), [1, 5]);\n *\n * @category filtering\n * @since 2.0.0\n */\nvar filter = function (predicate) {\n    return function (as) {\n        return as.filter(predicate);\n    };\n};\nexports.filter = filter;\n/**\n * Given an iterating function that is a `Predicate` or a `Refinement`,\n * `partition` creates two new `Array`s: `right` containing the elements of the original\n * `Array` for which the iterating function is `true`, `left` containing the elements\n * for which it is false.\n *\n * @example\n * import { partition } from 'fp-ts/Array'\n * import { isString } from \"fp-ts/lib/string\";\n *\n * assert.deepStrictEqual(partition(isString)([\"a\", 1, {}, \"b\", 5]), { left: [1, {}, 5], right: [\"a\", \"b\"] });\n * assert.deepStrictEqual(partition((x: number) => x > 0)([-3, 1, -2, 5]), { left: [-3, -2], right: [1, 5] });\n *\n * @category filtering\n * @since 2.0.0\n */\nvar partition = function (predicate) {\n    return (0, exports.partitionWithIndex)(function (_, a) { return predicate(a); });\n};\nexports.partition = partition;\n/**\n * Same as [`partition`](#partition), but passing also the index to the iterating function.\n *\n * @example\n * import { partitionWithIndex } from 'fp-ts/Array'\n *\n * assert.deepStrictEqual(partitionWithIndex((index, x: number) => index < 3 && x > 0)([-2, 5, 6, 7]), {\n *   left: [-2, 7],\n *   right: [5, 6],\n * });\n *\n * @category filtering\n * @since 2.0.0\n */\nvar partitionWithIndex = function (predicateWithIndex) {\n    return function (as) {\n        var left = [];\n        var right = [];\n        for (var i = 0; i < as.length; i++) {\n            var b = as[i];\n            if (predicateWithIndex(i, b)) {\n                right.push(b);\n            }\n            else {\n                left.push(b);\n            }\n        }\n        return (0, Separated_1.separated)(left, right);\n    };\n};\nexports.partitionWithIndex = partitionWithIndex;\n/**\n * Given an iterating function that returns an `Either`,\n * `partitionMap` applies the iterating function to each element and it creates two `Array`s:\n * `right` containing the values of `Right` results, `left` containing the values of `Left` results.\n *\n * @example\n * import { partitionMap } from 'fp-ts/Array'\n * import { Either, left, right } from \"fp-ts/lib/Either\";\n *\n * const upperIfString = <B>(x: B): Either<B, string> =>\n *   typeof x === \"string\" ? right(x.toUpperCase()) : left(x);\n * assert.deepStrictEqual(partitionMap(upperIfString)([-2, \"hello\", 6, 7, \"world\"]), {\n *   left: [-2, 6, 7],\n *   right: [ 'HELLO', 'WORLD' ],\n * });\n *\n * @category filtering\n * @since 2.0.0\n */\nvar partitionMap = function (f) { return (0, exports.partitionMapWithIndex)(function (_, a) { return f(a); }); };\nexports.partitionMap = partitionMap;\n/**\n * Same as [`partitionMap`](#partitionMap), but passing also the index to the iterating function.\n *\n * @example\n * import { partitionMapWithIndex } from 'fp-ts/Array'\n * import { Either, left, right } from \"fp-ts/lib/Either\";\n *\n * const upperIfStringBefore3 = <B>(index: number, x: B): Either<B, string> =>\n *   index < 3 && typeof x === \"string\" ? right(x.toUpperCase()) : left(x);\n * assert.deepStrictEqual(partitionMapWithIndex(upperIfStringBefore3)([-2, \"hello\", 6, 7, \"world\"]), {\n *   left: [-2, 6, 7, \"world\"],\n *   right: [\"HELLO\"],\n * });\n *\n * @category filtering\n * @since 2.0.0\n */\nvar partitionMapWithIndex = function (f) {\n    return function (fa) {\n        var left = [];\n        var right = [];\n        for (var i = 0; i < fa.length; i++) {\n            var e = f(i, fa[i]);\n            if (e._tag === 'Left') {\n                left.push(e.left);\n            }\n            else {\n                right.push(e.right);\n            }\n        }\n        return (0, Separated_1.separated)(left, right);\n    };\n};\nexports.partitionMapWithIndex = partitionMapWithIndex;\n/**\n * Less strict version of [`alt`](#alt).\n *\n * The `W` suffix (short for **W**idening) means that the return types will be merged.\n *\n * @example\n * import * as A from 'fp-ts/Array'\n * import { pipe } from 'fp-ts/function'\n *\n * assert.deepStrictEqual(\n *   pipe(\n *     [1, 2, 3],\n *     A.altW(() => ['a', 'b'])\n *   ),\n *   [1, 2, 3, 'a', 'b']\n * )\n *\n * @category error handling\n * @since 2.9.0\n */\nvar altW = function (that) {\n    return function (fa) {\n        return fa.concat(that());\n    };\n};\nexports.altW = altW;\n/**\n * Identifies an associative operation on a type constructor. It is similar to `Semigroup`, except that it applies to\n * types of kind `* -> *`.\n *\n * In case of `Array` concatenates the inputs into a single array.\n *\n * @example\n * import * as A from 'fp-ts/Array'\n * import { pipe } from 'fp-ts/function'\n *\n * assert.deepStrictEqual(\n *   pipe(\n *     [1, 2, 3],\n *     A.alt(() => [4, 5])\n *   ),\n *   [1, 2, 3, 4, 5]\n * )\n *\n * @category error handling\n * @since 2.0.0\n */\nexports.alt = exports.altW;\n/**\n * Same as [`filter`](#filter), but passing also the index to the iterating function.\n *\n * @example\n * import { filterWithIndex } from 'fp-ts/Array';\n *\n * const f = (index: number, x: number) => x > 0 && index <= 2;\n * assert.deepStrictEqual(filterWithIndex(f)([-3, 1, -2, 5]), [1]);\n *\n * @category filtering\n * @since 2.0.0\n */\nvar filterWithIndex = function (predicateWithIndex) {\n    return function (as) {\n        return as.filter(function (b, i) { return predicateWithIndex(i, b); });\n    };\n};\nexports.filterWithIndex = filterWithIndex;\n/**\n * Given an iterating function that takes `Array<A>` as input, `extend` returns\n * an array containing the results of the iterating function applied to the whole input\n * `Array`, then to the input `Array` without the first element, then to the input\n * `Array` without the first two elements, etc.\n *\n * @example\n * import { extend } from 'fp-ts/Array'\n *\n * const f = (a: string[]) => a.join(\",\");\n * assert.deepStrictEqual(extend(f)([\"a\", \"b\", \"c\"]), [\"a,b,c\", \"b,c\", \"c\"]);\n *\n * @since 2.0.0\n */\nvar extend = function (f) { return function (wa) {\n    return wa.map(function (_, i) { return f(wa.slice(i)); });\n}; };\nexports.extend = extend;\n/**\n * `duplicate` returns an array containing the whole input `Array`,\n * then to the input `Array` dropping the first element, then to the input\n * `Array` dropping the first two elements, etc.\n *\n * @example\n * import { duplicate } from 'fp-ts/Array'\n *\n * assert.deepStrictEqual(duplicate([\"a\", \"b\", \"c\"]), [[\"a\", \"b\", \"c\"], [\"b\", \"c\"], [\"c\"]]);\n *\n * @since 2.0.0\n */\nexports.duplicate = (0, exports.extend)(function_1.identity);\n/**\n * Map and fold an `Array`.\n * Map the `Array` passing each value to the iterating function.\n * Then fold the results using the provided `Monoid`.\n *\n * @example\n * import { foldMap } from 'fp-ts/Array'\n *\n * const monoid = { concat: (a: string, b: string) => a + b, empty: \"\" };\n * const f = (s: string) => s.toUpperCase()\n * assert.deepStrictEqual(foldMap(monoid)(f)([\"a\", \"b\", \"c\"]), \"ABC\");\n *\n * @category folding\n * @since 2.0.0\n */\nexports.foldMap = RA.foldMap;\n/**\n * Same as [`foldMap`](#foldMap) but passing also the index to the iterating function.\n *\n * @example\n * import { foldMapWithIndex } from 'fp-ts/Array'\n *\n * const monoid = { concat: (a: string, b: string) => a + b, empty: \"\" };\n * const f = (index:number, s: string) => `${s.toUpperCase()}(${index})`\n * assert.deepStrictEqual(foldMapWithIndex(monoid)(f)([\"a\", \"b\", \"c\"]), \"A(0)B(1)C(2)\");\n *\n * @category folding\n * @since 2.0.0\n */\nexports.foldMapWithIndex = RA.foldMapWithIndex;\n/**\n * Reduces an `Array`.\n *\n * `reduce` executes the supplied iterating function on each element of the array,\n * in order, passing in the element and the return value from the calculation on the preceding element.\n *\n * The first time that the iterating function is called there is no \"return value of the\n * previous calculation\", the initial value is used in its place.\n *\n * @example\n * import { reduce } from 'fp-ts/Array'\n *\n * assert.deepStrictEqual(reduce(5, (acc: number, cur: number) => acc * cur)([2, 3]), 5 * 2 * 3);\n *\n * @category folding\n * @since 2.0.0\n */\nexports.reduce = RA.reduce;\n/**\n * Same as [`reduce`](#reduce) but passing also the index to the iterating function.\n *\n * @example\n * import { reduceWithIndex } from 'fp-ts/Array'\n *\n * const f = (index: number, acc: string, cur: unknown) =>\n *   acc + (typeof cur === \"string\" ? cur.toUpperCase() + index : \"\");\n * assert.deepStrictEqual(reduceWithIndex(\"\", f)([2, \"a\", \"b\", null]), \"A1B2\");\n *\n * @category folding\n * @since 2.0.0\n */\nexports.reduceWithIndex = RA.reduceWithIndex;\n/**\n * Same as [`reduce`](#reduce) but applied from the end to the start.\n *\n * *Note*: the iterating function in this case takes the accumulator as the last argument.\n *\n * @example\n * import { reduceRight } from 'fp-ts/Array'\n *\n * assert.deepStrictEqual(reduceRight(\"\", (cur: string, acc: string) => acc + cur)([\"a\", \"b\", \"c\"]), \"cba\");\n *\n * @category folding\n * @since 2.0.0\n */\nexports.reduceRight = RA.reduceRight;\n/**\n * Same as [`reduceRight`](#reduceRight) but passing also the index to the iterating function.\n *\n * @example\n * import { reduceRightWithIndex } from 'fp-ts/Array'\n *\n * const f = (index: number, cur: unknown, acc: string) =>\n *   acc + (typeof cur === \"string\" ? cur.toUpperCase() + index : \"\");\n * assert.deepStrictEqual(reduceRightWithIndex(\"\", f)([2, \"a\", \"b\", null]), \"B2A1\");\n *\n * @category folding\n * @since 2.0.0\n */\nexports.reduceRightWithIndex = RA.reduceRightWithIndex;\n/**\n * Given an iterating function that returns a `HKT` (higher kinded type), `traverse`\n * applies the iterating function to each element of the `Array` and then [`sequence`](#sequence)-s\n * the results using the provided `Applicative`.\n *\n * E.g. suppose you have an `Array` and you want to format each element with a function\n * that returns a result or an error as `f = (a: A) => Either<Error, B>`, using `traverse`\n * you can apply `f` to all elements and directly obtain as a result an `Either<Error,Array<B>>`\n * i.e. an `Array<B>` if all the results are `B`, or an `Error` if some of the results\n * are `Error`s.\n *\n * @example\n * import { traverse } from 'fp-ts/Array'\n * import { Applicative, left, right } from \"fp-ts/lib/Either\";\n *\n * const f = (x: unknown) =>\n *   typeof x === \"string\" ? right(x.toUpperCase()) : left(new Error(\"not a string\"));\n * assert.deepStrictEqual(traverse(Applicative)(f)([\"a\", \"b\"]), right([\"A\", \"B\"]));\n * assert.deepStrictEqual(traverse(Applicative)(f)([\"a\", 5]), left(new Error(\"not a string\")));\n *\n * @category traversing\n * @since 2.6.3\n */\nvar traverse = function (F) {\n    var traverseWithIndexF = (0, exports.traverseWithIndex)(F);\n    return function (f) { return traverseWithIndexF(function (_, a) { return f(a); }); };\n};\nexports.traverse = traverse;\n/**\n * `sequence` takes an `Array` where elements are `HKT<A>` (higher kinded type) and,\n * using an applicative of that `HKT`, returns an `HKT` of `Array<A>`.\n * E.g. it can turn an `Array<Either<Error, string>>` into an `Either<Error, Array<string>>`.\n *\n * `sequence` requires an `Applicative` of the `HKT` you are targeting, e.g. to turn an\n * `Array<Either<E, A>>` into an `Either<E, Array<A>>`, it needs an\n * `Applicative` for `Either`, to to turn an `Array<Option<A>>` into an `Option<Array<A>>`,\n * it needs an `Applicative` for `Option`.\n *\n * @example\n * import { sequence } from 'fp-ts/Array'\n * import { Applicative, left, right } from \"fp-ts/lib/Either\";\n *\n * assert.deepStrictEqual(sequence(Applicative)([right(\"a\"), right(\"b\")]), right([\"a\", \"b\"]));\n * assert.deepStrictEqual(\n *   sequence(Applicative)([right(\"a\"), left(new Error(\"not a string\"))]),\n *   left(new Error(\"not a string\"))\n * );\n *\n * @category traversing\n * @since 2.6.3\n */\nvar sequence = function (F) {\n    return function (ta) {\n        return _reduce(ta, F.of((0, exports.zero)()), function (fas, fa) {\n            return F.ap(F.map(fas, function (as) { return function (a) { return (0, function_1.pipe)(as, (0, exports.append)(a)); }; }), fa);\n        });\n    };\n};\nexports.sequence = sequence;\n/**\n * Same as [`traverse`](#traverse) but passing also the index to the iterating function.\n *\n * @example\n * import { traverseWithIndex } from 'fp-ts/Array'\n * import { Applicative, left, right } from \"fp-ts/lib/Either\";\n *\n * const f = (index:number, x:unknown) =>\n *   typeof x === \"string\" ? right(x.toUpperCase() + index) : left(new Error(\"not a string\"));\n * assert.deepStrictEqual(traverseWithIndex(Applicative)(f)([\"a\", \"b\"]), right([\"A0\", \"B1\"]));\n * assert.deepStrictEqual(traverseWithIndex(Applicative)(f)([\"a\", 5]), left(new Error(\"not a string\")));\n *\n * @category sequencing\n * @since 2.6.3\n */\nvar traverseWithIndex = function (F) {\n    return function (f) {\n        return (0, exports.reduceWithIndex)(F.of((0, exports.zero)()), function (i, fbs, a) {\n            return F.ap(F.map(fbs, function (bs) { return function (b) { return (0, function_1.pipe)(bs, (0, exports.append)(b)); }; }), f(i, a));\n        });\n    };\n};\nexports.traverseWithIndex = traverseWithIndex;\n/**\n * @category filtering\n * @since 2.6.5\n */\nvar wither = function (F) {\n    var _witherF = _wither(F);\n    return function (f) { return function (fa) { return _witherF(fa, f); }; };\n};\nexports.wither = wither;\n/**\n * @category filtering\n * @since 2.6.5\n */\nvar wilt = function (F) {\n    var _wiltF = _wilt(F);\n    return function (f) { return function (fa) { return _wiltF(fa, f); }; };\n};\nexports.wilt = wilt;\n/**\n * `unfold` takes a function `f` which returns an `Option` of a tuple containing an outcome\n * value and an input for the following iteration.\n * `unfold` applies `f` to the initial value `b` and then recursively to the second\n * element of the tuple contained in the returned `option` of the previous\n * calculation until `f` returns `Option.none`.\n *\n * @example\n * import { unfold } from 'fp-ts/Array'\n * import { option } from 'fp-ts'\n *\n * const f = (n: number) => {\n *   if (n <= 0) return option.none;\n *   const returnValue = n * 2;\n *   const inputForNextRound = n - 1;\n *   return option.some([returnValue, inputForNextRound] as const);\n * };\n * assert.deepStrictEqual(unfold(5, f), [10, 8, 6, 4, 2]);\n *\n * @since 2.6.6\n */\nvar unfold = function (b, f) {\n    var out = [];\n    var bb = b;\n    // eslint-disable-next-line no-constant-condition\n    while (true) {\n        var mt = f(bb);\n        if (_.isSome(mt)) {\n            var _a = mt.value, a = _a[0], b_1 = _a[1];\n            out.push(a);\n            bb = b_1;\n        }\n        else {\n            break;\n        }\n    }\n    return out;\n};\nexports.unfold = unfold;\n/**\n * @category type lambdas\n * @since 2.0.0\n */\nexports.URI = 'Array';\n/**\n * `getShow` makes a `Show` for an `Array<A>` from a `Show` for\n * an `A`.\n *\n * @example\n * import { getShow } from 'fp-ts/Array'\n *\n * const numShow = { show: (n: number) => (n >= 0 ? `${n}` : `(${-n})`) };\n * assert.deepStrictEqual(getShow(numShow).show([-2, -1, 0, 1]), \"[(2), (1), 0, 1]\");\n *\n * @category instances\n * @since 2.0.0\n */\nexports.getShow = RA.getShow;\n/**\n * Get a `Semigroup` based on the concatenation of `Array`s.\n * See also [`getMonoid`](#getMonoid).\n *\n * @example\n * import { getSemigroup } from 'fp-ts/Array'\n *\n * const S = getSemigroup<number>();\n * assert.deepStrictEqual(S.concat([1, 2], [2, 3]), [1, 2, 2, 3]);\n *\n * @category instances\n * @since 2.10.0\n */\nvar getSemigroup = function () { return ({\n    concat: function (first, second) { return first.concat(second); }\n}); };\nexports.getSemigroup = getSemigroup;\n/**\n * Returns a `Monoid` for `Array<A>` based on the concatenation of `Array`s.\n *\n * @example\n * import { getMonoid } from 'fp-ts/Array'\n *\n * const M = getMonoid<number>()\n * assert.deepStrictEqual(M.concat([1, 2], [3, 4]), [1, 2, 3, 4])\n *\n * @category instances\n * @since 2.0.0\n */\nvar getMonoid = function () { return ({\n    concat: (0, exports.getSemigroup)().concat,\n    empty: []\n}); };\nexports.getMonoid = getMonoid;\n/**\n * Derives an `Eq` over the `Array` of a given element type from the `Eq` of that type. The derived `Eq` defines two\n * arrays as equal if all elements of both arrays are compared equal pairwise with the given `E`. In case of arrays of\n * different lengths, the result is non equality.\n *\n * @example\n * import * as S from 'fp-ts/string'\n * import { getEq } from 'fp-ts/Array'\n *\n * const E = getEq(S.Eq)\n * assert.strictEqual(E.equals(['a', 'b'], ['a', 'b']), true)\n * assert.strictEqual(E.equals(['a'], []), false)\n *\n * @category instances\n * @since 2.0.0\n */\nexports.getEq = RA.getEq;\n/**\n * Derives an `Ord` over the `Array` of a given element type from the `Ord` of that type. The ordering between two such\n * arrays is equal to: the first non equal comparison of each arrays elements taken pairwise in increasing order, in\n * case of equality over all the pairwise elements; the longest array is considered the greatest, if both arrays have\n * the same length, the result is equality.\n *\n * @example\n * import { getOrd } from 'fp-ts/Array'\n * import * as S from 'fp-ts/string'\n *\n * const O = getOrd(S.Ord)\n * assert.strictEqual(O.compare(['b'], ['a']), 1)\n * assert.strictEqual(O.compare(['a'], ['a']), 0)\n * assert.strictEqual(O.compare(['a'], ['b']), -1)\n *\n * @category instances\n * @since 2.0.0\n */\nexports.getOrd = RA.getOrd;\n/**\n * Get a `Semigroup` based on the union of the elements of `Array`s.\n * Elements which equal according to the provided `Eq` are included\n * only once in the result.\n * See also [`getUnionMonoid`](#getUnionMonoid).\n *\n * @example\n * import { getUnionSemigroup } from 'fp-ts/Array';\n * import { Eq } from 'fp-ts/number';\n *\n * const S = getUnionSemigroup<number>(Eq);\n * assert.deepStrictEqual(S.concat([1, 2], [2, 3]), [1, 2, 3]);\n *\n * @category instances\n * @since 2.11.0\n */\nvar getUnionSemigroup = function (E) {\n    var unionE = union(E);\n    return {\n        concat: function (first, second) { return unionE(second)(first); }\n    };\n};\nexports.getUnionSemigroup = getUnionSemigroup;\n/**\n * Get a `Monoid` based on the union of the elements of `Array`s.\n * Elements which equal according to the provided `Eq` are included\n * only once in the result.\n *\n * @example\n * import { getUnionMonoid } from 'fp-ts/Array'\n * import { Eq } from 'fp-ts/number';\n *\n * const M = getUnionMonoid<number>(Eq);\n * assert.deepStrictEqual(M.concat([1, 2], [2, 3]), [1, 2, 3]);\n * assert.deepStrictEqual(M.empty,[]);\n *\n * @category instances\n * @since 2.11.0\n */\nvar getUnionMonoid = function (E) { return ({\n    concat: (0, exports.getUnionSemigroup)(E).concat,\n    empty: []\n}); };\nexports.getUnionMonoid = getUnionMonoid;\n/**\n * Get a `Semigroup` based on the intersection of the elements of `Array`s.\n * Only elements present in the two arrays which are equal according to the\n * provided `Eq` are included in the result.\n *\n * @example\n * import { getIntersectionSemigroup } from 'fp-ts/Array'\n * import { Eq } from 'fp-ts/number';\n *\n * const S = getIntersectionSemigroup<number>(Eq);\n * assert.deepStrictEqual(S.concat([1, 2], [2, 3]), [2]);\n *\n * @category instances\n * @since 2.11.0\n */\nvar getIntersectionSemigroup = function (E) {\n    var intersectionE = intersection(E);\n    return {\n        concat: function (first, second) { return intersectionE(second)(first); }\n    };\n};\nexports.getIntersectionSemigroup = getIntersectionSemigroup;\n/**\n * Get a `Magma` for `Array` where the `concat` function is the differnce between\n * the first and the second array, i.e. the result contains all the elements of the\n * first array for which their is no equal element in the second array according\n * to the `Eq` provided.\n *\n *\n * @example\n * import { getDifferenceMagma } from 'fp-ts/Array'\n * import { Eq } from 'fp-ts/number';\n *\n * const S = getDifferenceMagma<number>(Eq);\n * assert.deepStrictEqual(S.concat([1, 2], [2, 3]), [1]);\n *\n * @category instances\n * @since 2.11.0\n */\nvar getDifferenceMagma = function (E) {\n    var differenceE = difference(E);\n    return {\n        concat: function (first, second) { return differenceE(second)(first); }\n    };\n};\nexports.getDifferenceMagma = getDifferenceMagma;\n/**\n * @category instances\n * @since 2.7.0\n */\nexports.Functor = {\n    URI: exports.URI,\n    map: _map\n};\n/**\n * Given an input an `Array` of functions, `flap` returns an `Array` containing\n * the results of applying each function to the given input.\n *\n * @example\n * import { flap } from 'fp-ts/Array'\n *\n * const funs = [\n *   (n: number) => `Double: ${n * 2}`,\n *   (n: number) => `Triple: ${n * 3}`,\n *   (n: number) => `Square: ${n * n}`,\n * ];\n * assert.deepStrictEqual(flap(4)(funs), ['Double: 8', 'Triple: 12', 'Square: 16']);\n *\n * @category mapping\n * @since 2.10.0\n */\nexports.flap = (0, Functor_1.flap)(exports.Functor);\n/**\n * @category instances\n * @since 2.10.0\n */\nexports.Pointed = {\n    URI: exports.URI,\n    of: exports.of\n};\n/**\n * @category instances\n * @since 2.7.0\n */\nexports.FunctorWithIndex = {\n    URI: exports.URI,\n    map: _map,\n    mapWithIndex: _mapWithIndex\n};\n/**\n * @category instances\n * @since 2.10.0\n */\nexports.Apply = {\n    URI: exports.URI,\n    map: _map,\n    ap: _ap\n};\n/**\n * Combine two effectful actions, keeping only the result of the first.\n *\n * @since 2.5.0\n */\nexports.apFirst = (0, Apply_1.apFirst)(exports.Apply);\n/**\n * Combine two effectful actions, keeping only the result of the second.\n *\n * @since 2.5.0\n */\nexports.apSecond = (0, Apply_1.apSecond)(exports.Apply);\n/**\n * @category instances\n * @since 2.7.0\n */\nexports.Applicative = {\n    URI: exports.URI,\n    map: _map,\n    ap: _ap,\n    of: exports.of\n};\n/**\n * @category instances\n * @since 2.10.0\n */\nexports.Chain = {\n    URI: exports.URI,\n    map: _map,\n    ap: _ap,\n    chain: exports.flatMap\n};\n/**\n * Composes computations in sequence, using the return value of one computation to determine the next computation and\n * keeping only the result of the first.\n *\n * @example\n * import * as A from 'fp-ts/Array'\n * import { pipe } from 'fp-ts/function'\n *\n * assert.deepStrictEqual(\n *   pipe(\n *     [1, 2, 3],\n *     A.chainFirst(() => ['a', 'b'])\n *   ),\n *   [1, 1, 2, 2, 3, 3]\n * )\n * assert.deepStrictEqual(\n *   pipe(\n *     [1, 2, 3],\n *     A.chainFirst(() => [])\n *   ),\n *   []\n * )\n *\n * @category sequencing\n * @since 2.0.0\n */\nexports.chainFirst = \n/*#__PURE__*/ (0, Chain_1.chainFirst)(exports.Chain);\n/**\n * @category instances\n * @since 2.7.0\n */\nexports.Monad = {\n    URI: exports.URI,\n    map: _map,\n    ap: _ap,\n    of: exports.of,\n    chain: exports.flatMap\n};\n/**\n * @category instances\n * @since 2.7.0\n */\nexports.Unfoldable = {\n    URI: exports.URI,\n    unfold: exports.unfold\n};\n/**\n * @category instances\n * @since 2.7.0\n */\nexports.Alt = {\n    URI: exports.URI,\n    map: _map,\n    alt: _alt\n};\n/**\n * @category instances\n * @since 2.11.0\n */\nexports.Zero = {\n    URI: exports.URI,\n    zero: exports.zero\n};\n/**\n * @category do notation\n * @since 2.11.0\n */\nexports.guard = (0, Zero_1.guard)(exports.Zero, exports.Pointed);\n/**\n * @category instances\n * @since 2.7.0\n */\nexports.Alternative = {\n    URI: exports.URI,\n    map: _map,\n    ap: _ap,\n    of: exports.of,\n    alt: _alt,\n    zero: exports.zero\n};\n/**\n * @category instances\n * @since 2.7.0\n */\nexports.Extend = {\n    URI: exports.URI,\n    map: _map,\n    extend: _extend\n};\n/**\n * @category instances\n * @since 2.7.0\n */\nexports.Compactable = {\n    URI: exports.URI,\n    compact: exports.compact,\n    separate: exports.separate\n};\n/**\n * @category instances\n * @since 2.7.0\n */\nexports.Filterable = {\n    URI: exports.URI,\n    map: _map,\n    compact: exports.compact,\n    separate: exports.separate,\n    filter: _filter,\n    filterMap: _filterMap,\n    partition: _partition,\n    partitionMap: _partitionMap\n};\n/**\n * @category instances\n * @since 2.7.0\n */\nexports.FilterableWithIndex = {\n    URI: exports.URI,\n    map: _map,\n    mapWithIndex: _mapWithIndex,\n    compact: exports.compact,\n    separate: exports.separate,\n    filter: _filter,\n    filterMap: _filterMap,\n    partition: _partition,\n    partitionMap: _partitionMap,\n    partitionMapWithIndex: _partitionMapWithIndex,\n    partitionWithIndex: _partitionWithIndex,\n    filterMapWithIndex: _filterMapWithIndex,\n    filterWithIndex: _filterWithIndex\n};\n/**\n * @category instances\n * @since 2.7.0\n */\nexports.Foldable = {\n    URI: exports.URI,\n    reduce: _reduce,\n    foldMap: _foldMap,\n    reduceRight: _reduceRight\n};\n/**\n * @category instances\n * @since 2.7.0\n */\nexports.FoldableWithIndex = {\n    URI: exports.URI,\n    reduce: _reduce,\n    foldMap: _foldMap,\n    reduceRight: _reduceRight,\n    reduceWithIndex: _reduceWithIndex,\n    foldMapWithIndex: _foldMapWithIndex,\n    reduceRightWithIndex: _reduceRightWithIndex\n};\n/**\n * @category instances\n * @since 2.7.0\n */\nexports.Traversable = {\n    URI: exports.URI,\n    map: _map,\n    reduce: _reduce,\n    foldMap: _foldMap,\n    reduceRight: _reduceRight,\n    traverse: _traverse,\n    sequence: exports.sequence\n};\n/**\n * @category instances\n * @since 2.7.0\n */\nexports.TraversableWithIndex = {\n    URI: exports.URI,\n    map: _map,\n    mapWithIndex: _mapWithIndex,\n    reduce: _reduce,\n    foldMap: _foldMap,\n    reduceRight: _reduceRight,\n    reduceWithIndex: _reduceWithIndex,\n    foldMapWithIndex: _foldMapWithIndex,\n    reduceRightWithIndex: _reduceRightWithIndex,\n    traverse: _traverse,\n    sequence: exports.sequence,\n    traverseWithIndex: _traverseWithIndex\n};\nvar _wither = /*#__PURE__*/ (0, Witherable_1.witherDefault)(exports.Traversable, exports.Compactable);\nvar _wilt = /*#__PURE__*/ (0, Witherable_1.wiltDefault)(exports.Traversable, exports.Compactable);\n/**\n * @category instances\n * @since 2.7.0\n */\nexports.Witherable = {\n    URI: exports.URI,\n    map: _map,\n    compact: exports.compact,\n    separate: exports.separate,\n    filter: _filter,\n    filterMap: _filterMap,\n    partition: _partition,\n    partitionMap: _partitionMap,\n    reduce: _reduce,\n    foldMap: _foldMap,\n    reduceRight: _reduceRight,\n    traverse: _traverse,\n    sequence: exports.sequence,\n    wither: _wither,\n    wilt: _wilt\n};\n/**\n * @category sequencing\n * @since 2.11.0\n */\nexports.chainRecDepthFirst = RA.chainRecDepthFirst;\n/**\n * @category instances\n * @since 2.11.0\n */\nexports.ChainRecDepthFirst = {\n    URI: exports.URI,\n    map: _map,\n    ap: _ap,\n    chain: exports.flatMap,\n    chainRec: _chainRecDepthFirst\n};\n/**\n * @category sequencing\n * @since 2.11.0\n */\nexports.chainRecBreadthFirst = RA.chainRecBreadthFirst;\n/**\n * @category instances\n * @since 2.11.0\n */\nexports.ChainRecBreadthFirst = {\n    URI: exports.URI,\n    map: _map,\n    ap: _ap,\n    chain: exports.flatMap,\n    chainRec: _chainRecBreadthFirst\n};\n/**\n * Filter values inside a context.\n *\n * @since 2.11.0\n */\nexports.filterE = (0, Witherable_1.filterE)(exports.Witherable);\n/**\n * @category instances\n * @since 2.11.0\n */\nexports.FromEither = {\n    URI: exports.URI,\n    fromEither: exports.fromEither\n};\n/**\n * @category lifting\n * @since 2.11.0\n */\nexports.fromEitherK = (0, FromEither_1.fromEitherK)(exports.FromEither);\n// -------------------------------------------------------------------------------------\n// unsafe\n// -------------------------------------------------------------------------------------\n/**\n * @category unsafe\n * @since 2.0.0\n */\nexports.unsafeInsertAt = NEA.unsafeInsertAt;\n/**\n * @category unsafe\n * @since 2.0.0\n */\nvar unsafeUpdateAt = function (i, a, as) {\n    return (0, exports.isNonEmpty)(as) ? NEA.unsafeUpdateAt(i, a, as) : [];\n};\nexports.unsafeUpdateAt = unsafeUpdateAt;\n/**\n * @category unsafe\n * @since 2.0.0\n */\nvar unsafeDeleteAt = function (i, as) {\n    var xs = as.slice();\n    xs.splice(i, 1);\n    return xs;\n};\nexports.unsafeDeleteAt = unsafeDeleteAt;\n// -------------------------------------------------------------------------------------\n// utils\n// -------------------------------------------------------------------------------------\n/**\n * `every` tells if the provided predicate holds true for every element in the `Array`.\n *\n * @example\n * import { every } from 'fp-ts/Array'\n *\n * assert.equal(every((x: number) => x >= 0)([1, 2, 3]), true);\n * assert.equal(every((x: number) => x >= 0)([-1, 2, 3]), false);\n *\n * @since 2.9.0\n */\nexports.every = RA.every;\n/**\n * `some` tells if the provided predicate holds true at least for one element in the `Array`.\n *\n * @example\n * import { some } from 'fp-ts/Array'\n *\n * assert.equal(some((x: number) => x >= 0)([1, 2, 3]), true);\n * assert.equal(some((x: number) => x >= 10)([1, 2, 3]), false);\n *\n * @since 2.9.0\n */\nvar some = function (predicate) {\n    return function (as) {\n        return as.some(predicate);\n    };\n};\nexports.some = some;\n/**\n * Alias of [`some`](#some)\n *\n * @since 2.11.0\n */\nexports.exists = exports.some;\n/**\n * Places an element in between members of an `Array`, then folds the results using the provided `Monoid`.\n *\n * @example\n * import * as S from 'fp-ts/string'\n * import { intercalate } from 'fp-ts/Array'\n *\n * assert.deepStrictEqual(intercalate(S.Monoid)('-')(['a', 'b', 'c']), 'a-b-c')\n *\n * @since 2.12.0\n */\nexports.intercalate = RA.intercalate;\n// -------------------------------------------------------------------------------------\n// do notation\n// -------------------------------------------------------------------------------------\n/**\n * @category do notation\n * @since 2.9.0\n */\nexports.Do = (0, exports.of)(_.emptyRecord);\n/**\n * @category do notation\n * @since 2.8.0\n */\nexports.bindTo = (0, Functor_1.bindTo)(exports.Functor);\nvar let_ = /*#__PURE__*/ (0, Functor_1.let)(exports.Functor);\nexports.let = let_;\n/**\n * @category do notation\n * @since 2.8.0\n */\nexports.bind = (0, Chain_1.bind)(exports.Chain);\n/**\n * @category do notation\n * @since 2.8.0\n */\nexports.apS = (0, Apply_1.apS)(exports.Apply);\n// -------------------------------------------------------------------------------------\n// legacy\n// -------------------------------------------------------------------------------------\n/**\n * Alias of `flatMap`.\n *\n * @category legacy\n * @since 2.0.0\n */\nexports.chain = exports.flatMap;\n// -------------------------------------------------------------------------------------\n// deprecated\n// -------------------------------------------------------------------------------------\n/**\n * Use `NonEmptyArray` module instead.\n *\n * @category zone of death\n * @since 2.0.0\n * @deprecated\n */\nexports.range = NEA.range;\n/**\n * Use a new `[]` instead.\n *\n * @category zone of death\n * @since 2.0.0\n * @deprecated\n */\nexports.empty = [];\n/**\n * Use `prepend` instead.\n *\n * @category zone of death\n * @since 2.0.0\n * @deprecated\n */\nexports.cons = NEA.cons;\n/**\n * Use `append` instead.\n *\n * @category zone of death\n * @since 2.0.0\n * @deprecated\n */\nexports.snoc = NEA.snoc;\n/**\n * Use `prependAll` instead\n *\n * @category zone of death\n * @since 2.9.0\n * @deprecated\n */\nexports.prependToAll = exports.prependAll;\n/**\n * This instance is deprecated, use small, specific instances instead.\n * For example if a function needs a `Functor` instance, pass `A.Functor` instead of `A.array`\n * (where `A` is from `import A from 'fp-ts/Array'`)\n *\n * @category zone of death\n * @since 2.0.0\n * @deprecated\n */\nexports.array = {\n    URI: exports.URI,\n    compact: exports.compact,\n    separate: exports.separate,\n    map: _map,\n    ap: _ap,\n    of: exports.of,\n    chain: exports.flatMap,\n    filter: _filter,\n    filterMap: _filterMap,\n    partition: _partition,\n    partitionMap: _partitionMap,\n    mapWithIndex: _mapWithIndex,\n    partitionMapWithIndex: _partitionMapWithIndex,\n    partitionWithIndex: _partitionWithIndex,\n    filterMapWithIndex: _filterMapWithIndex,\n    filterWithIndex: _filterWithIndex,\n    alt: _alt,\n    zero: exports.zero,\n    unfold: exports.unfold,\n    reduce: _reduce,\n    foldMap: _foldMap,\n    reduceRight: _reduceRight,\n    traverse: _traverse,\n    sequence: exports.sequence,\n    reduceWithIndex: _reduceWithIndex,\n    foldMapWithIndex: _foldMapWithIndex,\n    reduceRightWithIndex: _reduceRightWithIndex,\n    traverseWithIndex: _traverseWithIndex,\n    extend: _extend,\n    wither: _wither,\n    wilt: _wilt\n};\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.endsWith = exports.startsWith = exports.includes = exports.split = exports.size = exports.isEmpty = exports.slice = exports.trimRight = exports.trimLeft = exports.trim = exports.replace = exports.toLowerCase = exports.toUpperCase = exports.isString = exports.Show = exports.Ord = exports.Monoid = exports.empty = exports.Semigroup = exports.Eq = void 0;\nvar ReadonlyNonEmptyArray_1 = require(\"./ReadonlyNonEmptyArray\");\n// -------------------------------------------------------------------------------------\n// instances\n// -------------------------------------------------------------------------------------\n/**\n * @example\n * import * as S from 'fp-ts/string'\n *\n * assert.deepStrictEqual(S.Eq.equals('a', 'a'), true)\n * assert.deepStrictEqual(S.Eq.equals('a', 'b'), false)\n *\n * @category instances\n * @since 2.10.0\n */\nexports.Eq = {\n    equals: function (first, second) { return first === second; }\n};\n/**\n * `string` semigroup under concatenation.\n *\n * @example\n * import * as S from 'fp-ts/string'\n *\n * assert.deepStrictEqual(S.Semigroup.concat('a', 'b'), 'ab')\n *\n * @category instances\n * @since 2.10.0\n */\nexports.Semigroup = {\n    concat: function (first, second) { return first + second; }\n};\n/**\n * An empty `string`.\n *\n * @since 2.10.0\n */\nexports.empty = '';\n/**\n * `string` monoid under concatenation.\n *\n * The `empty` value is `''`.\n *\n * @example\n * import * as S from 'fp-ts/string'\n *\n * assert.deepStrictEqual(S.Monoid.concat('a', 'b'), 'ab')\n * assert.deepStrictEqual(S.Monoid.concat('a', S.Monoid.empty), 'a')\n *\n * @category instances\n * @since 2.10.0\n */\nexports.Monoid = {\n    concat: exports.Semigroup.concat,\n    empty: exports.empty\n};\n/**\n * @example\n * import * as S from 'fp-ts/string'\n *\n * assert.deepStrictEqual(S.Ord.compare('a', 'a'), 0)\n * assert.deepStrictEqual(S.Ord.compare('a', 'b'), -1)\n * assert.deepStrictEqual(S.Ord.compare('b', 'a'), 1)\n *\n * @category instances\n * @since 2.10.0\n */\nexports.Ord = {\n    equals: exports.Eq.equals,\n    compare: function (first, second) { return (first < second ? -1 : first > second ? 1 : 0); }\n};\n/**\n * @example\n * import * as S from 'fp-ts/string'\n *\n * assert.deepStrictEqual(S.Show.show('a'), '\"a\"')\n *\n * @category instances\n * @since 2.10.0\n */\nexports.Show = {\n    show: function (s) { return JSON.stringify(s); }\n};\n// -------------------------------------------------------------------------------------\n// refinements\n// -------------------------------------------------------------------------------------\n/**\n * @example\n * import * as S from 'fp-ts/string'\n *\n * assert.deepStrictEqual(S.isString('a'), true)\n * assert.deepStrictEqual(S.isString(1), false)\n *\n * @category refinements\n * @since 2.11.0\n */\nvar isString = function (u) { return typeof u === 'string'; };\nexports.isString = isString;\n// -------------------------------------------------------------------------------------\n// combinators\n// -------------------------------------------------------------------------------------\n/**\n * @example\n * import * as S from 'fp-ts/string'\n * import { pipe } from 'fp-ts/function'\n *\n * assert.deepStrictEqual(pipe('a', S.toUpperCase), 'A')\n *\n * @since 2.11.0\n */\nvar toUpperCase = function (s) { return s.toUpperCase(); };\nexports.toUpperCase = toUpperCase;\n/**\n * @example\n * import * as S from 'fp-ts/string'\n * import { pipe } from 'fp-ts/function'\n *\n * assert.deepStrictEqual(pipe('A', S.toLowerCase), 'a')\n *\n * @since 2.11.0\n */\nvar toLowerCase = function (s) { return s.toLowerCase(); };\nexports.toLowerCase = toLowerCase;\n/**\n * @example\n * import * as S from 'fp-ts/string'\n * import { pipe } from 'fp-ts/function'\n *\n * assert.deepStrictEqual(pipe('abc', S.replace('b', 'd')), 'adc')\n *\n * @since 2.11.0\n */\nvar replace = function (searchValue, replaceValue) {\n    return function (s) {\n        return s.replace(searchValue, replaceValue);\n    };\n};\nexports.replace = replace;\n/**\n * @example\n * import * as S from 'fp-ts/string'\n * import { pipe } from 'fp-ts/function'\n *\n * assert.deepStrictEqual(pipe(' a ', S.trim), 'a')\n *\n * @since 2.11.0\n */\nvar trim = function (s) { return s.trim(); };\nexports.trim = trim;\n/**\n * @example\n * import * as S from 'fp-ts/string'\n * import { pipe } from 'fp-ts/function'\n *\n * assert.deepStrictEqual(pipe(' a ', S.trimLeft), 'a ')\n *\n * @since 2.11.0\n */\nvar trimLeft = function (s) { return s.trimLeft(); };\nexports.trimLeft = trimLeft;\n/**\n * @example\n * import * as S from 'fp-ts/string'\n * import { pipe } from 'fp-ts/function'\n *\n * assert.deepStrictEqual(pipe(' a ', S.trimRight), ' a')\n *\n * @since 2.11.0\n */\nvar trimRight = function (s) { return s.trimRight(); };\nexports.trimRight = trimRight;\n/**\n * @example\n * import * as S from 'fp-ts/string'\n * import { pipe } from 'fp-ts/function'\n *\n * assert.deepStrictEqual(pipe('abcd', S.slice(1, 3)), 'bc')\n *\n * @since 2.11.0\n */\nvar slice = function (start, end) {\n    return function (s) {\n        return s.slice(start, end);\n    };\n};\nexports.slice = slice;\n// -------------------------------------------------------------------------------------\n// utils\n// -------------------------------------------------------------------------------------\n/**\n * Test whether a `string` is empty.\n *\n * @example\n * import * as S from 'fp-ts/string'\n * import { pipe } from 'fp-ts/function'\n *\n * assert.deepStrictEqual(pipe('', S.isEmpty), true)\n * assert.deepStrictEqual(pipe('a', S.isEmpty), false)\n *\n * @since 2.10.0\n */\nvar isEmpty = function (s) { return s.length === 0; };\nexports.isEmpty = isEmpty;\n/**\n * Calculate the number of characters in a `string`.\n *\n * @example\n * import * as S from 'fp-ts/string'\n * import { pipe } from 'fp-ts/function'\n *\n * assert.deepStrictEqual(pipe('abc', S.size), 3)\n *\n * @since 2.10.0\n */\nvar size = function (s) { return s.length; };\nexports.size = size;\n/**\n * @example\n * import * as S from 'fp-ts/string'\n * import { pipe } from 'fp-ts/function'\n *\n * assert.deepStrictEqual(pipe('abc', S.split('')), ['a', 'b', 'c'])\n * assert.deepStrictEqual(pipe('', S.split('')), [''])\n *\n * @since 2.11.0\n */\nvar split = function (separator) {\n    return function (s) {\n        var out = s.split(separator);\n        return (0, ReadonlyNonEmptyArray_1.isNonEmpty)(out) ? out : [s];\n    };\n};\nexports.split = split;\n/**\n * @example\n * import * as S from 'fp-ts/string'\n * import { pipe } from 'fp-ts/function'\n *\n * assert.deepStrictEqual(pipe('abc', S.includes('b')), true)\n * assert.deepStrictEqual(pipe('abc', S.includes('d')), false)\n *\n * @since 2.11.0\n */\nvar includes = function (searchString, position) {\n    return function (s) {\n        return s.includes(searchString, position);\n    };\n};\nexports.includes = includes;\n/**\n * @example\n * import * as S from 'fp-ts/string'\n * import { pipe } from 'fp-ts/function'\n *\n * assert.deepStrictEqual(pipe('abc', S.startsWith('a')), true)\n * assert.deepStrictEqual(pipe('bc', S.startsWith('a')), false)\n *\n * @since 2.11.0\n */\nvar startsWith = function (searchString, position) {\n    return function (s) {\n        return s.startsWith(searchString, position);\n    };\n};\nexports.startsWith = startsWith;\n/**\n * @example\n * import * as S from 'fp-ts/string'\n * import { pipe } from 'fp-ts/function'\n *\n * assert.deepStrictEqual(pipe('abc', S.endsWith('c')), true)\n * assert.deepStrictEqual(pipe('ab', S.endsWith('c')), false)\n *\n * @since 2.11.0\n */\nvar endsWith = function (searchString, position) {\n    return function (s) {\n        return s.endsWith(searchString, position);\n    };\n};\nexports.endsWith = endsWith;\n","import { sort } from 'fp-ts/lib/Array.js';\nimport { pipe } from 'fp-ts/lib/function.js';\nimport * as S from 'fp-ts/lib/string.js';\nimport * as N from 'fp-ts/lib/number.js';\nimport { reverse as reverseOrd, contramap } from 'fp-ts/lib/Ord.js';\nimport { minMaxAvg as arrayMinMaxAg } from './collections/arrays/index.js';\n\n/// ✔ Sorting functions are unit tested\n\nexport type StringOrNumber = string | number | bigint;\nexport type Primitive = string | number | bigint | boolean;\n\nexport type BasicType = StringOrNumber | object;\nexport type KeyValue = readonly [ key: string, value: StringOrNumber ];\n\nexport function isPrimitive(v: any): v is Primitive {\n  if (typeof v == `number`) return true;\n  if (typeof v === `string`) return true;\n  if (typeof v == `bigint`) return true;\n  if (typeof v === `boolean`) return true;\n  return false;\n}\n\nconst byKey = (reverse = false) => pipe(\n  reverse ? reverseOrd(S.Ord) : S.Ord,\n  contramap((v: KeyValue) => v[ 0 ])\n);\n\nexport const byValueString = (reverse = false) => pipe(\n  reverse ? reverseOrd(S.Ord) : S.Ord,\n  contramap((v: KeyValue) => v[ 1 ] as string)\n);\n\nconst byValueNumber = (reverse = false) => pipe(\n  reverse ? reverseOrd(N.Ord) : N.Ord,\n  contramap((v: KeyValue) => v[ 1 ] as number)\n);\n\nexport const sortByKey = (reverse = false) => sort<KeyValue>(byKey(reverse));\nexport const sortByValueString = (reverse = false) => sort<KeyValue>(byValueString(reverse));\nexport const sortByValueNumber = (reverse = false) => sort<KeyValue>(byValueNumber(reverse));\n\n// eslint-disable-next-line functional/prefer-readonly-type,functional/prefer-immutable-types\nexport type Sorter = (data: Array<KeyValue>) => Array<KeyValue>;\n\nexport const getSorter = (sortStyle: `value` | `valueReverse` | `key` | `keyReverse`) => {\n  switch (sortStyle) {\n    case `value`: {\n      return sortByValueNumber(false);\n    }\n    case `valueReverse`: {\n      return sortByValueNumber(true);\n    }\n    case `key`: {\n      return sortByKey(false);\n    }\n    case `keyReverse`: {\n      return sortByKey(true);\n    }\n    default: {\n      throw new Error(`Unknown sorting value '${ (sortStyle as string) }'. Expecting: value, valueReverse, key or keyReverse`);\n    }\n  }\n};\n\n\nexport const minMaxAvg = (entries: ReadonlyArray<KeyValue>, conversionFunction?: (v: KeyValue) => number) => {\n  const converter = conversionFunction ?? ((v: KeyValue) => v[ 1 ] as number);\n  const values = entries.map<number>(entry => converter(entry));\n  return arrayMinMaxAg(values);\n};"],"mappings":"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","names":["S","pipe","S","contramap","compare","contramap","first","S","_","init","a","y","sort","bs","_","b","S","tail","init","a","y","sort","bs","_","S","left","right","N","as","init","sort","bs","input","second","ys","_","b","S","e","init","sort","bs","input","second","ys","_","minMaxAvg","reverseOrd","minMaxAvg"]}