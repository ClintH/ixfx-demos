{"version":3,"sources":["../src/modulation/Gaussian.ts","../src/modulation/ModulatorTimed.ts","../src/modulation/easing/index.ts","../src/modulation/easing/EasingsNamed.ts"],"sourcesContent":["//const sqrt = Math.sqrt;\nconst pow = Math.pow;\n//const pi = Math.PI;\n//const piPi = Math.PI*2;\nconst gaussianA = 1 / Math.sqrt(2 * Math.PI);\n\n/**\n * Returns a roughly gaussian easing function\n * ```js\n * import { Easings } from \"https://unpkg.com/ixfx/dist/modulation.js\";\n * const fn = Easings.gaussian();\n * ```\n *\n * Try different positive and negative values for `stdDev` to pinch\n * or flatten the bell shape.\n * @param standardDeviation\n * @returns\n */\nexport const gaussian = (standardDeviation = 0.4) => {\n  //const a = 1 / sqrt(2 * pi);\n  const mean = 0.5;\n\n  return (t: number) => {\n    const f = gaussianA / standardDeviation;\n    // p:-8 pinched\n    let p = -2.5; // -1/1.25;\n    let c = (t - mean) / standardDeviation;\n    c *= c;\n    p *= c;\n    const v = f * pow(Math.E, p); // * (2/pi);//0.62;\n    if (v > 1) return 1;\n    if (v < 0) return 0;\n    return v;\n  };\n};","import { intervalToMs, type Interval } from \"../flow/IntervalType.js\";\nimport type { Modulate, ModulatorTimed } from \"./Types.js\";\nimport * as Timer from '../flow/Timer.js';\nimport { throwFunctionTest } from \"../util/GuardFunction.js\";\n\n/**\n * Produce values over time. When the modulate is complete, the final\n * value continues to return. Timer starts when return function is first invoked.\n * \n * ```js\n * const fn = (t) => {\n *  // 't' will be values 0..1 where 1 represents end of time period.\n *  // Return some computed value based on 't'\n *  return t*Math.random();\n * }\n * const e = Modulate.time(fn, 1000);\n * \n * // Keep calling e() to get the current value\n * e();\n * ```\n * @param fn Modulate function\n * @param duration Duration\n * @returns \n */\nexport const time = (\n  fn: Modulate,\n  duration: Interval\n): () => number => {\n  throwFunctionTest(fn, `fn`);\n  let relative: undefined | (() => number);\n  return () => {\n    if (relative === undefined) relative = Timer.ofTotal(duration, { clampValue: true });\n    return fn(relative());\n  }\n}\n\n/**\n * Creates an modulator based on clock time. Time\n * starts being counted when modulate function is created.\n * \n * `timeModulator` allows you to reset and check for completion.\n * Alternatively, use {@link time} which is a simple function that just returns a value.\n *\n * @example Time based easing\n * ```\n * import { timeModulator } from \"https://unpkg.com/ixfx/dist/modulation.js\";\n * const fn = (t) => {\n *  // 't' will be a value 0..1 representing time elapsed. 1 being end of period.\n *  return t*Math.random();\n * }\n * const t = timeModulator(fn, 5*1000); // Will take 5 seconds to complete\n * ...\n * t.compute(); // Get current value of modulator\n * t.reset();   // Reset to 0\n * t.isDone;    // _True_ if finished\n * ```\n * @param fn Modulator\n * @param duration Duration\n * @returns ModulatorTimed\n */\nexport const timeModulator = (\n  fn: Modulate,\n  duration: Interval\n): ModulatorTimed => {\n  throwFunctionTest(fn, `fn`);\n\n  const timer = Timer.elapsedMillisecondsAbsolute();\n  const durationMs = intervalToMs(duration);\n  if (durationMs === undefined) throw new Error(`Param 'duration' not provided`);\n  const relativeTimer = Timer.relative(\n    durationMs,\n    {\n      timer,\n      clampValue: true\n    });\n  return Timer.timerWithFunction(fn, relativeTimer);\n};\n\n/**\n * Produce modulate values with each invocation. When the time is complete, the final\n * value continues to return. Timer starts when return function is first invoked.\n * \n * If you need to check if a modulator is done or reset it, consider {@link tickModulator}.\n * \n * ```js\n * const fn = (t) => {\n *  // 't' will be values 0..1 representing elapsed ticks toward totwal\n * }\n * const e = ticks(fn, 100);\n * \n * // Keep calling e() to get the current value\n * e();\n * ```\n * @param fn Function that produces 0..1 scale\n * @param totalTicks Total length of ticks\n * @returns \n */\nexport const ticks = (\n  fn: Modulate,\n  totalTicks: number\n): () => number => {\n  throwFunctionTest(fn, `fn`);\n\n  let relative: undefined | (() => number);\n  return () => {\n    if (relative === undefined) relative = Timer.ofTotalTicks(totalTicks, { clampValue: true });\n    return fn(relative());\n  }\n}\n\n/**\n * Creates an modulator based on ticks. \n * \n * `tickModulator` allows you to reset and check for completion.\n * Alternatively, use {@link ticks} which is a simple function that just returns a value.\n *\n * @example Tick-based modulator\n * ```\n * import { tickModulator } from \"https://unpkg.com/ixfx/dist/modulation.js\";\n * const fn = (t) => {\n *  // 't' will be values 0..1 based on completion\n *  return Math.random() * t;\n * }\n * const t = tickModulator(fn, 1000);   // Will take 1000 ticks to complete\n * t.compute(); // Each call to `compute` progresses the tick count\n * t.reset();   // Reset to 0\n * t.isDone;    // _True_ if finished\n * ```\n * @param fn Modulate function that returns 0..1\n * @param durationTicks Duration in ticks\n * @returns ModulatorTimed\n */\nexport const tickModulator = (\n  fn: Modulate,\n  durationTicks: number\n): ModulatorTimed => {\n  throwFunctionTest(fn, `fn`);\n  const timer = Timer.elapsedTicksAbsolute();\n  const relativeTimer = Timer.relative(\n    durationTicks,\n    {\n      timer,\n      clampValue: true\n    });\n  return Timer.timerWithFunction(fn, relativeTimer);\n};","import * as Named from './EasingsNamed.js';\nimport { throwStringTest } from '../../util/GuardString.js';\nimport { type Interval } from '../../flow/IntervalType.js';\nimport type { Modulate, ModulatorTimed } from '../Types.js';\nexport * as Named from './EasingsNamed.js';\nimport * as ModTimed from '../ModulatorTimed.js';\n\n/**\n * Easing name\n */\nexport type EasingName = keyof typeof Named;\n\nexport type Options = (TickOptions | TimeOptions) & {\n  name?: EasingName\n  fn?: Modulate\n}\n\nexport type TimeOptions = {\n  duration: Interval\n}\nexport type TickOptions = {\n  ticks: number\n}\n\n/**\n * Creates an easing function\n * ```js\n * import { Easings } from \"https://unpkg.com/ixfx/dist/modulation.js\";\n * const e = Easings.create({ duration: 1000, name: `quadIn` });\n * const e = Easings.create({ ticks: 100, name: `sineOut` });\n * const e = Easings.create({ \n *  duration: 1000, \n *  fn: (v) => {\n *    // v will be 0..1 based on time\n *    return Math.random() * v\n *  }\n * });\n * ```\n * @param options \n * @returns \n */\nexport const create = (options: Options): () => number => {\n  let name = resolveEasingName(options.name ?? `quintIn`);\n  const fn = name ?? options.fn;\n  if (!fn) throw new Error(`Either 'name' or 'fn' must be set`);\n\n  if (`duration` in options) {\n    return time(fn, options.duration);\n  } else if (`ticks` in options) {\n    return ticks(fn, options.ticks);\n  } else {\n    throw new Error(`Expected 'duration' or 'ticks' in options`);\n  }\n}\n\n/**\n * Creates an easing based on clock time. Time\n * starts being counted when easing function is created.\n * \n * `timeEasing` allows you to reset and check for completion.\n * Alternatively, use {@link time} which is a simple function that just returns a value.\n *\n * \n * @example Time based easing\n * ```\n * import { Easings } from \"https://unpkg.com/ixfx/dist/modulation.js\";\n * const t = Easings.timeEasing(`quintIn`, 5*1000); // Will take 5 seconds to complete\n * ...\n * t.compute(); // Get current value of easing\n * t.reset();   // Reset to 0\n * t.isDone;    // _True_ if finished\n * ```\n * \n * Thisi function is just a wrapper around Modulator.timedModulator.\n * @param nameOrFunction Name of easing, or an easing function\n * @param duration Duration\n * @returns Easing\n */\nexport const timeEasing = (\n  nameOrFunction: EasingName | ((v: number) => number),\n  duration: Interval\n): ModulatorTimed => {\n  const fn = resolveEasingName(nameOrFunction);\n  return ModTimed.timeModulator(fn, duration);\n  // const timer = Timer.elapsedMillisecondsAbsolute();\n  // const durationMs = intervalToMs(duration);\n  // if (durationMs === undefined) throw new Error(`Param 'duration' not provided`);\n  // const relativeTimer = Timer.relative(\n  //   durationMs,\n  //   {\n  //     timer,\n  //     clampValue: true\n  //   });\n  // return Timer.timerWithFunction(fn, relativeTimer);\n};\n\n/**\n * Produce easing values over time. When the easing is complete, the final\n * value continues to return. Timer starts when return function is first invoked.\n * \n * If you need to check if an easing is done or reset it, consider {@link timeEasing}.\n * \n * ```js\n * import { Easings } from \"https://unpkg.com/ixfx/dist/modulation.js\";\n * // Quad-in easing over one second\n * const e = Easings.time(`quadIn`, 1000);\n * \n * // Keep calling e() to get the current value\n * e();\n * ```\n * \n * This function is just a wrapper around Modulate.time\n * @param nameOrFunction Easing name or a function that produces 0..1 scale\n * @param duration Duration\n * @returns \n */\nexport const time = (\n  nameOrFunction: EasingName | ((v: number) => number),\n  duration: Interval\n): () => number => {\n  const fn = resolveEasingName(nameOrFunction);\n  return ModTimed.time(fn, duration);\n  // let relative: undefined | (() => number);\n  // return () => {\n  //   if (relative === undefined) relative = Timer.ofTotal(duration, { clampValue: true });\n  //   return fn(relative());\n  // }\n}\n\n\n/**\n * Produce easing values with each invocation. When the easing is complete, the final\n * value continues to return. Timer starts when return function is first invoked.\n * \n * If you need to check if an easing is done or reset it, consider {@link tickEasing}.\n * \n * ```js\n * import { Easings } from \"https://unpkg.com/ixfx/dist/modulation.js\";\n * // Quad-in easing over 100 ticks\n * const e = Easings.ticks(`quadIn`, 100);\n * \n * // Keep calling e() to get the current value\n * e();\n * ```\n * \n * This is just a wrapper around Modulator.ticks\n * @param nameOrFunction Easing name or a function that produces 0..1 scale\n * @param totalTicks Total length of ticks\n * @returns \n */\nexport const ticks = (\n  nameOrFunction: EasingName | ((v: number) => number),\n  totalTicks: number\n): () => number => {\n  const fn = resolveEasingName(nameOrFunction);\n  return ModTimed.ticks(fn, totalTicks);\n  // let relative: undefined | (() => number);\n  // return () => {\n  //   if (relative === undefined) relative = Timer.ofTotalTicks(totalTicks, { clampValue: true });\n  //   return fn(relative());\n  // }\n}\n/**\n * Creates an easing based on ticks. \n * \n * `tickEasing` allows you to reset and check for completion.\n * Alternatively, use {@link ticks} which is a simple function that just returns a value.\n *\n * @example Tick-based easing\n * ```\n * import { Easings } from \"https://unpkg.com/ixfx/dist/modulation.js\";\n * const t = Easings.tickEasing(`sineIn`, 1000);   // Will take 1000 ticks to complete\n * t.compute(); // Each call to `compute` progresses the tick count\n * t.reset();   // Reset to 0\n * t.isDone;    // _True_ if finished\n * ```\n * @param nameOrFunction Name of easing, or an easing function\n * @param durationTicks Duration in ticks\n * @returns Easing\n */\nexport const tickEasing = (\n  nameOrFunction: EasingName | ((v: number) => number),\n  durationTicks: number\n): ModulatorTimed => {\n  const fn = resolveEasingName(nameOrFunction);\n  return ModTimed.tickModulator(fn, durationTicks);\n  // const timer = Timer.elapsedTicksAbsolute();\n  // const relativeTimer = Timer.relative(\n  //   durationTicks,\n  //   {\n  //     timer,\n  //     clampValue: true\n  //   });\n  // return Timer.timerWithFunction(fn, relativeTimer);\n};\n\nconst resolveEasingName = (nameOrFunction: EasingName | ((v: number) => number)): Modulate => {\n  const fn = typeof nameOrFunction === `function` ? nameOrFunction : get(nameOrFunction);\n  if (fn === undefined) {\n    const error = typeof nameOrFunction === `string` ? new Error(`Easing function not found: '${ nameOrFunction }'`) : new Error(`Easing function not found`);\n    throw error;\n  }\n  return fn;\n}\n\n\n/**\n * Creates a new easing by name\n *\n * ```js\n * import { Easings } from \"https://unpkg.com/ixfx/dist/modulation.js\";\n * const e = Easings.create(`circInOut`, 1000, elapsedMillisecondsAbsolute);\n * ```\n * @param nameOrFunction Name of easing, or an easing function\n * @param duration Duration (meaning depends on timer source)\n * @param timerSource Timer source\n * @returns\n */\n// const create = function (\n//   nameOrFunction: EasingName | ((v: number) => number),\n//   duration: number,\n//   timerSource: TimerSource\n// ): Easing {\n//   const fn = typeof nameOrFunction === `function` ? nameOrFunction : get(nameOrFunction);\n//   if (fn === undefined) {\n//     const error = typeof nameOrFunction === `string` ? new Error(`Easing function not found: '${ nameOrFunction }'`) : new Error(`Easing function not found`);\n//     throw error;\n//   }\n\n//   // Get a relative version of timer\n//   const timer = relativeTimer(duration, {\n//     timer: timerSource(),\n//     clampValue: true,\n//   });\n//   let startCount = 1;\n\n//   return {\n//     get isDone() {\n//       return timer.isDone;\n//     },\n//     get runState() {\n//       if (timer.isDone) return `idle`;\n//       return `scheduled`;\n//     },\n//     /**\n//      * Returns 1 if it has been created, returns +1 for each additional time the timer has been reset.\n//      */\n//     get startCount() {\n//       return startCount;\n//     },\n//     get startCountTotal() {\n//       return startCount;\n//     },\n//     compute: () => {\n//       const relative = timer.elapsed;\n//       return fn(relative);\n//     },\n//     reset: () => {\n//       timer.reset();\n//       startCount++;\n//     },\n//   };\n// };\n\n\nlet easingsMap: Map<string, ((v: number) => number)> | undefined;\n\n/**\n * Returns an easing function by name. Throws an error if\n * easing is not found.\n *\n * ```js\n * import { Easings } from \"https://unpkg.com/ixfx/dist/modulation.js\";\n * const fn = Easings.get(`sineIn`);\n * // Returns 'eased' transformation of 0.5\n * fn(0.5);\n * ```\n * @param easingName eg `sineIn`\n * @returns Easing function\n */\nexport const get = function (easingName: EasingName): Modulate {\n  throwStringTest(easingName, `non-empty`, `easingName`);\n\n  const found = cacheEasings().get(easingName.toLowerCase());\n  if (found === undefined) throw new Error(`Easing not found: '${ easingName }'`);\n  return found;\n};\n\n// Cache named easings\nfunction cacheEasings() {\n  if (easingsMap === undefined) {\n    easingsMap = new Map();\n    for (const [ k, v ] of Object.entries(Named)) {\n      easingsMap.set(k.toLowerCase(), v);\n    }\n    return easingsMap\n  } else return easingsMap;\n}\n\n/**\n * Iterate over available easings.\n * @private\n * @returns Returns list of available easing names\n */\nexport function* getEasingNames(): Iterable<string> {\n  const map = cacheEasings();\n  yield* map.keys();\n};\n","import { gaussian } from \"../Gaussian.js\";\n// Easings from https://easings.net/\n\nconst sqrt = Math.sqrt;\nconst pow = Math.pow;\nconst cos = Math.cos;\nconst pi = Math.PI;\nconst sin = Math.sin;\n\n\nexport const bounceOut = (x: number) => {\n  const n1 = 7.5625;\n  const d1 = 2.75;\n\n  if (x < 1 / d1) {\n    return n1 * x * x;\n  } else if (x < 2 / d1) {\n    return n1 * (x -= 1.5 / d1) * x + 0.75;\n  } else if (x < 2.5 / d1) {\n    return n1 * (x -= 2.25 / d1) * x + 0.9375;\n  } else {\n    return n1 * (x -= 2.625 / d1) * x + 0.984_375;\n  }\n};\n\nexport const quintIn = (x: number) => x * x * x * x * x;\nexport const quintOut = (x: number) => 1 - pow(1 - x, 5);\nexport const arch = (x: number) => x * (1 - x) * 4;\n\nexport const smoothstep = (x: number) => x * x * (3 - 2 * x);\nexport const smootherstep = (x: number) => (x * (x * 6 - 15) + 10) * x * x * x;\nexport const sineIn = (x: number) => 1 - cos((x * pi) / 2);\nexport const sineOut = (x: number) => sin((x * pi) / 2);\nexport const quadIn = (x: number) => x * x;\nexport const quadOut = (x: number) => 1 - (1 - x) * (1 - x);\nexport const sineInOut = (x: number) => -(cos(pi * x) - 1) / 2;\nexport const quadInOut = (x: number) => x < 0.5 ? 2 * x * x : 1 - pow(-2 * x + 2, 2) / 2;\nexport const cubicIn = (x: number) => x * x * x;\nexport const cubicOut = (x: number) => 1 - pow(1 - x, 3);\nexport const quartIn = (x: number) => x * x * x * x;\nexport const quartOut = (x: number) => 1 - pow(1 - x, 4);\nexport const expoIn = (x: number) => (x === 0 ? 0 : pow(2, 10 * x - 10));\nexport const expoOut = (x: number) => (x === 1 ? 1 : 1 - pow(2, -10 * x));\nexport const quintInOut = (x: number) =>\n  x < 0.5 ? 16 * x * x * x * x * x : 1 - pow(-2 * x + 2, 5) / 2;\nexport const expoInOut = (x: number) =>\n  x === 0\n    ? 0\n    : x === 1\n      ? 1\n      // eslint-disable-next-line unicorn/no-nested-ternary\n      : x < 0.5\n        ? pow(2, 20 * x - 10) / 2\n        : (2 - pow(2, -20 * x + 10)) / 2;\nexport const circIn = (x: number) => 1 - sqrt(1 - pow(x, 2));\nexport const circOut = (x: number) => sqrt(1 - pow(x - 1, 2));\nexport const backIn = (x: number) => {\n  const c1 = 1.701_58;\n  const c3 = c1 + 1;\n\n  return c3 * x * x * x - c1 * x * x;\n};\nexport const backOut = (x: number) => {\n  const c1 = 1.701_58;\n  const c3 = c1 + 1;\n\n  return 1 + c3 * pow(x - 1, 3) + c1 * pow(x - 1, 2);\n};\nexport const circInOut = (x: number) =>\n  x < 0.5\n    ? (1 - sqrt(1 - pow(2 * x, 2))) / 2\n    : (sqrt(1 - pow(-2 * x + 2, 2)) + 1) / 2;\n\nexport const backInOut = (x: number) => {\n  const c1 = 1.701_58;\n  const c2 = c1 * 1.525;\n\n  return x < 0.5\n    ? (pow(2 * x, 2) * ((c2 + 1) * 2 * x - c2)) / 2\n    : (pow(2 * x - 2, 2) * ((c2 + 1) * (x * 2 - 2) + c2) + 2) / 2;\n};\nexport const elasticIn = (x: number) => {\n  const c4 = (2 * pi) / 3;\n\n  return x === 0\n    ? 0\n    : (x === 1\n      ? 1\n      : -pow(2, 10 * x - 10) * sin((x * 10 - 10.75) * c4));\n};\nexport const elasticOut = (x: number) => {\n  const c4 = (2 * pi) / 3;\n\n  return x === 0\n    ? 0\n    : (x === 1\n      ? 1\n      : pow(2, -10 * x) * sin((x * 10 - 0.75) * c4) + 1);\n};\n\nexport const bounceIn = (x: number) => 1 - bounceOut(1 - x);\n\nexport const bell = gaussian();\n\nexport const elasticInOut = (x: number) => {\n  const c5 = (2 * pi) / 4.5;\n\n  return x === 0\n    ? 0\n    : x === 1\n      ? 1\n      // eslint-disable-next-line unicorn/no-nested-ternary\n      : x < 0.5\n        ? -(pow(2, 20 * x - 10) * sin((20 * x - 11.125) * c5)) / 2\n        : (pow(2, -20 * x + 10) * sin((20 * x - 11.125) * c5)) / 2 + 1;\n};\nexport const bounceInOut = (x: number) => x < 0.5 ? (1 - bounceOut(1 - 2 * x)) / 2 : (1 + bounceOut(2 * x - 1)) / 2;\n"],"mappings":"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","names":["relative","ticks","time","pow","time","ticks"]}