{"version":3,"sources":["../src/collections/set/index.ts","../src/collections/set/SetMutable.ts","../src/collections/set/SetImmutable.ts"],"sourcesContent":["export type ValueSetEventMap<V> = {\n  readonly add: { readonly value: V; readonly updated: boolean };\n  readonly clear: boolean;\n  readonly delete: V;\n};\n\nexport { mutable } from './SetMutable.js';\nexport { immutable } from './SetImmutable.js';\nexport { type ISetMutable } from './ISetMutable.js';\nexport { type ISetImmutable } from './ISetImmutable.js';\n","// ✔ UNIT TESTED\nimport { type ToString, defaultKeyer } from '../../Util.js';\nimport { SimpleEventEmitter } from '../../Events.js';\nimport { type ISetMutable } from './ISetMutable.js';\nimport { type ValueSetEventMap } from './index.js';\n\n/**\n * Creates a {@link ISetMutable}.\n * @param keyString Function that produces a key based on a value. If unspecified, uses `JSON.stringify`\n * @returns\n */\nexport const mutable = <V>(\n  keyString?: ToString<V> | undefined\n): ISetMutable<V> => new SetStringMutable(keyString);\n\n/**\n * Mutable string set\n */\nexport class SetStringMutable<V>\n  extends SimpleEventEmitter<ValueSetEventMap<V>>\n  implements ISetMutable<V>\n{\n  // ✔ UNIT TESTED\n  /* eslint-disable functional/prefer-readonly-type */\n  store = new Map<string, V>();\n  keyString: ToString<V>;\n\n  /**\n   * Constructor\n   * @param keyString Function which returns a string version of added items. If unspecified `JSON.stringify`\n   */\n  constructor(keyString: ToString<V> | undefined) {\n    super();\n    this.keyString = keyString ?? defaultKeyer<V>;\n  }\n\n  /**\n   * Number of items stored in set\n   */\n  get size() {\n    return this.store.size;\n  }\n\n  /**\n   * Adds one or more items to set. `add` event is fired for each item\n   * @param v items to add\n   */\n  add(...values: Array<V>): boolean {\n    //eslint-disable-next-line functional/no-let\n    let somethingAdded = false;\n    for (const value of values) {\n      const isUpdated = this.has(value);\n      this.store.set(this.keyString(value), value);\n      super.fireEvent(`add`, { value: value, updated: isUpdated });\n      if (!isUpdated) somethingAdded = true;\n    }\n    return somethingAdded;\n  }\n\n  /**\n   * Returns values from set as an iterable\n   * @returns\n   */\n  //eslint-disable-next-line functional/prefer-tacit\n  values() {\n    return this.store.values();\n  }\n\n  /**\n   * Clear items from set\n   */\n  clear() {\n    this.store.clear();\n    super.fireEvent(`clear`, true);\n  }\n\n  /**\n   * Delete value from set.\n   * @param v Value to delete\n   * @returns _True_ if item was found and removed\n   */\n  delete(v: V): boolean {\n    const isDeleted = this.store.delete(this.keyString(v));\n    if (isDeleted) super.fireEvent(`delete`, v);\n    return isDeleted;\n  }\n\n  /**\n   * Returns _true_ if item exists in set\n   * @param v\n   * @returns\n   */\n  has(v: V): boolean {\n    return this.store.has(this.keyString(v));\n  }\n\n  /**\n   * Returns array copy of set\n   * @returns Array copy of set\n   */\n  toArray(): Array<V> {\n    return [ ...this.store.values() ];\n  }\n}\n","import { type ToString, defaultKeyer, toStringDefault } from '../../Util.js';\nimport { type ISetImmutable } from './index.js';\n\nexport class SetStringImmutable<V> implements ISetImmutable<V> {\n  private store: Map<string, V>;\n  private keyString;\n\n  //eslint-disable-next-line functional/prefer-immutable-types\n  constructor(keyString?: ToString<V>, map?: Map<string, V>) {\n    this.store = map ?? new Map<string, V>();\n    this.keyString = keyString ?? defaultKeyer<V>;\n  }\n\n  get size(): number {\n    return this.store.size;\n  }\n\n  add(...values: readonly V[]): ISetImmutable<V> {\n    const s = new Map<string, V>(this.store);\n    for (const v of values) {\n      const key = this.keyString(v);\n      s.set(key, v);\n    }\n    return new SetStringImmutable<V>(this.keyString, s);\n  }\n\n  delete(v: V): ISetImmutable<V> {\n    const s = new Map<string, V>(this.store);\n    const key = this.keyString(v);\n    if (s.delete(key)) return new SetStringImmutable(this.keyString, s);\n    return this;\n  }\n\n  has(v: V): boolean {\n    const key = this.keyString(v);\n    return this.store.has(key);\n  }\n\n  toArray(): V[] {\n    return [...this.store.values()];\n  }\n\n  *values() {\n    yield* this.store.values();\n  }\n}\n\n/**\n * Immutable set that uses a `keyString` function to determine uniqueness\n *\n * @param keyString Function that produces a key based on a value. If unspecified, uses `JSON.stringify`.\n * @returns\n */\nexport const immutable = <V>(\n  keyString: ToString<V> = toStringDefault\n): ISetImmutable<V> => new SetStringImmutable(keyString);\n"],"mappings":";;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;;;ACWO,IAAM,UAAU,CACrB,cACmB,IAAI,iBAAiB,SAAS;AAK5C,IAAM,mBAAN,cACG,mBAEV;AAAA;AAAA;AAAA,EAGE,QAAQ,oBAAI,IAAe;AAAA,EAC3B;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,YAAY,WAAoC;AAC9C,UAAM;AACN,SAAK,YAAY,aAAa;AAAA,EAChC;AAAA;AAAA;AAAA;AAAA,EAKA,IAAI,OAAO;AACT,WAAO,KAAK,MAAM;AAAA,EACpB;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,OAAO,QAA2B;AAEhC,QAAI,iBAAiB;AACrB,eAAW,SAAS,QAAQ;AAC1B,YAAM,YAAY,KAAK,IAAI,KAAK;AAChC,WAAK,MAAM,IAAI,KAAK,UAAU,KAAK,GAAG,KAAK;AAC3C,YAAM,UAAU,OAAO,EAAE,OAAc,SAAS,UAAU,CAAC;AAC3D,UAAI,CAAC;AAAW,yBAAiB;AAAA,IACnC;AACA,WAAO;AAAA,EACT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,SAAS;AACP,WAAO,KAAK,MAAM,OAAO;AAAA,EAC3B;AAAA;AAAA;AAAA;AAAA,EAKA,QAAQ;AACN,SAAK,MAAM,MAAM;AACjB,UAAM,UAAU,SAAS,IAAI;AAAA,EAC/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,OAAO,GAAe;AACpB,UAAM,YAAY,KAAK,MAAM,OAAO,KAAK,UAAU,CAAC,CAAC;AACrD,QAAI;AAAW,YAAM,UAAU,UAAU,CAAC;AAC1C,WAAO;AAAA,EACT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,IAAI,GAAe;AACjB,WAAO,KAAK,MAAM,IAAI,KAAK,UAAU,CAAC,CAAC;AAAA,EACzC;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,UAAoB;AAClB,WAAO,CAAE,GAAG,KAAK,MAAM,OAAO,CAAE;AAAA,EAClC;AACF;;;ACpGO,IAAM,qBAAN,MAAM,oBAAkD;AAAA,EACrD;AAAA,EACA;AAAA;AAAA,EAGR,YAAY,WAAyB,KAAsB;AACzD,SAAK,QAAQ,OAAO,oBAAI,IAAe;AACvC,SAAK,YAAY,aAAa;AAAA,EAChC;AAAA,EAEA,IAAI,OAAe;AACjB,WAAO,KAAK,MAAM;AAAA,EACpB;AAAA,EAEA,OAAO,QAAwC;AAC7C,UAAM,IAAI,IAAI,IAAe,KAAK,KAAK;AACvC,eAAW,KAAK,QAAQ;AACtB,YAAM,MAAM,KAAK,UAAU,CAAC;AAC5B,QAAE,IAAI,KAAK,CAAC;AAAA,IACd;AACA,WAAO,IAAI,oBAAsB,KAAK,WAAW,CAAC;AAAA,EACpD;AAAA,EAEA,OAAO,GAAwB;AAC7B,UAAM,IAAI,IAAI,IAAe,KAAK,KAAK;AACvC,UAAM,MAAM,KAAK,UAAU,CAAC;AAC5B,QAAI,EAAE,OAAO,GAAG;AAAG,aAAO,IAAI,oBAAmB,KAAK,WAAW,CAAC;AAClE,WAAO;AAAA,EACT;AAAA,EAEA,IAAI,GAAe;AACjB,UAAM,MAAM,KAAK,UAAU,CAAC;AAC5B,WAAO,KAAK,MAAM,IAAI,GAAG;AAAA,EAC3B;AAAA,EAEA,UAAe;AACb,WAAO,CAAC,GAAG,KAAK,MAAM,OAAO,CAAC;AAAA,EAChC;AAAA,EAEA,CAAC,SAAS;AACR,WAAO,KAAK,MAAM,OAAO;AAAA,EAC3B;AACF;AAQO,IAAM,YAAY,CACvB,YAAyB,oBACJ,IAAI,mBAAmB,SAAS;","names":[]}