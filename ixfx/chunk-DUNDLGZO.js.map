{"version":3,"sources":["../src/Util.ts","../src/Guards.ts","../src/IterableAsync.ts","../src/IsEqual.ts","../src/flow/IntervalType.ts","../src/flow/Sleep.ts"],"sourcesContent":["import { numberTest, throwFromResult } from './Guards.js';\nexport * as IterableAsync from './IterableAsync.js';\n\n\nexport type ArrayLengthMutationKeys = `splice` | `push` | `pop` | `shift` | `unshift` | number\nexport type ArrayItems<T extends Array<any>> = T extends Array<infer TItems> ? TItems : never\nexport type FixedLengthArray<T extends Array<any>> =\n  Pick<T, Exclude<keyof T, ArrayLengthMutationKeys>>\n  & { [ Symbol.iterator ]: () => IterableIterator<ArrayItems<T>> }\n\nexport const isFunction = (object: unknown): object is (...args: Array<any>) => any => object instanceof Function;\n\n/**\n * Returns _true_ if `value` is a plain object\n * \n * ```js\n * isPlainObject(`text`); // false\n * isPlainObject(document); // false\n * isPlainObject({ hello: `there` }); // true\n * ```\n * @param value \n * @returns \n */\nexport const isPlainObject = (value: unknown) => {\n  if (typeof value !== `object` || value === null) return false;\n  const prototype = Object.getPrototypeOf(value);\n  return (prototype === null || prototype === Object.prototype || Object.getPrototypeOf(prototype) === null) && !(Symbol.toStringTag in value) && !(Symbol.iterator in value);\n}\n\n/**\n * Returns _true_ if `value` is primitive value or plain object\n * @param value \n * @returns \n */\nexport const isPlainObjectOrPrimitive = (value: unknown) => {\n  const t = typeof value;\n  if (t === `symbol`) return false;\n  if (t === `function`) return false;\n  if (t === `bigint`) return true;\n  if (t === `number`) return true;\n  if (t === `string`) return true;\n  if (t === `boolean`) return true;\n  return isPlainObject(value);\n}\n/**\n * Returns `fallback` if `v` is NaN, otherwise returns `v`.\n *\n * Throws if `v` is not a number type.\n * @param v\n * @param fallback\n * @returns\n */\nexport const ifNaN = (v: number, fallback: number): number => {\n  // ✔️ Unit tested\n\n  if (Number.isNaN(v)) return fallback;\n  if (typeof v !== `number`) {\n    throw new TypeError(`v is not a number. Got: ${ typeof v }`);\n  }\n  return v;\n};\n\n\n/**\n * Returns true if `x` is a power of two\n * @param x\n * @returns True if `x` is a power of two\n */\nexport const isPowerOfTwo = (x: number) => Math.log2(x) % 1 === 0;\n\n/**\n * Returns the relative difference from the `initial` value\n * ```js\n * const rel = relativeDifference(100);\n * rel(100); // 1\n * rel(150); // 1.5\n * rel(50);  // 0.5\n * ```\n *\n * The code for this is simple:\n * ```js\n * const relativeDifference = (initial) => (v) => v/initial\n * ```\n * @param {number} initial\n * @returns\n */\nexport const relativeDifference = (initial: number) => (v: number) =>\n  v / initial;\n\n/**\n * Rounds `v` up to the nearest multiple of `multiple`\n * ```\n * roundMultiple(19, 20); // 20\n * roundMultiple(21, 20); // 40\n * ```\n * @param v\n * @param multiple\n * @returns\n */\nexport const roundUpToMultiple = (v: number, multiple: number): number => {\n  throwFromResult(numberTest(v, `nonZero`, `v`));\n  throwFromResult(numberTest(multiple, `nonZero`, `multiple`));\n  return Math.ceil(v / multiple) * multiple;\n};\n\nexport type ToString<V> = (itemToMakeStringFor: V) => string;\n\n// Via Vuejs\n// eslint-disable-next-line @typescript-eslint/unbound-method\nconst objectToString = Object.prototype.toString\nconst toTypeString = (value: unknown): string =>\n  objectToString.call(value)\nexport const isMap = (value: unknown): value is Map<any, any> =>\n  toTypeString(value) === `[object Map]`\nexport const isSet = (value: unknown): value is Set<any> =>\n  toTypeString(value) === `[object Set]`\n\n/**\n * A default converter to string that uses JSON.stringify if its an object, or the thing itself if it's a string\n */\nexport const toStringDefault = <V>(itemToMakeStringFor: V): string =>\n  typeof itemToMakeStringFor === `string`\n    ? itemToMakeStringFor\n    : JSON.stringify(itemToMakeStringFor);\n\n//eslint-disable-next-line functional/functional-parameters\nexport const runningiOS = () =>\n  [\n    `iPad Simulator`,\n    `iPhone Simulator`,\n    `iPod Simulator`,\n    `iPad`,\n    `iPhone`,\n    `iPod`,\n  ].includes(navigator.platform) ||\n  // iPad on iOS 13 detection\n  (navigator.userAgent.includes(`Mac`) && `ontouchend` in document);\n\nexport type CompareResult = number; // 0 | 1 | -1;\nexport type Comparer<V> = (a: V, b: V) => CompareResult;\n\n/**\n * Sort numbers in ascending order.\n *\n * ```js\n * [10, 4, 5, 0].sort(numericComparer);\n * // Yields: [0, 4, 5, 10]\n * [10, 4, 5, 0].sort(comparerInverse(numericComparer));\n * // Yields: [ 10, 5, 4, 0]\n * ```\n * @param x\n * @param y\n * @returns\n */\nexport const numericComparer = (x: number, y: number): CompareResult => {\n  // ✔️ Unit tested\n  if (x === y) return 0;\n  if (x > y) return 1;\n  return -1;\n};\n\n// /**\n//  * Sorts numbers in descending order\n//  * @param x\n//  * @param y\n//  * @returns\n//  */\n// export const numericComparerInverse = (x: number, y: number): CompareResult => {\n//   // ✔️ Unit tested\n//   if (x === y) return 0;\n//   if (x > y) return -1;\n//   return 1;\n// };\n\n/**\n * Default sort comparer, following same sematics as Array.sort.\n * Consider using {@link defaultComparer} to get more logical sorting of numbers.\n *\n * Note: numbers are sorted in alphabetical order, eg:\n * ```js\n * [ 10, 20, 5, 100 ].sort(jsComparer); // same as .sort()\n * // Yields: [10, 100, 20, 5]\n * ```\n * @param x\n * @param y\n * @returns\n */\n//eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport const jsComparer = (x: any, y: any): CompareResult => {\n  // ✔️ Unit tested\n\n  // Via https://stackoverflow.com/questions/47334234/how-to-implement-array-prototype-sort-default-compare-function\n  if (x === undefined && y === undefined) return 0;\n  if (x === undefined) return 1;\n  if (y === undefined) return -1;\n\n  const xString = defaultToString(x);\n  const yString = defaultToString(y);\n\n  if (xString < yString) return -1;\n  if (xString > yString) return 1;\n  return 0;\n};\n\n// export const jsComparerInverse = (x: any, y: any): CompareResult =>\n//   jsComparer(x, y) * -1;\n\n/**\n * Compares numbers by numeric value, otherwise uses the default\n * logic of string comparison.\n *\n * Is an ascending sort:\n *  b, a, c -> a, b, c\n *  10, 5, 100 -> 5, 10, 100\n * @param x\n * @param y\n * @see {@link comparerInverse} Inverted order\n * @returns\n */\n//eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport const defaultComparer = (x: any, y: any): CompareResult => {\n  if (typeof x === `number` && typeof y === `number`) {\n    return numericComparer(x, y);\n  }\n  return jsComparer(x, y);\n};\n\n// /**\n//  * Compares numbers by numeric value, otherwise uses the default\n//  * logic of string comparison.\n//  *\n//  * Is an descending sort:\n//  *  b, a, c -> c, a, b\n//  *  10, 5, 100 -> 100, 10, 5\n//  * @param x\n//  * @param y\n//  * @returns\n//  * @see {@link defaultComparer} Asending\n//  */\n// export const defaultComparerInverse = (x: any, y: any): CompareResult => {\n//   if (typeof x === `number` && typeof y === `number`) {\n//     return numericComparerInverse(x, y);\n//   }\n//   return jsComparerInverse(x, y);\n// };\n\n/**\n * Inverts the source comparer.\n * @param fn\n * @returns\n */\nexport const comparerInverse = <V>(comparer: Comparer<V>): Comparer<V> => {\n  return (x: V, y: V) => {\n    const v = comparer(x, y);\n    return v * -1;\n  };\n};\n\n/**\n * If values are strings, uses that as the key.\n * Otherwise uses `JSON.stringify`.\n * @param a\n * @returns\n */\nexport const defaultKeyer = <V>(a: V) => {\n  return typeof a === `string` ? a : JSON.stringify(a);\n};\n\n//eslint-disable-next-line @typescript-eslint/no-explicit-any\nconst defaultToString = (object: any): string => {\n  //ECMA specification: http://www.ecma-international.org/ecma-262/6.0/#sec-tostring\n  if (object === null) return `null`;\n  if (typeof object === `boolean` || typeof object === `number`) {\n    return object.toString();\n  }\n\n  if (typeof object === `string`) return object;\n  if (typeof object === `symbol`) throw new TypeError(`Symbol cannot be converted to string`);\n  return JSON.stringify(object);\n};\n\n// try {\n//   if (typeof window !== `undefined`) {\n//     //eslint-disable-next-line functional/immutable-data,@typescript-eslint/no-explicit-any\n//     (window as any).ixfx = {\n//       //eslint-disable-next-line @typescript-eslint/no-explicit-any\n//       ...(window as any).ixfx,\n//       getFieldByPath,\n//       getFieldPaths,\n//     };\n//   }\n// } catch {\n//   /* no-op */\n// }\n\n","export type NumberGuardRange =\n  /**\n   * No range checking\n   */\n  | ``\n  /**\n   * Can be any number, except zero\n   */\n  | `nonZero`\n  | `positive`\n  | `negative`\n  /**\n   * Must be above zero\n   */\n  | `aboveZero`\n  | `belowZero`\n  | `percentage`\n  | `bipolar`;\n\ntype GuardResultOk = Readonly<readonly [ true: boolean ]>;\ntype GuardResultFail = Readonly<readonly [ false: boolean, reason: string ]>;\ntype GuardResult = GuardResultFail | GuardResultOk;\n\n/**\n * Throws an error if `t` is not a number or within specified range.\n * Use an empty string for no special range constraints.\n * Alternatives: {@link integer} for additional integer check, {@link percent} for percentage-range.\n *\n * * positive: must be at least zero\n * * negative: must be zero or lower\n * * aboveZero: must be above zero\n * * belowZero: must be below zero\n * * percentage: must be within 0-1, inclusive\n * * nonZero: can be anything except zero\n * * bipolar: can be -1 to 1, inclusive\n * @param value Value to check\n * @param paramName Name of parameter (for more helpful exception messages)\n * @param range Range to enforce\n * @returns\n */\nexport const numberTest = (\n  value?: unknown,\n  range: NumberGuardRange = ``,\n  parameterName = `?`,\n): GuardResult => {\n  if (value === null) return [ false, `Parameter ${ parameterName } is null` ];\n  if (typeof value === `undefined`) {\n    return [ false, `Parameter ${ parameterName } is undefined` ];\n  }\n  if (Number.isNaN(value)) {\n    return [ false, `Parameter '${ parameterName }' is NaN` ];\n  }\n  if (typeof value !== `number`) {\n    return [ false, `Parameter '${ parameterName }' is not a number (${ JSON.stringify(value) })` ];\n  }\n  switch (range) {\n    case `positive`: {\n      if (value < 0) {\n        return [ false, `Parameter '${ parameterName }' must be at least zero (${ value })` ];\n      }\n      break;\n    } case `negative`: {\n      if (value > 0) {\n        return [ false, `Parameter '${ parameterName }' must be zero or lower (${ value })` ];\n      }\n      break;\n    }\n    case `aboveZero`: {\n      if (value <= 0) {\n        return [ false, `Parameter '${ parameterName }' must be above zero (${ value })` ]\n\n      }\n      break;\n    }\n    case `belowZero`: {\n      if (value >= 0) {\n        return [ false, `Parameter '${ parameterName }' must be below zero (${ value })` ];\n      }\n      break;\n    }\n    case `percentage`: {\n      if (value > 1 || value < 0) {\n        return [ false, `Parameter '${ parameterName }' must be in percentage range (0 to 1). (${ value })` ]\n      }\n      break;\n    }\n    case `nonZero`: {\n      if (value === 0) {\n        return [ false, `Parameter '${ parameterName }' must non-zero. (${ value })` ];\n      }\n      break;\n    }\n    case `bipolar`: {\n      if (value > 1 || value < -1) {\n        return [ false, `Parameter '${ parameterName }' must be in bipolar percentage range (-1 to 1). (${ value })` ];\n      }\n      break;\n    }\n  }\n  return [ true ];\n};\n\nexport const throwNumberTest = (value?: unknown,\n  range: NumberGuardRange = ``,\n  parameterName = `?`) => {\n  throwFromResult(numberTest(value, range, parameterName));\n}\n/**\n * Test a number, returning _true_ if it passes, _false_ if not.\n * Compared to {@link number} which by default throws an exception.\n * @param value\n * @param range\n * @returns\n */\n// export const numberTry = (\n//   value?: number,\n//   range: NumberGuardRange = ``\n// ): boolean => {\n//   return number(value, range, ``, false);\n// };\n\n/**\n * Throws if `value` is _undefined_ or _null_.\n * @param value\n * @param paramName\n */\n//eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport const nullUndef = (value: any, parameterName = `?`): GuardResult => {\n  if (typeof value === `undefined`) {\n    return [ false, `${ parameterName } param is undefined` ];\n  }\n  if (value === null) return [ false, `${ parameterName } param is null` ];\n  return [ true ];\n};\n\nexport const throwFromResult = (test: GuardResultFail | GuardResultOk) => {\n  if (test[ 0 ]) return false;\n  else throw new Error(test[ 1 ]);\n}\n\n/**\n * Returns test of `value` being in the range of 0-1.\n * Equiv to `number(value, `percentage`);`\n *\n * This is the same as calling ```number(t, `percentage`)```\n * @param value Value to check\n * @param paramName Param name for customising exception message\n * @returns\n */\nexport const percentTest = (value: number, parameterName = `?`): GuardResult =>\n  numberTest(value, `percentage`, parameterName);\n\nexport const throwPercentTest = (value: number, parameterName = `?`) => {\n  throwFromResult(percentTest(value, parameterName));\n}\n/**\n * Checks if `value` an integer and meets additional criteria.\n * See {@link number} for guard details, or use that if integer checking is not required.\n *\n * Note:\n * * `bipolar` will mean -1, 0 or 1.\n * * positive: must be at least zero\n * * negative: must be zero or lower\n * * aboveZero: must be above zero\n * * belowZero: must be below zero\n * * percentage: must be within 0-1, inclusive\n * * nonZero: can be anything except zero\n * @param value Value to check\n * @param paramName Param name for customising exception message\n * @param range Guard specifier.\n */\nexport const integerTest = (\n  value: number | undefined,\n  range: NumberGuardRange = ``,\n  parameterName = `?`\n): GuardResult => {\n  // ✔️ Unit tested\n  const r = numberTest(value, range, parameterName);\n  if (!r[ 0 ]) return r;\n  if (!Number.isInteger(value)) {\n    return [ false, `Parameter ${ parameterName } is not an integer` ];\n  }\n  return [ true ];\n};\n\nexport const throwIntegerTest = (value: number | undefined,\n  range: NumberGuardRange = ``,\n  parameterName = `?`) => {\n  throwFromResult(integerTest(value, range, parameterName));\n}\n/**\n * Parses `value` as an integer, returning it if it meets the `range` criteria.\n * If not, `defaultValue` is returned.\n *\n * ```js\n * const i = integerParse('10', 'positive');    // 10\n * const i = integerParse('10.5', 'positive');  // 10\n * const i = integerParse('0', 'nonZero', 100); // 100\n * ```\n *\n * NaN is returned if criteria does not match and no default is given\n * ```js\n * const i = integerParse('10', 'negative');    // NaN\n * ```\n *\n * @param value\n * @param range\n * @param defaultValue\n * @returns\n */\nexport const integerParse = (\n  //eslint-disable-next-line @typescript-eslint/no-explicit-any\n  value: any,\n  range: NumberGuardRange = ``,\n  defaultValue: number = Number.NaN\n): number => {\n  // ✔️ Unit tested\n  if (value === undefined) return defaultValue;\n  if (value === null) return defaultValue;\n  try {\n    const parsed = Number.parseInt(value);\n    const r = integerTest(parsed, range, `parsed`);\n    return r[ 0 ] ? parsed : defaultValue;\n  } catch {\n    return defaultValue;\n  }\n  return Number.parseInt(value);\n};\n\n/**\n * Returns true if parameter is an array of strings\n * @param value\n * @returns\n */\nexport const isStringArray = (value: unknown): boolean => {\n  if (!Array.isArray(value)) return false;\n  return !value.some((v) => typeof v !== `string`);\n};\n\n/**\n * Throws an error if parameter is not an array\n * @param value\n * @param paramName\n */\nexport const arrayTest = (value: unknown, parameterName = `?`): GuardResult => {\n  if (!Array.isArray(value)) {\n    return [ false, `Parameter '${ parameterName }' is expected to be an array'` ];\n  }\n  return [ true ];\n};\n\nexport const throwArrayTest = (value: unknown, parameterName = `?`) => {\n  throwFromResult(arrayTest(value, parameterName));\n}\n\n/** Throws an error if parameter is not defined */\nexport const defined = <T>(argument: T | undefined): argument is T =>\n  argument !== undefined;\n","import { type IsEqual } from './IsEqual.js';\nimport { sleep } from './flow/Sleep.js';\n\nexport async function* fromArray<V>(array: Array<V>): AsyncGenerator<V> {\n  for (const v of array) {\n    yield v;\n    await sleep(1);\n  }\n}\n\nexport async function* fromIterable<V>(iterable: Iterable<V>): AsyncGenerator<V> {\n  for (const v of iterable) {\n    yield v;\n    await sleep(1);\n  }\n}\n\n/**\n * Breaks an iterable into array chunks\n * ```js\n * chunks([1,2,3,4,5,6,7,8,9,10], 3);\n * // Yields [[1, 2, 3], [4, 5, 6], [7, 8, 9], [10]]\n * ```\n * @param it\n * @param size\n */\n//eslint-disable-next-line func-style\nexport async function* chunks<V>(it: Iterable<V>, size: number) {\n  // Source: https://surma.github.io/underdash/\n  //eslint-disable-next-line functional/no-let\n  let buffer = [];\n  for await (const v of it) {\n    //eslint-disable-next-line functional/immutable-data\n    buffer.push(v);\n    if (buffer.length === size) {\n      yield buffer;\n      buffer = [];\n    }\n  }\n  if (buffer.length > 0) yield buffer;\n}\n\n/**\n * Return concatenation of iterators\n * @param its\n */\n//eslint-disable-next-line func-style\nexport async function* concat<V>(...its: ReadonlyArray<Iterable<V>>) {\n  // Source: https://surma.github.io/underdash/\n  for await (const it of its) yield* it;\n}\n\n/**\n * Drops elements that do not meet the predicate `f`.\n * ```js\n * dropWhile([1, 2, 3, 4], e => e < 3);\n * returns [3, 4]\n * ```\n * @param it\n * @param f\n */\n//eslint-disable-next-line func-style\nexport async function* dropWhile<V>(\n  it: AsyncIterable<V>,\n  f: (v: V) => boolean\n) {\n  // https://surma.github.io/underdash/\n  //const iit = it[Symbol.asyncIterator]();\n  for await (const v of it) {\n    if (!f(v)) {\n      yield v;\n      break;\n    }\n  }\n  yield* it;\n}\n\n/**\n * Returns true if items in two iterables are equal, as\n * determined by the `equality` function.\n * @param it1\n * @param it2\n * @param equality\n * @returns\n */\n//eslint-disable-next-line func-style\nexport async function equals<V>(\n  it1: AsyncIterable<V>,\n  it2: AsyncIterable<V>,\n  equality?: IsEqual<V>\n) {\n  // https://surma.github.io/underdash/\n  const iit1 = it1[ Symbol.asyncIterator ]();// it1[ Symbol.iterator ]();\n  const iit2 = it2[ Symbol.asyncIterator ]();\n  //eslint-disable-next-line no-constant-condition\n  while (true) {\n    const index1 = await iit1.next();\n    const index2 = await iit2.next();\n    if (equality !== undefined) {\n      if (!equality(index1.value, index2.value)) return false;\n    } else if (index1.value !== index2.value) return false;\n    if (index1.done ?? index2.done) return index1.done && index2.done;\n  }\n}\n\n/**\n * Returns _true_ if `f` returns _true_ for\n * every item in iterable\n * @param it\n * @param f\n * @returns\n */\n//eslint-disable-next-line func-style\nexport async function every<V>(it: Iterable<V>, f: (v: V) => boolean) {\n  // https://surma.github.io/underdash/\n  //eslint-disable-next-line functional/no-let\n  let ok = true;\n  for await (const v of it) ok = ok && f(v);\n  return ok;\n}\n\n/**\n * Yields `v` for each item within `it`.\n *\n * ```js\n * fill([1, 2, 3], 0);\n * // Yields: [0, 0, 0]\n * ```\n * @param it\n * @param v\n */\n//eslint-disable-next-line func-style\nexport async function* fill<V>(it: AsyncIterable<V>, v: V) {\n  // https://surma.github.io/underdash/\n\n  //eslint-disable-next-line @typescript-eslint/no-unused-vars\n  for await (const _ of it) yield v;\n}\n\n/**\n * Filters an iterable, returning items which match `f`.\n *\n * ```js\n * filter([1, 2, 3, 4], e => e % 2 == 0);\n * returns [2, 4]\n * ```\n * @param it\n * @param f\n */\n//eslint-disable-next-line func-style\nexport async function* filter<V>(it: AsyncIterable<V>, f: (v: V) => boolean) {\n  // https://surma.github.io/underdash/\n  for await (const v of it) {\n    if (!f(v)) continue;\n    yield v;\n  }\n}\n\n/**\n * Returns first item from iterable `it` that matches predicate `f`\n * ```js\n * find([1, 2, 3, 4], e => e > 2);\n * // Yields: 3\n * ```\n * @param it\n * @param f\n * @returns\n */\n//eslint-disable-next-line func-style\nexport async function find<V>(it: AsyncIterable<V>, f: (v: V) => boolean) {\n  // https://surma.github.io/underdash/\n  for await (const v of it) {\n    if (f(v)) return v;\n  }\n}\n\n/**\n * Returns a 'flattened' copy of array, un-nesting arrays one level\n * ```js\n * flatten([1, [2, 3], [[4]]]);\n * // Yields: [1, 2, 3, [4]];\n * ```\n * @param it\n */\n//eslint-disable-next-line func-style\nexport async function* flatten<V>(it: AsyncIterable<V>) {\n  // https://surma.github.io/underdash/\n  for await (const v of it) {\n    //eslint-disable-next-line @typescript-eslint/no-explicit-any\n    if (Symbol.asyncIterator in (v as any)) {\n      // @ts-expect-error\n      yield* v;\n    } else {\n      yield v;\n    }\n  }\n}\n\n/**\n * Execute function `f` for each item in iterable\n * @param it\n * @param f\n */\n//eslint-disable-next-line func-style\nexport async function forEach<V>(it: AsyncIterable<V>, f: (v: V) => boolean) {\n  // https://surma.github.io/underdash/\n  for await (const v of it) f(v);\n}\n\n/**\n * Maps an iterable of type `V` to type `X`.\n * ```js\n * map([1, 2, 3], e => e*e)\n * returns [1, 4, 9]\n * ```\n * @param it\n * @param f\n */\n//eslint-disable-next-line func-style\nexport async function* map<V, X>(it: AsyncIterable<V>, f: (v: V) => X) {\n  // https://surma.github.io/underdash/\n\n  for await (const v of it) {\n    yield f(v);\n  }\n}\n\n/**\n * Returns the maximum seen of an iterable\n * ```js\n * min([\n *  {i:0,v:1},\n *  {i:1,v:9},\n *  {i:2,v:-2}\n * ], (a, b) => a.v > b.v);\n * // Yields: {i:1, v:-9}\n * ```\n * @param it Iterable\n * @param gt Should return _true_ if `a` is greater than `b`.\n * @returns\n */\n//eslint-disable-next-line func-style\nexport async function max<V>(it: AsyncIterable<V>, gt = (a: V, b: V) => a > b) {\n  // https://surma.github.io/underdash/\n\n  //eslint-disable-next-line functional/no-let\n  let max;\n\n  for await (const v of it) {\n    if (!max) {\n      max = v;\n      continue;\n    }\n    max = gt(max, v) ? max : v;\n  }\n  return max;\n}\n\n/**\n * Returns the minimum seen of an iterable\n * ```js\n * min([\n *  {i:0,v:1},\n *  {i:1,v:9},\n *  {i:2,v:-2}\n * ], (a, b) => a.v > b.v);\n * // Yields: {i:2, v:-2}\n * ```\n * @param it Iterable\n * @param gt Should return _true_ if `a` is greater than `b`.\n * @returns\n */\n//eslint-disable-next-line func-style\nexport async function min<V>(it: AsyncIterable<V>, gt = (a: V, b: V) => a > b) {\n  // https://surma.github.io/underdash/\n  //eslint-disable-next-line functional/no-let\n  let min;\n\n  for await (const v of it) {\n    if (!min) {\n      min = v;\n      continue;\n    }\n    min = gt(min, v) ? v : min;\n  }\n  return min;\n}\n\n/**\n * Returns count from `start` for a given length\n * ```js\n * range(-5, 10);\n * // Yields: [-5, -4, -3, -2, -1, 0, 1, 2, 3, 4]\n * ```\n * @param start\n * @param len\n */\n//eslint-disable-next-line func-style,@typescript-eslint/require-await\nexport async function* range(start: number, length: number) {\n  // https://surma.github.io/underdash/\n  //eslint-disable-next-line functional/no-let\n  for (let index = 0; index < length; index++) {\n    yield start++;\n  }\n  //for (let i=len;len > 0; len--) yield start++;\n}\n\n/**\n * Reduce for iterables\n * ```js\n * reduce([1, 2, 3], (acc, cur) => acc + cur, 0);\n * // Yields: 6\n * ```\n * @param it Iterable\n * @param f Function\n * @param start Start value\n * @returns\n */\n//eslint-disable-next-line func-style\nexport async function reduce<V>(\n  it: AsyncIterable<V>,\n  f: (accumulator: V, current: V) => V,\n  start: V\n) {\n  // https://surma.github.io/underdash/\n\n  for await (const v of it) start = f(start, v);\n  return start;\n}\n\n/**\n * Returns a section from an iterable\n * @param it Iterable\n * @param start Start index\n * @param end End index (or until completion)\n */\n//eslint-disable-next-line func-style\nexport async function* slice<V>(\n  it: AsyncIterable<V>,\n  start = 0,\n  end = Number.POSITIVE_INFINITY\n) {\n  // https://surma.github.io/underdash/\n  const iit = it[ Symbol.asyncIterator ]();\n\n  for (; start > 0; start--, end--) await iit.next();\n\n  for await (const v of it) {\n    if (end-- > 0) {\n      yield v;\n    } else {\n      break;\n    }\n  }\n}\n\n/**\n * Returns true the first time `f` returns true. Useful for spotting any occurrence of\n * data, and exiting quickly\n * ```js\n * some([1, 2, 3, 4], e => e % 3 === 0);\n * // Yields: true\n * ```\n * @param it Iterable\n * @param f Filter function\n * @returns\n */\n//eslint-disable-next-line func-style\nexport async function some<V>(it: AsyncIterable<V>, f: (v: V) => boolean) {\n  // https://surma.github.io/underdash/\n\n  for await (const v of it) {\n    if (f(v)) return true;\n  }\n  return false;\n}\n\n/**\n * Returns items for which the filter function returns _true_\n * ```js\n * takeWhile([ 1, 2, 3, 4 ], e => e < 3);\n * // Yields: [ 1, 2 ]\n * ```\n * @param it Iterable\n * @param f Filter function\n * @returns\n */\n//eslint-disable-next-line func-style\nexport async function* takeWhile<V>(\n  it: AsyncIterable<V>,\n  f: (v: V) => boolean\n) {\n  // https://surma.github.io/underdash/\n\n  for await (const v of it) {\n    if (!f(v)) return;\n    yield v;\n  }\n}\n\n/**\n * Returns an array of values from an iterator.\n *\n * ```js\n * const data = await toArray(adsrIterable(opts, 10));\n * ```\n *\n * Note: If the iterator is infinite, be sure to provide a `count` or the function\n * will never return.\n *\n * @param it Asynchronous iterable\n * @param count Number of items to return, by default all.\n * @returns\n */\n//eslint-disable-next-line func-style\nexport async function toArray<V>(\n  it: AsyncIterable<V>,\n  count = Number.POSITIVE_INFINITY\n): Promise<Array<V>> {\n  // https://2ality.com/2016/10/asynchronous-iteration.html\n  const result = [];\n  const iterator = it[ Symbol.asyncIterator ]();\n\n  while (result.length < count) {\n    const r = await iterator.next();\n    if (r.done) break;\n    //eslint-disable-next-line functional/immutable-data\n    result.push(r.value);\n  }\n  return result;\n}\n\n/**\n * Returns unique items from iterables, given a particular key function\n * ```js\n * unique([{i:0,v:2},{i:1,v:3},{i:2,v:2}], e => e.v);\n * Yields:  [{i:0,v:2},{i:1,v:3}]\n * @param it\n * @param f\n */\n//eslint-disable-next-line func-style\nexport async function* unique<V>(\n  it: AsyncIterable<V>,\n  f: (id: V) => V = (id) => id\n) {\n  // https://surma.github.io/underdash/\n  const buffer: Array<V> = [];\n\n  for await (const v of it) {\n    const fv = f(v);\n    if (buffer.includes(fv)) continue;\n    //eslint-disable-next-line functional/immutable-data\n    buffer.push(fv);\n    yield v;\n  }\n}\n\n/**\n * Combine same-positioned items from several iterables\n * ```js\n * zip( [1, 2, 3], [4, 5, 6], [7, 8, 9] );\n * Yields: [ [1, 4, 7], [2, 5, 8], [3, 6, 9] ]\n * ```\n * @param its\n * @returns\n */\n//eslint-disable-next-line func-style\nexport async function* zip<V>(...its: ReadonlyArray<AsyncIterable<V>>) {\n  // https://surma.github.io/underdash/\n  const iits = its.map((it) => it[ Symbol.asyncIterator ]());\n\n  while (true) {\n    const vs = await Promise.all(iits.map((it) => it.next()));\n    if (vs.some((v) => v.done)) return;\n    yield vs.map((v) => v.value as V);\n  }\n}\n","export const toStringDefault = <V>(itemToMakeStringFor: V): string =>\n  typeof itemToMakeStringFor === `string`\n    ? itemToMakeStringFor\n    : JSON.stringify(itemToMakeStringFor);\n\n\n/**\n * Function that returns true if `a` and `b` are considered equal\n */\nexport type IsEqual<V> = (a: V, b: V) => boolean;\n\n/**\n * Default comparer function is equiv to checking `a === b`\n */\nexport const isEqualDefault = <V>(a: V, b: V): boolean => a === b;\n\n/**\n * Comparer returns true if string representation of `a` and `b` are equal.\n * Uses `toStringDefault` to generate a string representation (`JSON.stringify`)\n * @returns True if the contents of `a` and `b` are equal\n */\nexport const isEqualValueDefault = <V>(a: V, b: V): boolean => {\n  // ✔ UNIT TESTED\n  if (a === b) return true; // Object references are the same, or string values are the same\n  return toStringDefault(a) === toStringDefault(b); // String representations are the same\n};\n","import { numberTest } from '../Guards.js';\n\n/**\n * Interval types allows for more expressive coding, rather than embedding millisecond values.\n *\n * eg: { mins: 5} rather than 5*60*1000 or worse, 300000\n *\n * Fields are cumulative. { secs: 2, millis: 1 } will equal 2001 milliseconds.\n *\n * Use {@link intervalToMs} to resolve an {@link Interval} to milliseconds. Use {@link Elapsed.toString} to get a human-readable version.\n */\nexport type Interval =\n  | number\n  | {\n    readonly millis?: number;\n    readonly secs?: number;\n    readonly hours?: number;\n    readonly mins?: number;\n  };\n\nexport function intervalToMs(interval: Interval | undefined): number | undefined;\nexport function intervalToMs(\n  interval: Interval | undefined,\n  defaultNumber: number\n): number;\n\n\n/**\n * Return the millisecond value of an Interval.\n * ```js\n * intervalToMs(100); // 100\n * intervalToMs({ millis: 100 }); // 100\n * ```\n *\n * Use `defaultNumber` to return a default in the case of\n * undefined or invalid input.\n *\n * ```js\n * intervalToMs(undefined); // undefined\n * intervalToMs(undefined, 100); // 100\n * ```\n *\n * If no default is provided, an exception is thrown.\n * @param interval Interval\n * @param defaultNumber Default value if `i` is undefined\n * @returns Milliseconds, or undefined\n */\nexport function intervalToMs(\n  interval: Interval | undefined,\n  defaultNumber?: number\n): number | undefined {\n  if (isInterval(interval)) {\n    // Number given, must be millis?\n    if (typeof interval === `number`) return interval;\n\n    //eslint-disable-next-line functional/no-let\n    let ms = interval.millis ?? 0;\n    ms += (interval.hours ?? 0) * 60 * 60 * 1000;\n    ms += (interval.mins ?? 0) * 60 * 1000;\n    ms += (interval.secs ?? 0) * 1000;\n    return ms;\n  } else {\n    if (typeof defaultNumber !== `undefined`) return defaultNumber;\n    throw new Error(`Not a valid interval: ${ interval }`);\n  }\n}\n\nexport function isInterval(interval: number | Interval | undefined): interval is Interval {\n  if (interval === undefined) return false;\n  if (interval === null) return false;\n  if (typeof interval === `number`) {\n    if (Number.isNaN(interval)) return false;\n    if (!Number.isFinite(interval)) return false;\n    return true;\n  } else if (typeof interval !== `object`) return false;\n\n  const hasMillis = `millis` in interval;\n  const hasSecs = `secs` in interval;\n  const hasMins = `mins` in interval;\n  const hasHours = `hours` in interval;\n  if (hasMillis && !numberTest(interval.millis)[ 0 ]) return false;\n  if (hasSecs && !numberTest(interval.secs)[ 0 ]) return false;\n  if (hasMins && !numberTest(interval.mins)[ 0 ]) return false;\n  if (hasHours && !numberTest(interval.hours)[ 0 ]) return false;\n  if (hasMillis || hasSecs || hasHours || hasMins) return true;\n  return false;\n}\n","import { throwNumberTest } from '../Guards.js';\nimport { type Interval, intervalToMs } from './IntervalType.js';\n\nexport type SleepOpts<V> = Interval & {\n  readonly signal?: AbortSignal;\n  readonly value?: V;\n};\n\nif (typeof window === `undefined` || !(`requestAnimationFrame` in window)) {\n  // eslint-disable-next-line unicorn/no-lonely-if\n  if (typeof window === `undefined`) {\n    // @ts-expect-error\n    globalThis.requestAnimationFrame = setImmediate;\n  }\n  //window.requestAnimationFrame = window.setImmediate;\n}\n\n/**\n * Returns after timeout period.\n *\n * @example In an async function\n * ```js\n * console.log(`Hello`);\n * await sleep(1000);\n * console.log(`There`); // Prints one second after\n * ```\n *\n * @example As a promise\n * ```js\n * console.log(`Hello`);\n * sleep({ millis: 1000 })\n *  .then(() => console.log(`There`)); // Prints one second after\n * ```\n *\n * If a timeout of 0 is given, `requestAnimationFrame` is used instead of `setTimeout`.\n *\n * {@link delay} and {@link sleep} are similar. `delay()` takes a parameter of what code to execute after the timeout, while `sleep()` just resolves after the timeout.\n *\n * A value can be provided, which is returned on awaking:\n * ```js\n * const v = await sleep({ seconds: 1, value: `hello`);\n * // v = `hello`\n * ```\n *\n * Provide an AbortSignal to cancel the sleep and throwing an exception\n * so code after the sleep doesn't happen.\n *\n * ```js\n * const ac = new AbortController();\n * setTimeout(() => { ac.abort(); }, 1000); // Abort after 1s\n *\n * // Sleep for 1min\n * await sleep({ minutes: 1, signal: ac.signal });\n * console.log(`Awake`); // This line doesn't get called because an exception is thrown when aborting\n * ```\n * @param optsOrMillis Milliseconds to sleep, or options\n * @param signal\n * @return\n */\nexport const sleep = <V>(\n  //eslint-disable-next-line functional/prefer-immutable-types\n  optsOrMillis: SleepOpts<V>\n): Promise<V | undefined> => {\n  const timeoutMs = intervalToMs(optsOrMillis);\n  const signal = optsOrMillis.signal;\n  const value = optsOrMillis.value;\n  throwNumberTest(timeoutMs, `positive`, `timeoutMs`);\n  if (timeoutMs === 0) {\n    return new Promise<V | undefined>((resolve) =>\n      requestAnimationFrame((_) => {\n        resolve(value);\n      })\n    );\n  } else {\n    return new Promise<V | undefined>((resolve, reject) => {\n      if (signal) {\n        signal.addEventListener(`abort`, () => {\n          reject(signal.reason);\n        });\n      }\n      setTimeout(() => {\n        if (signal?.aborted) {\n          reject(signal.reason);\n          return;\n        }\n        resolve(value);\n      }, timeoutMs);\n    });\n  }\n};\n"],"mappings":"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","names":["toStringDefault","range","max","min","toStringDefault"]}