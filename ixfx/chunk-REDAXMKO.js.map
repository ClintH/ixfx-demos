{"version":3,"sources":["../src/data/Clamp.ts"],"sourcesContent":["/**\n * Clamps a value between min and max (both inclusive)\n * Defaults to a 0-1 range, useful for percentages.\n *\n * @example Usage\n * ```js\n * // 0.5 - just fine, within default of 0 to 1\n * clamp(0.5);\n * // 1 - above default max of 1\n * clamp(1.5);\n * // 0 - below range\n * clamp(-50, 0, 100);\n * // 50 - within range\n * clamp(50, 0, 50);\n * ```\n *\n * For clamping integer ranges, consider {@link clampIndex }\n * For clamping `{ x, y }` points, consider {@link Geometry.Points.clamp | Geometry.Points.clamp}.\n * For clamping bipolar values: {@link Bipolar.clamp}\n * @param value Value to clamp\n * @param min value (inclusive)\n * @param max value (inclusive)\n * @returns Clamped value\n */\nexport const clamp = (value: number, min = 0, max = 1) => {\n  // ✔ UNIT TESTED\n  if (Number.isNaN(value)) throw new Error(`'value' parameter is NaN`);\n  if (Number.isNaN(min)) throw new Error(`'min' parameter is NaN`);\n  if (Number.isNaN(max)) throw new Error(`'max' parameter is NaN`);\n\n  if (value < min) return min;\n  if (value > max) return max;\n  return value;\n};\n\n/**\n * Clamps integer `v` between 0 (inclusive) and array length or length (exclusive).\n * Returns value then will always be at least zero, and a valid array index.\n *\n * @example Usage\n * ```js\n * // Array of length 4\n * const myArray = [`a`, `b`, `c`, `d`];\n * clampIndex(0, myArray);    // 0\n * clampIndex(4, myArray);    // 3\n * clampIndex(-1, myArray);   // 0\n *\n * clampIndex(5, 3); // 2\n * ```\n *\n * Throws an error if `v` is not an integer.\n *\n * For some data it makes sense that data might 'wrap around' if it exceeds the\n * range. For example rotation angle. Consider using {@link wrap} for this.\n *\n * @param v Value to clamp (must be an interger)\n * @param arrayOrLength Array, or length of bounds (must be an integer)\n * @returns Clamped value, minimum will be 0, maximum will be one less than `length`.\n */\n//eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport const clampIndex = (\n  v: number,\n  arrayOrLength: number | ReadonlyArray<any>\n): number => {\n  // ✔ UNIT TESTED\n  if (!Number.isInteger(v)) {\n    throw new TypeError(`v parameter must be an integer (${ v })`);\n  }\n  const length = Array.isArray(arrayOrLength)\n    ? arrayOrLength.length\n    : (arrayOrLength as number);\n\n  if (!Number.isInteger(length)) {\n    throw new TypeError(\n      `length parameter must be an integer (${ length }, ${ typeof length })`\n    );\n  }\n  v = Math.round(v);\n  if (v < 0) return 0;\n  if (v >= length) return length - 1;\n  return v;\n};\n"],"mappings":";AAwBO,IAAM,QAAQ,CAAC,OAAe,MAAM,GAAG,MAAM,MAAM;AAExD,MAAI,OAAO,MAAM,KAAK,EAAG,OAAM,IAAI,MAAM,0BAA0B;AACnE,MAAI,OAAO,MAAM,GAAG,EAAG,OAAM,IAAI,MAAM,wBAAwB;AAC/D,MAAI,OAAO,MAAM,GAAG,EAAG,OAAM,IAAI,MAAM,wBAAwB;AAE/D,MAAI,QAAQ,IAAK,QAAO;AACxB,MAAI,QAAQ,IAAK,QAAO;AACxB,SAAO;AACT;AA2BO,IAAM,aAAa,CACxB,GACA,kBACW;AAEX,MAAI,CAAC,OAAO,UAAU,CAAC,GAAG;AACxB,UAAM,IAAI,UAAU,mCAAoC,CAAE,GAAG;AAAA,EAC/D;AACA,QAAM,SAAS,MAAM,QAAQ,aAAa,IACtC,cAAc,SACb;AAEL,MAAI,CAAC,OAAO,UAAU,MAAM,GAAG;AAC7B,UAAM,IAAI;AAAA,MACR,wCAAyC,MAAO,KAAM,OAAO,MAAO;AAAA,IACtE;AAAA,EACF;AACA,MAAI,KAAK,MAAM,CAAC;AAChB,MAAI,IAAI,EAAG,QAAO;AAClB,MAAI,KAAK,OAAQ,QAAO,SAAS;AACjC,SAAO;AACT;","names":[]}