{"version":3,"sources":["../src/iterables/Iterable.ts"],"sourcesContent":["export type WithEvents = {\n  addEventListener(type: string, callbackfn: any): void;\n  removeEventListener(type: string, callbackfn: any): void;\n}\n\nexport const isAsyncIterable = (v: any): v is AsyncIterable<any> =>\n  Symbol.asyncIterator in new Object(v);\n\nexport const isIterable = (v: any): v is Iterable<any> =>\n  Symbol.iterator in new Object(v);\n\nexport const fromEvent = <V>(\n  eventSource: WithEvents,\n  eventType: string\n): AsyncIterator<any> => {\n  const pullQueue: Array<any> = [];\n  const pushQueue: Array<any> = [];\n  let done = false;\n  const pushValue = (args: any) => {\n    if (pullQueue.length > 0) {\n      //eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n      const resolver = pullQueue.shift();\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-call\n      resolver(...args);\n    } else {\n      pushQueue.push(args);\n    }\n  };\n\n  const pullValue = (): Promise<V> =>\n    new Promise<V>((resolve) => {\n      if (pushQueue.length > 0) {\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n        const arguments_ = pushQueue.shift();\n        // @ts-expect-error\n        resolve(...arguments_);\n      } else {\n        pullQueue.push(resolve);\n      }\n    });\n\n  const handler = (...arguments_: any) => {\n    pushValue(arguments_);\n  };\n\n  eventSource.addEventListener(eventType, handler);\n\n  const r: AsyncIterator<V> = {\n    next: async (): Promise<IteratorResult<V>> => {\n      if (done) return { done: true, value: undefined };\n      return {\n        done: false,\n        value: await pullValue(),\n      };\n    },\n    //eslint-disable-next-line @typescript-eslint/require-await\n    return: async (): Promise<IteratorResult<V>> => {\n      done = true;\n      eventSource.removeEventListener(eventType, handler);\n      return { done: true, value: undefined };\n    },\n    //eslint-disable-next-line @typescript-eslint/require-await\n    throw: async (error: any): Promise<IteratorResult<V>> => {\n      done = true;\n      return {\n        done: true,\n        value: Promise.reject(new Error(error)),\n      };\n    },\n  };\n  return r;\n};"],"mappings":";AAKO,IAAM,kBAAkB,CAAC,MAC9B,OAAO,iBAAiB,IAAI,OAAO,CAAC;AAE/B,IAAM,aAAa,CAAC,MACzB,OAAO,YAAY,IAAI,OAAO,CAAC;AAE1B,IAAM,YAAY,CACvB,aACA,cACuB;AACvB,QAAM,YAAwB,CAAC;AAC/B,QAAM,YAAwB,CAAC;AAC/B,MAAI,OAAO;AACX,QAAM,YAAY,CAAC,SAAc;AAC/B,QAAI,UAAU,SAAS,GAAG;AAExB,YAAM,WAAW,UAAU,MAAM;AAEjC,eAAS,GAAG,IAAI;AAAA,IAClB,OAAO;AACL,gBAAU,KAAK,IAAI;AAAA,IACrB;AAAA,EACF;AAEA,QAAM,YAAY,MAChB,IAAI,QAAW,CAAC,YAAY;AAC1B,QAAI,UAAU,SAAS,GAAG;AAExB,YAAM,aAAa,UAAU,MAAM;AAEnC,cAAQ,GAAG,UAAU;AAAA,IACvB,OAAO;AACL,gBAAU,KAAK,OAAO;AAAA,IACxB;AAAA,EACF,CAAC;AAEH,QAAM,UAAU,IAAI,eAAoB;AACtC,cAAU,UAAU;AAAA,EACtB;AAEA,cAAY,iBAAiB,WAAW,OAAO;AAE/C,QAAM,IAAsB;AAAA,IAC1B,MAAM,YAAwC;AAC5C,UAAI,KAAM,QAAO,EAAE,MAAM,MAAM,OAAO,OAAU;AAChD,aAAO;AAAA,QACL,MAAM;AAAA,QACN,OAAO,MAAM,UAAU;AAAA,MACzB;AAAA,IACF;AAAA;AAAA,IAEA,QAAQ,YAAwC;AAC9C,aAAO;AACP,kBAAY,oBAAoB,WAAW,OAAO;AAClD,aAAO,EAAE,MAAM,MAAM,OAAO,OAAU;AAAA,IACxC;AAAA;AAAA,IAEA,OAAO,OAAO,UAA2C;AACvD,aAAO;AACP,aAAO;AAAA,QACL,MAAM;AAAA,QACN,OAAO,QAAQ,OAAO,IAAI,MAAM,KAAK,CAAC;AAAA,MACxC;AAAA,IACF;AAAA,EACF;AACA,SAAO;AACT;","names":[]}