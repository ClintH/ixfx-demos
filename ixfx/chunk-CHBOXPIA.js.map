{"version":3,"sources":["../src/data/arrays/Equality.ts"],"sourcesContent":["import { isEqualDefault, isEqualValueDefault, type IsEqual } from \"../../util/IsEqual.js\";\nimport { guardArray } from \"./GuardArray.js\";\n\n\n/**\n * Returns _true_ if the two arrays have the same items at same indexes. Use {@link isEqualDefault} to\n * compare values regardless of position.\n * \n * Returns _false_ if arrays are of different length.\n * By default uses === semantics for equality checking.\n * \n * ```js\n * isEqual([ 1, 2, 3], [ 1, 2, 3 ]); // true\n * isEqual([ 1, 2, 3], [ 3, 2, 1 ]); // false\n * ```\n * \n * Compare by value\n * ```js\n * isEqual(a, b, isEqualValueDefault);\n * ```\n * \n * Custom compare, eg based on `name` field:\n * ```js\n * isEqual(a, b, (compareA, compareB) => compareA.name === compareB.name);\n * ```\n * @param arrayA \n * @param arrayB \n * @param eq \n */\nexport const isEqual = <V>(arrayA: Array<V>, arrayB: Array<V>, eq = isEqualDefault<V>): boolean => {\n  guardArray(arrayA, `arrayA`);\n  guardArray(arrayB, `arrayB`);\n\n  if (arrayA.length !== arrayB.length) return false;\n  // eslint-disable-next-line unicorn/no-for-loop\n  for (let indexA = 0; indexA < arrayA.length; indexA++) {\n    if (!(eq(arrayA[ indexA ], arrayB[ indexA ]))) return false;\n  }\n  return true;\n}\n\n/**\n * Returns _true_ if all values in the array are the same\n * \n * Uses value-based equality checking by default.\n * \n * @example Uses default equality function:\n * ```js\n * import { isContentsTheSame } from 'https://unpkg.com/ixfx/dist/arrays.js';\n *\n * const a1 = [ 10, 10, 10 ];\n * isContentsTheSame(a1); // True\n *\n * const a2 = [ { name:`Jane` }, { name:`John` } ];\n * isContentsTheSame(a2); // True, even though object references are different\n * ```\n *\n * If we want to compare by value for objects that aren't readily\n * converted to JSON, you need to provide a function:\n *\n * ```js\n * isContentsTheSame(someArray, (a, b) => {\n *  return (a.eventType === b.eventType);\n * });\n * ```\n *\n * Returns _true_ if `array` is empty.\n * @param array Array\n * @param equality Equality checker. Uses string-conversion checking by default\n * @returns\n */\nexport const isContentsTheSame = <V>(\n  array: ReadonlyArray<V> | Array<V>,\n  equality?: IsEqual<V>\n): boolean => {\n  // Unit tested\n\n  if (!Array.isArray(array)) throw new Error(`Param 'array' is not an array.`);\n  if (array.length === 0) return true;\n  const eq = equality ?? isEqualValueDefault;\n  const a = array[ 0 ];\n  const r = array.some((v) => !eq(a, v));\n  if (r) return false;\n  return true;\n};"],"mappings":";;;;;;;;;AA6BO,IAAM,UAAU,CAAI,QAAkB,QAAkB,KAAK,mBAA+B;AACjG,aAAW,QAAQ,QAAQ;AAC3B,aAAW,QAAQ,QAAQ;AAE3B,MAAI,OAAO,WAAW,OAAO,OAAQ,QAAO;AAE5C,WAAS,SAAS,GAAG,SAAS,OAAO,QAAQ,UAAU;AACrD,QAAI,CAAE,GAAG,OAAQ,MAAO,GAAG,OAAQ,MAAO,CAAC,EAAI,QAAO;AAAA,EACxD;AACA,SAAO;AACT;AAgCO,IAAM,oBAAoB,CAC/B,OACA,aACY;AAGZ,MAAI,CAAC,MAAM,QAAQ,KAAK,EAAG,OAAM,IAAI,MAAM,gCAAgC;AAC3E,MAAI,MAAM,WAAW,EAAG,QAAO;AAC/B,QAAM,KAAK,YAAY;AACvB,QAAM,IAAI,MAAO,CAAE;AACnB,QAAM,IAAI,MAAM,KAAK,CAAC,MAAM,CAAC,GAAG,GAAG,CAAC,CAAC;AACrC,MAAI,EAAG,QAAO;AACd,SAAO;AACT;","names":[]}