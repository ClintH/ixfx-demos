{"version":3,"sources":["../src/Text.ts","../src/random/Types.ts","../src/random/String.ts"],"sourcesContent":["import { integerTest, throwFromResult } from './Guards.js';\nexport { string as random } from './random/String.js';\n\n/**\n * Given a long string, abbreviates it with ...\n * ```js\n * abbreviate(`This is something`, 7); // `This is...`\n * ```\n * \n * If `source` is under `maxLength` the original is returned.\n * @param source \n * @param maxLength Maximum length. Defaults to 20\n * @returns \n */\nexport const abbreviate = (source: string, maxLength = 15) => {\n  // ✔️ Unit tested\n  throwFromResult(integerTest(maxLength, `aboveZero`, `maxLength`));\n  if (typeof source !== `string`) throw new Error(`Parameter 'source' is not a string`);\n\n  if (source.length > maxLength && source.length > 3) {\n    if (maxLength > 15) {\n      const chunk = Math.round((maxLength - 2) / 2);\n      return source.slice(0, chunk) + `...` + source.slice(-chunk);\n    }\n    return source.slice(0, maxLength) + `...`;\n  }\n  return source;\n}\n\n/**\n * Uses JSON.toString() on `source`, but abbreviates result.\n * @param source Object to stringify\n * @param maxLength Default 20\n * @returns \n */\nexport const toStringAbbreviate = (source: any, maxLength = 20) => {\n  if (source === undefined) return `(undefined)`;\n  if (source === null) return `(null)`;\n  return abbreviate(JSON.stringify(source), maxLength);\n}\n\n/**\n * Returns source text that is between `start` and `end` match strings. Returns _undefined_ if start/end is not found.\n *\n * ```js\n * // Yields ` orange `;\n * between(`apple orange melon`, `apple`, `melon`);\n * ```\n * @param source Source text\n * @param start Start match\n * @param end If undefined, the `start` string will be looked for\n * @param lastEndMatch If true, looks for the last match of `end` (default). If false, looks for the first match.\n * @returns\n */\nexport const between = (\n  source: string,\n  start: string,\n  end?: string,\n  lastEndMatch = true\n): string | undefined => {\n  // ✔ Unit tested\n\n  const startPos = source.indexOf(start);\n  if (startPos < 0) return;\n\n  if (end === undefined) end = start;\n\n  const endPos = lastEndMatch\n    ? source.lastIndexOf(end)\n    : source.indexOf(end, startPos + 1);\n  if (endPos < 0) return;\n\n  return source.slice(startPos + 1, endPos);\n};\n\n/**\n * Like {@link between}, but also returns the source string without the start/end match and what's between.\n * ```js\n * const [src,between] = betweenChomp('hello [there] friend', '[', ']');\n * // src: 'hello  friend'\n * // between: 'there'\n * ```\n * @param source\n * @param start\n * @param end\n * @param lastEndMatch\n * @returns\n */\nexport const betweenChomp = (\n  source: string,\n  start: string,\n  end?: string,\n  lastEndMatch = true\n): [ source: string, between: string | undefined ] => {\n  // ✔ Unit tested\n  if (typeof source !== `string`) throw new Error(`Parameter 'source' is not a string`);\n  if (typeof start !== `string`) throw new Error(`Parameter 'start' is not a string`);\n  if (end !== undefined && typeof end !== `string`) throw new Error(`Parameter 'end' is not a string`);\n  const startPos = source.indexOf(start);\n  if (startPos < 0) return [ source, undefined ];\n\n  if (end === undefined) end = start;\n\n  const endPos = lastEndMatch\n    ? source.lastIndexOf(end)\n    : source.indexOf(end, startPos + 1);\n  if (endPos < 0) return [ source, undefined ];\n\n  const between = source.slice(startPos + 1, endPos);\n  const sourceResult = source.slice(0, startPos) + source.slice(endPos + 1);\n  return [ sourceResult, between ];\n};\n/**\n * Returns first position of the given character code, or -1 if not found.\n * @param source Source string\n * @param code Code to seek\n * @param start Start index, 0 by default\n * @param end End index (inclusive), source.length-1 by default\n * @returns Found position, or -1 if not found\n */\nexport const indexOfCharCode = (\n  source: string,\n  code: number,\n  start = 0,\n  end = source.length - 1\n): number => {\n  //eslint-disable-next-line functional/no-let\n  for (let index = start; index <= end; index++) {\n    if (source.codePointAt(index) === code) return index;\n  }\n  return -1;\n};\n\n/**\n * Returns `source` with a given number of characters removed from start position.\n *\n * ```js\n * // Remove three characters starting at position 1\n * omitChars(`hello there`, 1, 3); // ie. removes 'ell'\n * // Yields: `ho there`\n * ```\n * @param source\n * @param removeStart Start point to remove\n * @param removeLength Number of characters to remove\n * @returns\n */\nexport const omitChars = (\n  source: string,\n  removeStart: number,\n  removeLength: number\n) =>\n  source.slice(0, removeStart) +\n  source.slice(removeStart + removeLength);\n\n/**\n * Splits a string into `length`-size chunks.\n *\n * If `length` is greater than the length of `source`, a single element array is returned with source.\n * The final array element may be smaller if we ran out of characters.\n *\n * ```js\n * splitByLength(`hello there`, 2);\n * // Yields:\n * // [`he`, `ll`, `o `, `th`, `er`, `e`]\n * ```\n * @param source Source string\n * @param length Length of each chunk\n * @returns\n */\nexport const splitByLength = (\n  source: string | null,\n  length: number\n): ReadonlyArray<string> => {\n  throwFromResult(integerTest(length, `aboveZero`, `length`));\n  if (source === null) throw new Error(`source parameter null`);\n  if (typeof source !== `string`) {\n    throw new TypeError(`source parameter not a string`);\n  }\n\n  // ✔ Unit tested\n  const chunks = Math.ceil(source.length / length);\n  const returnValue: Array<string> = [];\n  //eslint-disable-next-line functional/no-let\n  let start = 0;\n\n  //eslint-disable-next-line functional/no-let\n  for (let c = 0; c < chunks; c++) {\n    //eslint-disable-next-line functional/immutable-data\n    returnValue.push(source.slice(start, start + length));\n    start += length;\n  }\n  return returnValue;\n};\n\nexport type UntilMatchOptions = MatchOptions & {\n  ifNoMatch: `throw` | `original` | `fallback`,\n  fallback?: string\n}\n\n/**\n * Returns the `source` string up until (and excluding) `match`. \n * \n * By default, if match is not found, all of `source` is returned.\n *\n * ```js\n * // Yields `apple `\n * untilMarch(`apple orange melon`, `orange`);\n * ```\n * \n * If match is not found, fallback can be returned instead:\n * ```js\n * // Yields 'lemon'\n * untilMatch(`apple orange mellon`, `kiwi`, { fallback: `lemon` });\n * ```\n * \n * Or an exception thrown\n * ```js\n * // Throws\n * untilMatch(`apple orange mellon`, `kiwi`, { ifNoMatch: `throw` });\n * ```\n * @param source\n * @param match\n * @param startPos If provided, gives the starting offset. Default 0\n */\nexport const untilMatch = (\n  source: string,\n  match: string,\n  options: Partial<UntilMatchOptions> = {}\n): string => {\n  //  ✔️ Unit tested\n  let fallback = options.fallback;\n  const ifNoMatch = options.ifNoMatch ?? (fallback ? `fallback` : `original`);\n  if (ifNoMatch === `original`) fallback = source;\n  if (ifNoMatch === `fallback` && fallback === undefined) throw new Error(`Fallback must be provided`);\n  const startPos = options.startPos ?? undefined;\n  const fromEnd = options.fromEnd ?? false;\n  const m = fromEnd\n    ? source.lastIndexOf(match, startPos)\n    : source.indexOf(match, startPos);\n\n  if (m < 0) {\n    if (ifNoMatch === `throw`) throw new Error(`Match string not found in source`);\n    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n    return fallback!;\n  }\n  return source.slice(startPos ?? 0, m);\n};\n\n\n\nexport type MatchOptions = {\n  readonly startPos?: number;\n  readonly fromEnd?: boolean;\n}\n/**\n * Returns all the text in `source` that follows `match`. If not found, `source` is returned.\n * ```js\n * afterMatch(`Hello. There`, `.`); // ' There'\n * afterMatch(`Hello, there', `,`); // 'Hello, there'\n * ```\n * \n * If `source` is _undefined_, an error is thrown.\n * @param source\n * @param match\n * @param startPos\n * @returns\n */\nexport const afterMatch = (\n  source: string,\n  match: string,\n  options: MatchOptions = {}\n): string => {\n  if (source === undefined) throw new Error(`source is undefined`);\n\n  //  ✔️ Unit tested\n  const startPos = options.startPos ?? undefined;\n  const fromEnd = options.fromEnd ?? false;\n\n  const m = fromEnd\n    ? source.lastIndexOf(match, startPos)\n    : source.indexOf(match, startPos);\n\n  if (m < 0) return source;\n  return source.slice(Math.max(0, m + match.length));\n};\n\n/**\n * 'Unwraps' a string, removing one or more 'wrapper' strings that it starts and ends with.\n * Only removes when a matching end is found.\n * ```js\n * unwrap(\"'hello'\", \"'\");        // hello\n * // No mataching end 'a', so nothing happens\n * unwrap(\"apple\", \"a\");          // apple\n * unwrap(\"wow\", \"w\");            // o\n * unwrap(`\"'blah'\"`, '\"', \"'\");  // blah\n * ```\n * @param source\n * @param wrappers\n * @returns\n */\nexport const unwrap = (\n  source: string,\n  ...wrappers: ReadonlyArray<string>\n): string => {\n  //eslint-disable-next-line functional/no-let\n  let matched = false;\n  do {\n    matched = false;\n    for (const w of wrappers) {\n      if (source.startsWith(w) && source.endsWith(w)) {\n        source = source.slice(w.length, source.length - w.length * 2 + 1);\n        matched = true;\n      }\n    }\n  } while (matched);\n\n  return source;\n};\n\n/**\n * A range\n */\nexport type Range = {\n  /**\n   * Text of range\n   */\n  readonly text: string;\n  /**\n   * Start position, with respect to source text\n   */\n  readonly start: number;\n  /**\n   * End position, with respect to source text\n   */\n  readonly end: number;\n  /**\n   * Index of range. First range is 0\n   */\n  readonly index: number;\n}\n\nexport type LineSpan = {\n  readonly start: number;\n  readonly end: number;\n  readonly length: number;\n}\n\n/**\n * Calculates the span, defined in {@link Range} indexes, that includes `start` through to `end` character positions.\n *\n * After using {@link splitRanges} to split text, `lineSpan` is used to associate some text coordinates with ranges.\n *\n * @param ranges Ranges\n * @param start Start character position, in source text reference\n * @param end End character position, in source text reference\n * @returns Span\n */\nexport const lineSpan = (\n  ranges: ReadonlyArray<Range>,\n  start: number,\n  end: number\n): LineSpan => {\n  //eslint-disable-next-line functional/no-let\n  let s = -1;\n  //eslint-disable-next-line functional/no-let\n  let endPos = -1;\n  //eslint-disable-next-line functional/no-let\n  for (const [ index, r ] of ranges.entries()) {\n    s = index;\n    if (r.text.length === 0) continue;\n    if (start < r.end) {\n      break;\n    }\n  }\n\n  //eslint-disable-next-line functional/no-let\n  for (let index = s; index < ranges.length; index++) {\n    const r = ranges[ index ];\n    endPos = index;\n    if (end === r.end) {\n      endPos = index + 1;\n      break;\n    }\n    if (end < r.end) {\n      break;\n    }\n  }\n  return { length: endPos - s, start: s, end: endPos };\n};\n\n/**\n * Splits a source string into ranges:\n * ```js\n * const ranges = splitRanges(\"hello;there;fella\", \";\");\n * ```\n *\n * Each range consists of:\n * ```js\n * {\n *  text: string  - the text of range\n *  start: number - start pos of range, wrt to source\n *  end: number   - end pos of range, wrt to source\n *  index: number - index of range (starting at 0)\n * }\n * ```\n * @param source\n * @param split\n * @returns\n */\nexport const splitRanges = (\n  source: string,\n  split: string\n): ReadonlyArray<Range> => {\n  //eslint-disable-next-line functional/no-let\n  let start = 0;\n  //eslint-disable-next-line functional/no-let\n  let text = ``;\n  const ranges: Array<Range> = [];\n  //eslint-disable-next-line functional/no-let\n  let index = 0;\n  //eslint-disable-next-line functional/no-let,unicorn/prevent-abbreviations\n  for (let i = 0; i < source.length; i++) {\n    if (source.indexOf(split, i) === i) {\n      //eslint-disable-next-line functional/no-let\n      const end = i;\n      //eslint-disable-next-line functional/immutable-data\n      ranges.push({\n        text,\n        start,\n        end,\n        index,\n      });\n      start = end + 1;\n      text = ``;\n      index++;\n    } else {\n      text += source.charAt(i);\n    }\n  }\n  if (start < source.length) {\n    //eslint-disable-next-line functional/immutable-data\n    ranges.push({ text, start, index, end: source.length });\n  }\n  return ranges;\n};\n\n/**\n * Counts the number of times one of `chars` appears at the front of\n * a string, contiguously.\n *\n * ```js\n * countCharsFromStart(`  hi`, ` `); // 2\n * countCharsFromStart(`hi  `, ` `); // 0\n * countCharsFromStart(`  hi  `, ` `); // 2\n * ```\n * @param source\n * @param chars\n * @returns\n */\nexport const countCharsFromStart = (\n  source: string,\n  ...chars: ReadonlyArray<string>\n): number => {\n  //eslint-disable-next-line functional/no-let\n  let counted = 0;\n  //eslint-disable-next-line functional/no-let\n  for (let index = 0; index < source.length; index++) {\n    if (chars.includes(source.charAt(index))) {\n      counted++;\n    } else {\n      break;\n    }\n  }\n  return counted;\n};\n\n/**\n * Returns _true_ if `source` starts and ends with `start` and `end`. Case-sensitive.\n * If _end_ is omitted, the the `start` value will be used.\n *\n * ```js\n * startsEnds(`This is a string`, `This`, `string`); // True\n * startsEnds(`This is a string`, `is`, `a`); // False\n * starsEnds(`test`, `t`); // True, starts and ends with 't'\n * ```\n * @param source String to search within\n * @param start Start\n * @param end End (if omitted, start will be looked for at end as well)\n * @returns True if source starts and ends with provided values.\n */\nexport const startsEnds = (\n  source: string,\n  start: string,\n  end: string = start\n): boolean => source.startsWith(start) && source.endsWith(end);\n\n//eslint-disable-next-line no-useless-escape\nexport const htmlEntities = (source: string): string =>\n  source.replaceAll(/[&<>\\u00A0-\\u9999]/g, (index) => `&#${ index.codePointAt(0) };`);\n","/**\n * A random source.\n *\n * Predefined sources: {@link defaultRandom}, {@link gaussianSource}, {@link weightedSource}\n */\nexport type RandomSource = () => number;\n\n\nexport type StringOptions = Readonly<{\n  length: number;\n  source?: RandomSource;\n}>\n\n/**\n * Default random number generator: `Math.random`.\n */\nexport const defaultRandom = Math.random;\n\nexport type RandomOptions = Readonly<{\n  max: number;\n  min?: number;\n  source?: RandomSource;\n}>","import { defaultRandom, type StringOptions } from \"./Types.js\";\n\n/**\n * Returns a string of random letters and numbers of a given `length`.\n *\n * ```js\n * string();  // Random string of length 5\n * string(4); // eg. `4afd`\n * ```\n * @param length Length of random string\n * @returns Random string\n */\nexport const string = (lengthOrOptions: number | StringOptions = 5) => {\n  const options =\n    typeof lengthOrOptions === `number` ? { length: lengthOrOptions } : lengthOrOptions;\n  const calculate = options.source ?? defaultRandom;\n  return calculate()\n    .toString(36)\n    .slice(2, length + 2);\n};"],"mappings":"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","names":["between","length"]}