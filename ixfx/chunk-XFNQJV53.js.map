{"version":3,"sources":["../src/collections/Map/MapImmutableFns.ts","../src/collections/Map/Map.ts","../src/collections/Map/NumberMap.ts"],"sourcesContent":["import type { ArrayKeys, EitherKey, ObjectKeys } from '../Types.js';\n\n/**\n * Adds an array o [k,v] to the map, returning a new instance\n * @param map Initial data\n * @param data Data to add\n * @returns New map with data added\n */\nconst addArray = <K, V>(\n  map: ReadonlyMap<K, V>,\n  data: ArrayKeys<K, V>\n): ReadonlyMap<K, V> => {\n  const x = new Map<K, V>(map.entries());\n  for (const d of data) {\n    if (d[ 0 ] === undefined) throw new Error(`key cannot be undefined`);\n    if (d[ 1 ] === undefined) throw new Error(`value cannot be undefined`);\n    x.set(d[ 0 ], d[ 1 ]);\n  }\n  return x;\n};\n\n/**\n * Adds objects to the map, returning a new instance\n * @param map Initial data\n * @param data Data to add\n * @returns A new map with data added\n */\nconst addObjects = <K, V>(\n  map: ReadonlyMap<K, V>,\n  data: ObjectKeys<K, V>\n): ReadonlyMap<K, V> => {\n  const x = new Map<K, V>(map.entries());\n  for (const d of data) {\n    if (d.key === undefined) throw new Error(`key cannot be undefined`);\n    if (d.value === undefined) throw new Error(`value cannot be undefined`);\n\n    x.set(d.key, d.value);\n  }\n  return x;\n};\n\n/**\n * Returns true if map contains key\n *\n * @example\n * ```js\n * if (has(map, `London`)) ...\n * ```\n * @param map Map to search\n * @param key Key to find\n * @returns True if map contains key\n */\nexport const has = <K, V>(map: ReadonlyMap<K, V>, key: K): boolean =>\n  map.has(key);\n\n/**\n * Adds data to a map, returning the new map.\n *\n * Can add items in the form of [key,value] or {key, value}.\n * @example These all produce the same result\n * ```js\n * map.set(`hello`, `samantha`);\n * map.add([`hello`, `samantha`]);\n * map.add({key: `hello`, value: `samantha`})\n * ```\n * @param map Initial data\n * @param data One or more data to add in the form of [key,value] or {key, value}\n * @returns New map with data added\n */\nexport const add = <K, V>(\n  map: ReadonlyMap<K, V>,\n  ...data: EitherKey<K, V>\n): ReadonlyMap<K, V> => {\n  if (map === undefined) throw new Error(`map parameter is undefined`);\n  if (data === undefined) throw new Error(`data parameter i.s undefined`);\n  if (data.length === 0) return map;\n\n  const firstRecord = data[ 0 ];\n  const isObject =\n    typeof (firstRecord as { readonly key: K; readonly value: V }).key !==\n    `undefined` &&\n    typeof (firstRecord as { readonly key: K; readonly value: V }).value !==\n    `undefined`; //(typeof (data[0] as {readonly key:K}).key !== undefined && typeof (data[0] as {readonly value:V}).value !== undefined);\n  return isObject\n    ? addObjects(map, data as ObjectKeys<K, V>)\n    : addArray(map, data as ArrayKeys<K, V>);\n};\n\n/**\n * Sets data in a copy of the initial map\n * @param map Initial map\n * @param key Key\n * @param value Value to  set\n * @returns New map with data set\n */\nexport const set = <K, V>(map: ReadonlyMap<K, V>, key: K, value: V) => {\n  const x = new Map<K, V>(map.entries());\n  x.set(key, value);\n  return x;\n};\n\n/**\n * Delete a key from the map, returning a new map\n * @param map Initial data\n * @param key\n * @returns New map with data deleted\n */\nexport const del = <K, V>(\n  map: ReadonlyMap<K, V>,\n  key: K\n): ReadonlyMap<K, V> => {\n  const x = new Map<K, V>(map.entries());\n  x.delete(key);\n  return x;\n};\n","import { type EitherKey } from '../Types.js';\nimport type { IMapBase } from './IMapBase.js';\nimport { add, del, set } from './MapImmutableFns.js';\n\n/**\n * An immutable map. Rather than changing the map, functions like `add` and `delete`\n * return a new map reference which must be captured.\n *\n * Immutable data is useful because as it gets passed around your code, it never\n * changes from underneath you. You have what you have.\n *\n * @example\n * ```js\n * let m = map(); // Create\n * let m2 = m.set(`hello`, `samantha`);\n * // m is still empty, only m2 contains a value.\n * ```\n *\n * @typeParam K - Type of map keys. Typically `string`\n * @typeParam V - Type of stored values\n */\n//eslint-disable-next-line @typescript-eslint/consistent-type-definitions\nexport interface IMapImmutable<K, V> extends IMapBase<K, V> {\n  /**\n   * Adds one or more items, returning the changed map.\n   *\n   * Can add items in the form of `[key,value]` or `{key, value}`.\n   * @example These all produce the same result\n   * ```js\n   * map.set(`hello`, `samantha`);\n   * map.add([`hello`, `samantha`]);\n   * map.add({key: `hello`, value: `samantha`})\n   * ```\n   * @param itemsToAdd\n   */\n  add(...itemsToAdd: EitherKey<K, V>): IMapImmutable<K, V>;\n  /**\n   * Deletes an item by key, returning the changed map\n   * @param key\n   */\n  delete(key: K): IMapImmutable<K, V>;\n  /**\n   * Returns an empty map\n   */\n  clear(): IMapImmutable<K, V>;\n\n\n  /**\n   * Sets `key` to be `value`, overwriting anything existing.\n   * Returns a new map with added key.\n   * @param key\n   * @param value\n   */\n  set(key: K, value: V): IMapImmutable<K, V>;\n\n}\n\n/**\n * Returns an {@link IMapImmutable}.\n * Use {@link Maps.mutable} as a mutable alternatve.\n *\n * @example Basic usage\n * ```js\n * // Creating\n * let m = map();\n * // Add\n * m = m.set(\"name\", \"sally\");\n * // Recall\n * m.get(\"name\");\n * ```\n *\n * @example Enumerating\n * ```js\n * for (const [key, value] of map.entries()) {\n *  console.log(`${key} = ${value}`);\n * }\n * ```\n *\n * @example Overview\n * ```js\n * // Create\n * let m = map();\n * // Add as array or key & value pair\n * m = m.add([\"name\" , \"sally\"]);\n * m = m.add({ key: \"name\", value: \"sally\" });\n * // Add using the more typical set\n * m = m.set(\"name\", \"sally\");\n * m.get(\"name\");   // \"sally\";\n * m.has(\"age\");    // false\n * m.has(\"name\");   // true\n * m.isEmpty;       // false\n * m = m.delete(\"name\");\n * m.entries();     // Iterator of key value pairs\n * ```\n *\n * Since it is immutable, `add()`, `delete()` and `clear()` return a new version with change.\n *\n * @param dataOrMap Optional initial data in the form of an array of `{ key: value }` or `[ key, value ]`\n */\nexport const immutable = <K, V>(\n  dataOrMap?: ReadonlyMap<K, V> | EitherKey<K, V>\n): IMapImmutable<K, V> => {\n  if (dataOrMap === undefined) return immutable([]);\n  if (Array.isArray(dataOrMap)) return immutable<K, V>(add(new Map(), ...dataOrMap));\n\n  const data = dataOrMap as ReadonlyMap<K, V>;\n  return {\n    add: (...itemsToAdd: EitherKey<K, V>) => {\n      const s = add(data, ...itemsToAdd);\n      return immutable(s);\n    },\n    set: (key: K, value: V) => {\n      const s = set(data, key, value);\n      return immutable(s);\n    },\n    get: (key: K) => data.get(key),\n    delete: (key: K) => immutable(del(data, key)),\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    clear: () => immutable(),\n    has: (key: K) => data.has(key),\n    entries: () => data.entries(),\n    values: () => data.values(),\n    isEmpty: () => data.size === 0,\n  };\n};\n","/**\n * Simple map for numbers.\n * \n * Keys not present in map return the `defaultValue` given in the constructor\n * ```js\n * // All keys default to zero.\n * const map = new NumberMap();\n * map.get(`hello`); // 0\n * ```\n * \n * To check if a key is present, use `has`:\n * ```js\n * map.has(`hello`); // false\n * ```\n * \n * Math:\n * ```js\n * // Adds 1 by default to value of `hello`\n * map.add(`hello`);         // 1\n * map.multiply(`hello`, 2); // 2 \n * \n * // Reset key to default value\n * map.reset(`hello`); // 0\n * ```\n * \n * Different default value:\n * ```js\n * const map = new NumberMap(10);\n * map.get(`hello`); // 10\n * ```\n * \n * Regular `set` works as well:\n * ```js\n * map.set(`hello`, 5);\n * map.add(`hello`, 2); // 7\n * ```\n */\nexport class NumberMap<K> extends Map<K, number> {\n  readonly defaultValue: number;\n\n  constructor(defaultValue = 0) {\n    super();\n    this.defaultValue = defaultValue;\n  }\n\n  get(key: K): number {\n    const v = super.get(key);\n    if (v === undefined) return this.defaultValue;\n    return v;\n  }\n\n  reset(key: K): number {\n    super.set(key, this.defaultValue);\n    return this.defaultValue;\n  }\n\n  multiply(key: K, amount: number): number {\n    const v = super.get(key);\n    let value = v ?? this.defaultValue;\n    value *= amount;\n    super.set(key, value);\n    return value;\n  }\n\n  add(key: K, amount = 1): number {\n    const v = super.get(key);\n    let value = v ?? this.defaultValue;\n    value += amount;\n    super.set(key, value);\n    return value;\n  }\n\n  subtract(key: K, amount = 1): number {\n    const v = super.get(key);\n    let value = v ?? this.defaultValue;\n    value -= amount;\n    super.set(key, value);\n    return value;\n  }\n}"],"mappings":"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","names":[]}