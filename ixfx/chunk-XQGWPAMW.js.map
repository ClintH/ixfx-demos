{"version":3,"sources":["../src/random/FloatSource.ts","../src/numbers/Count.ts"],"sourcesContent":["\nimport { type RandomOptions, type RandomSource, defaultRandom } from \"./Types.js\";\nimport { throwNumberTest } from '../util/GuardNumbers.js';\n/**\n * Returns a function that produces random float values.\n * Use {@link float} to produce a valued directly.\n *\n * Random float between `max` (exclusive) and 0 (inclusive). Max is 1 if unspecified.\n *\n *\n * ```js\n * // Random number between 0..1 (but not including 1)\n * // (this would be identical to Math.random())\n * const r = floatSource();\n * r(); // Execute to produce random value\n *\n * // Random float between 0..100 (but not including 100)\n * const v = floatSource(100)();\n * ```\n *\n * Options can be used:\n * ```js\n * // Random float between 20..40 (possibly including 20, but always lower than 40)\n * const r = floatSource({ min: 20, max: 40 });\n * ```\n * @param maxOrOptions Maximum value (exclusive) or options\n * @returns Random number\n */\nexport const floatSource = (maxOrOptions: number | RandomOptions = 1): RandomSource => {\n  const options = typeof maxOrOptions === `number` ? { max: maxOrOptions } : maxOrOptions;\n  //eslint-disable-next-line functional/no-let\n  let max = options.max;\n  //eslint-disable-next-line functional/no-let\n  let min = options.min ?? 0;\n  const source = options.source ?? defaultRandom;\n\n  throwNumberTest(min, ``, `min`);\n  throwNumberTest(max, ``, `max`);\n\n  if (!options.min && max < 0) {\n    min = max;\n    max = 0;\n  }\n  if (min > max) {\n    throw new Error(`Min is greater than max. Min: ${ min } max: ${ max }`);\n  }\n\n  return () => source() * (max - min) + min;\n};\n\n/**\n * Returns a random float between `max` (exclusive) and 0 (inclusive). Max is 1 if unspecified.\n * Use {@link floatSource} to get a function that produces values. This is used internally.\n *\n * ```js\n * // Random number between 0..1 (but not including 1)\n * // (this would be identical to Math.random())\n * const v = float();\n * // Random float between 0..100 (but not including 100)\n * const v = float(100);\n * ```\n *\n * Options can be used:\n * ```js\n * // Random float between 20..40 (possibly including 20, but always lower than 40)\n * const v = float({ min: 20, max: 40 });\n * ```\n * @param maxOrOptions Maximum value (exclusive) or options\n * @returns Random number\n */\nexport const float = (maxOrOptions: number | RandomOptions = 1): number =>\n  floatSource(maxOrOptions)();","import { throwIntegerTest } from \"../util/GuardNumbers.js\";\n\n/**\n * Yields `amount` integers, counting by one from zero. If a negative amount is used,\n * count decreases. If `offset` is provided, this is added to the return result.\n * @example\n * ```js\n * const a = [...count(5)]; // Yields five numbers: [0,1,2,3,4]\n * const b = [...count(-5)]; // Yields five numbers: [0,-1,-2,-3,-4]\n * for (const v of count(5, 5)) {\n *  // Yields: 5, 6, 7, 8, 9\n * }\n * const c = [...count(5,1)]; // Yields [1,2,3,4,5]\n * ```\n *\n * @example Used with forEach\n * ```js\n * // Prints `Hi` 5x\n * forEach(count(5), () => // do something);\n * ```\n *\n * If you want to accumulate return values, consider using Flow.repeat.\n *\n * @example Run some code every 100ms, 10 times:\n * ```js\n * import { interval } from 'https://unpkg.com/ixfx/dist/flow.js'\n * import { count } from 'https://unpkg.com/ixfx/dist/numbers.js'\n * const counter = count(10);\n * for await (const v of interval(counter, { fixedIntervalMs: 100 })) {\n *  // Do something\n * }\n * ```\n * @param amount Number of integers to yield\n * @param offset Added to result\n */\nexport function* count(amount: number, offset = 0): Generator<number, void, void> {\n  // Unit tested.\n  throwIntegerTest(amount, ``, `amount`);\n  throwIntegerTest(offset, ``, `offset`);\n\n  if (amount === 0) return;\n\n  let index = 0;\n  do {\n    yield (amount < 0 ? -index + offset : index + offset);\n  } while (index++ < Math.abs(amount) - 1);\n};"],"mappings":";;;;;;;;;AA4BO,IAAM,cAAc,CAAC,eAAuC,MAAoB;AACrF,QAAM,UAAU,OAAO,iBAAiB,WAAW,EAAE,KAAK,aAAa,IAAI;AAE3E,MAAI,MAAM,QAAQ;AAElB,MAAI,MAAM,QAAQ,OAAO;AACzB,QAAM,SAAS,QAAQ,UAAU;AAEjC,kBAAgB,KAAK,IAAI,KAAK;AAC9B,kBAAgB,KAAK,IAAI,KAAK;AAE9B,MAAI,CAAC,QAAQ,OAAO,MAAM,GAAG;AAC3B,UAAM;AACN,UAAM;AAAA,EACR;AACA,MAAI,MAAM,KAAK;AACb,UAAM,IAAI,MAAM,iCAAkC,GAAI,SAAU,GAAI,EAAE;AAAA,EACxE;AAEA,SAAO,MAAM,OAAO,KAAK,MAAM,OAAO;AACxC;AAsBO,IAAM,QAAQ,CAAC,eAAuC,MAC3D,YAAY,YAAY,EAAE;;;ACpCrB,UAAU,MAAM,QAAgB,SAAS,GAAkC;AAEhF,mBAAiB,QAAQ,IAAI,QAAQ;AACrC,mBAAiB,QAAQ,IAAI,QAAQ;AAErC,MAAI,WAAW,EAAG;AAElB,MAAI,QAAQ;AACZ,KAAG;AACD,UAAO,SAAS,IAAI,CAAC,QAAQ,SAAS,QAAQ;AAAA,EAChD,SAAS,UAAU,KAAK,IAAI,MAAM,IAAI;AACxC;","names":[]}