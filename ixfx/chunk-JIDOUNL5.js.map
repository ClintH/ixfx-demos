{"version":3,"sources":["../src/util/GuardThrowFromResult.ts","../src/util/GuardNumbers.ts"],"sourcesContent":["import type { GuardResultFail, GuardResultOk } from \"./GuardTypes.js\";\n\nexport const throwFromResult = (test: GuardResultFail | GuardResultOk) => {\n  if (test[ 0 ]) return false;\n  else throw new Error(test[ 1 ]);\n}","import { throwFromResult } from \"./GuardThrowFromResult.js\";\nimport type { GuardResult, NumberGuardRange } from \"./GuardTypes.js\";\n\n/**\n * Returns true if `x` is a power of two\n * @param x\n * @returns True if `x` is a power of two\n */\nexport const isPowerOfTwo = (x: number) => Math.log2(x) % 1 === 0;\n\n\n/**\n * Returns `fallback` if `v` is NaN, otherwise returns `v`.\n *\n * Throws if `v` is not a number type.\n * @param v\n * @param fallback\n * @returns\n */\nexport const ifNaN = (v: number, fallback: number): number => {\n  // ✔️ Unit tested\n\n  if (Number.isNaN(v)) return fallback;\n  if (typeof v !== `number`) {\n    throw new TypeError(`v is not a number. Got: ${ typeof v }`);\n  }\n  return v;\n};\n\n/**\n * Parses `value` as an integer, returning it if it meets the `range` criteria.\n * If not, `defaultValue` is returned.\n *\n * ```js\n * const i = integerParse('10', 'positive');    // 10\n * const i = integerParse('10.5', 'positive');  // 10\n * const i = integerParse('0', 'nonZero', 100); // 100\n * ```\n *\n * NaN is returned if criteria does not match and no default is given\n * ```js\n * const i = integerParse('10', 'negative');    // NaN\n * ```\n *\n * @param value\n * @param range\n * @param defaultValue\n * @returns\n */\nexport const integerParse = (\n  //eslint-disable-next-line @typescript-eslint/no-explicit-any\n  value: any,\n  range: NumberGuardRange = ``,\n  defaultValue: number = Number.NaN\n): number => {\n  // ✔️ Unit tested\n  if (value === undefined) return defaultValue;\n  if (value === null) return defaultValue;\n  try {\n    const parsed = Number.parseInt(value);\n    const r = integerTest(parsed, range, `parsed`);\n    return r[ 0 ] ? parsed : defaultValue;\n  } catch {\n    return defaultValue;\n  }\n  return Number.parseInt(value);\n};\n\n\n/**\n * Checks if `t` is not a number or within specified range.\n * Returns `[false, reason:string]` if invalid or `[true]` if valid.\n * Use {@link throwNumberTest} to throw an error rather than return result.\n * \n * Alternatives: {@link integerTest} for additional integer check, {@link percentTest} for percentage-range.\n *\n * * (empty, default): must be a number type and not NaN.\n * * positive: must be at least zero\n * * negative: must be zero or lower\n * * aboveZero: must be above zero\n * * belowZero: must be below zero\n * * percentage: must be within 0-1, inclusive\n * * nonZero: can be anything except zero\n * * bipolar: can be -1 to 1, inclusive\n * @param value Value to check\n * @param parameterName Name of parameter (for more helpful exception messages)\n * @param range Range to enforce\n * @returns\n */\nexport const numberTest = (\n  value?: unknown,\n  range: NumberGuardRange = ``,\n  parameterName = `?`,\n): GuardResult => {\n  if (value === null) return [ false, `Parameter '${ parameterName }' is null` ];\n  if (typeof value === `undefined`) {\n    return [ false, `Parameter '${ parameterName }' is undefined` ];\n  }\n  if (Number.isNaN(value)) {\n    return [ false, `Parameter '${ parameterName }' is NaN` ];\n  }\n  if (typeof value !== `number`) {\n    return [ false, `Parameter '${ parameterName }' is not a number (${ JSON.stringify(value) })` ];\n  }\n  switch (range) {\n    case `positive`: {\n      if (value < 0) {\n        return [ false, `Parameter '${ parameterName }' must be at least zero (${ value })` ];\n      }\n      break;\n    } case `negative`: {\n      if (value > 0) {\n        return [ false, `Parameter '${ parameterName }' must be zero or lower (${ value })` ];\n      }\n      break;\n    }\n    case `aboveZero`: {\n      if (value <= 0) {\n        return [ false, `Parameter '${ parameterName }' must be above zero (${ value })` ]\n\n      }\n      break;\n    }\n    case `belowZero`: {\n      if (value >= 0) {\n        return [ false, `Parameter '${ parameterName }' must be below zero (${ value })` ];\n      }\n      break;\n    }\n    case `percentage`: {\n      if (value > 1 || value < 0) {\n        return [ false, `Parameter '${ parameterName }' must be in percentage range (0 to 1). (${ value })` ]\n      }\n      break;\n    }\n    case `nonZero`: {\n      if (value === 0) {\n        return [ false, `Parameter '${ parameterName }' must non-zero. (${ value })` ];\n      }\n      break;\n    }\n    case `bipolar`: {\n      if (value > 1 || value < -1) {\n        return [ false, `Parameter '${ parameterName }' must be in bipolar percentage range (-1 to 1). (${ value })` ];\n      }\n      break;\n    }\n  }\n  return [ true ];\n};\n\n/**\n * Checks if `t` is not a number or within specified range.\n * Throws if invalid. Use {@link numberTest} to test without throwing.\n *\n* * (empty, default): must be a number type and not NaN.\n* * positive: must be at least zero\n* * negative: must be zero or lower\n* * aboveZero: must be above zero\n* * belowZero: must be below zero\n* * percentage: must be within 0-1, inclusive\n* * nonZero: can be anything except zero\n* * bipolar: can be -1 to 1, inclusive\n* \n * Alternatives: {@link integerTest} for additional integer check, {@link percentTest} for percentage-range.\n * @param value Value to test\n * @param range Range\n * @param parameterName Name of parameter \n */\nexport const throwNumberTest = (value?: unknown,\n  range: NumberGuardRange = ``,\n  parameterName = `?`) => {\n  throwFromResult(numberTest(value, range, parameterName));\n}\n\n/**\n * Returns test of `value` being in the range of 0-1.\n * Equiv to `number(value, `percentage`);`\n *\n * This is the same as calling ```number(t, `percentage`)```\n * @param value Value to check\n * @param parameterName Param name for customising exception message\n * @returns\n */\nexport const percentTest = (value: number, parameterName = `?`): GuardResult =>\n  numberTest(value, `percentage`, parameterName);\n\nexport const throwPercentTest = (value: number, parameterName = `?`) => {\n  throwFromResult(percentTest(value, parameterName));\n}\n/**\n * Checks if `value` an integer and meets additional criteria.\n * See {@link numberTest} for guard details, or use that if integer checking is not required.\n *\n * Note:\n * * `bipolar` will mean -1, 0 or 1.\n * * positive: must be at least zero\n * * negative: must be zero or lower\n * * aboveZero: must be above zero\n * * belowZero: must be below zero\n * * percentage: must be within 0-1, inclusive\n * * nonZero: can be anything except zero\n * @param value Value to check\n * @param parameterName Param name for customising exception message\n * @param range Guard specifier.\n */\nexport const integerTest = (\n  value: number | undefined,\n  range: NumberGuardRange = ``,\n  parameterName = `?`\n): GuardResult => {\n  // ✔️ Unit tested\n  const r = numberTest(value, range, parameterName);\n  if (!r[ 0 ]) return r;\n  if (!Number.isInteger(value)) {\n    return [ false, `Parameter ${ parameterName } is not an integer` ];\n  }\n  return [ true ];\n};\n\nexport const throwIntegerTest = (value: number | undefined,\n  range: NumberGuardRange = ``,\n  parameterName = `?`) => {\n  throwFromResult(integerTest(value, range, parameterName));\n}\n"],"mappings":"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","names":[]}