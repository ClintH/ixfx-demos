{"version":3,"sources":["../src/random/index.ts","../src/random/Chance.ts","../src/random/NonZero.ts","../src/random/Gaussian.ts","../src/random/Guid.ts","../src/random/Integer.ts","../src/random/Time.ts","../src/random/Weighted.ts","../src/random/WeightedInteger.ts"],"sourcesContent":["export * from './Chance.js';\nexport * from './FloatSource.js';\nexport * from './Gaussian.js';\nexport * from './Guid.js';\nexport * from './Integer.js';\nexport * from './NonZero.js';\nexport * from './String.js';\nexport * from './Time.js';\nexport type * from './Types.js';\nexport * from './Weighted.js';\nexport * from './WeightedIndex.js';\nexport * from './WeightedInteger.js';\n\nexport { randomElement as arrayElement } from '../data/arrays/Random.js';\nexport { randomHue as hue } from '../visual/Colour.js';\nexport { randomIndex as arrayIndex } from '../data/arrays/Random.js';","import { throwNumberTest } from \"../util/GuardNumbers.js\";\nimport type { RandomSource } from \"./Types.js\";\n\n/**\n * Chance of returning `a` or `b`, based on threshold `p`.\n * \n * `p` sets the threshold for picking `b`. The higher the value (up to 1),\n * the more likely `b` will be picked.\n * \n * ```js\n * // 50% of the time it will return 100, 50% 110\n * chance(0.5, 100, 110);\n * // 90% of the time it will yield 110, 10% it will yield 100\n * chance(0.9, 100, 110);\n * ```\n * \n * @param p Threshold to choose option B (value or function)\n * @param a Value or function for option A\n * @param b Value or function for option B\n * @param randomSource Source of random numbers\n * @returns \n */\nexport const chance = <T>(p: number | (() => number), a: T | (() => T), b: T | (() => T), randomSource?: RandomSource): T => {\n  const source = randomSource ?? Math.random;\n  const resolve = <V>(x: V | (() => V)): V => {\n    if (typeof x === `function`) return (x as () => V)();\n    return x;\n  }\n\n  const pp = resolve(p);\n  throwNumberTest(pp, `percentage`, `p`);\n\n  if (source() <= pp) {\n    return resolve(b);\n  } else {\n    return resolve(a);\n  }\n}","import type { RandomSource } from \"./Types.js\";\n\nexport const calculateNonZero = (source: RandomSource = Math.random) => {\n  let v = 0;\n  while (v === 0) {\n    //eslint-disable-next-line functional/no-expression-statements\n    v = source();\n  }\n  return v;\n}","import { calculateNonZero } from \"./NonZero.js\";\nimport type { RandomSource } from \"./Types.js\";\n\n/**\n * Returns a random number with gaussian (ie. bell-curved) distribution\n * \n * @example Random number between 0..1 with gaussian distribution\n * ```js\n * import * as Random from 'https://unpkg.com/ixfx/dist/random.js';\n * Random.gaussian();\n * ```\n * \n * @example Distribution can be skewed\n * ```js\n * Random.gaussian(10);\n * ```\n * \n\n * @param skew Skew factor. Defaults to 1, no skewing. Above 1 will skew to left, below 1 will skew to right\n * @returns \n */\nexport const gaussian = (skew = 1) => gaussianSource(skew)();\n\n/**\n * Returns a function that generates a gaussian-distributed random number\n *  * @example Random number between 0..1 with gaussian distribution\n * ```js\n * import * as Random from 'https://unpkg.com/ixfx/dist/random.js';\n *\n * // Create function\n * const r = Random.gaussianFn();\n *\n * // Generate random value\n * r();\n * ```\n *\n * @example Pass the random number generator elsewhere\n * ```js\n * import * as Random from 'https://unpkg.com/ixfx/dist/random.js';\n * import Arrays from 'https://unpkg.com/ixfx/dist/data.js';\n * const r = Random.gaussianFn(10);\n *\n * // Randomise array with gaussian distribution\n * Arrays.shuffle(r);\n * ```\n * @param skew\n * @returns\n */\nexport const gaussianSource = (skew = 1): RandomSource => {\n  const min = 0;\n  const max = 1;\n  // Source: https://stackoverflow.com/questions/25582882/javascript-math-random-normal-distribution-gaussian-bell-curve\n\n  const compute = (): number => {\n    const u = calculateNonZero();\n    const v = calculateNonZero();\n    //eslint-disable-next-line functional/no-let\n    let result = Math.sqrt(-2 * Math.log(u)) * Math.cos(2 * Math.PI * v);\n\n    result = result / 10 + 0.5; // Translate to 0 -> 1\n    if (result > 1 || result < 0) {\n      result = compute(); //;gaussian(skew); // resample between 0 and 1 if out of range\n    } else {\n      result = Math.pow(result, skew); // Skew\n      result *= max - min; // Stretch to fill range\n      result += min; // offset to min\n    }\n    return result;\n  };\n  return compute;\n};","import type { RandomSource } from \"./Types.js\";\n\n/**\n * Generates a short roughly unique id\n * ```js\n * const id = shortGuid();\n * ```\n * @param options Options.\n * @returns\n */\nexport const shortGuid = (options: Readonly<{ source?: RandomSource }> = {}) => {\n  const source = options.source ?? Math.random;\n  // Via Stackoverflow...\n  const firstPart = Math.trunc(source() * 46_656);\n  const secondPart = Math.trunc(source() * 46_656);\n  const firstPartString = `000${ firstPart.toString(36) }`.slice(-3);\n  const secondPartString = `000${ secondPart.toString(36) }`.slice(-3);\n  return firstPartString + secondPartString;\n};","import type { GenerateRandomOptions, RandomOptions, RandomSource } from \"./Types.js\";\nimport { numberTest as guardNumberTest, integerTest as guardIntegerTest } from '../util/GuardNumbers.js';\nimport { throwFromResult } from '../util/GuardThrowFromResult.js';\nimport { count } from \"../numbers/Count.js\";\nimport { shuffle } from \"../data/arrays/Random.js\";\n\n/**\n * Returns a function that produces a random integer between `max` (exclusive) and 0 (inclusive)\n * Use {@link integer} if you want a random number directly.\n *\n * Invoke directly:\n * ```js\n * integerSource(10)();  // Random number 0-9\n * ```\n *\n * Or keep a reference to re-compute:\n * ```js\n * const r = integerSource(10);\n * r(); // Produce a random integer\n * ```\n *\n * If a negative value is given, this is assumed to be the\n * minimum (inclusive), with 0 as the max (inclusive)\n * ```js\n * integerSource(-5)();  // Random number from -5 to 0\n * ```\n *\n * Specify options for a custom minimum or source of random:\n * ```js\n * integerSource({ max: 5,  min: 10 })();  // Random number 4-10\n * integerSource({ max: -5, min: -10 })(); // Random number from -10 to -6\n * integerSource({ max: 10, source: Math.random })(); // Random number between 0-9, with custom source of random\n * ```\n *\n * Throws an error if max & min are equal\n * @param maxOrOptions Max value (exclusive), or set of options\n * @returns Random integer\n */\nexport const integerSource = (maxOrOptions: number | RandomOptions): RandomSource => {\n  if (typeof maxOrOptions === `undefined`) {\n    throw new TypeError(`maxOrOptions is undefined`);\n  }\n  const options = typeof maxOrOptions === `number` ? { max: maxOrOptions } : maxOrOptions;\n  //eslint-disable-next-line functional/no-let\n  let max = Math.floor(options.max);\n  //eslint-disable-next-line functional/no-let\n  let min = Math.floor(options.min ?? 0);\n\n  // If we just get -5 as the max, invert so\n  // max:1 and min: -5 instead for -5...0 range\n  if (!options.min && max < 0) {\n    max = 1;\n    min = options.max;\n  }\n  const randomSource = options.source ?? Math.random;\n  if (min > max) {\n    throw new Error(`Min value is greater than max (min: ${ min } max: ${ max })`);\n  }\n\n  throwFromResult(guardNumberTest(min, ``, `min`));\n  throwFromResult(guardNumberTest(max, ``, `max`));\n\n  if (max === min) {\n    throw new Error(`Max and min values cannot be the same (${ max })`);\n  }\n\n  // Distance\n  const amt = Math.abs(max - min);\n  return () => Math.floor(randomSource() * amt) + min;\n};\n\n/**\n * Returns a random integer between `max` (exclusive) and 0 (inclusive)\n * Use {@link integerSource} to return a function instead.\n *\n * ```js\n * integer(10);  // Random number 0-9\n * ```\n *\n * If a negative value is given, this is assumed to be the\n * minimum (inclusive), with 0 as the max (inclusive)\n * ```js\n * integer(-5);  // Random number from -5 to 0\n * ```\n *\n * Specify options for a custom minimum or source of random:\n * ```js\n * integer({ max: 5,  min: 10 });  // Random number 4-10\n * integer({ max: -5, min: -10 }); // Random number from -10 to -6\n * integer({ max: 10, source: Math.random }); // Random number between 0-9, with custom source of random\n * ```\n *\n * Throws an error if max & min are equal\n * @param maxOrOptions Max value (exclusive), or set of options\n * @returns Random integer\n */\nexport const integer = (maxOrOptions: number | RandomOptions): number =>\n  integerSource(maxOrOptions)();\n\n/**\n * Returns a generator over random unique integers, up to\n * but not including the given max value.\n *\n * @example 0..9 range\n * ```js\n * const rand = [ ...integerUniqueGen(10) ];\n * // eg: [2, 9, 6, 0, 8, 7, 3, 4, 5, 1]\n * ```\n *\n * @example Options can be provided:\n * ```js\n * // 5..9 range\n * const rand = [ ...integerUniqueGen({ min: 5, max: 10 })];\n * ```\n *\n * Range can be looped. Once the initial random walk through the number\n * range completes, it starts again in a new random way.\n *\n * ```js\n * for (const r of integerUniqueGen({ max: 10, loop: true })) {\n *  // Warning: loops forever\n * }\n * ```\n *\n * Behind the scenes, an array of numbers is created that captures the range, this is then\n * shuffled on the first run, and again whenever the iterator loops, if that's allowed.\n *\n * As a consequence, large ranges will consume larger amounts of memory.\n * @param maxOrOptions\n * @returns\n */\nexport function* integerUniqueGen(\n  maxOrOptions: number | GenerateRandomOptions\n): IterableIterator<number> {\n  const options = typeof maxOrOptions === `number` ? { max: maxOrOptions } : maxOrOptions;\n  const min = options.min ?? 0;\n  const max = options.max;\n  const source = options.source ?? Math.random;\n  const loop = options.loop ?? false;\n\n  throwFromResult(guardIntegerTest(min, ``, `min`));\n  throwFromResult(guardIntegerTest(max, ``, `max`));\n  if (min > max) {\n    throw new Error(`Min value is greater than max. Min: ${ min } Max: ${ max }`);\n  }\n\n  const origRange = [ ...count(max - min, min) ];\n  let numberRange = shuffle(origRange);\n  let index = 0;\n  while (true) {\n    if (index === numberRange.length) {\n      if (loop) numberRange = shuffle(origRange, source);\n      else return;\n    }\n    yield numberRange[ index++ ];\n  }\n}\n","import { integer, integerSource } from \"./Integer.js\";\nimport type { RandomOptions, RandomSource } from \"./Types.js\";\n\n/**\n * Returns a random number of minutes, with a unit of milliseconds.\n * Max value is exclusive.\n * Use {@link minutesMs} to get a value directly, or {@link minutesMsSource} to return a function.\n *\n * @example Random value from 0 to one milli less than 5 * 60 * 1000\n * ```js\n * // Create function that returns value\n * const f = minutesMsSource(5);\n *\n * f(); // Generate value\n * ```\n *\n * @example Specified options:\n * ```js\n * // Random time between one minute and 5 minutes\n * const f = minutesMsSource({ max: 5, min: 1 });\n * f();\n * ```\n *\n * @remarks\n * It's a very minor function, but can make\n * code a little more literate:\n * ```js\n * // Random timeout of up to 5 mins\n * setTimeout(() => { ... }, minutesMsSource(5));\n * ```\n * @param maxMinutesOrOptions\n * @see {@link minutesMs}\n * @returns Function that produces a random value\n */\nexport const minutesMsSource = (\n  maxMinutesOrOptions: number | RandomOptions\n): RandomSource => {\n  const options =\n    typeof maxMinutesOrOptions === `number`\n      ? { max: maxMinutesOrOptions }\n      : maxMinutesOrOptions;\n  const min = (options.min ?? 0) * 60 * 1000;\n  const max = options.max * 60 * 1000;\n  return integerSource({ ...options, max, min });\n};\n\n\n/**\n * @example Random value from 0 to one milli less than 5 * 60 * 1000\n * ```js\n * // Random value from 0 to one milli less than 5*60*1000\n * minuteMs(5);\n * ```\n *\n * @example Specified options:\n * ```js\n * // Random time between one minute and 5 minutes\n * minuteMs({ max: 5, min: 1 });\n * ```\n * @inheritDoc minutesMsSource\n *\n * @param maxMinutesOrOptions\n * @see {@link minutesMsSource}\n * @returns Milliseconds\n */\nexport const minutesMs = (maxMinutesOrOptions: number | RandomOptions): number =>\n  minutesMsSource(maxMinutesOrOptions)();\n\n\n/**\n * Returns function which produces a random number of seconds, with a unit of milliseconds.\n * Maximum value is exclusive.\n * Use {@link secondsMs} to return a random value directly, or {@link secondsMsSource} to return a function.\n *\n * @example Random milliseconds between 0..4999\n * ```js\n * // Create function\n * const f = secondsMsSource(5000);\n * // Produce a value\n * const value = f();\n * ```\n *\n * @example Options can be provided\n * ```js\n * // Random milliseconds between 1000-4999\n * const value = secondsMsSource({ max:5, min:1 })();\n * // Note the extra () at the end to execute the function\n * ```\n *\n * @remarks\n * It's a very minor function, but can make\n * code a little more literate:\n * ```js\n * // Random timeout of up to 5 seconds\n * setTimeout(() => { ...}, secondsMsSource(5));\n * ```\n * @param maxSecondsOrOptions Maximum seconds, or options.\n * @returns Milliseconds\n */\nexport const secondsMsSource = (\n  maxSecondsOrOptions: number | RandomOptions\n): RandomSource => {\n  const options =\n    typeof maxSecondsOrOptions === `number`\n      ? { max: maxSecondsOrOptions }\n      : maxSecondsOrOptions;\n  const min = (options.min ?? 0) * 1000;\n  const max = options.max * 1000;\n  return () => integer({ ...options, max, min });\n};\n\n/**\n * @example Random milliseconds between 0..4999\n * ```js\n * secondsMs(5000);\n * ```\n *\n * @example Options can be provided\n * ```js\n * // Random milliseconds between 1000-4999\n * secondsMs({ max:5, min:1 });\n * ```\n * @inheritDoc secondsMsSource\n * @param maxSecondsOrOptions\n * @returns\n */\nexport const secondsMs = (maxSecondsOrOptions: number | RandomOptions): number =>\n  secondsMsSource(maxSecondsOrOptions)();","import { defaultRandom, type RandomSource } from './Types.js';\nimport { type EasingName, get as EasingGet } from '../modulation/easing/index.js';\n/**\n * Options for producing weighted distribution\n */\nexport type WeightedOptions = Readonly<{\n  /**\n   * Easing function to use (optional)\n   */\n  easing?: EasingName;\n  /**\n   * Random source (optional)\n   */\n  source?: RandomSource;\n}>\n/***\n * Returns a random number, 0..1, weighted by a given easing function.\n * Default easing is `quadIn`, which skews towards zero.\n *\n * Use {@link weightedSource} to return a function instead.\n *\n * ```js\n * import * as Random from 'https://unpkg.com/ixfx/dist/random.js';\n * Random.weighted();          // quadIn easing by default, which skews toward low values\n * Random.weighted(`quadOut`); // quadOut favours high values\n * ```\n * @param easingNameOrOptions Options. Uses 'quadIn' by default.\n * @see {@link weightedSource} Returns a function rather than value\n * @returns Random number (0-1)\n */\nexport const weighted = (\n  easingNameOrOptions: EasingName | WeightedOptions = `quadIn`\n): number => weightedSource(easingNameOrOptions)();\n\n/***\n * Returns a random number, 0..1, weighted by a given easing function.\n * Default easing is `quadIn`, which skews towards zero.\n * Use {@link weighted} to get a value directly.\n *\n * ```js\n * import * as Random from 'https://unpkg.com/ixfx/dist/random.js';\n * const r1 = Random.weightedSource();          // quadIn easing by default, which skews toward low values\n * r1(); // Produce a value\n *\n * const r2 = Random.weightedSource(`quadOut`); // quadOut favours high values\n * r2(); // Produce a value\n * ```\n * @param easingNameOrOptions Easing name or options `quadIn` by default.\n * @see {@link weighted} Returns value instead of function\n * @returns Function which returns a weighted random value\n */\nexport const weightedSource = (\n  easingNameOrOptions: EasingName | WeightedOptions = `quadIn`\n): RandomSource => {\n  const options =\n    typeof easingNameOrOptions === `string`\n      ? { easing: easingNameOrOptions }\n      : easingNameOrOptions;\n  const source = options.source ?? defaultRandom;\n  const easingName = options.easing ?? `quadIn`;\n  const easingFunction = EasingGet(easingName);\n  if (easingFunction === undefined) {\n    throw new Error(`Easing function '${ easingName }' not found.`);\n  }\n\n  const compute = (): number => {\n    const r = source();\n    return easingFunction(r);\n  };\n  return compute;\n};","import { clamp } from \"../numbers/Clamp.js\";\nimport { type RandomSource, defaultRandom } from \"./Types.js\";\nimport type { WeightedOptions } from \"./Weighted.js\";\nimport { throwNumberTest } from '../util/GuardNumbers.js';\nimport { get as EasingGet } from '../modulation/easing/index.js';\nexport type WeightedIntegerOptions = WeightedOptions & Readonly<{\n  min?: number;\n  max: number;\n}>;\n/**\n * Random integer, weighted according to an easing function.\n * Number will be inclusive of `min` and below `max`.\n *\n * @example 0..99\n * ```js\n * import * as Random from 'https://unpkg.com/ixfx/dist/random.js';\n * const r = Random.weightedIntegerFn(100);\n * r(); // Produce value\n * ```\n *\n * @example 20..29\n * ```js\n * const r = Random.weightedIntegerFn({ min: 20, max: 30 });\n * r(); // Produce value\n * ```\n *\n * @example  0..99 with 'quadIn' easing\n * ```js\n * const r = Random.weightedInteger({ max: 100, easing: `quadIn` });\n * ```\n *\n * Note: result from easing function will be clamped to\n * the min/max (by default 0-1);\n *\n * @param maxOrOptions Maximum (exclusive)\n * @returns Function that produces a random weighted integer\n */\nexport const weightedIntegerSource = (\n  maxOrOptions: number | WeightedIntegerOptions\n): RandomSource => {\n  const options = typeof maxOrOptions === `number` ? { max: maxOrOptions } : maxOrOptions;\n  const source = options.source ?? defaultRandom;\n  const max = options.max;\n  const min = options.min ?? 0;\n  const easingName = options.easing ?? `quadIn`;\n  if (typeof max === `undefined`) throw new Error(`max field is undefined`);\n  if (typeof easingName !== `string`) {\n    throw new TypeError(`easing field expected to be string`);\n  }\n  throwNumberTest(max);\n\n  const easingFunction = EasingGet(easingName);\n  if (easingFunction === undefined) {\n    throw new Error(`Easing '${ easingName }' not found`);\n  }\n\n  throwNumberTest(min);\n  if (max <= min) throw new Error(`Max should be greater than min`);\n\n  const compute = (): number => {\n    const r = clamp(easingFunction(source()));\n    return Math.floor(r * (max - min)) + min;\n  };\n  return compute;\n};\n\n/**\n * @example 0..99\n * ```js\n * import * as Random from 'https://unpkg.com/ixfx/dist/random.js';\n * Random.weightedInteger(100);\n * ```\n *\n * @example 20..29\n * ```js\n * Random.weightedInteger({ min: 20, max: 30 });\n * ```\n *\n * @example  0..99 with 'quadIn' easing\n * ```js\n * Random.weightedInteger({ max: 100, easing: `quadIn` })\n * ```\n * @inheritDoc {@link weightedIntegerSource}\n * @param maxOrOptions\n * @returns Random weighted integer\n */\nexport const weightedInteger = (maxOrOptions: number | WeightedIntegerOptions): number =>\n  weightedIntegerSource(maxOrOptions)();"],"mappings":"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","names":[]}