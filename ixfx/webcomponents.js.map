{"version":3,"sources":["../src/Compare.ts","../src/web-components/DataDisplay.ts"],"sourcesContent":["\nexport type ChangeKind = `mutate` | `add` | `del`\nexport type ChangeRecord = [ kind: ChangeKind, path: string, value: any ];\n\n\n\n/**\n * Result of {@link compareData}\n */\nexport type CompareChangeSet = {\n  /**\n   * _True_ if there are any changes\n   */\n  hasChanged: boolean\n  /**\n   * Results for child objects\n   */\n  children: Record<string, CompareChangeSet>\n  /**\n   * Values that have changed\n   */\n  changed: Record<string, any>\n  /**\n   * Fields that have been added\n   */\n  added: Record<string, any>\n  /**\n   * Fields that have been removed\n   */\n  removed: Array<string>\n  isArray: boolean\n  summary: Array<ChangeRecord>\n}\n\n/**\n * Returns the changed fields from A -> B. It's assumed that A and B have the same shape.\n * ie. returns an object that only consists of fields which have changed in B compared to A.\n * \n * ```js\n * const a = { msg: `hi`, v: 10 };\n * \n * changedDataFields(a, { msg: `hi`,   v: 10 }); // {}\n * changedDataFields(a, { msg: `hi!!`, v: 10 }); // { msg: `hi!!` }\n * changedDataFields(a, { msg: `hi!!` });       // { msg: `hi!!`, v: undefined }\n * ```\n * \n * Under the hood, we use `{@link compareData}(a, b, true)`. If B has additional or removed fields,\n * this is considered an error.\n * \n * If a field is an array, the whole array is returned, rather than a diff.\n * @param a \n * @param b \n */\nexport const changedDataFields = (a: object, b: object) => {\n  const r = compareData(a, b, true);\n  if (Object.entries(r.added).length > 0) throw new Error(`Shape of data has changed`);\n  if (Object.entries(r.removed).length > 0) throw new Error(`Shape of data has changed`);\n\n  const output = compareResultToObject(r, b);\n  return output;\n}\n\nconst compareResultToObject = (r: CompareChangeSet, b: object): Record<string, any> | Array<any> => {\n  const output = {}\n\n  if (r.isArray) {\n    return b;\n  }\n\n  for (const entry of Object.entries(r.changed)) {\n    (output as any)[ entry[ 0 ] ] = entry[ 1 ];\n  }\n\n  for (const entry of Object.entries(r.added)) {\n    (output as any)[ entry[ 0 ] ] = entry[ 1 ];\n  }\n\n\n  for (const childEntry of Object.entries(r.children)) {\n    if (childEntry[ 1 ].hasChanged) {\n      (output as any)[ childEntry[ 0 ] ] = compareResultToObject(childEntry[ 1 ], (b as any)[ childEntry[ 0 ] ]);\n    }\n  }\n  return output;\n}\n\n/**\n * Compares A to B. Assumes they are simple objects, essentially key-value pairs, where the values are primitive values or other simple objects.\n * \n * @param a \n * @param b \n */\nexport const compareData = (a: object, b: object, assumeSameShape = false): CompareChangeSet => {\n  const entriesA = Object.entries(a);\n  const entriesB = Object.entries(b);\n\n  const scannedKeys = new Set<string>();\n  const changed = {}\n  const added = {}\n  const children = {}\n  const removed: Array<string> = [];\n  const isArray = Array.isArray(a);\n\n  const summary = new Array<ChangeRecord>();\n  let hasChanged = false;\n\n  // Look for existing entries of A that are modified\n  for (const entry of entriesA) {\n    const outputKey = isArray ? `_${ entry[ 0 ] }` : entry[ 0 ]\n    const aValue = entry[ 1 ];\n    const bValue = (b as any)[ entry[ 0 ] ];\n    scannedKeys.add(entry[ 0 ]);\n\n    if (bValue === undefined) {\n      // B does not have a key from A\n      hasChanged = true;\n      if (assumeSameShape && !isArray) {\n        // If we're assuming it's the same shape, then _undefined_ is actually the value\n        (changed as any)[ outputKey ] = bValue;\n        summary.push([ `mutate`, outputKey, bValue ]);\n      } else {\n        // Key removed\n        removed.push(outputKey);\n        summary.push([ `del`, outputKey, aValue ]);\n      }\n      continue;\n    }\n\n    if (typeof aValue === `object`) {\n      const r = compareData(aValue, bValue, assumeSameShape);\n      if (r.hasChanged) hasChanged = true;\n      (children as any)[ outputKey ] = r;\n      const childSummary = r.summary.map(sum => { return [ sum[ 0 ], outputKey + `.` + sum[ 1 ], sum[ 2 ] ] }) as Array<ChangeRecord>;\n      summary.push(...childSummary);\n    } else {\n      if (aValue !== bValue) {\n        (changed as any)[ outputKey ] = bValue;\n        hasChanged = true;\n        summary.push([ `mutate`, outputKey, bValue ]);\n      }\n    }\n  }\n\n  // Look for entries in B that weren't in A\n  if (!assumeSameShape || isArray) {\n    for (const entry of entriesB) {\n      const key = isArray ? `_${ entry[ 0 ] }` : entry[ 0 ]\n\n      if (scannedKeys.has(entry[ 0 ])) continue;\n      (added as any)[ key ] = entry[ 1 ];\n      hasChanged = true;\n      summary.push([ `add`, key, entry[ 1 ] ])\n    }\n  }\n  return {\n    changed, added, removed, children, hasChanged, isArray, summary\n  }\n}","\nimport { round } from \"../Numbers.js\";\nimport { changedDataFields, } from \"../Compare.js\";\nexport type FormattingOptions = {\n  readonly precision?: number\n  readonly roundNumbers?: number\n}\n\nexport class DataDisplayComponent extends HTMLElement {\n  previousValue: Record<string, any> | undefined;\n  _shadow: ShadowRoot;\n  _container: HTMLElement;\n\n  constructor() {\n    super();\n\n    this._shadow = this.attachShadow({ mode: `open` });\n    this._container = document.createElement(`section`);\n    const style = document.createElement(`style`);\n    style.textContent = `\n    section {\n      background: white;\n      color: black;\n      border: 2px solid hsl(0deg 0.61% 90%);\n      padding: 1em;\n      font-family: monospace;\n      display:grid;\n      grid-template-cols: repeat(2, 1fr);\n    }\n    div {\n      border:1px solid black;\n    }\n    `\n    this._shadow.append(style, this._container);\n  }\n\n  formatValue(v: any, options: FormattingOptions = {}): string {\n    if (v === null) return `(null)`;\n    if (v === undefined) return `(undefined)`;\n    if (typeof v === `boolean`) return v ? `true` : `false`;\n    if (typeof v === `string`) return `\"${ v }\"`;\n    if (typeof v === `number`) {\n      let vAsNumber = v;\n      if (options.roundNumbers !== undefined) vAsNumber = round(options.roundNumbers, v)\n      if (options.precision !== undefined) return vAsNumber.toFixed(options.precision);\n      return vAsNumber.toString();\n    }\n    return JSON.stringify(v);\n  }\n\n  displayData(o: Record<string, any>) {\n    for (const [ key, value ] of Object.entries(o)) {\n      const domKey = `path-${ key }`;\n      if (typeof value === `object`) {\n        const element = this.getOrCreate(domKey, (parent) => {\n          parent.classList.add(`row`, `nested`);\n          const label = document.createElement(`label`);\n          label.textContent = key;\n          const valueElement = new DataDisplayComponent();\n          parent.append(label, valueElement);\n        });\n        const valueElement = element.querySelector<DataDisplayComponent>(`data-display`);\n        if (valueElement !== null) {\n          valueElement.update(value);\n        }\n\n      } else {\n        const element = this.getOrCreate(domKey, (parent) => {\n          parent.classList.add(`row`);\n          const label = document.createElement(`label`);\n          label.textContent = key;\n          const valueElement = document.createElement(`div`);\n          valueElement.textContent = this.formatValue(value);\n          parent.append(label, valueElement);\n        });\n        const valueElement = element.querySelector(`div`);\n        if (valueElement === null) {\n          debugger;\n        } else {\n          valueElement.innerHTML = this.formatValue(value);\n        }\n      }\n    }\n\n    // const paths = getFieldPaths(o);\n    // console.log(`paths: ${ JSON.stringify(paths) }`);\n\n    // for (const path of paths) {\n\n    // }\n  }\n\n  getOrCreate(path: string, init?: (parent: HTMLElement) => void): HTMLElement {\n\n    // eslint-disable-next-line unicorn/prefer-query-selector\n    const element = this._shadow.getElementById(path);\n    if (element !== null) return element;\n\n    const elementCreated = document.createElement(`div`);\n    elementCreated.id = path;\n    if (init) init(elementCreated);\n    this._container.append(elementCreated);\n    return elementCreated;\n  }\n\n  update(value: Record<string, any>) {\n    if (this.previousValue === undefined) {\n      this.displayData(value);\n    } else {\n      this.displayData(changedDataFields(this.previousValue, value));\n    }\n    this.previousValue = value;\n  }\n}\n\ncustomElements.define(`data-display`, DataDisplayComponent);"],"mappings":"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","names":["valueElement"]}