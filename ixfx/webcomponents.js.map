{"version":3,"sources":["../src/web-components/DataDisplay.ts"],"sourcesContent":["\nimport { round } from \"../Numbers.js\";\nimport { changedDataFields, } from \"../Compare.js\";\nexport type FormattingOptions = {\n  readonly precision?: number\n  readonly roundNumbers?: number\n}\n\nexport class DataDisplayComponent extends HTMLElement {\n  previousValue: Record<string, any> | undefined;\n  _shadow: ShadowRoot;\n  _container: HTMLElement;\n\n  constructor() {\n    super();\n\n    this._shadow = this.attachShadow({ mode: `open` });\n    this._container = document.createElement(`section`);\n    const style = document.createElement(`style`);\n    style.textContent = `\n    section {\n      background: white;\n      color: black;\n      border: 2px solid hsl(0deg 0.61% 90%);\n      padding: 1em;\n      font-family: monospace;\n      display:grid;\n      grid-template-cols: repeat(2, 1fr);\n    }\n    div {\n      border:1px solid black;\n    }\n    `\n    this._shadow.append(style, this._container);\n  }\n\n  formatValue(v: any, options: FormattingOptions = {}): string {\n    if (v === null) return `(null)`;\n    if (v === undefined) return `(undefined)`;\n    if (typeof v === `boolean`) return v ? `true` : `false`;\n    if (typeof v === `string`) return `\"${ v }\"`;\n    if (typeof v === `number`) {\n      let vAsNumber = v;\n      if (options.roundNumbers !== undefined) vAsNumber = round(options.roundNumbers, v)\n      if (options.precision !== undefined) return vAsNumber.toFixed(options.precision);\n      return vAsNumber.toString();\n    }\n    return JSON.stringify(v);\n  }\n\n  displayData(o: Record<string, any>) {\n    for (const [ key, value ] of Object.entries(o)) {\n      const domKey = `path-${ key }`;\n      if (typeof value === `object`) {\n        const element = this.getOrCreate(domKey, (parent) => {\n          parent.classList.add(`row`, `nested`);\n          const label = document.createElement(`label`);\n          label.textContent = key;\n          const valueElement = new DataDisplayComponent();\n          parent.append(label, valueElement);\n        });\n        const valueElement = element.querySelector<DataDisplayComponent>(`data-display`);\n        if (valueElement !== null) {\n          valueElement.update(value);\n        }\n\n      } else {\n        const element = this.getOrCreate(domKey, (parent) => {\n          parent.classList.add(`row`);\n          const label = document.createElement(`label`);\n          label.textContent = key;\n          const valueElement = document.createElement(`div`);\n          valueElement.textContent = this.formatValue(value);\n          parent.append(label, valueElement);\n        });\n        const valueElement = element.querySelector(`div`);\n        if (valueElement === null) {\n          debugger;\n        } else {\n          valueElement.innerHTML = this.formatValue(value);\n        }\n      }\n    }\n\n    // const paths = getFieldPaths(o);\n    // console.log(`paths: ${ JSON.stringify(paths) }`);\n\n    // for (const path of paths) {\n\n    // }\n  }\n\n  getOrCreate(path: string, init?: (parent: HTMLElement) => void): HTMLElement {\n\n    // eslint-disable-next-line unicorn/prefer-query-selector\n    const element = this._shadow.getElementById(path);\n    if (element !== null) return element;\n\n    const elementCreated = document.createElement(`div`);\n    elementCreated.id = path;\n    if (init) init(elementCreated);\n    this._container.append(elementCreated);\n    return elementCreated;\n  }\n\n  update(value: Record<string, any>) {\n    if (this.previousValue === undefined) {\n      this.displayData(value);\n    } else {\n      this.displayData(changedDataFields(this.previousValue, value));\n    }\n    this.previousValue = value;\n  }\n}\n\ncustomElements.define(`data-display`, DataDisplayComponent);"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;AAQO,IAAM,uBAAN,MAAM,8BAA6B,YAAY;AAAA,EACpD;AAAA,EACA;AAAA,EACA;AAAA,EAEA,cAAc;AACZ,UAAM;AAEN,SAAK,UAAU,KAAK,aAAa,EAAE,MAAM,OAAO,CAAC;AACjD,SAAK,aAAa,SAAS,cAAc,SAAS;AAClD,UAAM,QAAQ,SAAS,cAAc,OAAO;AAC5C,UAAM,cAAc;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAcpB,SAAK,QAAQ,OAAO,OAAO,KAAK,UAAU;AAAA,EAC5C;AAAA,EAEA,YAAY,GAAQ,UAA6B,CAAC,GAAW;AAC3D,QAAI,MAAM;AAAM,aAAO;AACvB,QAAI,MAAM;AAAW,aAAO;AAC5B,QAAI,OAAO,MAAM;AAAW,aAAO,IAAI,SAAS;AAChD,QAAI,OAAO,MAAM;AAAU,aAAO,IAAK,CAAE;AACzC,QAAI,OAAO,MAAM,UAAU;AACzB,UAAI,YAAY;AAChB,UAAI,QAAQ,iBAAiB;AAAW,oBAAY,MAAM,QAAQ,cAAc,CAAC;AACjF,UAAI,QAAQ,cAAc;AAAW,eAAO,UAAU,QAAQ,QAAQ,SAAS;AAC/E,aAAO,UAAU,SAAS;AAAA,IAC5B;AACA,WAAO,KAAK,UAAU,CAAC;AAAA,EACzB;AAAA,EAEA,YAAY,GAAwB;AAClC,eAAW,CAAE,KAAK,KAAM,KAAK,OAAO,QAAQ,CAAC,GAAG;AAC9C,YAAM,SAAS,QAAS,GAAI;AAC5B,UAAI,OAAO,UAAU,UAAU;AAC7B,cAAM,UAAU,KAAK,YAAY,QAAQ,CAAC,WAAW;AACnD,iBAAO,UAAU,IAAI,OAAO,QAAQ;AACpC,gBAAM,QAAQ,SAAS,cAAc,OAAO;AAC5C,gBAAM,cAAc;AACpB,gBAAMA,gBAAe,IAAI,sBAAqB;AAC9C,iBAAO,OAAO,OAAOA,aAAY;AAAA,QACnC,CAAC;AACD,cAAM,eAAe,QAAQ,cAAoC,cAAc;AAC/E,YAAI,iBAAiB,MAAM;AACzB,uBAAa,OAAO,KAAK;AAAA,QAC3B;AAAA,MAEF,OAAO;AACL,cAAM,UAAU,KAAK,YAAY,QAAQ,CAAC,WAAW;AACnD,iBAAO,UAAU,IAAI,KAAK;AAC1B,gBAAM,QAAQ,SAAS,cAAc,OAAO;AAC5C,gBAAM,cAAc;AACpB,gBAAMA,gBAAe,SAAS,cAAc,KAAK;AACjD,UAAAA,cAAa,cAAc,KAAK,YAAY,KAAK;AACjD,iBAAO,OAAO,OAAOA,aAAY;AAAA,QACnC,CAAC;AACD,cAAM,eAAe,QAAQ,cAAc,KAAK;AAChD,YAAI,iBAAiB,MAAM;AACzB;AAAA,QACF,OAAO;AACL,uBAAa,YAAY,KAAK,YAAY,KAAK;AAAA,QACjD;AAAA,MACF;AAAA,IACF;AAAA,EAQF;AAAA,EAEA,YAAY,MAAc,MAAmD;AAG3E,UAAM,UAAU,KAAK,QAAQ,eAAe,IAAI;AAChD,QAAI,YAAY;AAAM,aAAO;AAE7B,UAAM,iBAAiB,SAAS,cAAc,KAAK;AACnD,mBAAe,KAAK;AACpB,QAAI;AAAM,WAAK,cAAc;AAC7B,SAAK,WAAW,OAAO,cAAc;AACrC,WAAO;AAAA,EACT;AAAA,EAEA,OAAO,OAA4B;AACjC,QAAI,KAAK,kBAAkB,QAAW;AACpC,WAAK,YAAY,KAAK;AAAA,IACxB,OAAO;AACL,WAAK,YAAY,kBAAkB,KAAK,eAAe,KAAK,CAAC;AAAA,IAC/D;AACA,SAAK,gBAAgB;AAAA,EACvB;AACF;AAEA,eAAe,OAAO,gBAAgB,oBAAoB;","names":["valueElement"]}