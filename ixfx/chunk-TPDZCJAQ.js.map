{"version":3,"sources":["../src/IterableSync.ts"],"sourcesContent":["import { type ToString, toStringDefault } from './Util.js';\nimport { type IsEqual } from './IsEqual.js';\n\nexport { slice } from './iterable/SliceSync.js';\n\n/**\n * Filters the `input` iterable, only yielding unique values. Use {@link unique} to compare\n * by object reference instead.\n * \n * ```js\n * const d = ['a', 'b', 'c', 'b', 'd' ];\n * for (const v of uniqueByValue(d)) {\n *  // Yields: 'a', 'b', 'c', 'd'\n * // (extra 'b' is skipped)\n * }\n * ```\n * \n * By default, JSON.stringify is used to create a string representing value. These are added\n * to a Set of strings, which is how we keep track of uniqueness. If the value is already a string it is used as-is.\n * \n * This allows you to have custom logic for what determines uniqueness. Eg, using a single field\n * of an object as an identifier:\n * \n * ```js\n * const people = [\n *  { name: `Mary`, size: 20 }, { name: `Abdul`, size: 19 }, { name: `Mary`, size: 5 }\n * ]\n * for (const v of uniqueByValue(d, v=>v.name)) {\n *  // Yields: { name: `Mary`, size: 20 }, { name: `Abdul`, size: 19 }\n *  // Second 'Mary' is skipped because name is the same, even though size field is different.\n * }\n * ```\n * \n * If you want to keep track of the set of keys, or prime it with some existing data, provide a Set instance:\n * ```js\n * const unique = new Set();\n * unique.add(`b`);\n * const d = [`a`, `b`, `c`];\n * for (const v of uniqueByValue(d, toStringDefault, unique)) {\n *  // Yields: `a`, `c`\n *  // `b` is skipped because it was already in set\n * }\n * // After completion, `unique` contains `a`, `b` and `c`.\n * ```\n * \n * Creating your own Set is useful for tracking unique values across several calls to `uniqueByValue`.\n * @param input \n * @param seen \n * @param toString \n */\nexport function* uniqueByValue<T>(input: Iterable<T>, toString: ToString<T> = toStringDefault, seen: Set<string> = new Set<string>()): Generator<T> {\n  for (const v of input) {\n    const key = toString(v);\n    if (seen.has(key)) continue;\n    seen.add(key);\n    yield v;\n  }\n}\n\n/**\n * Returns a function that yields a value from a generator.\n * ```js\n * const spring = yieldNumber(Oscillators.spring());\n *\n * spring(); // latest value\n * ```\n *\n * Instead of:\n * ```js\n * const spring = Oscillators.spring();\n *\n * spring.next().value\n * ```\n *\n * A `defaultValue` can be provided if the source generator returns undefined:\n * ```js\n * const spring = yieldNumber(Oscillators.spring(), 0);\n * spring(); // Returns 0 if the generator returns undefined\n * ```\n * @param generator\n * @param defaultValue\n * @returns\n */\nexport function yieldNumber(\n  generator: Generator<number>,\n  defaultValue?: number\n) {\n\n  return (): number | undefined => {\n    const v: number | undefined = generator.next().value as number | undefined;\n    if (v === undefined) return defaultValue;\n    return v;\n  };\n}\n\n/**\n * Return first value from an iterable, or _undefined_ if\n * no values are generated\n * @param it\n * @returns\n */\nexport function first<V>(it: Iterable<V>): V | undefined {\n  for (const value of it) {\n    return value;\n  }\n}\n\n/**\n * Returns last value from an iterable, or _undefined_\n * if no values are generated\n * @param it\n */\nexport function last<V>(it: Iterable<V>): V | undefined {\n  //eslint-disable-next-line functional/no-let\n  let returnValue: V | undefined;\n  for (const value of it) {\n    returnValue = value;\n  }\n  return returnValue;\n}\n\n/**\n * Yields chunks of the iterable `it` such that the end of a chunk is the\n * start of the next chunk.\n *\n * Eg, with the input [1,2,3,4,5] and a size of 2, we would get back\n * [1,2], [2,3], [3,4], [4,5].\n *\n *\n * @param it\n * @param size\n * @returns\n */\nexport function* chunksOverlapping<V>(it: Iterable<V>, size: number) {\n  if (size <= 1) throw new Error(`Size should be at least 2`);\n\n  //eslint-disable-next-line functional/no-let\n  let buffer: Array<V> = [];\n\n  for (const v of it) {\n    //eslint-disable-next-line functional/immutable-data\n    buffer.push(v);\n    if (buffer.length === size) {\n      yield buffer;\n      //eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n      buffer = [ buffer.at(-1)! ];\n    }\n  }\n  if (buffer.length <= 1) return;\n\n  if (buffer.length > 0) yield buffer;\n}\n\n/**\n * Breaks an iterable into array chunks\n * ```js\n * chunks([1,2,3,4,5,6,7,8,9,10], 3);\n * // Yields [[1, 2, 3], [4, 5, 6], [7, 8, 9], [10]]\n * ```\n * @param it\n * @param size\n */\n//eslint-disable-next-line func-style\nexport function* chunks<V>(it: Iterable<V>, size: number) {\n  //eslint-disable-next-line functional/no-let\n  let buffer = [];\n\n  for (const v of it) {\n    //eslint-disable-next-line functional/immutable-data\n    buffer.push(v);\n    if (buffer.length === size) {\n      yield buffer;\n      buffer = [];\n    }\n  }\n  if (buffer.length > 0) yield buffer;\n}\n\n/**\n * Return concatenation of iterators\n * @param its\n */\n//eslint-disable-next-line func-style\nexport function* concat<V>(...its: ReadonlyArray<Iterable<V>>) {\n  for (const it of its) yield* it;\n}\n\n/**\n * Drops elements that do not meet the predicate `f`.\n * ```js\n * dropWhile([1, 2, 3, 4], e => e < 3);\n * returns [3, 4]\n * ```\n * @param it\n * @param f\n */\n//eslint-disable-next-line func-style\nexport function* dropWhile<V>(it: Iterable<V>, f: (v: V) => boolean) {\n  for (const v of it) {\n    if (!f(v)) {\n      yield v;\n      break;\n    }\n  }\n  yield* it;\n}\n\n/**\n * Returns true if items in two iterables are equal, as\n * determined by the `equality` function.\n * @param it1\n * @param it2\n * @param equality\n * @returns\n */\n//eslint-disable-next-line func-style\nexport function equals<V>(\n  it1: IterableIterator<V>,\n  it2: IterableIterator<V>,\n  equality?: IsEqual<V>\n) {\n  //it1 = it1[Symbol.iterator]();\n  //it2 = it2[Symbol.iterator]();\n  // eslint-disable-next-line no-constant-condition\n  while (true) {\n    const index1 = it1.next(),\n      index2 = it2.next();\n    if (equality !== undefined) {\n      if (!equality(index1.value, index2.value)) return false;\n    } else if (index1.value !== index2.value) return false;\n    if (index1.done ?? index2.done) return index1.done && index2.done;\n  }\n}\n\n/**\n * Returns true if `f` returns true for\n * every item in iterable\n * @param it\n * @param f\n * @returns\n */\n//eslint-disable-next-line func-style\nexport function every<V>(it: Iterable<V>, f: (v: V) => boolean) {\n  // https://surma.github.io/underdash/\n  //eslint-disable-next-line functional/no-let\n  let ok = true;\n\n  for (const v of it) ok = ok && f(v);\n  return ok;\n}\n\n/**\n * Yields `v` for each item within `it`.\n *\n * ```js\n * fill([1, 2, 3], 0);\n * // Yields: [0, 0, 0]\n * ```\n * @param it\n * @param v\n */\n//eslint-disable-next-line func-style\nexport function* fill<V>(it: Iterable<V>, v: V) {\n  // https://surma.github.io/underdash/\n\n  //eslint-disable-next-line @typescript-eslint/no-unused-vars\n  for (const _ of it) yield v;\n}\n\n/**\n * Execute function `f` for each item in iterable\n * @param it\n * @param f\n */\n//eslint-disable-next-line func-style\nexport function forEach<V>(it: Iterable<V>, f: (v: V) => boolean) {\n  // https://surma.github.io/underdash/\n\n  for (const v of it) f(v);\n}\n\n/**\n * ```js\n * filter([1, 2, 3, 4], e => e % 2 == 0);\n * returns [2, 4]\n * ```\n * @param it\n * @param f\n */\n//eslint-disable-next-line func-style\nexport function* filter<V>(it: Iterable<V>, f: (v: V) => boolean) {\n  // https://surma.github.io/underdash/\n\n  for (const v of it) {\n    if (!f(v)) continue;\n    yield v;\n  }\n}\n\n/**\n * Returns first item from iterable `it` that matches predicate `f`\n * ```js\n * find([1, 2, 3, 4], e => e > 2);\n * // Yields: 3\n * ```\n * @param it\n * @param f\n * @returns\n */\n//eslint-disable-next-line func-style\nexport function find<V>(it: Iterable<V>, f: (v: V) => boolean) {\n  // https://surma.github.io/underdash/\n\n  for (const v of it) {\n    if (f(v)) return v;\n  }\n}\n\n/**\n * Returns a 'flattened' copy of array, un-nesting arrays one level\n * ```js\n * flatten([1, [2, 3], [[4]]]);\n * // Yields: [1, 2, 3, [4]];\n * ```\n * @param it\n */\n//eslint-disable-next-line func-style\nexport function* flatten<V>(it: Iterable<V>) {\n  // https://surma.github.io/underdash/\n\n  for (const v of it) {\n    //eslint-disable-next-line @typescript-eslint/no-explicit-any\n    if (Symbol.iterator in (v as any)) {\n      // @ts-expect-error\n      yield* v;\n    } else {\n      yield v;\n    }\n  }\n}\n\n/**\n * Maps an iterable of type `V` to type `X`.\n * ```js\n * map([1, 2, 3], e => e*e)\n * returns [1, 4, 9]\n * ```\n * @param it\n * @param f\n */\n//eslint-disable-next-line func-style\nexport function* map<V, X>(it: Iterable<V>, f: (v: V) => X) {\n  // https://surma.github.io/underdash/\n\n  for (const v of it) {\n    yield f(v);\n  }\n}\n\n/**\n * Returns the maximum seen of an iterable\n * ```js\n * min([\n *  {i:0,v:1},\n *  {i:1,v:9},\n *  {i:2,v:-2}\n * ], (a, b) => a.v > b.v);\n * // Yields: {i:1, v:-9}\n * ```\n * @param it Iterable\n * @param gt Should return _true_ if `a` is greater than `b`.\n * @returns\n */\n//eslint-disable-next-line func-style\nexport function max<V>(it: Iterable<V>, gt = (a: V, b: V) => a > b) {\n  // https://surma.github.io/underdash/\n  //eslint-disable-next-line functional/no-let\n  let max;\n\n  for (const v of it) {\n    if (!max) {\n      max = v;\n      continue;\n    }\n    max = gt(max, v) ? max : v;\n  }\n  return max;\n}\n\n/**\n * Returns the minimum seen of an iterable\n * ```js\n * min([\n *  {i:0,v:1},\n *  {i:1,v:9},\n *  {i:2,v:-2}\n * ], (a, b) => a.v > b.v);\n * // Yields: {i:2, v:-2}\n * ```\n * @param it Iterable\n * @param gt Should return _true_ if `a` is greater than `b`.\n * @returns\n */\n//eslint-disable-next-line func-style\nexport function min<V>(it: Iterable<V>, gt = (a: V, b: V) => a > b) {\n  // https://surma.github.io/underdash/\n  //eslint-disable-next-line functional/no-let\n  let min;\n\n  for (const v of it) {\n    if (!min) {\n      min = v;\n      continue;\n    }\n    min = gt(min, v) ? v : min;\n  }\n  return min;\n}\n\n/**\n * Returns count from `start` for a given length\n * ```js\n * range(-5, 10);\n * // Yields: [-5, -4, -3, -2, -1, 0, 1, 2, 3, 4]\n * ```\n * @param start Start\n * @param length Length\n */\n//eslint-disable-next-line func-style\nexport function* range(start: number, length: number) {\n  // https://surma.github.io/underdash/\n  //eslint-disable-next-line functional/no-let\n  for (let index = 0; index < length; index++) {\n    yield start++;\n  }\n  //for (let i=len;len > 0; len--) yield start++;\n}\n\n/**\n * Reduce for iterables\n * ```js\n * reduce([1, 2, 3], (acc, cur) => acc + cur, 0);\n * // Yields: 6\n * ```\n * @param it Iterable\n * @param f Function\n * @param start Start value\n * @returns\n */\n//eslint-disable-next-line func-style\nexport function reduce<V>(\n  it: Iterable<V>,\n  f: (accumulator: V, current: V) => V,\n  start: V\n) {\n  // https://surma.github.io/underdash/\n\n  for (const v of it) start = f(start, v);\n  return start;\n}\n\n\n/**\n * Returns true the first time `f` returns true. Useful for spotting any occurrence of\n * data, and exiting quickly\n * ```js\n * some([1, 2, 3, 4], e => e % 3 === 0);\n * // Yields: true\n * ```\n * @param it Iterable\n * @param f Filter function\n * @returns\n */\n//eslint-disable-next-line func-style\nexport function some<V>(it: Iterable<V>, f: (v: V) => boolean) {\n  // https://surma.github.io/underdash/\n\n  for (const v of it) {\n    if (f(v)) return true;\n  }\n  return false;\n}\n\n/**\n * Returns items for which the filter function returns _true_\n * ```js\n * takeWhile([ 1, 2, 3, 4 ], e => e < 3);\n * // Yields: [ 1, 2 ]\n * ```\n * @param it Iterable\n * @param f Filter function\n * @returns\n */\n//eslint-disable-next-line func-style\nexport function* takeWhile<V>(it: Iterable<V>, f: (v: V) => boolean) {\n  // https://surma.github.io/underdash/\n\n  for (const v of it) {\n    if (!f(v)) return;\n    yield v;\n  }\n}\n\n/**\n * Returns unique items from an iterable or\n * array of iterables.\n *\n * ```js\n * const data = [ 'apples', 'oranges' ]\n * const data2 = [ 'oranges', 'pears' ]\n * const unique = [...unique([data,data2]];\n * // Yields: [ 'apples', 'oranges', 'pears' ]\n * ```\n *\n * Uses object reference to compare values.\n * Use {@link uniqueByValue} if this doesn't suffice.\n * @param iterable Iterable, or array of iterables\n */\nexport function* unique<V>(\n  iterable: Iterable<V> | Array<Iterable<V>>\n) {\n  // Adapted from https://surma.github.io/underdash/\n  const buffer: Array<any> = [];\n  let itera: Array<Iterable<V>> = [];\n  itera = Array.isArray(iterable) ? iterable : [ iterable ];\n  for (const it of itera) {\n    for (const v of it) {\n      if (buffer.includes(v)) continue;\n      buffer.push(v);\n      yield v;\n    }\n  }\n}\n\n/**\n * Combine same-positioned items from several iterables\n * ```js\n * zip( [1, 2, 3], [4, 5, 6], [7, 8, 9] );\n * Yields: [ [1, 4, 7], [2, 5, 8], [3, 6, 9] ]\n * ```\n * @param its\n * @returns\n */\n//eslint-disable-next-line func-style\nexport function* zip<V>(...its: ReadonlyArray<Iterable<V>>) {\n  // https://surma.github.io/underdash/\n  const iits = its.map((it) => it[ Symbol.iterator ]());\n\n  while (true) {\n    const vs = iits.map((it) => it.next());\n    if (vs.some((v) => v.done)) return;\n    yield vs.map((v) => v.value as V);\n  }\n}\n"],"mappings":"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","names":["max","min"]}