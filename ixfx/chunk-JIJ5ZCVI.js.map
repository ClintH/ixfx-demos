{"version":3,"sources":["../src/numbers/NumericArrays.ts"],"sourcesContent":["/**\n * Applies a function `fn` to the elements of an array, weighting them based on their relative position.\n *\n * ```js\n * import { Numbers } from 'https://unpkg.com/ixfx/dist/numbers.js';\n *\n * // Six items\n * Numbers.weight([1,1,1,1,1,1], Easings.gaussian());\n *\n * // Yields:\n * // [0.02, 0.244, 0.85, 0.85, 0.244, 0.02]\n * ```\n *\n * `fn` is expected to map (0..1) => (0..1), such as an {@link Modulation.Easings.EasingFn}. The input to the\n * `fn` is the relative position of an element. Thus the first element will be 0, the middle 0.5 and so on.\n * The output of `fn` is then multiplied by the original value.\n *\n * In the below example (which is also the default if `fn` is not specified), the relative position is\n * how values are weighted:\n *\n * ```js\n * Numbers.weight([1,1,1,1,1,1], (relativePos) => relativePos);\n * // Yields:\n * // [0, 0.2, 0.4, 0.6, 0.8, 1]\n * ```\n *\n * Non-numbers in `data` will be silently ignored (this filtering happens first, so relative index values are sane still).\n *\n * @param data Array of numbers\n * @param fn Returns a weighting based on the given relative position. If unspecified, `(x) => x` is used.\n */\nexport const weight = (\n  data: Array<number> | ReadonlyArray<number>,\n  fn?: (relativePos: number) => number\n): Array<number> => {\n  const f = fn ?? ((x: number) => x);\n  return validNumbers(data).map(\n    (v: number, index: number) => v * f(index / (validNumbers.length - 1))\n  );\n};\n\n/**\n * Returns an array of all valid numbers from `data`\n *\n * @param data\n * @returns\n */\nexport const validNumbers = (data: ReadonlyArray<number>) =>\n  data.filter((d) => typeof d === `number` && !Number.isNaN(d));\n\n/**\n * Returns the dot product of arbitrary-sized arrays. Assumed they are of the same length.\n * @param values\n * @returns\n */\nexport const dotProduct = (\n  values: ReadonlyArray<ReadonlyArray<number>>\n): number => {\n  let r = 0;\n  const length = values[ 0 ].length;\n\n  for (let index = 0; index < length; index++) {\n    let t = 0;\n    for (const [ p, value ] of values.entries()) {\n      if (p === 0) t = value[ index ];\n      else {\n        t *= value[ index ];\n      }\n    }\n    r += t;\n  }\n  return r;\n};\n\n/**\n * Calculates the average of all numbers in an array.\n * Array items which aren't a valid number are ignored and do not factor into averaging.\n *\n * Use {@link minMaxAvg} if you want min, max and total as well.\n *\n * @example\n * ```\n * import { Numbers } from 'https://unpkg.com/ixfx/dist/numbers.js';\n *\n * // Average of a list\n * const avg = Numbers.average([1, 1.4, 0.9, 0.1]);\n *\n * // Average of a variable\n * let data = [100,200];\n * Arrays.average(data);\n * ```\n *\n * See also: {@link Numbers.average} which takes a list of parameters\n * @param data Data to average.\n * @returns Average of array\n */\nexport const average = (data: ReadonlyArray<number>): number => {\n  // âœ” UNIT TESTED\n  if (data === undefined) throw new Error(`data parameter is undefined`);\n  const valid = validNumbers(data);\n  const total = valid.reduce((accumulator, v) => accumulator + v, 0);\n  return total / valid.length;\n};\n\n/**\n * Returns the minimum number out of `data`.\n * Undefined and non-numbers are silently ignored.\n *\n * ```js\n * import { Numbers } from 'https://unpkg.com/ixfx/dist/Numbers.js';\n * Numbers.min([10, 20, 0]); // Yields 0\n * ```\n * @param data\n * @returns Minimum number\n */\nexport const min = (data: ReadonlyArray<number>): number =>\n  Math.min(...validNumbers(data));\n\n/**\n * Returns the index of the largest value.\n * ```js\n * import { Numbers } from 'https://unpkg.com/ixfx/dist/Numbers.js';\n * const v = [ 10, 40, 5 ];\n * Numbers.maxIndex(v); // Yields 1\n * ```\n * @param data Array of numbers\n * @returns Index of largest value\n */\nexport const maxIndex = (data: ReadonlyArray<number>): number =>\n  // eslint-disable-next-line unicorn/no-array-reduce\n  data.reduce(\n    (bestIndex, value, index, array) =>\n      value > array[ bestIndex ] ? index : bestIndex,\n    0\n  );\n\n/**\n * Returns the index of the smallest value.\n *\n * ```js\n * import { Numbers } from 'https://unpkg.com/ixfx/dist/Numbers.js';\n * const v = [ 10, 40, 5 ];\n * Numbers.minIndex(v); // Yields 2\n * ```\n * @param data Array of numbers\n * @returns Index of smallest value\n */\nexport const minIndex = (...data: ReadonlyArray<number>): number =>\n  // eslint-disable-next-line unicorn/no-array-reduce\n  data.reduce(\n    (bestIndex, value, index, array) =>\n      value < array[ bestIndex ] ? index : bestIndex,\n    0\n  );\n\n/**\n * Returns the maximum number out of `data`.\n * Undefined and non-numbers are silently ignored.\n *\n * ```js\n * import { Numbers } from 'https://unpkg.com/ixfx/dist/numbers.js';\n * Numbers.max(100, 200, 50); // 200\n * ```\n * @param data List of numbers\n * @returns Maximum number\n */\nexport const max = (data: ReadonlyArray<number>): number =>\n  Math.max(...validNumbers(data));\n\n/**\n * Returns the total of `data`.\n * Undefined and non-numbers are silently ignored.\n *\n * ```js\n * import { Numbers } from 'https://unpkg.com/ixfx/dist/numbers.js';\n * Numbers.total([1, 2, 3]); // 6\n * ```\n * @param data Array of numbers\n * @returns Total\n */\nexport const total = (data: ReadonlyArray<number>): number =>\n  // eslint-disable-next-line unicorn/no-array-reduce\n  data.reduce((previous, current) => {\n    if (typeof current !== `number`) return previous;\n    if (Number.isNaN(current)) return previous;\n    if (Number.isFinite(current)) return previous;\n    return previous + current;\n  }, 0);\n\n/**\n * Returns the maximum out of `data` without pre-filtering for speed.\n *\n * For most uses, {@link max} should suffice.\n *\n * ```js\n * import { Numbers } from 'https://unpkg.com/ixfx/dist/numbers.js';\n * Numbers.maxFast([ 10, 0, 4 ]); // 10\n * ```\n * @param data\n * @returns Maximum\n */\n//eslint-disable-next-line functional/prefer-immutable-types\nexport const maxFast = (data: ReadonlyArray<number> | Float32Array): number => {\n  //eslint-disable-next-line functional/no-let\n  let m = Number.MIN_SAFE_INTEGER;\n  //eslint-disable-next-line functional/no-let\n  for (const datum of data) {\n    m = Math.max(m, datum);\n  }\n  return m;\n};\n\n/**\n * Returns the total of `data` without pre-filtering for speed.\n *\n * For most uses, {@link total} should suffice.\n *\n * ```js\n * import { Numbers } from 'https://unpkg.com/ixfx/dist/numbers.js';\n * Numbers.totalFast([ 10, 0, 4 ]); // 14\n * ```\n * @param data\n * @returns Maximum\n */\n//eslint-disable-next-line functional/prefer-immutable-types\nexport const totalFast = (data: ReadonlyArray<number> | Float32Array): number => {\n  //eslint-disable-next-line functional/no-let\n  let m = 0;\n  //eslint-disable-next-line functional/no-let\n  for (const datum of data) {\n    m += datum;\n  }\n  return m;\n};\n\n/**\n * Returns the maximum out of `data` without pre-filtering for speed.\n *\n * For most uses, {@link max} should suffice.\n *\n * ```js\n * import { Numbers } from 'https://unpkg.com/ixfx/dist/numbers.js';\n * Numbers.minFast([ 10, 0, 100 ]); // 0\n * ```\n * @param data\n * @returns Maximum\n */\n//eslint-disable-next-line functional/prefer-immutable-types\nexport const minFast = (data: ReadonlyArray<number> | Float32Array): number => {\n  //eslint-disable-next-line functional/no-let\n  let m = Number.MIN_SAFE_INTEGER;\n  //eslint-disable-next-line functional/no-let\n  for (const datum of data) {\n    m = Math.min(m, datum);\n  }\n  return m;\n};\n"],"mappings":";AA+BO,IAAM,SAAS,CACpB,MACA,OACkB;AAClB,QAAM,IAAI,OAAO,CAAC,MAAc;AAChC,SAAO,aAAa,IAAI,EAAE;AAAA,IACxB,CAAC,GAAW,UAAkB,IAAI,EAAE,SAAS,aAAa,SAAS,EAAE;AAAA,EACvE;AACF;AAQO,IAAM,eAAe,CAAC,SAC3B,KAAK,OAAO,CAAC,MAAM,OAAO,MAAM,YAAY,CAAC,OAAO,MAAM,CAAC,CAAC;AAOvD,IAAM,aAAa,CACxB,WACW;AACX,MAAI,IAAI;AACR,QAAM,SAAS,OAAQ,CAAE,EAAE;AAE3B,WAAS,QAAQ,GAAG,QAAQ,QAAQ,SAAS;AAC3C,QAAI,IAAI;AACR,eAAW,CAAE,GAAG,KAAM,KAAK,OAAO,QAAQ,GAAG;AAC3C,UAAI,MAAM,EAAG,KAAI,MAAO,KAAM;AAAA,WACzB;AACH,aAAK,MAAO,KAAM;AAAA,MACpB;AAAA,IACF;AACA,SAAK;AAAA,EACP;AACA,SAAO;AACT;AAwBO,IAAM,UAAU,CAAC,SAAwC;AAE9D,MAAI,SAAS,OAAW,OAAM,IAAI,MAAM,6BAA6B;AACrE,QAAM,QAAQ,aAAa,IAAI;AAC/B,QAAMA,SAAQ,MAAM,OAAO,CAAC,aAAa,MAAM,cAAc,GAAG,CAAC;AACjE,SAAOA,SAAQ,MAAM;AACvB;AAaO,IAAM,MAAM,CAAC,SAClB,KAAK,IAAI,GAAG,aAAa,IAAI,CAAC;AAYzB,IAAM,WAAW,CAAC;AAAA;AAAA,EAEvB,KAAK;AAAA,IACH,CAAC,WAAW,OAAO,OAAO,UACxB,QAAQ,MAAO,SAAU,IAAI,QAAQ;AAAA,IACvC;AAAA,EACF;AAAA;AAaK,IAAM,WAAW,IAAI;AAAA;AAAA,EAE1B,KAAK;AAAA,IACH,CAAC,WAAW,OAAO,OAAO,UACxB,QAAQ,MAAO,SAAU,IAAI,QAAQ;AAAA,IACvC;AAAA,EACF;AAAA;AAaK,IAAM,MAAM,CAAC,SAClB,KAAK,IAAI,GAAG,aAAa,IAAI,CAAC;AAazB,IAAM,QAAQ,CAAC;AAAA;AAAA,EAEpB,KAAK,OAAO,CAAC,UAAU,YAAY;AACjC,QAAI,OAAO,YAAY,SAAU,QAAO;AACxC,QAAI,OAAO,MAAM,OAAO,EAAG,QAAO;AAClC,QAAI,OAAO,SAAS,OAAO,EAAG,QAAO;AACrC,WAAO,WAAW;AAAA,EACpB,GAAG,CAAC;AAAA;AAeC,IAAM,UAAU,CAAC,SAAuD;AAE7E,MAAI,IAAI,OAAO;AAEf,aAAW,SAAS,MAAM;AACxB,QAAI,KAAK,IAAI,GAAG,KAAK;AAAA,EACvB;AACA,SAAO;AACT;AAeO,IAAM,YAAY,CAAC,SAAuD;AAE/E,MAAI,IAAI;AAER,aAAW,SAAS,MAAM;AACxB,SAAK;AAAA,EACP;AACA,SAAO;AACT;AAeO,IAAM,UAAU,CAAC,SAAuD;AAE7E,MAAI,IAAI,OAAO;AAEf,aAAW,SAAS,MAAM;AACxB,QAAI,KAAK,IAAI,GAAG,KAAK;AAAA,EACvB;AACA,SAAO;AACT;","names":["total"]}