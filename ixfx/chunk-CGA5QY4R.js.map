{"version":3,"sources":["../src/geometry/point/Guard.ts","../src/geometry/line/FromPoints.ts","../src/geometry/line/FromNumbers.ts"],"sourcesContent":["import type { Point, Point3d } from \"./PointType.js\";\nimport { throwNumberTest } from '../../util/GuardNumbers.js';\n\n/**\n * Returns true if p.x and p.y === null\n * @param p\n * @returns\n */\nexport const isNull = (p: Point) => p.x === null && p.y === null;\n\n/***\n * Returns true if p.x or p.y isNaN\n */\nexport const isNaN = (p: Point) => Number.isNaN(p.x) || Number.isNaN(p.y);\n\n\n/**\n * Throws an error if point is invalid\n * @param p\n * @param name\n */\nexport function guard(p: Point, name = `Point`) {\n  if (p === undefined) {\n    throw new Error(\n      `'${ name }' is undefined. Expected {x,y} got ${ JSON.stringify(p) }`\n    );\n  }\n  if (p === null) {\n    throw new Error(\n      `'${ name }' is null. Expected {x,y} got ${ JSON.stringify(p) }`\n    );\n  }\n  if (p.x === undefined) {\n    throw new Error(\n      `'${ name }.x' is undefined. Expected {x,y} got ${ JSON.stringify(p) }`\n    );\n  }\n  if (p.y === undefined) {\n    throw new Error(\n      `'${ name }.y' is undefined. Expected {x,y} got ${ JSON.stringify(p) }`\n    );\n  }\n  if (typeof p.x !== `number`) {\n    // eslint-disable-next-line @typescript-eslint/restrict-template-expressions\n    throw new TypeError(`'${ name }.x' must be a number. Got ${ p.x }`);\n  }\n  if (typeof p.y !== `number`) {\n    // eslint-disable-next-line @typescript-eslint/restrict-template-expressions\n    throw new TypeError(`'${ name }.y' must be a number. Got ${ p.y }`);\n  }\n\n  if (p.x === null) throw new Error(`'${ name }.x' is null`);\n  if (p.y === null) throw new Error(`'${ name }.y' is null`);\n\n  if (Number.isNaN(p.x)) throw new Error(`'${ name }.x' is NaN`);\n  if (Number.isNaN(p.y)) throw new Error(`'${ name }.y' is NaN`);\n}\n\n/**\n * Throws if parameter is not a valid point, or either x or y is 0\n * @param pt\n * @returns\n */\nexport const guardNonZeroPoint = (pt: Point | Point3d, name = `pt`) => {\n  guard(pt, name);\n  throwNumberTest(pt.x, `nonZero`, `${ name }.x`);\n  throwNumberTest(pt.y, `nonZero`, `${ name }.y`);\n  if (typeof pt.z !== `undefined`) {\n    throwNumberTest(pt.z, `nonZero`, `${ name }.z`);\n  }\n\n  return true;\n};\n\n// eslint-disable-next-line @typescript-eslint/no-redundant-type-constituents\nexport function isPoint(p: number | unknown): p is Point {\n  if (p === undefined) return false;\n  if (p === null) return false;\n  if ((p as Point).x === undefined) return false;\n  if ((p as Point).y === undefined) return false;\n  return true;\n}\n\n// eslint-disable-next-line @typescript-eslint/no-redundant-type-constituents\nexport const isPoint3d = (p: Point | unknown): p is Point3d => {\n  if (p === undefined) return false;\n  if (p === null) return false;\n  if ((p as Point3d).x === undefined) return false;\n  if ((p as Point3d).y === undefined) return false;\n  if ((p as Point3d).z === undefined) return false;\n  return true;\n};\n\n/**\n * Returns true if both x and y is 0.\n * Use `Points.Empty` to return an empty point.\n * @param p\n * @returns\n */\nexport const isEmpty = (p: Point) => p.x === 0 && p.y === 0;\n\n/**\n * Returns true if point is a placeholder, where both x and y\n * are `NaN`.\n *\n * Use Points.Placeholder to return a placeholder point.\n * @param p\n * @returns\n */\nexport const isPlaceholder = (p: Point) =>\n  Number.isNaN(p.x) && Number.isNaN(p.y);\n","import type { Point } from \"../point/PointType.js\";\nimport type { Line } from \"./LineType.js\";\nimport { guard as guardPoint } from '../point/Guard.js';\n\n/**\n * Returns a line from two points\n * \n * ```js\n * import { Lines } from 'https://unpkg.com/ixfx/dist/geometry.js'\n * // Line from 0,1 to 10,15\n * const line = Lines.fromPoints( { x:0, y:1 }, { x:10, y:15 });\n * // line is: { a: { x: 0, y: 1}, b: { x: 10, y: 15 } };\n * ```\n * @param a Start point\n * @param b End point\n * @returns \n */\nexport const fromPoints = (a: Point, b: Point): Line => {\n  guardPoint(a, `a`);\n  guardPoint(b, `b`);\n  a = Object.freeze({ ...a });\n  b = Object.freeze({ ...b });\n  return Object.freeze({\n    a: a,\n    b: b\n  });\n};\n\n","import { fromPoints } from \"./FromPoints.js\";\nimport type { Line } from \"./LineType.js\";\n\n/**\n * Returns a line from a basis of coordinates (x1, y1, x2, y2)\n * \n * ```js\n * import { Lines } from 'https://unpkg.com/ixfx/dist/geometry.js'\n * // Line from 0,1 -> 10,15\n * Lines.fromNumbers(0, 1, 10, 15);\n * ```\n * @param x1 \n * @param y1 \n * @param x2 \n * @param y2 \n * @returns \n */\nexport const fromNumbers = (x1: number, y1: number, x2: number, y2: number): Line => {\n  if (Number.isNaN(x1)) throw new Error(`x1 is NaN`);\n  if (Number.isNaN(x2)) throw new Error(`x2 is NaN`);\n  if (Number.isNaN(y1)) throw new Error(`y1 is NaN`);\n  if (Number.isNaN(y2)) throw new Error(`y2 is NaN`);\n\n  const a = { x: x1, y: y1 };\n  const b = { x: x2, y: y2 };\n  return fromPoints(a, b);\n};"],"mappings":";;;;;AAQO,IAAM,SAAS,CAAC,MAAa,EAAE,MAAM,QAAQ,EAAE,MAAM;AAKrD,IAAM,QAAQ,CAAC,MAAa,OAAO,MAAM,EAAE,CAAC,KAAK,OAAO,MAAM,EAAE,CAAC;AAQjE,SAAS,MAAM,GAAU,OAAO,SAAS;AAC9C,MAAI,MAAM,QAAW;AACnB,UAAM,IAAI;AAAA,MACR,IAAK,IAAK,sCAAuC,KAAK,UAAU,CAAC,CAAE;AAAA,IACrE;AAAA,EACF;AACA,MAAI,MAAM,MAAM;AACd,UAAM,IAAI;AAAA,MACR,IAAK,IAAK,iCAAkC,KAAK,UAAU,CAAC,CAAE;AAAA,IAChE;AAAA,EACF;AACA,MAAI,EAAE,MAAM,QAAW;AACrB,UAAM,IAAI;AAAA,MACR,IAAK,IAAK,wCAAyC,KAAK,UAAU,CAAC,CAAE;AAAA,IACvE;AAAA,EACF;AACA,MAAI,EAAE,MAAM,QAAW;AACrB,UAAM,IAAI;AAAA,MACR,IAAK,IAAK,wCAAyC,KAAK,UAAU,CAAC,CAAE;AAAA,IACvE;AAAA,EACF;AACA,MAAI,OAAO,EAAE,MAAM,UAAU;AAE3B,UAAM,IAAI,UAAU,IAAK,IAAK,6BAA8B,EAAE,CAAE,EAAE;AAAA,EACpE;AACA,MAAI,OAAO,EAAE,MAAM,UAAU;AAE3B,UAAM,IAAI,UAAU,IAAK,IAAK,6BAA8B,EAAE,CAAE,EAAE;AAAA,EACpE;AAEA,MAAI,EAAE,MAAM,KAAM,OAAM,IAAI,MAAM,IAAK,IAAK,aAAa;AACzD,MAAI,EAAE,MAAM,KAAM,OAAM,IAAI,MAAM,IAAK,IAAK,aAAa;AAEzD,MAAI,OAAO,MAAM,EAAE,CAAC,EAAG,OAAM,IAAI,MAAM,IAAK,IAAK,YAAY;AAC7D,MAAI,OAAO,MAAM,EAAE,CAAC,EAAG,OAAM,IAAI,MAAM,IAAK,IAAK,YAAY;AAC/D;AAOO,IAAM,oBAAoB,CAAC,IAAqB,OAAO,SAAS;AACrE,QAAM,IAAI,IAAI;AACd,kBAAgB,GAAG,GAAG,WAAW,GAAI,IAAK,IAAI;AAC9C,kBAAgB,GAAG,GAAG,WAAW,GAAI,IAAK,IAAI;AAC9C,MAAI,OAAO,GAAG,MAAM,aAAa;AAC/B,oBAAgB,GAAG,GAAG,WAAW,GAAI,IAAK,IAAI;AAAA,EAChD;AAEA,SAAO;AACT;AAGO,SAAS,QAAQ,GAAiC;AACvD,MAAI,MAAM,OAAW,QAAO;AAC5B,MAAI,MAAM,KAAM,QAAO;AACvB,MAAK,EAAY,MAAM,OAAW,QAAO;AACzC,MAAK,EAAY,MAAM,OAAW,QAAO;AACzC,SAAO;AACT;AAGO,IAAM,YAAY,CAAC,MAAqC;AAC7D,MAAI,MAAM,OAAW,QAAO;AAC5B,MAAI,MAAM,KAAM,QAAO;AACvB,MAAK,EAAc,MAAM,OAAW,QAAO;AAC3C,MAAK,EAAc,MAAM,OAAW,QAAO;AAC3C,MAAK,EAAc,MAAM,OAAW,QAAO;AAC3C,SAAO;AACT;AAQO,IAAM,UAAU,CAAC,MAAa,EAAE,MAAM,KAAK,EAAE,MAAM;AAUnD,IAAM,gBAAgB,CAAC,MAC5B,OAAO,MAAM,EAAE,CAAC,KAAK,OAAO,MAAM,EAAE,CAAC;;;AC7FhC,IAAM,aAAa,CAAC,GAAU,MAAmB;AACtD,QAAW,GAAG,GAAG;AACjB,QAAW,GAAG,GAAG;AACjB,MAAI,OAAO,OAAO,EAAE,GAAG,EAAE,CAAC;AAC1B,MAAI,OAAO,OAAO,EAAE,GAAG,EAAE,CAAC;AAC1B,SAAO,OAAO,OAAO;AAAA,IACnB;AAAA,IACA;AAAA,EACF,CAAC;AACH;;;ACTO,IAAM,cAAc,CAAC,IAAY,IAAY,IAAY,OAAqB;AACnF,MAAI,OAAO,MAAM,EAAE,EAAG,OAAM,IAAI,MAAM,WAAW;AACjD,MAAI,OAAO,MAAM,EAAE,EAAG,OAAM,IAAI,MAAM,WAAW;AACjD,MAAI,OAAO,MAAM,EAAE,EAAG,OAAM,IAAI,MAAM,WAAW;AACjD,MAAI,OAAO,MAAM,EAAE,EAAG,OAAM,IAAI,MAAM,WAAW;AAEjD,QAAM,IAAI,EAAE,GAAG,IAAI,GAAG,GAAG;AACzB,QAAM,IAAI,EAAE,GAAG,IAAI,GAAG,GAAG;AACzB,SAAO,WAAW,GAAG,CAAC;AACxB;","names":[]}