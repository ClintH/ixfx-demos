{"version":3,"sources":["../src/data/arrays/Sort.ts"],"sourcesContent":["import { guardArray } from './GuardArray.js';\n/**\n * Sorts an array of objects in ascending order\n * by the given property name, assuming it is a number.\n *\n * ```js\n * const data = [\n *  { size: 10, colour: `red` },\n *  { size: 20, colour: `blue` },\n *  { size: 5, colour: `pink` }\n * ];\n * const sorted = Arrays.sortByNumericProperty(data, `size`);\n *\n * Yields items ascending order:\n * [ { size: 5, colour: `pink` }, { size: 10, colour: `red` }, { size: 20, colour: `blue` } ]\n * ```\n * @param data\n * @param propertyName\n */\nexport const sortByNumericProperty = <V, K extends keyof V>(\n  data: ReadonlyArray<V> | Array<V>,\n  propertyName: K\n) => [ ...data ].sort((a, b) => {\n  guardArray(data, `data`);\n  const av = a[ propertyName ];\n  const bv = b[ propertyName ];\n  if (av < bv) return -1;\n  if (av > bv) return 1;\n  return 0;\n});\n\nexport const sortByProperty = <V, K extends keyof V>(\n  data: ReadonlyArray<V> | Array<V>,\n  propertyName: K\n) => [ ...data ].sort((a, b) => {\n  guardArray(data, `data`);\n  const av = a[ propertyName ];\n  const bv = b[ propertyName ];\n  if (av < bv) return -1;\n  if (av > bv) return 1;\n  return 0;\n});"],"mappings":";;;;;AAmBO,IAAM,wBAAwB,CACnC,MACA,iBACG,CAAE,GAAG,IAAK,EAAE,KAAK,CAAC,GAAG,MAAM;AAC9B,aAAW,MAAM,MAAM;AACvB,QAAM,KAAK,EAAG,YAAa;AAC3B,QAAM,KAAK,EAAG,YAAa;AAC3B,MAAI,KAAK,GAAI,QAAO;AACpB,MAAI,KAAK,GAAI,QAAO;AACpB,SAAO;AACT,CAAC;AAEM,IAAM,iBAAiB,CAC5B,MACA,iBACG,CAAE,GAAG,IAAK,EAAE,KAAK,CAAC,GAAG,MAAM;AAC9B,aAAW,MAAM,MAAM;AACvB,QAAM,KAAK,EAAG,YAAa;AAC3B,QAAM,KAAK,EAAG,YAAa;AAC3B,MAAI,KAAK,GAAI,QAAO;AACpB,MAAI,KAAK,GAAI,QAAO;AACpB,SAAO;AACT,CAAC;","names":[]}