{"version":3,"sources":["../src/numbers/Quantise.ts","../src/numbers/LinearSpace.ts"],"sourcesContent":["import { integerTest, numberTest, throwFromResult } from \"../Guards.js\";\n\n/**\n * Rounds `v` by `every`. Middle values are rounded up by default.\n *\n * ```js\n * quantiseEvery(11, 10);  // 10\n * quantiseEvery(25, 10);  // 30\n * quantiseEvery(0, 10);   // 0\n * quantiseEvery(4, 10);   // 0\n * quantiseEvery(100, 10); // 100\n * ```\n *\n * @param v\n * @param every\n * @param middleRoundsUp\n * @returns\n */\nexport const quantiseEvery = (\n  v: number,\n  every: number,\n  middleRoundsUp = true\n) => {\n  // Unit tested!\n  throwFromResult(numberTest(v, ``, `v`));\n  throwFromResult(integerTest(every, ``, `every`));\n\n  //eslint-disable-next-line functional/no-let\n  let div = v / every;\n  const divModule = div % 1;\n  div = Math.floor(div);\n  if ((divModule === 0.5 && middleRoundsUp) || divModule > 0.5) div++;\n  return every * div;\n};","import { numberTest, throwFromResult } from \"../Guards.js\";\nimport { round } from \"./Round.js\";\n\n\n/**\n * Generates a `step`-length series of values between `start` and `end` (inclusive).\n * Each value will be equally spaced.\n *\n * ```js\n * for (const v of linearSpace(1, 5, 6)) {\n *  // Yields: [ 1, 1.8, 2.6, 3.4, 4.2, 5 ]\n * }\n * ```\n *\n * Numbers can be produced from large to small as well\n * ```js\n * const values = [...linearSpace(10, 5, 3)];\n * // Yields: [10, 7.5, 5]\n * ```\n * @param start Start number (inclusive)\n * @param end  End number (inclusive)\n * @param steps How many steps to make from start -> end\n * @param precision Number of decimal points to round to\n */\nexport function* linearSpace(\n  start: number,\n  end: number,\n  steps: number,\n  precision?: number\n): IterableIterator<number> {\n  throwFromResult(numberTest(start, ``, `start`));\n  throwFromResult(numberTest(end, ``, `end`));\n\n  throwFromResult(numberTest(steps, ``, `steps`));\n  const r = precision ? round(precision) : (v: number) => v;\n  const step = (end - start) / (steps - 1);\n\n  throwFromResult(numberTest(step, ``, `step`));\n  if (!Number.isFinite(step)) {\n    throw new TypeError(`Calculated step value is infinite`);\n  }\n\n  //eslint-disable-next-line functional/no-let\n  for (let index = 0; index < steps; index++) {\n    const v = start + step * index;\n    yield r(v);\n  }\n}\n"],"mappings":";;;;;;;;;;AAkBO,IAAM,gBAAgB,CAC3B,GACA,OACA,iBAAiB,SACd;AAEH,kBAAgB,WAAW,GAAG,IAAI,GAAG,CAAC;AACtC,kBAAgB,YAAY,OAAO,IAAI,OAAO,CAAC;AAG/C,MAAI,MAAM,IAAI;AACd,QAAM,YAAY,MAAM;AACxB,QAAM,KAAK,MAAM,GAAG;AACpB,MAAK,cAAc,OAAO,kBAAmB,YAAY;AAAK;AAC9D,SAAO,QAAQ;AACjB;;;ACTO,UAAU,YACf,OACA,KACA,OACA,WAC0B;AAC1B,kBAAgB,WAAW,OAAO,IAAI,OAAO,CAAC;AAC9C,kBAAgB,WAAW,KAAK,IAAI,KAAK,CAAC;AAE1C,kBAAgB,WAAW,OAAO,IAAI,OAAO,CAAC;AAC9C,QAAM,IAAI,YAAY,MAAM,SAAS,IAAI,CAAC,MAAc;AACxD,QAAM,QAAQ,MAAM,UAAU,QAAQ;AAEtC,kBAAgB,WAAW,MAAM,IAAI,MAAM,CAAC;AAC5C,MAAI,CAAC,OAAO,SAAS,IAAI,GAAG;AAC1B,UAAM,IAAI,UAAU,mCAAmC;AAAA,EACzD;AAGA,WAAS,QAAQ,GAAG,QAAQ,OAAO,SAAS;AAC1C,UAAM,IAAI,QAAQ,OAAO;AACzB,UAAM,EAAE,CAAC;AAAA,EACX;AACF;","names":[]}