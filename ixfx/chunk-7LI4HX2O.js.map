{"version":3,"sources":["../src/dom/CanvasHelper.ts"],"sourcesContent":["import type { Rect } from '../geometry/rect/RectTypes.js';\nimport { scaler, type ScaleBy, type ScalerCombined } from \"../geometry/Scaler.js\";\nimport { resolveEl } from \"./ResolveEl.js\";\nimport { empty as RectsEmpty } from '../geometry/rect/Empty.js';\nimport { multiply as RectsMultiply } from \"../geometry/rect/Multiply.js\";\nimport { windowResize } from \"./DomRx.js\";\nimport { SimpleEventEmitter } from \"../Events.js\";\nimport { guard as RectsGuard } from '../geometry/rect/Guard.js';\n\nexport type CanvasEvents = {\n  /**\n   * Fired when canvas is resized\n   */\n  resize: { size: Rect, helper: CanvasHelper, ctx: CanvasRenderingContext2D }\n}\n\n/**\n * Options\n */\nexport type CanvasHelperOpts = {\n  /**\n   * If _true_ (default) canvas is cleared when a resize happens\n   */\n  readonly clearOnResize: boolean\n  /**\n   * If true, it won't add any position CSS\n   */\n  readonly skipCss: boolean;\n  readonly scaleBy: ScaleBy;\n  /**\n   * Callback when canvas is resized\n   * @param size \n   * @returns \n   */\n  readonly onResize?: (ctx: CanvasRenderingContext2D, size: Rect, helper: CanvasHelper) => void\n  /**\n   * Automatically set canvas to fill. Default: 'none'\n   * * 'viewport': size of screen\n   * * 'parent': size of parent element\n   * * 'none': no resizing. Use 'width' and 'height' options to set the logical size of the canvas\n   * \n   */\n  readonly fill: `viewport` | `parent` | `none`\n  /**\n   * Logical width of canvas.\n   * Ignored if `fill` is set to 'viewport' or 'parent'\n   */\n  readonly width: number\n  /**\n   * Logical height of canvas.\n   * Ignored if `fill` is set to 'viewport' or 'parent'\n   */\n  readonly height: number\n  /**\n   * If set, the z-index for this canvas.\n   * By default, fullscreen canvas will be given -1\n   */\n  readonly zIndex: number\n  /**\n   * If specified, this function be called in an animation loop.\n   * @param ctx \n   * @param size \n   * @returns \n   */\n  readonly draw?: (ctx: CanvasRenderingContext2D, size: Rect, helper: CanvasHelper) => void\n};\n\n\n/**\n * A wrapper for the CANVAS element that scales the canvas for high-DPI displays\n * and helps with resizing.\n * \n * ```js\n * const canvas = new CanvasHelper(`#my-canvas`, { fill: `viewport` });\n * const { ctx, width, height } = canvas.ctx; // Get drawing context, width & height\n * ```\n * \n * Draw whenever it is resized using the 'resize' event\n * ```js\n * canvas.addEventListener(`resize`, ({ctx, size}) => {\n *  // Use ctx...  \n * });\n * ```\n * \n * Or provide a function when initialising:\n * ```js\n * const onResize = (ctx, size) => {\n *  // Do drawing\n * }\n * const canvas = new CanvasHelper(`#my-canvas`, { fill: `viewport`, onResize });\n * ```\n * \n * Automatically draw at animation speeds:\n * ```js\n * const draw = () => {\n * }\n * const canvas = new CanvasHelper(`#my-canvas`, { fill: `viewport`, draw });\n * ```\n */\nexport class CanvasHelper extends SimpleEventEmitter<CanvasEvents> {\n  readonly el: HTMLCanvasElement;\n  readonly opts: CanvasHelperOpts\n\n  #scaler: ScalerCombined;\n  #currentSize: Rect = RectsEmpty;\n  #ctx: CanvasRenderingContext2D | undefined;\n\n  constructor(domQueryOrEl: Readonly<string | HTMLCanvasElement | undefined | null>, opts: Partial<CanvasHelperOpts> = {}) {\n    super();\n    if (!domQueryOrEl) throw new Error(`Param 'domQueryOrEl' is null or undefined`);\n    this.el = resolveEl<HTMLCanvasElement>(domQueryOrEl);\n    if (this.el.nodeName !== `CANVAS`) {\n      throw new Error(`Expected CANVAS HTML element. Got: ${ this.el.nodeName }`);\n    }\n    this.opts = {\n      fill: opts.fill ?? `none`,\n      height: opts.height ?? -1,\n      width: opts.width ?? -1,\n      zIndex: opts.zIndex ?? -1,\n      scaleBy: opts.scaleBy ?? `both`,\n      onResize: opts.onResize,\n      clearOnResize: opts.clearOnResize ?? true,\n      draw: opts.draw,\n      skipCss: opts.skipCss ?? false\n    }\n\n    this.#scaler = scaler(`both`);\n    this.#init();\n  }\n\n  #getContext(reset = false) {\n    if (this.#ctx === undefined || reset) {\n      const ratio = this.ratio;\n      const c = this.el.getContext(`2d`);\n      if (c === null) throw new Error(`Could not create drawing context`);\n      this.#ctx = c;\n      // Reset scale\n      c.setTransform(1, 0, 0, 1, 0, 0);\n      c.scale(ratio, ratio);\n    }\n    return this.#ctx;\n  };\n\n  setLogicalSize(logicalSize: Rect) {\n    RectsGuard(logicalSize, `logicalSize`);\n\n    const ratio = window.devicePixelRatio || 1;\n\n    // Scaler for going between relative and logical units\n    this.#scaler = scaler(this.opts.scaleBy, logicalSize);\n\n    // Scaled logical size for DPI\n    const pixelScaled = RectsMultiply(logicalSize, ratio, ratio);\n\n    // Canvas will actually be much larger, based on DPI\n    this.el.width = pixelScaled.width;\n    this.el.height = pixelScaled.height;\n\n    // But scaled down on screen\n    this.el.style.width = logicalSize.width.toString() + `px`;\n    this.el.style.height = logicalSize.height.toString() + `px`;\n\n    // Since dimensions have change, reset context\n    this.#getContext(true);\n\n    if (this.opts.clearOnResize) {\n      this.ctx.clearRect(0, 0, this.width, this.height);\n    }\n\n    this.#currentSize = logicalSize;\n\n    // Notify listeners of resize\n    const r = this.opts.onResize;\n    if (r) {\n      setTimeout(() => { r(this.ctx, this.size, this) }, 100);\n    }\n    this.fireEvent(`resize`, { ctx: this.ctx, size: this.#currentSize, helper: this });\n  }\n\n  /**\n   * Notified that parent has changed size\n   * @returns \n   */\n  #onParentResize() {\n    let parentEl = this.el.parentElement;\n    if (!parentEl) {\n      console.warn(`No parent element`);\n      return;\n    }\n    const bounds = parentEl.getBoundingClientRect();\n    this.setLogicalSize({ width: bounds.width, height: bounds.height });\n  }\n\n\n  /**\n   * Notified that window has changed size\n   */\n  #onWindowResize() {\n    this.setLogicalSize({\n      width: window.innerWidth,\n      height: window.innerHeight,\n    });\n  };\n\n  #init() {\n    switch (this.opts.fill) {\n      case `viewport`: {\n        if (!this.opts.skipCss) {\n          this.el.style.position = `absolute`;\n          this.el.style.left = `0px`;\n          this.el.style.top = `0px`;\n          this.el.style.zIndex = this.opts.zIndex.toString();\n        }\n        const r = windowResize();\n        r.onValue(() => { this.#onWindowResize() });\n\n        this.#onWindowResize();\n        break;\n      }\n      case `parent`: {\n        //let parentEl = this.el.parentElement;\n        //if (parentEl === undefined) parentEl = this.el.shadowRoot;\n        //if (!parentEl) throw new Error(`Canvas element has no parent?!`);\n        if (!this.opts.skipCss) {\n          this.el.style.position = `relative`;\n          this.el.style.left = `0px`;\n          this.el.style.top = `0px`;\n        }\n        // const r = resizeObservable(parentEl);\n        // r.onValue(onParentResize);\n        const r = windowResize();\n        r.onValue(() => { this.#onParentResize() });\n        this.#onParentResize();\n        break;\n      }\n      case `none`: {\n        // Use current size\n        let { width, height } = this.el.getBoundingClientRect();\n        if (this.opts.width > 0) width = this.opts.width;\n        if (this.opts.height > 0) height = this.opts.height;\n        const desiredSize = { width, height };\n        this.setLogicalSize(desiredSize);\n        break;\n      }\n      default: {\n        throw new Error(`Unknown 'fill' value. Expecting: 'none', 'viewport' or 'fill'`);\n      }\n    }\n\n    // If there is a 'draw' callback, set up an animation loop\n    const d = this.opts.draw;\n    if (d) {\n      const sched = () => {\n        d(this.ctx, this.#currentSize, this);\n        requestAnimationFrame(sched);\n      }\n      setTimeout(() => { sched() }, 100);\n    }\n  }\n\n  /**\n   * Clears the canvas.\n   * \n   * Shortcut for:\n   * `this.ctx.clearRect( 0, 0, this.width, this.height)`\n   */\n  clear() {\n    if (this.#ctx) {\n      this.#ctx.clearRect(0, 0, this.width, this.height);\n    }\n  }\n\n  fill(colour?: string) {\n    if (this.#ctx) {\n      if (colour) this.#ctx.fillStyle = colour;\n      this.#ctx.fillRect(0, 0, this.width, this.height);\n    }\n  }\n  /**\n   * Gets the drawing context\n   */\n  get ctx() {\n    if (this.#ctx === undefined) throw new Error(`Context not available`);\n    return this.#getContext();\n  }\n\n  /**\n   * Gets the logical width of the canvas\n   * See also: {@link height}, {@link size}\n   */\n  get width() {\n    return this.#currentSize.width;\n  }\n\n  /**\n   * Gets the logical height of the canvas\n   * See also: {@link width}, {@link size}\n   */\n  get height() {\n    return this.#currentSize.height;\n  }\n\n  /**\n   * Gets the logical size of the canvas\n   * See also: {@link width}, {@link height}\n   */\n  get size() {\n    return this.#currentSize;\n  }\n\n  /**\n   * Gets the current scaling ratio being used\n   * to compensate for high-DPI display\n   */\n  get ratio() {\n    return window.devicePixelRatio || 1;\n  }\n\n  /**\n   * Returns the width or height, whichever is smallest\n   */\n  get dimensionMin() {\n    return Math.min(this.width, this.height);\n  }\n\n  /**\n   * Returns the width or height, whichever is largest\n   */\n  get dimensionMax() {\n    return Math.max(this.width, this.height);\n  }\n\n  /**\n   * Returns a Scaler that converts from relative to absolute\n   * coordinates.\n   * This is based on the canvas size.\n   * \n   * ```js\n   * // Assuming a canvas of 800x600\n   * toAbsolute({ x: 1, y: 1 });      // { x: 800, y: 600}\n   * toAbsolute({ x: 0, y: 0 });      // { x: 0, y: 0}\n   * toAbsolute({ x: 0.5, y: 0.5 });  // { x: 400, y: 300}\n   * ```\n   */\n  get toAbsolute() {\n    return this.#scaler.abs;\n  }\n\n  /**\n   * Returns a Scaler that converts from absolute\n   * to relative coordinates.\n   * This is based on the canvas size.\n   * \n   * ```js\n   * // Assuming a canvas of 800x500\n   * toRelative({ x: 800, y:600 });  // { x: 1,   y: 1 }\n   * toRelative({ x: 0,   y: 0 });   // { x: 0,   y: 0 }\n   * toRelative({ x: 400, y: 300 }); // { x: 0.5, y: 0.5 }\n   * ```\n   */\n  get toRelative() {\n    return this.#scaler.rel;\n  }\n\n  /**\n   * Gets the center coordinate of the canvas\n   */\n  get center() {\n    return { x: this.width / 2, y: this.height / 2 }\n  }\n}"],"mappings":"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","names":[]}