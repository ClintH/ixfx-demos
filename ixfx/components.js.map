{"version":3,"sources":["../src/components/HistogramVis.ts","../src/components/FrequencyHistogramPlot.ts"],"sourcesContent":["import { LitElement, css, html } from 'lit';\nimport { customElement } from 'lit/decorators/custom-element.js';\nimport { property } from 'lit/decorators/property.js';\nimport { repeat } from 'lit/directives/repeat.js';\nimport { type KeyValue } from '../KeyValue.js';\n\ntype Bar = {\n  readonly percentage: number;\n  readonly data: KeyValue;\n};\n\nconst jsonData = (object: unknown) => {\n  if (object === null || object === undefined || object === `undefined`) return;\n  try {\n    if (typeof object === `string`) {\n      if (object.length === 0) return;\n      const o = JSON.parse(object);\n      if (!Array.isArray(o)) {\n        console.error(`Histogram innerText should be JSON array`);\n        return;\n      }\n\n      // eslint-disable-next-line functional/no-let\n      for (const [ index, element ] of o.entries()) {\n        if (!Array.isArray(element)) {\n          console.error(`Histogram array should consist of inner arrays`);\n          return;\n        }\n        if (element.length !== 2) {\n          console.error(\n            `Histogram inner arrays should consist of two elements`\n          );\n          return;\n        }\n        if (typeof element[ 0 ] !== `string`) {\n          console.error(\n            `First element of inner array should be a string (index ${ index })`\n          );\n          return;\n        }\n        if (typeof element[ 1 ] !== `number`) {\n          console.error(\n            `Second element of inner array should be a number (index ${ index })`\n          );\n          return;\n        }\n      }\n      return o;\n    }\n  } catch (error) {\n    console.log(object);\n    console.error(error);\n  }\n  return;\n};\n\n/**\n * Usage in HTML:\n * ```html\n * <style>\n * histogram-vis {\n *  display: block;\n *  height: 7em;\n *  --histogram-bar-color: pink;\n * }\n * </style>\n * <histogram-vis>\n * [\n *  [\"apples\", 5],\n *  [\"oranges\", 3],\n *  [\"pineapple\", 0],\n *  [\"limes\", 9]\n * ]\n * </histogram-vis>\n * ```\n *\n * CSS colour theming:\n * --histogram-bar-color\n * --histogram-label-color\n *\n * HTML tag attributes\n * showXAxis (boolean)\n * showDataLabels (boolean)\n *\n * @export\n * @class HistogramVis\n * @extends {LitElement}\n **/\n@customElement(`histogram-vis`)\nexport class HistogramVis extends LitElement {\n  static readonly styles = css`\n    :host {\n    }\n    div.container {\n      display: flex;\n      flex-direction: column;\n      height: 100%;\n    }\n    div.chart {\n      display: grid;\n      flex: 1;\n      grid-template-rows: 1fr 1px min-content;\n      justify-items: center;\n    }\n    div.bar {\n      display: flex;\n      flex-direction: column-reverse;\n      align-items: center;\n      justify-self: normal;\n      padding-left: 0.3vw;\n      padding-right: 0.3vw;\n    }\n    div.bar > div.barTrack {\n      background-color: var(--histogram-bar-color, gray);\n      align-self: stretch;\n    }\n    div.xAxisLabels,\n    div.data {\n      font-size: min(1vw, 1em);\n      color: var(--histogram-label-color, currentColor);\n    }\n    div.xAxisLabels {\n      width: 100%;\n      text-overflow: ellipsis;\n      overflow: hidden;\n      white-space: nowrap;\n      text-align: center;\n    }\n    div.xAxis {\n      background-color: var(--histogram-axis-color, silver);\n      width: 100%;\n      height: 100%;\n    }\n  `;\n\n  // static properties = {\n  //   showXAxis: { attribute: false}\n  // };\n\n  // eslint-disable-next-line functional/prefer-readonly-type\n  @property()\n  declare data: ReadonlyArray<KeyValue>;\n\n  // eslint-disable-next-line functional/prefer-readonly-type\n  @property()\n  declare showDataLabels: boolean;\n\n  // eslint-disable-next-line functional/prefer-readonly-type\n  @property()\n  declare height: string;\n\n  // eslint-disable-next-line functional/prefer-readonly-type\n  @property()\n  declare showXAxis: boolean;\n\n  // eslint-disable-next-line functional/prefer-readonly-type\n  @property({ converter: jsonData, type: Object })\n  declare json: ReadonlyArray<KeyValue> | undefined;\n\n  constructor() {\n    super();\n    this.data = [];\n    this.showDataLabels = true;\n    this.height = `100%`;\n    this.showXAxis = true;\n    this.json = undefined;\n  }\n\n  connectedCallback() {\n    if (!this.hasAttribute(`json`)) {\n      this.setAttribute(`json`, this.innerText);\n    }\n    super.connectedCallback();\n  }\n\n  barTemplate(bar: Bar, index: number, _totalBars: number) {\n    const { percentage } = bar;\n    const [ key, freq ] = bar.data;\n\n    // grid-area: rowStart / gridColStart / gridRowEnd / gridColEnd\n    const rowStart = 1;\n    const rowEnd = 2;\n    const colStart = index + 1;\n    const colEnd = colStart + 1;\n\n    const dataLabel = html`<div class=\"data\">${ freq }</div>`;\n    const xAxis = html`${ key }`;\n    return html`\n      <div\n             class=\"bar\"\n             style=\"grid-area: ${ rowStart } / ${ colStart } / ${ rowEnd } / ${ colEnd }\"\n           >\n             <div class=\"barTrack\" style=\"height: ${ (percentage ?? 0) * 100 }%\"></div>\n             ${ this.showDataLabels ? dataLabel : `` }\n           </div>\n           <div\n             class=\"xAxisLabels\"\n             style=\"grid-area: ${ rowStart + 2 } / ${ colStart } / ${ rowEnd +\n      2 } / ${ colEnd }\"\n           >\n             ${ this.showXAxis ? xAxis : `` }\n           </div>\n    `;\n  }\n\n  render() {\n    if (\n      (this.data === undefined || this.data.length === 0) &&\n      this.json === undefined\n    ) {\n      return html``;\n    }\n    const d = this.data ?? this.json;\n    const length = d.length;\n    const highestCount = Math.max(...d.map((d) => d[ 1 ] as number));\n    const bars = d.map((kv) => ({\n      data: kv,\n      percentage: (kv[ 1 ] as number) / highestCount,\n    }));\n\n    const xAxis = html`\n      <div\n            class=\"xAxis\"\n            style=\"grid-area: 2 / 1 / 3 / ${ d.length + 1 }\"\n          ></div>\n    `;\n    const height = this.height ? `height: ${ this.height };` : ``;\n    const h = html`\n      <style>\n             div.chart {\n               grid-template-columns: repeat(${ d.length }, minmax(2px, 1fr));\n             }\n           </style>\n           <div class=\"container\" style=\"${ height }\">\n             <div class=\"chart\">\n               ${ repeat(\n      bars,\n      (bar) => bar.data[ 0 ],\n      (b, index) => this.barTemplate(b, index, length)\n    ) }\n               ${ this.showXAxis ? xAxis : `` }\n             </div>\n           </div>\n    `;\n    return h;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    // eslint-disable-next-line quotes\n    readonly 'histogram-vis': HistogramVis;\n  }\n}\n","import { HistogramVis } from './HistogramVis.js';\nimport * as KeyValueUtil from '../KeyValue.js';\n\n/**\n * Creates and drives a HistogramVis instance.\n * Data should be an outer array containing two-element arrays for each\n * data point. The first element of the inner array is expected to be the key, the second the frequency.\n * For example,  `[`apples`, 2]` means the key `apples` was counted twice.\n *\n * Usage:\n * .sortBy() automatically sorts prior to visualisation. By default off.\n * .update(data) full set of data to plot\n * .clear() empties plot - same as calling `update([])`\n * .el - The `HistogramVis` instance, or undefined if not created/disposed\n *\n * ```\n * const plot = new FrequencyHistogramPlot(document.getElementById('histogram'));\n * plot.sortBy('key'); // Automatically sort by key\n * ...\n * plot.update([[`apples`, 2], [`oranges', 0], [`bananas`, 5]])\n * ```\n *\n * @export\n * @class FrequencyHistogramPlot\n */\nexport class FrequencyHistogramPlot {\n  readonly el: HistogramVis | undefined;\n  #sorter: KeyValueUtil.KeyValueSorter | undefined;\n  constructor(el: HistogramVis) {\n    this.el = el;\n  }\n\n  setAutoSort(\n    sortStyle: `value` | `value-reverse` | `key` | `key-reverse`\n  ): void {\n    this.#sorter = KeyValueUtil.getSorter(sortStyle);\n  }\n\n  clear() {\n    if (this.el === undefined) return;\n    this.el.data = [];\n  }\n\n  // init() {\n  //   if (this.el !== undefined) return; // already inited\n  //   // eslint-disable-next-line functional/immutable-data\n  //   this.el = document.createElement(`histogram-vis`);\n  //   this.parentEl.appendChild(this.el);\n  // }\n\n  dispose() {\n    const el = this.el;\n    if (el === undefined) return; // already disposed\n    el.remove();\n  }\n\n  update(data: ReadonlyArray<readonly [ key: string, count: number ]>) {\n    if (this.el === undefined) {\n      console.warn(`FrequencyHistogramPlot this.el undefined`);\n      return;\n    }\n\n    this.el.data = this.#sorter === undefined ? [ ...data ] : this.#sorter(data as Array<KeyValueUtil.KeyValue>);\n  }\n}\n"],"mappings":"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","names":["d"]}