{"version":3,"sources":["../src/numbers/Round.ts"],"sourcesContent":["import { throwIntegerTest, throwNumberTest } from \"../util/GuardNumbers.js\";\n\nexport function round(decimalPlaces: number, v: number): number;\nexport function round(decimalPlaces: number): (v: number) => number;\n\n/**\n * Rounds a number.\n *\n * If one parameter is given, it's the decimal places,\n * and a rounding function is returned:\n * ```js\n * const r = round(2);\n * r(10.12355); // 10.12\n * ```\n *\n * If two parameters are given, the first is decimal places,\n * the second the value to round.\n * ```js\n * round(2, 10.12355); // 10.12\n * ```\n * @param decimalPlaces\n * @returns\n */\nexport function round(a: number, b?: number) {\n  throwIntegerTest(a, `positive`, `decimalPlaces`);\n\n  //eslint-disable-next-line functional/no-let\n  let rounder;\n  if (a === 0) rounder = Math.round;\n  else {\n    const p = Math.pow(10, a);\n    rounder = (v: number) => Math.floor(v * p) / p;\n  }\n\n  return b === undefined ? rounder : rounder(b);\n}\n\n\n/**\n * Rounds `v` up to the nearest multiple of `multiple`\n * ```\n * roundMultiple(19, 20); // 20\n * roundMultiple(21, 20); // 40\n * ```\n * @param v\n * @param multiple\n * @returns\n */\nexport const roundUpToMultiple = (v: number, multiple: number): number => {\n  throwNumberTest(v, `nonZero`, `v`);\n  throwNumberTest(multiple, `nonZero`, `multiple`);\n  return Math.ceil(v / multiple) * multiple;\n};\n"],"mappings":";;;;;;AAuBO,SAAS,MAAM,GAAW,GAAY;AAC3C,mBAAiB,GAAG,YAAY,eAAe;AAG/C,MAAI;AACJ,MAAI,MAAM,EAAG,WAAU,KAAK;AAAA,OACvB;AACH,UAAM,IAAI,KAAK,IAAI,IAAI,CAAC;AACxB,cAAU,CAAC,MAAc,KAAK,MAAM,IAAI,CAAC,IAAI;AAAA,EAC/C;AAEA,SAAO,MAAM,SAAY,UAAU,QAAQ,CAAC;AAC9C;AAaO,IAAM,oBAAoB,CAAC,GAAW,aAA6B;AACxE,kBAAgB,GAAG,WAAW,GAAG;AACjC,kBAAgB,UAAU,WAAW,UAAU;AAC/C,SAAO,KAAK,KAAK,IAAI,QAAQ,IAAI;AACnC;","names":[]}